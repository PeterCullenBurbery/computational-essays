(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    693749,      13545]
NotebookOptionsPosition[    555632,      10853]
NotebookOutlinePosition[    668225,      12999]
CellTagsIndexPosition[    668017,      12990]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Working through the American Association of Physics Teacher's 2011 F=ma exam\
\>", "Title",
 CellChangeTimes->{{3.8750113122633576`*^9, 3.8750113365028753`*^9}},
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577,ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Peter", " ", "Cullen", " ", "Burbery"}], "Author"]], "Author",
 CellChangeTimes->{{3.8750113401123466`*^9, 3.8750113431752586`*^9}},
 CellTags->"AuthorName",
 CellID->960727095,ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c"],

Cell["Abstract", "Abstract",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573,ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e"],

Cell[TextData[{
 "These problems are from the ",
 ButtonBox["American Association of Physics Teachers 2011 F=ma exam",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://drive.google.com/file/d/1zBnBI3xEclkgIG_PNylPEHv6dL21Tyfk/\
view?pli=1"], None},
  ButtonNote->
   "https://drive.google.com/file/d/1zBnBI3xEclkgIG_PNylPEHv6dL21Tyfk/view?\
pli=1"],
 "."
}], "Text",
 CellChangeTimes->{{3.8750186988653064`*^9, 3.875018733365565*^9}},
 CellID->274298377,ExpressionUUID->"2ab7daf6-7cbb-48e6-bb85-21f224057b7e"],

Cell["I want to solve the problems in the SI.", "Text",
 CellChangeTimes->{{3.8750203593695564`*^9, 3.8750203663133683`*^9}},
 CellID->291010177,ExpressionUUID->"290809a1-80cd-4333-af8b-40be97e687d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"$UnitSystem", "=", "\"\<Metric\>\""}]], "Input",
 CellChangeTimes->{{3.875020367235639*^9, 3.875020375677059*^9}},
 CellLabel->"In[61]:=",
 CellID->74017418,ExpressionUUID->"2051a3a3-bd48-47bf-b701-2a8727c2e04a"],

Cell[BoxData["\<\"Metric\"\>"], "Output",
 CellChangeTimes->{{3.875020372055752*^9, 3.87502037611244*^9}},
 CellLabel->"Out[61]=",
 CellID->297239470,ExpressionUUID->"68361d60-8d22-4428-921e-11847728d889"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #1", "Section",
 CellChangeTimes->{{3.875011354799266*^9, 3.8750113662395077`*^9}},
 CellID->627868314,ExpressionUUID->"9952e69f-1ff1-46f0-b93a-e36b077bffca"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
O3/z8x2+h/H8G2prTVPsM8DtqOC26YfyL+CyMx5RR0nzfit9becHY6/Y+cRa
GWfg0ya4ksEYSb2kgNdz5/VwUZMema26vRuv79WyGNFzxoqoHCS+Y3A7QiqK
1yhL13SRmeyrBDx20EFt9T2y8djj7qXz/nUg2nATuxfNO++c4VWbD/GzrmSm
XzprErZczhY9HgLrUxat8ta29aqnY4X7/1PpZhvWKzjmYgS/S0EHa773mYfL
k5pll92odXc1cQoXw9p4J41dsXjr4Dbvca/j38FABqKNCMo3Sld1QsdzrI3c
qlfkZ3bQoYWTO+MnvDW83r3GxRSh5VhvVlC5xK6aWLS+8vTcdtSH62IVcE62
zLr+B+EYuYl94NPVfvahNfyreGiFiJ0HMLIH7ywpH+L9m/cNI4mXFJW03F/x
T63kBZ83vErWkNjBvylGf+2ts8kkcCkbsdvQSEOCrkslb9szz2+oyalZx7Lr
a9r7ivSC1nHULWPWlpKYKHfRlNl6M+Uj89tzlKjaRlr+uHs5vzZCRh+fxmtZ
P19MumVNzIK4OoRFr3XZhecHHRycZFLgBx3czc/lXt2EN18+Amqq0lULfyBk
sRpiZwP/Y3KnfNpEHgBCzbmidjZ9WHDYk8l3H/H6MCI3Lq4eEJt5vof4oENe
9lhEm4iaX1whWgmj7HC37HcUv/VuMb9eYBftUNdw3tVmMSsuH17FYrQ+3CNJ
6yy+xGGkoyjYLTI7l+5X2HarajHJ6F3k+yGc9w9h1huiCy9WG4qMxp7byK6Q
udeA2TFUnBGeYJ3MbwnXlI0xz56YPIn+Rah5hoV8ppip7jyXKDTydybdnCD2
6VXIxLPLChuuPOUPNx1PM1NRvVHCz0eMVwG3E7hVA0bltsaE/lX9wKBjIt/R
PrJ7enr6C+dnLM9uO15q16MqMVEHi9HudRCncuqxIIlZ0x9etwluWiIfnhop
K5jmcHMri9YY5JkxgYhfcXXQ8cprv6BFmG8l6cjK7TFw8I/Oqu0cpSHUqSn+
fv6QoIPdmTTkl0QB+mBj7gv+bWzm3EjSRXm8Zfzf/D1n9gYfl9O4mskrodTm
IO8ETtZFqAXXN0vvtS0S5DsWrcxBnd1YjKw6RsYrn0Mb5HaZ2JPisqq6RmhM
6tQ0+rln0Yfqc/Pf8HeHNki5pChzJmPpSNbQ95gfaszPa+YlCmN+NO7iBrUz
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
    "], {{0, 173.9782527184102}, {797.1503562054744, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{797.1503562054744, 173.9782527184102},
  PlotRange->{{0, 797.1503562054744}, {0, 173.9782527184102}}]], "Input",
 CellID->212968093,ExpressionUUID->"229b9189-6885-404e-a75f-32107bfe6a4d"],

Cell[TextData[{
 "We have the average velocity which we name ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["v", "_"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5ba09af2-9ceb-41b2-8bc6-8528e2991d02"],
 "."
}], "Text",
 CellChangeTimes->{{3.875011376055541*^9, 3.8750113900638885`*^9}},
 CellID->143109431,ExpressionUUID->"2e5cf91e-98cd-4cfd-9ede-d2adb7a20aea"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   OverscriptBox["v", "_"], "=", 
   TemplateBox[{"17.5", 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"h\""}], 
     "kilometers per hour", 
     FractionBox["\"Kilometers\"", "\"Hours\""]},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011391267419*^9, 3.875011395139183*^9}, 
   3.875011433889946*^9},
 CellLabel->"In[4]:=",
 CellID->42039440,ExpressionUUID->"8a3bd2b1-a38b-4483-9789-f22bbbc15e12"],

Cell["\<\
We have the time stopped which is 20 minutes. We will s for this quantity \
variable.\
\>", "Text",
 CellChangeTimes->{{3.8750114019842033`*^9, 3.8750114222089863`*^9}},
 CellID->201421124,ExpressionUUID->"b3b9d832-2030-4d8a-8207-643ff59812ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   TemplateBox[{"20", "\"min\"", "minutes", "\"Minutes\""},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011423082837*^9, 3.8750114293372536`*^9}},
 CellLabel->"In[2]:=",
 CellID->71618934,ExpressionUUID->"061e9e71-5877-46cd-aad1-112b4166347b"],

Cell["We have the cyclists speed which we name c.", "Text",
 CellChangeTimes->{{3.875011449936754*^9, 3.87501146034551*^9}},
 CellID->26772973,ExpressionUUID->"826019a2-fcf0-4a0d-999e-34816e8031ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", 
   TemplateBox[{"22", 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"h\""}], 
     "kilometers per hour", 
     FractionBox["\"Kilometers\"", "\"Hours\""]},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011461348833*^9, 3.8750114673856606`*^9}},
 CellLabel->"In[7]:=",
 CellID->18719899,ExpressionUUID->"c0f28fc3-7dcf-42ad-97d4-31d9441386f0"],

Cell[TextData[{
 "We can use the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", 
    RowBox[{
     OverscriptBox["v", "_"], "t"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "adbd7421-e2bc-4c06-87b9-a59e6905ee04"],
 " to find the distance."
}], "Text",
 CellChangeTimes->{{3.8750114727295055`*^9, 3.875011499786353*^9}},
 CellID->138601629,ExpressionUUID->"a7bc4939-68eb-4757-8196-0eb4c2eeef1e"],

Cell["We can solve for the time now.", "Text",
 CellChangeTimes->{{3.875011501914705*^9, 3.8750115058819985`*^9}},
 CellID->63492435,ExpressionUUID->"b24af248-f5b6-4b3f-88ab-ddf431b6c3cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    OverscriptBox["v", "_"], "==", 
    FractionBox[
     RowBox[{"c", " ", "t"}], 
     RowBox[{"s", "+", "t"}]]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.875011510781359*^9, 3.8750115364676547`*^9}},
 CellLabel->"In[8]:=",
 CellID->713269602,ExpressionUUID->"6bfd7631-b1f8-41ab-b658-7ecb743d744c"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 8, 1, 33275504462993777011, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8750115373316317`*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->342123661,ExpressionUUID->"a351d156-90ce-465d-8dd0-98f0c625f879"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", 
    TemplateBox[{"4666.666666666667`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8750115373604455`*^9},
 CellLabel->"Out[8]=",
 CellID->259623945,ExpressionUUID->"05b4b49d-2cff-498e-8d2b-53cb897ff52d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "=", 
  RowBox[{
   RowBox[{
    OverscriptBox["v", "_"], 
    RowBox[{"(", 
     RowBox[{"s", "+", "t"}], ")"}]}], "/.", 
   RowBox[{"First", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       OverscriptBox["v", "_"], "==", 
       FractionBox[
        RowBox[{"c", " ", "t"}], 
        RowBox[{"s", "+", "t"}]]}], ",", "t"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.875011542765587*^9, 3.87501158570043*^9}},
 CellLabel->"In[12]:=",
 CellID->614030663,ExpressionUUID->"512763c5-0d97-408b-9dc6-a1863096cf38"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 12, 4, 33275504462993777011, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.875011557261574*^9, 3.875011596086681*^9}},
 CellLabel->"During evaluation of In[12]:=",
 CellID->66728271,ExpressionUUID->"03e6b759-d324-4788-8c13-621578460fc7"],

Cell[BoxData[
 TemplateBox[{"28.518518518518523`", "\"km\"", "kilometers", "\"Kilometers\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.875011557273884*^9, 3.8750115960984735`*^9}},
 CellLabel->"Out[12]=",
 CellID->612738351,ExpressionUUID->"2c945c8c-6f60-4cec-b511-2f51fec211e7"]
}, Open  ]],

Cell["The answer is 28.5185km.", "Text",
 CellChangeTimes->{{3.875011599444425*^9, 3.875011605357174*^9}},
 CellID->58038683,ExpressionUUID->"153c8926-e1c6-469f-9e5d-45a070b35fe6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "StringTemplate", "[", 
   "\"\<The cyclist biked <* QuantityForm[#,\\\"Abbreviation\\\"] *>.\>\"", 
   "]"}], "[", "d", "]"}]], "Input",
 CellChangeTimes->{{3.875011607198584*^9, 3.875011641245783*^9}, {
  3.875011694143691*^9, 3.8750117233839474`*^9}},
 CellLabel->"In[17]:=",
 CellID->307634299,ExpressionUUID->"e757fbd8-19c8-4f5f-a0ab-f1d267719600"],

Cell[BoxData["\<\"The cyclist biked 28.5185\[InvisibleSpace] km.\"\>"], \
"Output",
 CellChangeTimes->{
  3.8750116416974077`*^9, {3.8750116949934273`*^9, 3.8750117238659534`*^9}},
 CellLabel->"Out[17]=",
 CellID->457808490,ExpressionUUID->"806f13cc-5854-486a-a0d6-d4f4ca85d6fa"]
}, Open  ]],

Cell["The closest answer is A).", "Text",
 CellChangeTimes->{{3.875011733015484*^9, 3.8750117414868517`*^9}},
 CellID->307471050,ExpressionUUID->"81320f42-189d-4e6d-86b8-89e976d31997"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #5", "Section",
 CellChangeTimes->{{3.8750119196110086`*^9, 3.875011921395045*^9}, 
   3.875012469238413*^9},
 CellID->743554474,ExpressionUUID->"696c8f78-07ab-4d25-86c9-ea755f45cd25"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
r6ZZyKFmwpEUidX4jRfzBEeeMa+iwFf1mWNj1YG2d6K7xXyU1/tU97rWCuPq
+yAzDc1LJcIVn/G006rq1zIxVypQVD2cI8E0TOQv3OnXN1apmNx8LZo7o+nx
NhUtp2z6ohQDp1NrGc4tObJ6Q8xUV7vzhgF6voOBisEDkXfGTJTeXkc8ni7l
ODnE+Nb2Ksn7rKE6QXmVc75gDZS/OiGq6uEqzFP1SJQ2ItcJ4/AHfzPijvk2
kQdOq/9edSXNaxmwhJt65Uut4tlqHA7NyoQ996pZyFzeJ0Z8NMEzCA9R1cRu
9tm5jHA4aS7OjX940zY0LXd1JkpurVNZ4z7vqRWr7tHWFZq2L3krsAsb+7CK
wci9ordC/3rFXLbIwZmVx2JRs5hfBukhC0fVS3X40dyLK9UOxfO2e/5T4X1s
s4GxXQ5P1rMaAh7lzPVu8VxQe4rmKkE5WV0Bu1VW3Hgm6Cb0zPMklXmjjxhc
9lvPrYJxBP5vr51ErfVH7pCjn1d2jExDDDodwzlxhnKsssnRFtPvKDsJqtZR
cxsh6R/fdAwyJQ2C41cFdHajz87l6hssb1Disiu7hpgcBn2cCffegsu6Klsd
i4RV451ygl1raLqFYqqmvsXCyS86u6ZjmIkYQND8Cql6qS7EfH5VV0f6qKeA
teULbtODDfl5zfy1LPb0cNzZ5QYn4nlxDTMCcNltXiYEvcNRQlfljn9824rs
k8LPWrSb4KeUHEd4tR6se57/jj9Cc5gDSee0VE9kzpoGU9WLZCo1Fv33Ipvk
DpyJigfOT4QiisPm9SZsN+B9Ba05FHNOSUQDkQzVR0EBAcBj3niHGjEkULBf
83fgWIWLbJ6eYZbeWbdC51LxBKoR8FQ9bGHqY5Qzm78MLqc/+ACBZOQm+rSA
y+mm7iFobffmfVqQqucyR/q/jIsMXZNJZ4lEWMr+gA317vF2FT3zCNGt8iNJ
p5cro7wSHz/x9FsfE4LquXDRzfDj8aeIK9bermPO4F8VAzcxu8nbZBnhUMK8
nfOpp1SVea+6xb+KAq8z7rx038nKVGujZczn+RaWqkV5clrtWrqcqp54PGN0
Lg2rL/yAioqZW73oRJvVFbhHhWDu9W5RioHTqXV2eAsXrHmdetVDZKLF6Q49
oK5scNotHNnQyPsXSfOn+CS+ldy/Dw21tQ6IaSPWl1QrHeVN9rn8mYcsqn6z
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
LXkJSUkpqYlxSQUd0/wCfalOpgWFhgT7eVNTa4fF1Cp7rDWHRiV7k6lkSkhi
9SBcHGi4MdPfbusKVcLmawGRURGRMRkNPwTVnVP1XM7n10kJycmpqUmJCXEF
3Qz4KudzZWpiUkpKYvyzqn6UKnA+BfxN0DsY/lXEeMOJJ5erbAt8g/pQg9ma
E0z1cne9G14/weyrSo2kBft6UVOrB9jI6yjfZD0Np/l5+4a//IAxKRgvvWvh
WMCY+8NkZ0F0WGRMXHR0TGx6SjA1q4vNs+37+FsOIS9aOtrbO9qas+47p/7r
DjMDAAAAAAAAAOSB0fR457qb1Uz0qxDj1f3LT3mqlfHyxio1FSMy5i6b8YTT
pHNhfbLIRza95rHZ+nNBLYh6hUYKbm7b45j/HYKGu6oL4+/u1VTW2ePegBzw
nGqPstRbbmzvGZPX8OUn/MWR/BuHHF7wNvCzR1/fNVl7IeydsEDM3jQ7w01X
4tp4uneymnJwv2MBHRrraWooDziuSdjnW1zfUF/f2Ppl9pGCyFo99KOrtsD/
9Go1lZ3u2S1DLF7JWpMvGmqb34ot70JZH+ey6u5tUta3iBbd5T6WZrVcyeB+
4TRqvb91VGa6mWmpHqHEB0YV9cGZTHWFmsOTpcwcml9WzySyUT/RSn/rxewf
KHaczLu+z6NUKOqhTyn2tpR3/Jy40++Dj+4i17LgWUzWlbVqfykRZv+tWH2r
BqN9AQAAAAAAAAD/DcZz7NaYUrox9suPvbx7J0awjj9eemedMmG3SxWGrGcW
Oq3d44x1VZTJ0ruGOtu9hGc4WT3BZmomoa38QkCfsy9vJO2jNcHydbzK90ZI
9ZhQ4U6UwWVQPUppZ/NTRllo6l0r4+laLqc31IK09ngsf7MJl9Xgaoic8H3P
FlRTR/W41B040+2+e4irHxQL3mPDZXeEuIR9wDojzKy4uUZJ/2isqAKnZ1gv
V9K89ZyB/h14dlT7wIigeTa09edsFt7/f3t3/g5V+8cB/E9JlqQsFapHJbSq
b6VFlmypqWyFhCyJVoSS7IUs2WWP8tCCKCFFWVosleVhJoaZzpzjazdmYdSj
1PN+XXNdMXOW++iX9/nM577PNonlG9zLxs5JtkYdkF1mU8R3W0DSs613na2Y
zOfM1GPKVjGTVfiOJI+A+TyzAQAAAADmzKcYw5X7wtoEV9h7sx0t4xoZXxnD
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
5rIYNwuniAh7DTnz+6O16kGiNsLcJvzNrAr2VH/jXS9HN6/rwf5ebvaXMl73
Tr89h/4q0cvlgs/161d9r1wKLGoWlrj/BRSn/qqOSWLrdDcq3+hdjPEU35lp
tVL2UAbvHw8AAAAA4Kdi1gYYGYfzJOX+hlhT5UXbbbM+T32fZJRf3CYtvXQi
1Q9S7GovHVpai6hJmyI/JZqr04JrR3Mx633MQTWTlPdCdyc+5ztt13RJbRwY
2pdojD+57X82uf3Ctv5hAzV++ofvdIkW0sne8gvbVcxu1aJSDwAAAAC/FD39
+AbHjB7utyh2rd+uxUtX2z3sEbBDd6HTetnJVD84yGm6qa9zrlzEZMt47Lxe
3iyfMfFGX7atsoZVFkPQxhSnJdpUcZPtva8jv5L9RadVFm+0zv4q2rlmj112
aY9D6j+ibEqxGuOsDZzv1M7dLQYAAAAAgCiIzuQjKuZ5UyZ7kp/vWiiJSezy
KP8maBeK9fTMVkuuVD/I/himu9ahWKR0y3rguEphszfXZFTOmwCtpbIWDwTN
1O0r81AXX3WhaGDyLQ5n7vpvhi7NbdeJ+yJMfaUGGuLPOEaWDRf1WfWlz9rm
sCkIAAAAAGB6PTnW63XCp053pacck5MUUzyTPyBkp948H79nrMnfKfaLcxs0
RJkxSnE+XN8tsWJf2CeuM3bcMZYR3xRQxd+bz37iprpY0jCti/NPQ2nBg9KG
9v5pW2NYrzID/bwuuLuEPetlNZck3QwJvOrll1TaRgwvR1mVHhkWcs37alj+
OyFr/TCKXHTt8piTb/S9yYsKvXk7JirqdnRKYqBfev3wIKn+t7GnbYPuVdfV
1ta9rkw/65r0Z00YBgAAAIDfCrv80mZNh0LuOE4RLy9vFJcU3ygoZgvDiDso
ezi0ecZoS7HL3VQXKupGcTeu9yTTZMSUzt7nvYmgyNbg/ZLSsuZhyYFhqSWv
akpjnHQN7FPeswaFIL7UFaed05KX1PONDbj1oHnouvrrg7Vl1c6nZYZcS2/s
G+7qv0NT3GiV0S1grH05p3ZdLJoI9eSHREtz35rRYVEDbwP1t/uUsQfJjnTr
vxYtEJMYfy1Zdfqp0CEBAAAAAMy1/jRzBX3fWu74TrGeuqiISYrvuFkvelcJ
677DXztcS2Ys1lOsJ46rxRT1o7lDNT31iIyY3OlsJu/GI/cXUjIqJ2PHJtNS
7BpPTZl9F8qEfYswhFnmoSYhdyj41bexg9R5b5NYvsG9bGyhHbI16oDsMpsi
vkOQ9GzrXWcrJvM5M/WYslXMZBW+I8kjQNTZAwAAAAAAP01XlMGSQ1Nr7BSn
3vd/EpLis1qDnV16TkPteK4Iqb7ESUVMUTeyk7dWL++cw1erJ157bpWQktCO
mRwg6779ShnZY3nCW9+Z5efUJdR8xuM3xXnnryWpapU7cfSuBNOli2j8y+i0
p1oYXqzgmkpAVFzRlJFea2TvG5NRXN/O4jDpDNTkAQAAAGC+ITsi9GVMgz9O
LcqzHrqskVogdzKlW8hu7MrbUc+m5NuhVK++3jJr5lRP1HhuFl+hHc7dV98Z
f1Bm4ZpLT3gTM8VpCdwnIS1rUTCZwNklHuqLxCdDO7+hVK8huTWwhhg/yFCq
l5p4aNTgaKqX4kv1ZEfs4X3BNVOajqiBxtSzB9TlJIc7bSQU9ZxS3yHVAwAA
AMC805dAk9W98oqngb6vwnOzhJiaVbbgp0OR7XGXAt5O2YeVf2rllqn9+UL0
3DkkI7/Zi3sNnIagPYvF90ULeLbU0GGVFi8xy5/7VP+tLfqwjn/jlCFwPr//
ONwVRDA+vixK8DXftETGOODNzJcIAAAAAPBTsR65rt/hUswbkcnOnFOqMtK7
IwQ9M5ZVH3E5pHbqB8zko7IG196K0IjPaQjdr6Bo+2iy3Yb9+My6ZZs8J49I
EBPH6bhrrijJHfhHO3Bo2YIW0h8byvekek5jmOHR4HdTx0+PO26ZO3ki8kOk
vuqRtJkvEQAAAADg5/ocb7rWKJa/1YZi1oSarFbadPr+x6mtNu1PrrsGVk0t
4lPEG5/tq90LppnDOonoyLJate7yk7FUTbGrL21WtIz5MJqomVXX98gv3nnm
Uf/YMMrcNZZZxLSONuxQrKpLW6R3uRXzTqzlwix1V5OcXCeT4jT67ZDaaPdg
ItW33zFeKnU4h+sQFKfpuo5RfAvPsjj0aJPltLCG8ahPtsUcMvCqFuUaAQAA
AAB+JnZTkLbKqSeC8jjFbnlw3fJ/f6kfOnMz5/Gz8qLMWP8zdvaB5R28i0IS
nQmmyrRsYW34vMgvj7wN9tulVnV87apNc9U1cs7+NB6dB16HG65eoXu5dCKE
f61LPKlt4JlUWlP96Jat1l7L6Hqhmb73UbCd2Z51y5bKb9pv4RL2tKcq1slS
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
AAAAAMAf4//J+Opy
    "], {{0, 164.97937757780278`}, {757.4053243344582, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{757.4053243344582, 164.97937757780278`},
  PlotRange->{{0, 757.4053243344582}, {0, 164.97937757780278`}}]], "Input",
 CellID->74227303,ExpressionUUID->"d4e3fb99-f2f5-4c9c-8a0d-fa183ea6c1d6"],

Cell[TextData[{
 "We use ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "=", 
    RowBox[{"m", "\[CenterDot]", 
     FractionBox[
      SuperscriptBox["v", "2"], "r"]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "aac899f5-f786-4e3a-9b91-29ee7cd4b8e6"],
 ". We also use ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "=", 
    FractionBox[
     RowBox[{"G", "\[CenterDot]", 
      SubscriptBox["m", "1"], "\[CenterDot]", 
      SubscriptBox["m", "2"]}], 
     SuperscriptBox["r", "2"]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4dd91700-de22-40af-a80e-0d651f598e9a"],
 "."
}], "Text",
 CellChangeTimes->{{3.875011929403181*^9, 3.8750119944448643`*^9}},
 CellID->23481574,ExpressionUUID->"7f17ee30-a62f-4d35-a515-e03cc878b8ff"],

Cell["\<\
We will use the approximate value for the distance from Earth to the Sun.\
\>", "Text",
 CellChangeTimes->{{3.875012039957732*^9, 3.8750120542147627`*^9}},
 CellID->386341421,ExpressionUUID->"69bd7760-94e4-4694-a297-36428b74a3a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "=", 
  TemplateBox[{"1.5*^8", "\"km\"", "kilometers", "\"Kilometers\""},
   "Quantity"]}]], "Input",
 CellChangeTimes->{{3.8750120564331665`*^9, 3.8750120594383326`*^9}},
 CellLabel->"In[23]:=",
 CellID->128439433,ExpressionUUID->"a62931eb-57eb-4d1e-9559-b6180e221f7b"],

Cell[BoxData[
 TemplateBox[{"1.5`*^8", "\"km\"", "kilometers", "\"Kilometers\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750120678934174`*^9, 3.8750121624452496`*^9},
 CellLabel->"Out[23]=",
 CellID->173607952,ExpressionUUID->"36a3ac96-6e3d-48fa-a192-db286c4be9b7"]
}, Open  ]],

Cell["\<\
I'm curious what the right SI prefix is to express this large distance. \
Sometimes UnitSimplify will work.\
\>", "Text",
 CellChangeTimes->{{3.87501209167848*^9, 3.8750121182230096`*^9}},
 CellID->573981839,ExpressionUUID->"0535b6e8-542e-4695-a56d-376695694e31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitSimplify", "[", "d", "]"}]], "Input",
 CellChangeTimes->{{3.8750120684809833`*^9, 3.875012070526725*^9}},
 CellLabel->"In[19]:=",
 CellID->129662362,ExpressionUUID->"13fe0c00-a3f5-4ffc-9332-c872c8e56f4b"],

Cell[BoxData[
 TemplateBox[{
  "1.0026880683402668`", "\"au\"", "astronomical units", 
   "\"AstronomicalUnit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012070832775*^9},
 CellLabel->"Out[19]=",
 CellID->149901727,ExpressionUUID->"a49e250e-5f76-4da6-b822-1904d6e9a1b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"d", ",", "\"\<Megameters\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750120730974464`*^9, 3.8750120779026976`*^9}},
 CellLabel->"In[20]:=",
 CellID->749148820,ExpressionUUID->"6d88d531-30c8-4521-9dd7-747615c089bf"],

Cell[BoxData[
 TemplateBox[{"150000.`", "\"Mm\"", "megameters", "\"Megameters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012078143328*^9},
 CellLabel->"Out[20]=",
 CellID->214245323,ExpressionUUID->"46ba40d1-02bb-40f7-a011-8a615b2cd073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"d", ",", "\"\<Gigameters\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750120730974464`*^9, 3.8750120839592795`*^9}},
 CellLabel->"In[21]:=",
 CellID->286673712,ExpressionUUID->"4f528f8d-8412-49c7-b002-2837aa795469"],

Cell[BoxData[
 TemplateBox[{"150.`", "\"Gm\"", "gigameters", "\"Gigameters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750120843134*^9},
 CellLabel->"Out[21]=",
 CellID->127676115,ExpressionUUID->"085ee2de-5a58-4713-a79b-db2afd2ae2e8"]
}, Open  ]],

Cell["Define d in terms of gigameters as d=150Gm.", "Text",
 CellChangeTimes->{{3.875012127359192*^9, 3.875012141143462*^9}},
 CellID->7140843,ExpressionUUID->"0710ab99-009a-4eae-a73f-6213af78c789"],

Cell[BoxData[
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"150", 
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"Gm\"", "gigameters", 
      "\"Gigameters\""},
     "Quantity"]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750121426822147`*^9, 3.875012157576183*^9}},
 CellLabel->"In[87]:=",
 CellID->360578427,ExpressionUUID->"cf8cb438-cd33-4bd8-bf94-dcee1b8e4767"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      SuperscriptBox["v", "2"], "d"]}], "==", 
    RowBox[{
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], 
     TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
           TemplateBox[{"\"Sun\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
             "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
           "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"], 
      SuperscriptBox["d", "2"]]}]}], ",", "v"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750119959995337`*^9, 3.875012032637576*^9}, {
  3.8750121680648527`*^9, 3.8750122013210397`*^9}, {3.8750211674530067`*^9, 
  3.875021169377636*^9}},
 CellLabel->"In[98]:=",
 CellID->92315837,ExpressionUUID->"4ec79828-b880-4bd0-9cca-1ff132654b85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     TemplateBox[{
       RowBox[{"-", "29744.9286663568788304074`3.3506149120722126"}], 
       RowBox[{
        "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}],
        "meters per second", 
       FractionBox["\"Meters\"", "\"Seconds\""]},
      "Quantity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     TemplateBox[{"29744.9286663568788304074`3.3506149120722126", 
       RowBox[{
        "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}],
        "meters per second", 
       FractionBox["\"Meters\"", "\"Seconds\""]},
      "Quantity"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8750122022873244`*^9, {3.875021147448885*^9, 3.8750211698359823`*^9}},
 CellLabel->"Out[98]=",
 CellID->244694661,ExpressionUUID->"1a5fe07b-e41f-4e10-84c7-c602a789c528"]
}, Open  ]],

Cell["Add the assumption velocity is not negative.", "Text",
 CellChangeTimes->{{3.875012210473237*^9, 3.875012220625778*^9}},
 CellID->21197662,ExpressionUUID->"57c7a02a-6a1d-4242-8898-30044270e750"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      SuperscriptBox["v", "2"], "d"]}], "==", 
    RowBox[{
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], 
     TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
           TemplateBox[{"\"Sun\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
             "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
           "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"], 
      SuperscriptBox["d", "2"]]}]}], ",", "v", ",", 
   TemplateBox[{},
    "PositiveReals"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750119959995337`*^9, 3.875012032637576*^9}, {
  3.8750121680648527`*^9, 3.8750122408265023`*^9}, {3.875012389621438*^9, 
  3.8750123920081315`*^9}},
 CellLabel->"In[99]:=",
 CellID->1000441859,ExpressionUUID->"cfe3a9f9-8c59-49dc-8682-74f5485040cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"v", "\[Rule]", 
    TemplateBox[{"29744.9286663568788304074`3.6107790026422206", 
      RowBox[{
       "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
      "meters per second", 
      FractionBox["\"Meters\"", "\"Seconds\""]},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.875012229598507*^9, 3.8750122413505754`*^9}, 
   3.875012392489051*^9, 3.8750211756751122`*^9},
 CellLabel->"Out[99]=",
 CellID->468538365,ExpressionUUID->"29fafeac-c45e-4eaf-8073-e195aa9c0ad3"]
}, Open  ]],

Cell["\<\
Now compute the acceleration. I use l for acceleration because a is a vowel \
and l is in the word acceleration.\
\>", "Text",
 CellChangeTimes->{{3.8750122671379423`*^9, 3.875012303586658*^9}},
 CellID->52762262,ExpressionUUID->"4e11a26f-0034-4d96-bb7b-d36540966529"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "=", 
  RowBox[{
   FractionBox[
    SuperscriptBox["v", "2"], "d"], "/.", 
   RowBox[{"First", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
             TemplateBox[{"\"Earth\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
               "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
              "Entity"], "[", 
             TemplateBox[{"\"mass\"", 
               RowBox[{"EntityProperty", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
               "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
              "EntityProperty"], "]"}], "allassumptions" -> {}, 
          "assumptions" -> {}, "open" -> {1, 2}, 
          "querystate" -> {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
          Automatic, "version" -> 5|>,
         "LinguisticAssistantTemplate"], 
        FractionBox[
         SuperscriptBox["v", "2"], "d"]}], "==", 
       RowBox[{
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"G\"", Italic, StripOnInput -> False], 
          "Newtonian gravitational constants", "\"GravitationalConstant\""},
         "Quantity"], 
        TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
             TemplateBox[{"\"Earth\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
               "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
              "Entity"], "[", 
             TemplateBox[{"\"mass\"", 
               RowBox[{"EntityProperty", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
               "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
              "EntityProperty"], "]"}], "allassumptions" -> {}, 
          "assumptions" -> {}, "open" -> {1, 2}, 
          "querystate" -> {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
          Automatic, "version" -> 5|>,
         "LinguisticAssistantTemplate"], 
        FractionBox[
         TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
              TemplateBox[{"\"Sun\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, 
               "Entity"], "[", 
              TemplateBox[{"\"mass\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
               "EntityProperty"], "]"}], "allassumptions" -> {}, 
           "assumptions" -> {}, "open" -> {1, 2}, 
           "querystate" -> {
            "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
             0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
           Automatic, "version" -> 5|>,
          "LinguisticAssistantTemplate"], 
         SuperscriptBox["d", "2"]]}]}], ",", "v", ",", 
      TemplateBox[{},
       "PositiveReals"]}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.875012274804799*^9, 3.875012319614401*^9}, 
   3.8750123977344756`*^9},
 CellLabel->"In[32]:=",
 CellID->14537228,ExpressionUUID->"2b21f807-2da4-494b-8038-32fdd8df774e"],

Cell[BoxData[
 TemplateBox[{"0.0058984052091110614`3.3097490069782394", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012320156827*^9, 3.8750123988467865`*^9},
 CellLabel->"Out[32]=",
 CellID->11451360,ExpressionUUID->"fd6b89b5-f28b-4243-9a56-76891965dd3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitSimplify", "[", "l", "]"}]], "Input",
 CellChangeTimes->{{3.875012322359454*^9, 3.875012324483264*^9}},
 CellLabel->"In[33]:=",
 CellID->90435974,ExpressionUUID->"18cc95d1-848b-40ac-abbf-d4d59ca65fef"],

Cell[BoxData[
 TemplateBox[{"0.0058984052091110614`3.3097490069782394", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750123247880325`*^9, 3.875012404107671*^9},
 CellLabel->"Out[33]=",
 CellID->61875961,ExpressionUUID->"5d0daa33-c1b0-4138-8a2d-c7d39be5915d"]
}, Open  ]],

Cell[TextData[{
 "It looks like the closest answer is B, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0.006", "m", " ", 
    SuperscriptBox["s", 
     RowBox[{"-", "2"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9170f3e9-bde7-4906-8d22-e6df7430cb25"],
 "."
}], "Text",
 CellChangeTimes->{{3.87501241575686*^9, 3.875012440725641*^9}},
 CellID->143349560,ExpressionUUID->"232a5588-15ae-4fac-bc4f-93107ab8513f"],

Cell[CellGroupData[{

Cell["Solving the question with quantity variablse", "Subsection",
 CellChangeTimes->{{3.875020766050706*^9, 3.875020774093983*^9}},
 CellID->516260892,ExpressionUUID->"597098e0-70da-4dc1-8adc-97ee49994453"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<Acceleration\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875020775215168*^9, 3.8750207864823794`*^9}},
 CellLabel->"In[83]:=",
 CellID->598535991,ExpressionUUID->"746b765e-f10a-4d76-9c64-67f60d3bcf12"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"AccelerationNumber\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BoussinesqApproximationParameter\"\>", 
     ",", "\<\"ApproximatedAccelerationOfGravity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", 
     ",", "\<\"AngularVelocity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"AngularAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistance\"\>", ",", "\<\"Distance\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistanceCircularForm\"\>", 
     ",", "\<\"AngularDisplacement\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"DeltaSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"InitialSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"NoInitialSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTimeCircularForm\"\>", 
     ",", "\<\"InitialAngularSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTimeCircularForm\"\>", 
     ",", "\<\"NoInitialAngularSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Weight\"\>", ",", "\<\"GravitationalAcceleration\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Weight\"\>", 
     ",", "\<\"StandardGravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Work\"\>", ",", "\<\"Acceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BarometricFormula\"\>", ",", "\<\"MassDensity\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BarometricFormula\"\>", ",", "\<\"Pressure\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialPosition\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"AngularAcceleration\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngularSpeed\"\>", ",", "\<\"AngularAcceleration\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>", 
     ",", "\<\"Height\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistance\"\>", 
     ",", "\<\"InitialPosition\"\>", ",", "\<\"FinalPosition\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistanceCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"FinalAngle\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Torque\"\>", ",", "\<\"AngularAcceleration\"\>", 
     ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialSpeed\"\>", ",", "\<\"InitialPosition\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"InitialAngularSpeed\"\>", 
     ",", "\<\"AngularAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", "\<\"AcceleratingFrequency\"\>", 
   ",", "\<\"AccelerationNumber\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BoussinesqApproximationParameter\"\>", 
     ",", "\<\"ApproximatedAccelerationOfGravity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", 
     ",", "\<\"AngularVelocity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"AngularAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistance\"\>", ",", "\<\"Distance\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistanceCircularForm\"\>", 
     ",", "\<\"AngularDisplacement\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"DeltaSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"InitialSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTime\"\>", ",", "\<\"NoInitialSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTimeCircularForm\"\>", 
     ",", "\<\"InitialAngularSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationTimeCircularForm\"\>", 
     ",", "\<\"NoInitialAngularSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Weight\"\>", ",", "\<\"GravitationalAcceleration\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Weight\"\>", 
     ",", "\<\"StandardGravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Work\"\>", ",", "\<\"Acceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BarometricFormula\"\>", ",", "\<\"MassDensity\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"BarometricFormula\"\>", ",", "\<\"Pressure\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialPosition\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialSpeed\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"AngularAcceleration\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngularSpeed\"\>", ",", "\<\"AngularAcceleration\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>", 
     ",", "\<\"Height\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistance\"\>", 
     ",", "\<\"InitialPosition\"\>", ",", "\<\"FinalPosition\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpeedAccelerationDistanceCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"FinalAngle\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Torque\"\>", ",", "\<\"AngularAcceleration\"\>", 
     ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTime\"\>", ",", "\<\"Acceleration\"\>", 
     ",", "\<\"InitialSpeed\"\>", ",", "\<\"InitialPosition\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DistanceSpeedTimeCircularForm\"\>", 
     ",", "\<\"InitialAngle\"\>", ",", "\<\"InitialAngularSpeed\"\>", 
     ",", "\<\"AngularAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"ShapeFactor\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.875020787928385*^9},
 CellLabel->"Out[83]=",
 CellID->843888675,ExpressionUUID->"69501ce1-23ae-4cf1-8779-f1eccc3ba612"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<CentripetalAcceleration\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.875020775215168*^9, 3.8750208029015207`*^9}},
 CellLabel->"In[84]:=",
 CellID->370908863,ExpressionUUID->"5fc0f0b2-35da-41b9-9157-ac9b4280351b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", 
     ",", "\<\"AngularVelocity\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"AngularVelocity\"\>",
      ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.875020803448867*^9},
 CellLabel->"Out[84]=",
 CellID->48494446,ExpressionUUID->"02d0e583-1a56-4aaa-9e96-0bbc9860288e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<CentripetalAcceleration\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875020806138369*^9, 3.875020810213005*^9}},
 CellLabel->"In[85]:=",
 CellID->115714372,ExpressionUUID->"c71a048d-8451-485b-8008-e7057833957e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", 
      ",", "\<\"RotationSpeed\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      SuperscriptBox[
       TemplateBox[{"\"v\"", "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], 
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", 
      ",", "\<\"AngularVelocity\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", 
      ",", "\<\"AngularVelocity\"\>", ",", "\<\"Diameter\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      TemplateBox[{"\"d\"", "\"Diameter\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", 
      ",", "\<\"AngularVelocity\"\>", ",", "\<\"OrbitDistance\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      SuperscriptBox[
       TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], " ", 
      TemplateBox[{
        SubscriptBox["\"d\"", "\"o\""], "\"Distance\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      SuperscriptBox[
       TemplateBox[{"\"v\"", "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], 
      TemplateBox[{
        SubscriptBox["\"d\"", "\"o\""], "\"Distance\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
      ",", "\<\"Diameter\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox[
        TemplateBox[{"\"v\"", "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )], "2"]}], 
      TemplateBox[{"\"d\"", "\"Diameter\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"OrbitSpeed\"\>", 
      ",", "\<\"Radius\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      SuperscriptBox[
       TemplateBox[{"\"v\"", "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], 
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}],
      "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       TemplateBox[{
         RowBox[{"4", " ", 
           SuperscriptBox["\[Pi]", "2"]}], 
         RowBox[{"\"/\"", "\[InvisibleSpace]", 
           SuperscriptBox["\"rev\"", "2"]}], "per revolutions squared", 
         FractionBox["1", 
          SuperscriptBox["\"Revolutions\"", "2"]]},
        "Quantity"], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"n\"", "\"RevolutionRate\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], " ", 
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
      ",", "\<\"Diameter\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       TemplateBox[{
         RowBox[{"2", " ", 
           SuperscriptBox["\[Pi]", "2"]}], 
         RowBox[{"\"/\"", "\[InvisibleSpace]", 
           SuperscriptBox["\"rev\"", "2"]}], "per revolutions squared", 
         FractionBox["1", 
          SuperscriptBox["\"Revolutions\"", "2"]]},
        "Quantity"], ")"}], " ", 
      TemplateBox[{"\"d\"", "\"Diameter\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"n\"", "\"RevolutionRate\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
      ",", "\<\"OrbitDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       TemplateBox[{
         RowBox[{"4", " ", 
           SuperscriptBox["\[Pi]", "2"]}], 
         RowBox[{"\"/\"", "\[InvisibleSpace]", 
           SuperscriptBox["\"rev\"", "2"]}], "per revolutions squared", 
         FractionBox["1", 
          SuperscriptBox["\"Revolutions\"", "2"]]},
        "Quantity"], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"n\"", "\"RevolutionRate\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], " ", 
      TemplateBox[{
        SubscriptBox["\"d\"", "\"o\""], "\"Distance\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
      ",", "\<\"Diameter\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"2", " ", 
       SuperscriptBox[
        TemplateBox[{"\"v\"", "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )], "2"]}], 
      TemplateBox[{"\"d\"", "\"Diameter\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
      ",", "\<\"OrbitDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      SuperscriptBox[
       TemplateBox[{"\"v\"", "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "2"], 
      TemplateBox[{
        SubscriptBox["\"d\"", "\"o\""], "\"Distance\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
         "TextStyling"]& )]]}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8750208108051662`*^9},
 CellLabel->"Out[85]=",
 CellID->273761703,ExpressionUUID->"c03fa968-c276-4885-9ade-fcfeac0af572"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<OrbitSpeed\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875020806138369*^9, 3.875020810213005*^9}, {
  3.875020879029175*^9, 3.875020884029373*^9}},
 CellLabel->"In[86]:=",
 CellID->522980763,ExpressionUUID->"73664c97-d014-4fbe-a8cd-0ec19b3cc359"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CircularOrbitSpeed\"\>", ",", "\<\"OrbitRadius\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"v\"", "\"c\""], "\"Speed\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     SqrtBox[
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         TemplateBox[{
           InterpretationBox["\[InvisibleSpace]", 1], 
           StyleBox["\"G\"", Italic, StripOnInput -> False], 
           "Newtonian gravitational constants", "\"GravitationalConstant\""},
          "Quantity"], ")"}], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )]}], 
       TemplateBox[{"\"r\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )]]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"CircularOrbitSpeed\"\>", ",", "\<\"Altitude\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"v\"", "\"c\""], "\"Speed\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     SqrtBox[
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         TemplateBox[{
           InterpretationBox["\[InvisibleSpace]", 1], 
           StyleBox["\"G\"", Italic, StripOnInput -> False], 
           "Newtonian gravitational constants", "\"GravitationalConstant\""},
          "Quantity"], ")"}], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )]}], 
       RowBox[{
        TemplateBox[{"\"h\"", "\"Height\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
           "TextStyling"]& )], "+", 
        TemplateBox[{
          SubscriptBox["\"r\"", "\"cb\""], "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )]}]]]}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8750208845479527`*^9},
 CellLabel->"Out[86]=",
 CellID->234465659,ExpressionUUID->"f8c535f4-6f5b-48c7-aef0-72e4ccc59dc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", "d"}], 
     ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
      TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
           TemplateBox[{"\"Earth\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
             "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
            "Entity"], "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6786872`7.283214651996722, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875020892895605*^9, 3.875020960894065*^9}},
 CellLabel->"In[89]:=",
 CellID->181707144,ExpressionUUID->"dfce975c-0361-4117-aa8f-f19aa44477a1"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{
    SubscriptBox["\"v\"", "\"c\""], "\"Speed\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"51.54949366708981`", 
    RowBox[{
     "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
    "meters per second", 
    FractionBox["\"Meters\"", "\"Seconds\""]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875020943985219*^9, 3.875020967169691*^9}},
 CellLabel->"Out[89]=",
 CellID->425997705,ExpressionUUID->"306154ea-f0b9-47f0-8129-67000350f3d9"]
}, Open  ]],

Cell["I can get just the quantity with Last:", "Text",
 CellChangeTimes->{{3.87502097675766*^9, 3.875020982054446*^9}},
 CellID->64642828,ExpressionUUID->"2c6301c0-59cc-4a4c-9086-e6e0b18e2add"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", "d"}], 
      ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
       TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
            TemplateBox[{"\"Earth\"", 
              RowBox[{"Entity", "[", 
                RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
              "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
             "Entity"], "[", 
            TemplateBox[{"\"mass\"", 
              RowBox[{"EntityProperty", "[", 
                RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
              "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
             "EntityProperty"], "]"}], "allassumptions" -> {}, 
         "assumptions" -> {}, "open" -> {1, 2}, 
         "querystate" -> {
          "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
           0.6786872`7.283214651996722, "Messages" -> {}}, "contextinfo" -> 
         Automatic, "version" -> 5|>,
        "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750209834998336`*^9, 3.875020984369624*^9}},
 CellLabel->"In[90]:=",
 CellID->251402731,ExpressionUUID->"207388db-fd2c-4b9d-aa40-a59ac5b9fc96"],

Cell[BoxData[
 TemplateBox[{"51.54949366708981`", 
   RowBox[{
    "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
   "meters per second", 
   FractionBox["\"Meters\"", "\"Seconds\""]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750209846923018`*^9},
 CellLabel->"Out[90]=",
 CellID->248414869,ExpressionUUID->"a4694704-ac2d-43b1-99c8-537abc0a8a92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "\"\<CentripetalAcceleration\>\"", ",", "\"\<OrbitSpeed\>\"", ",", 
     "\"\<Radius\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
      RowBox[{"Last", "[", 
       RowBox[{"FormulaData", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
          "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
            "d"}], ",", 
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
            TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                 TemplateBox[{"\"Earth\"", 
                   RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                   "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                   "Entity"], "[", 
                 TemplateBox[{"\"mass\"", 
                   RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                   "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                  "EntityProperty"], "]"}], "allassumptions" -> {}, 
              "assumptions" -> {}, "open" -> {1, 2}, 
              "querystate" -> {
               "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                0.6786872`7.283214651996722, "Messages" -> {}}, "contextinfo" -> 
              Automatic, "version" -> 5|>,
             "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}], "]"}]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Radius\>\"", "]"}], "->", "d"}]}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750209965515904`*^9, 3.875021080555922*^9}},
 CellLabel->"In[93]:=",
 CellID->20244208,ExpressionUUID->"ecf8a4f6-674c-4b85-b989-a2eb1bd70bde"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"a\"", "\"Acceleration\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"17.715668648888883`", 
    RowBox[{"\"nm\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
      SuperscriptBox["\"s\"", "2"]}], "nanometers per second squared", 
    FractionBox["\"Nanometers\"", 
     SuperscriptBox["\"Seconds\"", "2"]]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875021049452428*^9, 3.8750210808387957`*^9}},
 CellLabel->"Out[93]=",
 CellID->103570259,ExpressionUUID->"147384a4-05fb-434f-80f0-d3e82d29d63d"]
}, Open  ]],

Cell["Simplify the unit:", "Text",
 CellChangeTimes->{{3.875021088256327*^9, 3.875021090696499*^9}},
 CellID->99090438,ExpressionUUID->"b0b40329-d079-40d3-833c-5e742515efb3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<CentripetalAcceleration\>\"", ",", "\"\<OrbitSpeed\>\"", ",", 
      "\"\<Radius\>\""}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
       RowBox[{"Last", "[", 
        RowBox[{"FormulaData", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
             "d"}], ",", 
            RowBox[{
             RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
             TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                  TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                  TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                   "EntityProperty"], "]"}], "allassumptions" -> {}, 
               "assumptions" -> {}, "open" -> {1, 2}, 
               "querystate" -> {
                "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                 0.6786872`7.283214651996722, "Messages" -> {}}, 
               "contextinfo" -> Automatic, "version" -> 5|>,
              "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}], "]"}]}], 
      ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<Radius\>\"", "]"}], "->", 
       "d"}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750210927369347`*^9, 3.8750210935775785`*^9}},
 CellLabel->"In[94]:=",
 CellID->536368749,ExpressionUUID->"c1e4a17f-4b63-45fd-b85c-15b88a117ead"],

Cell[BoxData[
 TemplateBox[{"17.715668648888883`", 
   RowBox[{"\"nm\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "nanometers per second squared", 
   FractionBox["\"Nanometers\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750210939630995`*^9},
 CellLabel->"Out[94]=",
 CellID->405072700,ExpressionUUID->"b0e67ca2-36bf-4e38-b077-ba3f0360dacd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitSimplify", "[", 
  RowBox[{"Last", "[", 
   RowBox[{"FormulaData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<CentripetalAcceleration\>\"", ",", "\"\<OrbitSpeed\>\"", ",", 
       "\"\<Radius\>\""}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
        RowBox[{"Last", "[", 
         RowBox[{"FormulaData", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
              "d"}], ",", 
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
              TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                   TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                   TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                    "EntityProperty"], "]"}], "allassumptions" -> {}, 
                "assumptions" -> {}, "open" -> {1, 2}, 
                "querystate" -> {
                 "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                  0.6786872`7.283214651996722, "Messages" -> {}}, 
                "contextinfo" -> Automatic, "version" -> 5|>,
               "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}], "]"}]}], 
       ",", 
       RowBox[{
        RowBox[{"QuantityVariable", "[", "\"\<Radius\>\"", "]"}], "->", 
        "d"}]}], "}"}]}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.875021095418355*^9, 3.875021097394817*^9}},
 CellLabel->"In[95]:=",
 CellID->295541587,ExpressionUUID->"536193de-d178-4f17-9b22-69e161e81580"],

Cell[BoxData[
 TemplateBox[{"17.715668648888883`", 
   RowBox[{"\"nm\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "nanometers per second squared", 
   FractionBox["\"Nanometers\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875021097709472*^9},
 CellLabel->"Out[95]=",
 CellID->8648420,ExpressionUUID->"80d78f54-d143-4580-8be9-de89b05ae6e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<CentripetalAcceleration\>\"", ",", "\"\<OrbitSpeed\>\"", ",", 
        "\"\<Radius\>\""}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
         RowBox[{"Last", "[", 
          RowBox[{"FormulaData", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "\"\<CircularOrbitSpeed\>\"", ",", " ", "\"\<OrbitRadius\>\""}], 
             "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->",
                "d"}], ",", 
              RowBox[{
               RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
               TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                    TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                    "EntityProperty"], "]"}], "allassumptions" -> {}, 
                 "assumptions" -> {}, "open" -> {1, 2}, 
                 "querystate" -> {
                  "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                   0.6786872`7.283214651996722, "Messages" -> {}}, 
                 "contextinfo" -> Automatic, "version" -> 5|>,
                "LinguisticAssistantTemplate"]}]}], "}"}]}], "]"}], "]"}]}], 
        ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Radius\>\"", "]"}], "->", 
         "d"}]}], "}"}]}], "]"}], "]"}], ",", "\"\<SIBase\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875021095418355*^9, 3.8750211113097167`*^9}},
 CellLabel->"In[96]:=",
 CellID->241982791,ExpressionUUID->"4d91f43f-e9fa-4a80-999d-a592bc5e99f8"],

Cell[BoxData[
 TemplateBox[{"1.7715668648888884`*^-8", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750211115440397`*^9},
 CellLabel->"Out[96]=",
 CellID->136378062,ExpressionUUID->"89c7549c-9a4a-4100-b32f-aba3a59b5653"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.875021197739443*^9, 3.875021205480415*^9}},
 CellLabel->"In[100]:=",
 CellID->390458307,ExpressionUUID->"e1356e03-8e5f-463c-81fd-1aef73ebbc04"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  FractionBox[
   RowBox[{
    TemplateBox[{"\"m\"", "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )], " ", 
    SuperscriptBox[
     TemplateBox[{"\"v\"", "\"Speed\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
        "TextStyling"]& )], "2"]}], 
   TemplateBox[{"\"r\"", "\"Radius\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
      "TextStyling"]& )]]}]], "Output",
 CellChangeTimes->{3.8750212058711214`*^9},
 CellLabel->"Out[100]=",
 CellID->775034707,ExpressionUUID->"d386a1ac-bcd9-475a-b298-908b5630fb6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
      TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
           TemplateBox[{"\"Earth\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
             "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
            "Entity"], "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.743507`7.322830055186577, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Radius\>\"", "]"}], "->", "d"}]}],
     "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875021197739443*^9, 3.8750212779612446`*^9}},
 CellLabel->"In[102]:=",
 CellID->381520265,ExpressionUUID->"09bf6d15-1c45-47dd-84bc-ca71fa0d07d6"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   RowBox[{"(", 
    TemplateBox[{"3.9814666666666668162635`3.6969530971161126*^22", 
      RowBox[{
       "\"kg\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
        "\"Gm\""}], "kilograms per gigameter", 
      FractionBox["\"Kilograms\"", "\"Gigameters\""]},
     "Quantity"], ")"}], " ", 
   SuperscriptBox[
    TemplateBox[{"\"v\"", "\"Speed\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.8750212426098633`*^9, 3.8750212781917753`*^9},
 CellLabel->"Out[102]=",
 CellID->531698053,ExpressionUUID->"9a44295c-8595-4cf6-a883-4ebacb15fd88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<Gravity\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875021286555817*^9, 3.8750213316469917`*^9}},
 CellLabel->"In[106]:=",
 CellID->337777051,ExpressionUUID->"43ebb121-2483-41d4-bab4-7e9c9db917b3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"NewtonsLawOfUniversalGravitation\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"F\"", "\"Force\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"G\"", Italic, StripOnInput -> False], 
          "Newtonian gravitational constants", "\"GravitationalConstant\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{
         SubscriptBox["\"m\"", "1"], "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       TemplateBox[{
         SubscriptBox["\"m\"", "2"], "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )]}], 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " gravitational acceleration"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"G\"", Italic, StripOnInput -> False], 
          "Newtonian gravitational constants", "\"GravitationalConstant\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"M\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )]}], 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"GravitationalAcceleration\"\>", ",", "\<\"Radius\"\>", 
      ",", "\<\"Height\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " gravitational acceleration"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{"(", 
      TagBox[GridBox[{
         {"\[Piecewise]", GridBox[{
            {
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                TemplateBox[{
                  InterpretationBox["\[InvisibleSpace]", 1], 
                  StyleBox["\"G\"", Italic, StripOnInput -> False], 
                  "Newtonian gravitational constants", 
                  "\"GravitationalConstant\""},
                 "Quantity"], ")"}], " ", 
               TemplateBox[{"\"M\"", "\"Mass\""},
                "QuantityVariable",
                DisplayFunction->(TooltipBox[
                  
                  StyleBox[#, FontColor -> GrayLevel[0.4], 
                   ShowStringCharacters -> False], 
                  RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
                  "TextStyling"]& )]}], 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{
                 TemplateBox[{"\"h\"", "\"Height\""},
                  "QuantityVariable",
                  DisplayFunction->(TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
                    "TextStyling"]& )], "+", 
                 TemplateBox[{"\"r\"", "\"Radius\""},
                  "QuantityVariable",
                  DisplayFunction->(TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                    "TextStyling"]& )]}], ")"}], "2"]], 
             RowBox[{
              TemplateBox[{"\"h\"", "\"Height\""},
               "QuantityVariable",
               DisplayFunction->(TooltipBox[
                 
                 StyleBox[#, FontColor -> GrayLevel[0.4], 
                  ShowStringCharacters -> False], 
                 RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
                 "TextStyling"]& )], "\[GreaterEqual]", "0"}]},
            {
             FractionBox[
              RowBox[{
               RowBox[{"(", 
                TemplateBox[{
                  InterpretationBox["\[InvisibleSpace]", 1], 
                  StyleBox["\"G\"", Italic, StripOnInput -> False], 
                  "Newtonian gravitational constants", 
                  "\"GravitationalConstant\""},
                 "Quantity"], ")"}], " ", 
               TemplateBox[{"\"M\"", "\"Mass\""},
                "QuantityVariable",
                DisplayFunction->(TooltipBox[
                  
                  StyleBox[#, FontColor -> GrayLevel[0.4], 
                   ShowStringCharacters -> False], 
                  RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
                  "TextStyling"]& )], " ", 
               RowBox[{"(", 
                RowBox[{
                 TemplateBox[{"\"h\"", "\"Height\""},
                  "QuantityVariable",
                  DisplayFunction->(TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
                    "TextStyling"]& )], "+", 
                 TemplateBox[{"\"r\"", "\"Radius\""},
                  "QuantityVariable",
                  DisplayFunction->(TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                    "TextStyling"]& )]}], ")"}]}], 
              SuperscriptBox[
               TemplateBox[{"\"r\"", "\"Radius\""},
                "QuantityVariable",
                DisplayFunction->(TooltipBox[
                  
                  StyleBox[#, FontColor -> GrayLevel[0.4], 
                   ShowStringCharacters -> False], 
                  RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                  "TextStyling"]& )], "3"]], 
             RowBox[{
              RowBox[{"-", 
               TemplateBox[{"\"r\"", "\"Radius\""},
                "QuantityVariable",
                DisplayFunction->(TooltipBox[
                  
                  StyleBox[#, FontColor -> GrayLevel[0.4], 
                   ShowStringCharacters -> False], 
                  RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                  "TextStyling"]& )]}], "\[LessEqual]", 
              TemplateBox[{"\"h\"", "\"Height\""},
               "QuantityVariable",
               DisplayFunction->(TooltipBox[
                 
                 StyleBox[#, FontColor -> GrayLevel[0.4], 
                  ShowStringCharacters -> False], 
                 RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
                 "TextStyling"]& )], "<", "0"}]},
            {"0", 
             TagBox["True",
              "PiecewiseDefault",
              AutoDelete->True]}
           },
           AllowedDimensions->{2, Automatic},
           Editable->True,
           GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
           GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
           GridBoxSpacings->{"Columns" -> {
               Offset[0.27999999999999997`], {
                Offset[0.84]}, 
               Offset[0.27999999999999997`]}, "Rows" -> {
               Offset[0.2], {
                Offset[0.4]}, 
               Offset[0.2]}},
           Selectable->True]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.35]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}],
       "Piecewise",
       DeleteWithContents->True,
       Editable->False,
       SelectWithContents->True,
       Selectable->False,
       StripWrapperBoxes->True], ")"}]}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8750212957983217`*^9, 3.875021332348547*^9}},
 CellLabel->"Out[106]=",
 CellID->64982049,ExpressionUUID->"e1490004-bcd3-4747-9501-b79ebca3a0a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", "\"\<NewtonsLawOfUniversalGravitation\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750217320122504`*^9, 3.8750217353007097`*^9}},
 CellLabel->"In[110]:=",
 CellID->311627600,ExpressionUUID->"e06b9c5d-fb55-4685-be86-1c972859cabf"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], ")"}], " ", 
    TemplateBox[{
      SubscriptBox["\"m\"", "1"], "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )], " ", 
    TemplateBox[{
      SubscriptBox["\"m\"", "2"], "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )]}], 
   SuperscriptBox[
    TemplateBox[{"\"r\"", "\"Distance\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]]}]], "Output",
 CellChangeTimes->{3.8750217355663066`*^9},
 CellLabel->"Out[110]=",
 CellID->447128946,ExpressionUUID->"40fe112b-b07b-4626-8cc0-1c43131712d1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", 
       RowBox[{
        SubscriptBox["\"\<m\>\"", "1"], ",", "\"\<Mass\>\""}], "]"}], "->", 
      RowBox[{
       TemplateBox[{"\"Earth\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
         "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
        "Entity"], "[", 
       TemplateBox[{"\"mass\"", 
         RowBox[{"EntityProperty", "[", 
           RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
         "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
        "EntityProperty"], "]"}]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Distance\>\"", "]"}], "->", "d"}],
      ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", 
       RowBox[{
        SubscriptBox["\"\<m\>\"", "2"], ",", "\"\<Mass\>\""}], "]"}], "->", 
      RowBox[{
       TemplateBox[{"\"Sun\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
         "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
        "Entity"], "[", 
       TemplateBox[{"\"mass\"", 
         RowBox[{"EntityProperty", "[", 
           RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
         "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
        "EntityProperty"], "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750217320122504`*^9, 3.8750217665593166`*^9}, {
  3.875021797752678*^9, 3.8750218081641617`*^9}, {3.8750218401643543`*^9, 
  3.875021958747814*^9}},
 CellLabel->"In[125]:=",
 CellID->482910854,ExpressionUUID->"b4e35e04-1fe9-4199-9fa5-3b25b143f9d6"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{
   "3.522645558985338`*^10", "\"TN\"", "teranewtons", "\"Teranewtons\""},
   "Quantity"]}]], "Output",
 CellChangeTimes->{
  3.8750217528592567`*^9, {3.87502180364755*^9, 3.875021808784439*^9}, 
   3.8750218435632553`*^9, {3.875021873637328*^9, 3.875021879727435*^9}, {
   3.875021928864129*^9, 3.875021959082139*^9}},
 CellLabel->"Out[125]=",
 CellID->11397043,ExpressionUUID->"318b4e2d-ad01-47f5-a243-a76ecc3e8de7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", 
        RowBox[{
         SubscriptBox["\"\<m\>\"", "1"], ",", "\"\<Mass\>\""}], "]"}], "->", 
       RowBox[{
        TemplateBox[{"\"Earth\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
          "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
         "Entity"], "[", 
        TemplateBox[{"\"mass\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
          "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
         "EntityProperty"], "]"}]}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<Distance\>\"", "]"}], "->", 
       "d"}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", 
        RowBox[{
         SubscriptBox["\"\<m\>\"", "2"], ",", "\"\<Mass\>\""}], "]"}], "->", 
       RowBox[{
        TemplateBox[{"\"Sun\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
          "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
         "Entity"], "[", 
        TemplateBox[{"\"mass\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
          "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
         "EntityProperty"], "]"}]}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.875021978348606*^9, 3.875021981064108*^9}},
 CellLabel->"In[126]:=",
 CellID->3550074,ExpressionUUID->"701f283d-a61b-4aad-ae07-6b63b4556ce3"],

Cell[BoxData[
 TemplateBox[{
  "3.522645558985338`*^10", "\"TN\"", "teranewtons", "\"Teranewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750219814137745`*^9},
 CellLabel->"Out[126]=",
 CellID->529484642,ExpressionUUID->"3ffd7d14-04ce-492b-a65b-ba133eebb5d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          RowBox[{
           SubscriptBox["\"\<m\>\"", "1"], ",", "\"\<Mass\>\""}], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Distance\>\"", "]"}], "->", 
         "d"}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          RowBox[{
           SubscriptBox["\"\<m\>\"", "2"], ",", "\"\<Mass\>\""}], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}]}], "}"}]}], "]"}], "]"}], ",", 
   "\"\<Exanewtons\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750219861653223`*^9, 3.8750219969929695`*^9}},
 CellLabel->"In[127]:=",
 CellID->349150083,ExpressionUUID->"a3f2e80e-1194-4613-8bd2-48bd48426b0a"],

Cell[BoxData[
 TemplateBox[{"35226.45558985337`", "\"EN\"", "exanewtons", "\"Exanewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750219972476096`*^9},
 CellLabel->"Out[127]=",
 CellID->457008685,ExpressionUUID->"67baadd6-d7ff-426a-898e-f8dbdc3b14c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          RowBox[{
           SubscriptBox["\"\<m\>\"", "1"], ",", "\"\<Mass\>\""}], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Distance\>\"", "]"}], "->", 
         "d"}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          RowBox[{
           SubscriptBox["\"\<m\>\"", "2"], ",", "\"\<Mass\>\""}], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}]}], "}"}]}], "]"}], "]"}], ",", 
   "\"\<Zettanewtons\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750219861653223`*^9, 3.875022006279481*^9}},
 CellLabel->"In[128]:=",
 CellID->368208580,ExpressionUUID->"b1b61d46-37d8-4f7e-bb7f-fdac4c02c9e1"],

Cell[BoxData[
 TemplateBox[{
  "35.22645558985338`", "\"ZN\"", "zettanewtons", "\"Zettanewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750220067327957`*^9},
 CellLabel->"Out[128]=",
 CellID->18669221,ExpressionUUID->"100be191-1f64-4bc1-bfe2-2c1ebc51a9c6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Reorganizing the second try", "Subsection",
 CellChangeTimes->{{3.875022019120447*^9, 3.875022024349083*^9}},
 CellID->54694745,ExpressionUUID->"789da690-ba62-457d-843e-a026bbb427a2"],

Cell["First I need the force the Earth is attracted to the Sun by.", "Text",
 CellChangeTimes->{{3.8750220333310575`*^9, 3.875022042587047*^9}},
 CellID->432498538,ExpressionUUID->"f0327453-08e3-43f8-82c7-6b927ca54795"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", "\"\<NewtonsLawOfUniversalGravitation\>\"", 
  "]"}]], "Input",
 CellLabel->"In[129]:=",
 CellID->90848526,ExpressionUUID->"1dc925cc-9b93-4875-870b-8f12735e1c6b"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], ")"}], " ", 
    TemplateBox[{
      SubscriptBox["\"m\"", "1"], "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )], " ", 
    TemplateBox[{
      SubscriptBox["\"m\"", "2"], "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )]}], 
   SuperscriptBox[
    TemplateBox[{"\"r\"", "\"Distance\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]]}]], "Output",
 CellChangeTimes->{3.875022050130103*^9},
 CellLabel->"Out[129]=",
 CellID->284073927,ExpressionUUID->"006a8d57-9635-4200-ba2b-19dd8f144e23"]
}, Open  ]],

Cell["Plug in the numbers:", "Text",
 CellChangeTimes->{{3.8750220526771903`*^9, 3.875022061435454*^9}},
 CellID->655512787,ExpressionUUID->"485ee535-a2df-42d5-b5c3-392eed783d30"],

Cell[TextData[{
 "I can use subscripted strings like ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\"\<m\>\"", "1"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "3a059f83-7fe4-4f39-a460-713237e83ccc"],
 " instead of entering the full details for the QuantityVariable. I can also \
enter r directory as QuantityVariable[\"r\"] instead of \
QuantityVariable[\"r\",\"Distance\"] which is helpful because sometimes I'm \
not sure if the second argument, in this case \"Distance\" should be \"Length\
\" or \"Radius\" or \"Distance\". I first thought it was \"Radius\" and then \
had to change it. I would like to emphasize the first argument is not ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\"\<\!\(\*SubscriptBox[\(m\), \(1\)]\)\>\"", " "}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6e231c14-5966-45ef-9ccf-9ed6bd69ec92"],
 " which is what I originally input."
}], "CodeText",
 CellChangeTimes->{{3.875022144788517*^9, 3.8750223388087893`*^9}},
 CellID->72619800,ExpressionUUID->"fbdc7b8e-5b8f-49f9-8d76-e8992b5470bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", 
       SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
      RowBox[{
       TemplateBox[{"\"Earth\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
         "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
        "Entity"], "[", 
       TemplateBox[{"\"mass\"", 
         RowBox[{"EntityProperty", "[", 
           RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
         "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
        "EntityProperty"], "]"}]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", 
       SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
      RowBox[{
       TemplateBox[{"\"Sun\"", 
         RowBox[{"Entity", "[", 
           RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
         "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
        "Entity"], "[", 
       TemplateBox[{"\"mass\"", 
         RowBox[{"EntityProperty", "[", 
           RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
         "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
        "EntityProperty"], "]"}]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875022063983677*^9, 3.8750221333297634`*^9}},
 CellLabel->"In[133]:=",
 CellID->49211794,ExpressionUUID->"dd17d421-e991-47a2-b719-3058fa9ff2dd"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{
   "3.522645558985338`*^10", "\"TN\"", "teranewtons", "\"Teranewtons\""},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875022107648481*^9, 3.875022133702976*^9}},
 CellLabel->"Out[133]=",
 CellID->759348372,ExpressionUUID->"c24bdf5e-8192-4ada-bc55-1961a97510b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", 
        SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
       RowBox[{
        TemplateBox[{"\"Earth\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
          "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
         "Entity"], "[", 
        TemplateBox[{"\"mass\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
          "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
         "EntityProperty"], "]"}]}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", 
        SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
       RowBox[{
        TemplateBox[{"\"Sun\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
          "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
         "Entity"], "[", 
        TemplateBox[{"\"mass\"", 
          RowBox[{"EntityProperty", "[", 
            RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
          "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
         "EntityProperty"], "]"}]}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
     "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750223641338196`*^9, 3.875022364921732*^9}},
 CellLabel->"In[134]:=",
 CellID->6846149,ExpressionUUID->"5b47e676-803e-4bb9-8264-4979c3771b85"],

Cell[BoxData[
 TemplateBox[{
  "3.522645558985338`*^10", "\"TN\"", "teranewtons", "\"Teranewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875022365225683*^9},
 CellLabel->"Out[134]=",
 CellID->184712299,ExpressionUUID->"68e37e26-b74b-471d-b3c8-a54b628fe67d"]
}, Open  ]],

Cell[TextData[{
 "Find the right SI prefix by converting to other powers besides teranewtons \
where tera is for the power of 12 as ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["10", "12"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "7f7ffbc0-b517-4a5a-af8c-d657efe0ffcc"],
 " as the multiplying factor for the base unit newton:"
}], "Text",
 CellChangeTimes->{{3.87502234757487*^9, 3.8750223948799524`*^9}},
 CellID->233657691,ExpressionUUID->"5ce4a8fd-84db-4ee4-85e2-9e40ec31a077"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
       "}"}]}], "]"}], "]"}], ",", "\"\<Petanewtons\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750223962463837`*^9, 3.8750224043236637`*^9}},
 CellLabel->"In[135]:=",
 CellID->51997200,ExpressionUUID->"4e73a815-5c4b-4a9c-925f-8a3b9acbc85d"],

Cell[BoxData[
 TemplateBox[{
  "3.522645558985338`*^7", "\"PN\"", "petanewtons", "\"Petanewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875022404562165*^9},
 CellLabel->"Out[135]=",
 CellID->450185905,ExpressionUUID->"45f4b57e-8651-4e2b-8341-740dfcbaaf21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
       "}"}]}], "]"}], "]"}], ",", "\"\<Exanewtons\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750223962463837`*^9, 3.8750224159224863`*^9}},
 CellLabel->"In[136]:=",
 CellID->861829759,ExpressionUUID->"c8b221a3-e021-48d9-b93d-2ad4b8d333bb"],

Cell[BoxData[
 TemplateBox[{"35226.45558985337`", "\"EN\"", "exanewtons", "\"Exanewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750224165834494`*^9},
 CellLabel->"Out[136]=",
 CellID->127823888,ExpressionUUID->"5dd0ab1b-ca25-4555-90d9-78ed25622071"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", 
          SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
         RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
           "EntityProperty"], "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
       "}"}]}], "]"}], "]"}], ",", "\"\<Zettanewtons\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750223962463837`*^9, 3.8750224224956474`*^9}},
 CellLabel->"In[137]:=",
 CellID->115548218,ExpressionUUID->"abb705e8-37b8-476a-8767-b854273cacc2"],

Cell[BoxData[
 TemplateBox[{
  "35.22645558985338`", "\"ZN\"", "zettanewtons", "\"Zettanewtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750224227435255`*^9},
 CellLabel->"Out[137]=",
 CellID->439594257,ExpressionUUID->"9d7ae15d-e13c-4d47-a966-a4d8eb32fb62"]
}, Open  ]],

Cell["The force is 35.2265 ZN. ", "Text",
 CellChangeTimes->{{3.875022425725006*^9, 3.8750224452082033`*^9}},
 CellID->410541024,ExpressionUUID->"0c1b260d-1c60-418c-8226-9e8b8bbfa770"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"{", 
   RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
   "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.875022359479788*^9, 3.8750223609843917`*^9}, {
  3.875022476417451*^9, 3.875022491634055*^9}},
 CellLabel->"In[145]:=",
 CellID->278595614,ExpressionUUID->"458d5458-8176-4893-a536-b247e08f98c2"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  FractionBox[
   RowBox[{
    TemplateBox[{"\"m\"", "\"Mass\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
       "TextStyling"]& )], " ", 
    SuperscriptBox[
     TemplateBox[{"\"v\"", "\"Speed\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
        "TextStyling"]& )], "2"]}], 
   TemplateBox[{"\"r\"", "\"Radius\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
      "TextStyling"]& )]]}]], "Output",
 CellChangeTimes->{{3.875022478668479*^9, 3.8750224920428596`*^9}},
 CellLabel->"Out[145]=",
 CellID->10769855,ExpressionUUID->"c3552541-a556-4a43-a98d-39623ce57c2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
      TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
           TemplateBox[{"\"Earth\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
             "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
            "Entity"], "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.743507`7.322830055186577, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
      RowBox[{"UnitConvert", "[", 
       RowBox[{
        RowBox[{"Last", "[", 
         RowBox[{"FormulaData", "[", 
          RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"QuantityVariable", "[", 
               SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
              RowBox[{
               TemplateBox[{"\"Earth\"", 
                 RowBox[{"Entity", "[", 
                   RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                 "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                "Entity"], "[", 
               TemplateBox[{"\"mass\"", 
                 RowBox[{"EntityProperty", "[", 
                   RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                 "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                "EntityProperty"], "]"}]}], ",", 
             RowBox[{
              RowBox[{"QuantityVariable", "[", 
               SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
              RowBox[{
               TemplateBox[{"\"Sun\"", 
                 RowBox[{"Entity", "[", 
                   RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                 "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                "Entity"], "[", 
               TemplateBox[{"\"mass\"", 
                 RowBox[{"EntityProperty", "[", 
                   RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                 "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                "EntityProperty"], "]"}]}], ",", 
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", 
              "d"}]}], "}"}]}], "]"}], "]"}], ",", "\"\<Zettanewtons\>\""}], 
       "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750225021371574`*^9, 3.8750225274661136`*^9}},
 CellLabel->"In[148]:=",
 CellID->325463161,ExpressionUUID->"81f91a51-7a0d-44a5-a83d-ac633b4a8a9a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   TemplateBox[{"\"v\"", "\"Speed\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
      "TextStyling"]& )], "\[Equal]", 
   TemplateBox[{
     RowBox[{"-", "29.74492866635701`"}], 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
     "kilometers per second", 
     FractionBox["\"Kilometers\"", "\"Seconds\""]},
    "Quantity"]}], "||", 
  RowBox[{
   TemplateBox[{"\"v\"", "\"Speed\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
      "TextStyling"]& )], "\[Equal]", 
   TemplateBox[{"29.74492866635701`", 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
     "kilometers per second", 
     FractionBox["\"Kilometers\"", "\"Seconds\""]},
    "Quantity"]}]}]], "Output",
 CellChangeTimes->{{3.87502249404116*^9, 3.8750225298068967`*^9}},
 CellLabel->"Out[148]=",
 CellID->279188569,ExpressionUUID->"3cbdc303-1205-4e3d-971a-a5b4aefb71aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
     "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
       TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
            TemplateBox[{"\"Earth\"", 
              RowBox[{"Entity", "[", 
                RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
              "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
             "Entity"], "[", 
            TemplateBox[{"\"mass\"", 
              RowBox[{"EntityProperty", "[", 
                RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
              "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
             "EntityProperty"], "]"}], "allassumptions" -> {}, 
         "assumptions" -> {}, "open" -> {1, 2}, 
         "querystate" -> {
          "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
           0.743507`7.322830055186577, "Messages" -> {}}, "contextinfo" -> 
         Automatic, "version" -> 5|>,
        "LinguisticAssistantTemplate"]}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
       RowBox[{"UnitConvert", "[", 
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"FormulaData", "[", 
           RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"QuantityVariable", "[", 
                SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
               RowBox[{
                TemplateBox[{"\"Earth\"", 
                  RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                  "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                 "Entity"], "[", 
                TemplateBox[{"\"mass\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                  "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                 "EntityProperty"], "]"}]}], ",", 
              RowBox[{
               RowBox[{"QuantityVariable", "[", 
                SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
               RowBox[{
                TemplateBox[{"\"Sun\"", 
                  RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                  "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                 "Entity"], "[", 
                TemplateBox[{"\"mass\"", 
                  RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                  "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                 "EntityProperty"], "]"}]}], ",", 
              RowBox[{
               RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", 
               "d"}]}], "}"}]}], "]"}], "]"}], ",", "\"\<Zettanewtons\>\""}], 
        "]"}]}]}], "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.875022569324806*^9, 3.8750225747713776`*^9}},
 CellLabel->"In[150]:=",
 CellID->623525069,ExpressionUUID->"d80a717e-937f-4bf1-a616-c7166cbeee43"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"v\"", "\"Speed\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"29.74492866635701`", 
    RowBox[{
     "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
    "kilometers per second", 
    FractionBox["\"Kilometers\"", "\"Seconds\""]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{3.8750225750993605`*^9},
 CellLabel->"Out[150]=",
 CellID->199355886,ExpressionUUID->"01442a2c-de4b-4778-8f47-2a433177d9a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"Last", "[", 
   RowBox[{"FormulaData", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}],
       "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
        TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
             TemplateBox[{"\"Earth\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
               "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
              "Entity"], "[", 
             TemplateBox[{"\"mass\"", 
               RowBox[{"EntityProperty", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
               "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
              "EntityProperty"], "]"}], "allassumptions" -> {}, 
          "assumptions" -> {}, "open" -> {1, 2}, 
          "querystate" -> {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.743507`7.322830055186577, "Messages" -> {}}, "contextinfo" -> 
          Automatic, "version" -> 5|>,
         "LinguisticAssistantTemplate"]}], ",", 
       RowBox[{
        RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}], ",", 
       RowBox[{
        RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
        RowBox[{"UnitConvert", "[", 
         RowBox[{
          RowBox[{"Last", "[", 
           RowBox[{"FormulaData", "[", 
            RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"QuantityVariable", "[", 
                 SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
                RowBox[{
                 TemplateBox[{"\"Earth\"", 
                   RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                   "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                  "Entity"], "[", 
                 TemplateBox[{"\"mass\"", 
                   RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                   "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                  "EntityProperty"], "]"}]}], ",", 
               RowBox[{
                RowBox[{"QuantityVariable", "[", 
                 SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
                RowBox[{
                 TemplateBox[{"\"Sun\"", 
                   RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                   "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                  "Entity"], "[", 
                 TemplateBox[{"\"mass\"", 
                   RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                   "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                  "EntityProperty"], "]"}]}], ",", 
               RowBox[{
                RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", 
                "d"}]}], "}"}]}], "]"}], "]"}], ",", "\"\<Zettanewtons\>\""}],
          "]"}]}]}], "}"}]}], "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750225811701536`*^9, 3.8750225820879984`*^9}},
 CellLabel->"In[151]:=",
 CellID->312546000,ExpressionUUID->"cc3fa637-fcac-4f08-9e1a-e2d3326cd302"],

Cell[BoxData[
 TemplateBox[{"29.74492866635701`", 
   RowBox[{
    "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
   "kilometers per second", 
   FractionBox["\"Kilometers\"", "\"Seconds\""]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875022582386139*^9},
 CellLabel->"Out[151]=",
 CellID->185515779,ExpressionUUID->"983ae332-b769-4b6d-b7ff-6dee50e2f138"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<CentripetalAcceleration\>\"", ",", "\"\<RotationSpeed\>\""}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<v\>\"", "]"}], "->", 
      RowBox[{"Last", "[", 
       RowBox[{"Last", "[", 
        RowBox[{"FormulaData", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
           "\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
           "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
             TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                  TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                  TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                   "EntityProperty"], "]"}], "allassumptions" -> {}, 
               "assumptions" -> {}, "open" -> {1, 2}, 
               "querystate" -> {
                "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                 0.743507`7.322830055186577, "Messages" -> {}}, "contextinfo" -> 
               Automatic, "version" -> 5|>,
              "LinguisticAssistantTemplate"]}], ",", 
            RowBox[{
             RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}],
             ",", 
            RowBox[{
             RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
             RowBox[{"UnitConvert", "[", 
              RowBox[{
               RowBox[{"Last", "[", 
                RowBox[{"FormulaData", "[", 
                 RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->",
                     "d"}]}], "}"}]}], "]"}], "]"}], ",", 
               "\"\<Zettanewtons\>\""}], "]"}]}]}], "}"}]}], "]"}], "]"}], 
       "]"}]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750226109648085`*^9, 3.8750226369446535`*^9}},
 CellLabel->"In[153]:=",
 CellID->528494963,ExpressionUUID->"02d8daef-2136-4909-bfe4-f9eb91324372"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"a\"", "\"Acceleration\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"5.898405209111114`", 
    RowBox[{"\"mm\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
      SuperscriptBox["\"s\"", "2"]}], "millimeters per second squared", 
    FractionBox["\"Millimeters\"", 
     SuperscriptBox["\"Seconds\"", "2"]]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875022614230895*^9, 3.87502263730114*^9}},
 CellLabel->"Out[153]=",
 CellID->81494287,ExpressionUUID->"4d653028-65bb-46ba-a991-b31ee99ea27d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", 
  RowBox[{"FormulaData", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<CentripetalAcceleration\>\"", ",", "\"\<RotationSpeed\>\""}], "}"}],
     ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<v\>\"", "]"}], "->", 
       RowBox[{"Last", "[", 
        RowBox[{"Last", "[", 
         RowBox[{"FormulaData", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
            "\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}], 
            "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
              TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                   TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                   TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                    "EntityProperty"], "]"}], "allassumptions" -> {}, 
                "assumptions" -> {}, "open" -> {1, 2}, 
                "querystate" -> {
                 "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                  0.743507`7.322830055186577, "Messages" -> {}}, 
                "contextinfo" -> Automatic, "version" -> 5|>,
               "LinguisticAssistantTemplate"]}], ",", 
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", 
              "d"}], ",", 
             RowBox[{
              RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
              RowBox[{"UnitConvert", "[", 
               RowBox[{
                RowBox[{"Last", "[", 
                 RowBox[{"FormulaData", "[", 
                  RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->",
                     "d"}]}], "}"}]}], "]"}], "]"}], ",", 
                "\"\<Zettanewtons\>\""}], "]"}]}]}], "}"}]}], "]"}], "]"}], 
        "]"}]}], ",", 
      RowBox[{
       RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
     "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750226465154533`*^9, 3.875022648817487*^9}},
 CellLabel->"In[154]:=",
 CellID->431250660,ExpressionUUID->"392e3517-980c-4ae9-bb64-0c9bcab28b2d"],

Cell[BoxData[
 TemplateBox[{"5.898405209111114`", 
   RowBox[{"\"mm\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "millimeters per second squared", 
   FractionBox["\"Millimeters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750226492301064`*^9},
 CellLabel->"Out[154]=",
 CellID->93641013,ExpressionUUID->"5116bd9d-2b3a-4ebc-bd20-36f130723f0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "\"\<CentripetalAcceleration\>\"", ",", "\"\<RotationSpeed\>\""}], 
       "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<v\>\"", "]"}], "->", 
         RowBox[{"Last", "[", 
          RowBox[{"Last", "[", 
           RowBox[{"FormulaData", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
              "\"\<CentripetalForce\>\"", ",", " ", "\"\<RotationSpeed\>\""}],
               "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"QuantityVariable", "[", "\"\<m\>\"", "]"}], "->", 
                TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
                    TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", 
                    "\"planet\""}, "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
                    "EntityProperty"], "]"}], "allassumptions" -> {}, 
                  "assumptions" -> {}, "open" -> {1, 2}, 
                  "querystate" -> {
                   "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
                    0.743507`7.322830055186577, "Messages" -> {}}, 
                  "contextinfo" -> Automatic, "version" -> 5|>,
                 "LinguisticAssistantTemplate"]}], ",", 
               RowBox[{
                RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", 
                "d"}], ",", 
               RowBox[{
                RowBox[{"QuantityVariable", "[", "\"\<F\>\"", "]"}], "->", 
                RowBox[{"UnitConvert", "[", 
                 RowBox[{
                  RowBox[{"Last", "[", 
                   RowBox[{"FormulaData", "[", 
                    RowBox[{"\"\<NewtonsLawOfUniversalGravitation\>\"", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "1"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Earth\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
                    "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", 
                    SubscriptBox["\"\<m\>\"", "2"], "]"}], "->", 
                    RowBox[{
                    TemplateBox[{"\"Sun\"", 
                    RowBox[{"Entity", "[", 
                    RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                    "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""},
                    "Entity"], "[", 
                    TemplateBox[{"\"mass\"", 
                    RowBox[{"EntityProperty", "[", 
                    RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                    "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""},
                    "EntityProperty"], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->",
                     "d"}]}], "}"}]}], "]"}], "]"}], ",", 
                  "\"\<Zettanewtons\>\""}], "]"}]}]}], "}"}]}], "]"}], "]"}], 
          "]"}]}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<r\>\"", "]"}], "->", "d"}]}], 
       "}"}]}], "]"}], "]"}], ",", "\"\<SIBase\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.875022649991636*^9, 3.875022654428713*^9}},
 CellLabel->"In[155]:=",
 CellID->430263126,ExpressionUUID->"9abfccee-15e5-41c8-aad6-7300a672f82e"],

Cell[BoxData[
 TemplateBox[{"0.005898405209111114`", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875022654814524*^9},
 CellLabel->"Out[155]=",
 CellID->7023579,ExpressionUUID->"6a8c9e7a-4424-4f2d-8181-2e247b9d49bf"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #6", "Section",
 CellChangeTimes->{{3.8750119196110086`*^9, 3.875011921395045*^9}, 
   3.875012469238413*^9, 3.8750126767142334`*^9},
 CellID->532121604,ExpressionUUID->"72709557-6977-45c0-b9f6-f2034000576b"],

Cell["I will work through problem 6.", "Text",
 CellChangeTimes->{{3.87501268050591*^9, 3.875012685194001*^9}},
 CellID->11144587,ExpressionUUID->"dcb17b45-64a6-4d5b-88ae-1a2f978e6ed1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Ej8Br5lqtu1pHn7mieaC5tl87WjJXF8hukN4qIRma2nr7J8ErwE6icwkWa1b
vUZ/v83tcHHjiHEQG8QsCFOl3JZoq02aBts2b966aeMGTTVVFe09p90/Sk5R
Ycz+/FleQlzASMl4NYGnt6zb56fY803mMFVL3q9/Ze5ZVVjat1f1d/p8mr9w
cVclFy8RlX9VzkuWekZ+0QznV2NioLX2U23HkNgkoImRoYk57+cZ66yr/TK0
eIORNDvQUlvTNjwTXPmsoW9c2DOMtFdXVNV3/z1fX3xWV31d69A8e2JXBIcV
yFUFCDeM9PWNy9ze19+PE/Wwu14cAt5QY+HbxMjIlxnFLQPy63A5ZZjTLnug
uabmy6B0Vw1reFi4r20YnobK+h6WvGbLg+WrbfumsFHMN4Plht3fUlMFCyZ5
1DB7ZGicj2psEGto+LvwLTPtNRWfGrvG5F6zwlE0NPVOLP6a6vQSpniFdYhn
EgpOPcSG3UtNy+Ayvb9YtuWJ/ubauk4WF1bl1/r61u7+0clZYbmlQYHybgAW
uorZyCBg9w/I6SoWAK+vlrqmv8aXZBnzgWCrrm/plbNRZLXg+VtUlnFE+DIo
NlJxo4sJTwJ4UDWf6tokq4/PHvk2p0/F1uYPc4YoHckb6X68cfLH+vplUq6J
/n68BEzc5iKj0my/7P6mmvquUS7cVEddfVtXP4vNm3vA3DiI3yKymSGplN8a
e/HIpeiOWY8HjfeUBFlv2XH5tcxGBtTZ/1Vj6xwE/N7ywuYFXXGaC0v/Wqx9
4SSii4uY/2sZDoDfGkl/o/jNwgAA4F+FgP81iv4S7aQ0AAAArAQCqJdpYfDg
7fwskF3ssnsv1h48AACAC284l07P/Qc8egkAAPxMoP4c3+C8X//OLAAA8D8G
7zPTwsw6+otMHSDgdiffMDnpVQnOEAMAS4BX/yqmfOmvvgMAAP/TCHhNqTFF
o8BVAACAn8BE4xvvBw4PPclUP19fH7L7g5uOPkl1cu2GAgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAWy9TXgoTwkABfanTh4DI8+wqCfsoDtHgj1XGUZxRfEomWLefb
7gScjo/xESH+Pn7hRf/kR5ZyvxQkwMOgUcLKlmMCkYCGquOpbmQ/kntQTvey
vqsSn8mOfKF9+lBji37aa6ME3K/58RGh/r6+YQXfhEIg61xe21/WNTLRnh1K
9iBTfX08XJ6Q46oGwJtsAAAAAAAAyAW3qzw1/N6BtSqWPs1LTPC+9768ZLBm
l21C349N1yBWgfMuo7tpfw2+tNZW2vysQK4XRQu4XSWpLxz2qusepHf+4NR2
OeF1lqeF3T2gpXwgpGVFhvEt//FewyuZfaNx1hoam+6WKfwa7iUx1VWa8sLR
VE3lNK3tZ82SgNddlhbhtF9DZ79Pu1CIhTqHvibablyzyTGxB9v2l3eNcFqi
HrulfJW83X6i9Nle7d9vZIP3cQMAAAAAAJAPAbfabYfqMlQBfa/sNhFNribJ
pCG8CurTlKElCogN1Bd7Tt/wURV3mjdYnhCa2jyOfNxUtbdXzODc77iFLob/
8CpACLvKYzdhZaoAaDjqT6LZoxLuNNRfnhCRVj+BrMnlQcCr8XkSOzLvS27Z
w60/swoQwS1337VOUgUImatzqCv58mbNrfeT/8KpAhDWyOJFKnm6Q3Pd2fgO
iUzjhc5bVhPsIgaW3jQAAAAAAIB/AwJerftOwtKrACSG4y5dSlrZKoBXQzbV
PxzYi5dW9SXY3oqYXwUUPTb+H6gCpmpIK1QFCHgNJFO188wuWe0iaXJ5gIYT
L1+MWFAFlD8yJPzsKoBX6blbtgpYOZ3LDdST6Xbh7JO8mYqClXFdb7WmQzLr
54kEAAAAAADgn8TKVQHczjBL7VMvV7gKqCbv1T8ajL3FQsDvCj6hYxcOqgDF
EFYBe9Wsgrql2kXR5LLAb3thueUkqAIWg4DTQDusufVEcMvUzxYFAAAAAADA
D0TA7/wQGx0Xl5AYGxMdmdnKhr/jdxYmxMTGx8dEvSrqFh4z+fV9GI3mz6ST
nnlHlgzN3EeIUAVAI1WpwXRfRgDNl85MXHDLITT8+XUghUT2olDJtMTi3u9C
Ab5mBXt7PXVx9csS3jEJDVYm+9rtXKuivP2mX0hocEh4UsU3iN/+MQ4WKTEu
LjYyMqdRKOX37qLE6NiE2JjYhGL0G3uhoZrUYD8/fwad5st8VS4RSMBpyXge
9OzsRqLRJb+gkOcvMtsQdq1DfVWvfOx2EX9T2X+ZBksSGppUNSTOaiVVQMdU
f3FiSHAAlUyOKO6a0wSa0lDEHK15HehN8qKQKd5+MeW9XOlfeCM1KUE0Gp3B
8PUNTiyXtsNueB1AJbk9fMDI6OKL1Pgu2MfLzcXFLaGNJ2ywPJFB8Xjicj+4
gtVbFEvzcntGpkXlNozKFj0LM9KJr3nhfn5MJp3s5hVfgn3LKKerKC6QxmAy
vCmUqMqB2UbYzZnPA93PbFAxuUQNCQ6JzGzsRNUkoqKg4cpEOtn96QO3lAZO
b0lsAMUrILmBjSQEb6Aqydd+95pVxB32DLjl4NDUCknTM1VA62RfSWJIEJPq
6Rue3ztnlibbc8Ppvv5MmpcHKbIC7w5Z3mhdGpNKJpGpZIp/THGfdJawzB6r
CuB25IR4k9weOQdmS4vRiabMsMCQ8MiwsPCIl/EMakoLb/4amekV2banGlMZ
VNKTh65BReOcnsL44EB/BPuUaqCUZH7ANvbLJPbQAQAAAAAA/M8BjbSUvPU+
Y6CqvO/Z65oBYWIDDdXFXzXSOeIUnt/C4rFKPMw3X6DXTIj+knln14FbGaIH
nsyvAgRTTc+tD1wJrBbvr/+7OcbuwMnQSulue15L/OUdW60SG0QtTVR6HTJx
eTcK56stpenuRzUld1BCI22fKvL9TmoqH/TOKa8oL6+s65mE08LW0nTa+Y2r
VQ7fT6kTpV+8kfqoK0Yb9jvF5LaOIZ/P53wOsz58LrB+TCQeuyXC9sBFeuWE
MGcebK4ojXcw1jJyTC0tr6ho/YZQR0DDbZ/Ki+iW6ion3HNgSSoq6vskmaiw
CtDe70QnMz50wskVt97/iL7hw/KZPBVDaQsR8L7E2BmaWEW0CI+eZlV4H93j
kDcq/G92Y4T1gfPhNaIBTLPro+3/sKTXijTKHWgsfP3koJryUc/PPPE8lmZS
T+lpGDgWCdO9ye7PBYn3TdcoG5128Egq72ZD3P5S/1Mbf7cNqpam03OrAGi4
yOvQ7xahog54Q+/v7DR2yUB7fhDUl+545kaKqP6C+vMemm48GfFZkmd+H2yp
KE26ZUTY75hUVl7+qWVgEEWTaIqa6K3Li7+zW0X/uhfd72XDhyfb1QmnkocR
5OCPtFVVFPtYrtUxe5YHt1xe0dgjGZ+4CjjsRPNmZHVz4I+ttMNEM+dCScIL
sT6SzHceozeMi4aQc3evkcN79MclcdoT7Qy3XYusF7U+UUw5fOhWJksOs8eo
AvijbSXppKOa0lvsoa/x9raUz+Kz8oKpZsaJfeRS7vw1IhIH1bZ5gw2FqS7m
a9cd94jyDfjQhWCfUr73x18+QWkAVwEAAAAAAPi3MlXtuVt505PcCfFHAb81
4AFDeEp5eiLvvqHObs+GmdOe3DaGuapJQJ3wb3OrAG4led/6g7QOmQsDX1+c
0DN0Lp8Q/zDEgki0jegS/51d/sRYSfkoqU70iVfhMecOyrE0Ox2Vk/N2BAl4
jeR9hN23sqW5dq2/c0QL6vlbdg11/9qDoa2zAn3vCTuuYeRZKB6mcEeQ7l5K
K+YJYGjyjY0GwRZpR5C66sGgOolephqo+wjG3hXij1hKWwC/KchCh3gqUaIY
brGrsZqSiX8dT8CtJZlqnPabHYAA6g0+TjR7UCDWgIBb8mALQVIFiJuimWtK
qgAh45k3DZT3yvQL9cRbrVMxJhdLVCibkUIThfe2EY54Vn+XaW2dCbkZWT+c
906bVJX2BTaKLAHqC7IgbL/5Tnp2XLQjSPU4uWG2bwRNYikKmnp3VUfN8HxE
L396sjP/1Zsa9OeyTibbEvUtEXcEKeuZeTdJ2ufVkk21jZ7UiD6yCpyNCXsY
NZK/CfjtPgfVjnnVIXYA/zXAgrjppFAYUcsVLoartfd4NfFwzB53R5CAV/Ns
h3QRsZMuGVyOnN2kNpjwmFYmlnDOGsGzbW6hi9Ea4tGwekT7nBW1L/6eZw64
HQAAAAAAgH8vcJJDP6RmaJMiOgM9za6ikaKFO7ohduZVXaWdt7JnszvOB0cD
OJcTPk5EtgoQTH24vV7J5M4H2TyD/cljl5KWYyqcZvCqvPaqKx+LnU1wxr5U
1w9ITkLOz5QQqwBYnI4XljqaVq9FJ2wFnAqaezJ6ZsjJctxI3OBUIrMPQsCt
erpdaatNirjTJVYBWoYuVdL0td3fXGXD04/C8WArbR4CXr2nifK6Y6HSZ78I
xjpqRVc7xnOdflfaKG5T2m/Zs51rNW3fscTDEZ7rlq0CmukLqgCVo9EyD6GE
Jt5e1l71/7d3529NXG0Dx/8UZXMruIK12rqgrVWrWKvFBS2igAjiiiiKG+5C
UATKoiKbiktRVkERN0RBWVwQUbSgLBEeCIVAYjLhBQIaIIFg1ffp0+/nyg9m
MpNzMozXdd9z7nNmwqpE9VvNiFSSvM7c0HxX2ofm6q97jDWxuaDj9nhTxf3k
pFz1+Vc0vY1aNth8cXTth9/VexbQ84lqyQLWDDdaICrQYyH7HrIA41k7773P
a1rPz2j1JSFNWDNyyCi32x9+ruzqpq8tFkVq/7GPRNOMjB1OfFjJR/Iq72mF
rLfLvlmPLEAzlVY88J42eOC3SzaKouIyisQypVRS1/7X1PyeXq/tnq5PDfJM
nwNXG3SdVQAA8G8gvD69dMQQm3OtEWPjde99V9riOfmfwXMMDb5dsOtYa8W1
+hV89JDPhdbSg04BjLw09BdDw9le2e80vlRe5D/T0GjewUct33nBcfDAr1Ze
0V5+rGcW0CzUxDkNH7Qs+GXLjjVXfALSdSzu2ZrXvA78xch0oleeXHPjc9+Z
RkN/OKRu9G9mAcOnHirsOLYtyhq9O72p15PW7fvjHQb1H+cU160oQ1kcPHeg
wSTfTvdvlU/8Zg0ynBrYFvh/RBbQFpwbDZtxWP1WIyJVPg/6ZaCB+VKv0I4+
Hz8e7CfyPv1QZ5Qoe3Ur4qDHxm1eB/2Dj2+2GmhuE1XTqaFesoCeT1RbFmCy
MlKfKeI9ZAHaz49KWRIwx2jQqAX7Qt433fJzvY+cydHagOTiCtP+Zpviu5bU
9HbZN/cxC2jJpl/8sWPRJDNjo379jYxGLfD442W3LECPa7un61OD7Pph37tf
9jkOAADgv40gSV41asBiv2fy2qRDh26oo3VF1eklJgY/etySaztEM4B5J45a
ZGz4k+cdzT2bnvjOMDKy8XveEm8krR850GR5ovawvacsQJp//d6HRdIbr3mM
GzZl/2PZ23MHAh5r7Vb773kbtsjEdNy2+5r3S1uXrzQaPvOoutG+ZgGqpoc3
ble2daWnKKvnk9b1+5uurB3Rb/Syc91ibeFNhM1gw+8O3tGM0lpXNx1kOEtd
CtI9yi3sNQuQP/CaaDBy3jH1W42IVKiIXjLYYKyej05r+e67R+ZZWCw99Vj9
F238w2mI/lmA+kzKezxR6izA5VSttg+70MwCZPnpt9XTg3vKkoSqiCUmQ8bo
+yyz+tQN5v0Hrjv3V5ftvV32zX3MApQVr0paMw1FXcnD6zGild8PGfybf2HX
7+n92tYzCxCqiov/yc+/BgAAn4Tshuf4oZO8kqP3Hst9Xyz9MnDeQHPrMM1n
FSmq7t683xoOdaoIUj4/Mtvkm2VnNYuMJZfXmRtaHnkgbw0yLziMMJzok6UR
LglVWbfy1V/ZNQtIXDXCeNH5tlqUqnOicI1ViJoeev9o/M3WqBDfkz2vAKl8
4j/7q8HLEzSiSEGaunqE0c97Hqgb1S8LSF5pauIU3noCBMmFI4GF6kkQPURZ
PZ+0bg1UxTgMNdMo3mjbOetOfoO8KHC2yZB15zTvcLfWsQy13Puwbee2IhDj
eR+iXHnm7klfdc8CPqzW2SwvPTbPxGTh4QL1207r1RSHzhswwCFM8/FVgjgz
PV9b4tZahT7A+LeA93+C+pjlrWMB1fL86PDWkFhbFtD1TCp6PFF9ygIuuZia
L4xom38tOecT+KK9er+HsRLls+BfTU3mx2guFCtUZV57oLUBRdUf9mZGGsVF
bSfn3q3Hf/V82Tf3MQuQnHJ1Sf7wi1unGIx3iO32Pb1e23pmAS2HkQMAAIDm
pse+042HTrYL1pjq2Fx798AM0x+PZL+/V11/69DGqGfqipTc3ZYmCzsqt6tv
7/pxhHVE0fsM4nXEUvPp65Lab8y2Lks+dLJT7PuQr+6B344gdTgqz9o7ecR0
3xcdQUtT6/NV1XUvirzfRSka0Y5KWRL066Ch5ivje3uKqiDJ2P7DSPvgZ+/L
wotP2Y39dl1a+4EtYdXU4Tpnv3Y0p8jbO9lEHWk3PQoKiFXH5PJb28cPm7L/
yfsoq8h/lvFor2tNvZ607hoe/z5v6Gj3D0+PlWYd8YhonXUrub5z6rfWwcXv
q7tLTy8d9d22pPYfoBIqTiwc/P5GtNBw1/vnkUNGrntf/d2SBZgbjl5/rqS9
4dZFeCaNstx2p2O5UGnO/u9N2mf4tux+e990ix/35XX0Wqi/6+0W+kJbr+VF
AbMMje2PtScYirep26YPHzX/pLjxlp8oXa4Obr83sfb+MDNZ65ns4UQJTZdX
mRk7R+lTEaTI3v/98B9ag16V4kmw6KI6JlfPnv5lf+77LKDAb5aZxUZ1liTU
39sz3fTXvVnvq3xq7/hsCynU0YQsL3CeucXK5I6sQSXN9dsU3JJC9nzZq6/t
4dM/JJudz3nHfyJf9XtJpO0I+9D3k36FsqhlNgfz33/P+/8jvV3bvVyfag33
vH8aOmyBd5ZmORMAAPgXUilLg+ePcoks7xxeK8tvHXWyXrIt4Gxi/JnA3dsC
k0tbgou6zJCNK3+daGZqMWn+mk3hbcU5itfpvs5LVnj5RZ2PPrrdcbHznoQS
jaIFRU32786z5zrsj4xNuHBCtMfn0p+yZkF6N8jN+dfxQ4cNs1zieujqa/WK
ieKkrTN+/M3nbIz/weCMzvfQhfLzjrM3pOgzqVFecUPktMRl29FT56L9tq2w
XbbnyqvWDqmaskPdnK0nDB1mNmHBirWewXd0L5culKVumzVxyZGYs/67g7Ik
LdFj5u8bnH751myY2cRFK90i7tU9iPRwmW858iuzibMdNh2+Ui3oPGm6mqjK
CnWZbeWyL/xSy4nx2Xn00nN1TKlSVFz1XWnnuD0wquUHbHeyWe6T+Eqz+KT6
ju+C6baHL6RdS4z2Pxh66ajNoP6mP8x3CbzaOo7SNhZg5el34EDAqcSkc0fW
Wc9d5nOrTN0R6e1gN+d5E4Z/Nbxl/x3hrfXwKqX4ut+KRUs8gmMSWnq9z9P3
mq5eC9U3fH+bPNHm0OmUq/GR/r5nsu4FL/jme6fNO6Pv1TVkHd+40rrl2hg1
fp7Lmo3hmQ1az2QbrSdKeJPqu85+1lhT0zHfL16zfkdsb1OEFeIrW6dPdGy5
Xo7uCcto/erajCC3Fb9MaOnDBOvVbqEP6vIjPFwWTBo+zGzcPIf1v19tDZff
iW8fcbRevjnwfEL86cA9u3yTy3poR6jJDHb5ZZaDd/jF1st3p+hy+0MmdF72
Hde2Wcu1vdhl85nc2i7nXPM/0YZDieXKuij7SQ6e3kdCYpLTrl4K279hQ0CO
RND6f0TXta3f9dl2BeQEWH8zdnlALlkAAABoEpdVay9nFxrERQ/zX1T3vrR4
654FhWUNOup1lI1vi/LzX4h7fUyRUlL65PHzqm7dEcpjDx6734c5jUqpuOhx
YXn9xz+tVdHSlYcv/tPneZT6n7TWnaXi5w/zi952PzGCtLLoSVGZ9h+gklW/
fJST+/h1vdAsF7949LS47G2drC3S65gXoHwnef30UdFbqX7lH63N5T96/rbX
eQ2qlhObn/P4RfvfSCmt+U9vJ1nHmezTidJBWVfy+OHLqj7/kVouj2f5+S/f
6neg0Njymx8VibvX1vR82etHkFRVt8Tk72qK8+/nPC2t63V9pL9/bQMAAPw3
qy++nphW1PbAr+ITe4+9JOrRQ/fZwQAAAMA/h+zqpjGDzVzTG4WKy4cCUnU9
hhed1F5aOdyo07OlAAAAgH+Qv/JPbnbb63/k0JGo7DpygF4J4tQjG1ctXbho
/vyljuv3ndH+3GIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD8DY1PkxMf1vfxIEGcEXe9XPFZOgQAAADgc5IXRLnv
PPP8nbbPVPK8Q3MWRRQptR4puX90/ZaECuGzdg8AAADAJya5d9BxQ3y1jkhe
muU1ydBogc8THbf8FQVhK9ceK+zTgID0RZJoq8f2LW6uyxYssHUPz6hgPAEA
AAD4YlTyp4fn2556pf1Wf3Oz7NbOH4cNNBg21VtXoK+S5x+0to99resbunpX
Fr9tlV9ubVvWIVTf2DdrqMmE7UlixhMAAACAL6Mqcc0s50t1Oj5VNd3ZvUr0
u/NIE8PvA/J13bBXFh9faO2VJderQXn2gXn23jfLZO3vhfqr6ywMhlrue6Tf
8QAAAAD+FqHqjP1Y94sSXZ/X39y1OfRVdfI6i/5Gc/Y+0DpxoIW8JHT+t+4Z
jfo02XDWYZBR/6Fbkpo6+lAZOt/YxGjhOUYDAAAAgM9PaEh2Nbc+/UZX+N14
dfuaM6VKoeHqOnMD04m783XcrlfJc7wmW4qy9bmbL1Tc/n27Z2h2VXujKmWJ
/89GAwYtT2jLRVRNr9Kigvz9IrIq1SVGQtX9aL/g9Ap9C44AAAAA9ESac2Da
2E2ZMu2fCtJrO1afLG+N1qWpG0cPMJzoo7Pqp+7UUtPlIaUfcTdfXnJi/gCD
8fZnW9MC4W2Sz4HU0sZHvjMnuyZJWz+XXWltem5kKWkAAAAA8AnUxTuPmS56
rqPevzZ165aI9nGCuutbxhoY/bTtjo40QHbF/ZuZnro+7akL17ZONB3tGF/S
GuQ3PQnyjmxJJapjHMy+WxnX0LaHovIPh68XX3hLvRAAAADwCZRHLR49N7RM
e3xdn7jJ5dSLur/qWl91VVc2fG3w1dit2doHDuSZXpYTXZP7mAUIFVc9po79
LfqROt5vrs1Oy64WFOIztl8N23ixRr1RJbw57rYvj7nDAAAAwCcglEUssvgl
+I22WhtBkrRpvv02z2072l+ea3+xMDEYt/dmk5a9W7OASRNcEvoUqv/16Niy
2a4Xi7rkFUJpxOLhw52vdExZVjXdOnwwVa+ZxwAAAAB6U3PB3mKaT5G2iqCq
eI+df1RpjhJI7+2aaGgwdWO6tjRAluo2eqp7uv5ZgKzk4mbH3Tc6Jv3WPskp
bg/0a04v+2qcY+xfHXs2ZPoFpOhcxQgAAABAnzTc2T7lO09tRT61f7hvSqnt
tEklf7BrosEQC7fb0u77S887mtoceabnDF5F1Q2Ru++9D0mGLP3QQfUgQ+ty
Q5MGLPF/3v5VQlW8KDCvI/FQSB5G7dkhCj55KsJ316HLzBUAAAAA+kqoPrt0
6JLY6q7b658E2Mzz7TZrWH5n18QB/S22Xe56Z16lKPSZMWZnmtZioa5UDXlH
Fs1YvnX/wf3tr73bVy+0C1A/vlilLPabPei3gBdt74TK6/6/J1Wog31F1bUt
0346cLM1eaiJXzX+J9FTXc8xAwAAAKCDSvnSf87YXRrRu1Cf4ee0cKqF2dAh
I36Y7xH3ouOWvCQjcIPjvPHDh31lOnLcHCdX91P3P5T/KKpi7CzsE2v0abPx
qsc4k379jTq9DMav0niK2K0D861cjiekXjp52O/UA0n7DX9Zppflt0vP/Kf9
rSAwEAAAAAB8DOXLMJuft9z+mwvwiGOdZqyKr/s0XWqlklYW5j15Lflwr1+l
fOE7a9Cyj3okAQAAAABNippUt5nrrtX2vqcuKuXrE7Zz/B/oePbYJ1MT4zDS
Jeo/HW/rH16Me6hlhgIAAACAXgl/xrisEH38evzVaZ52HmmfcCBAF2nhGXen
reHxKcnnwwJ8vMPTXr/7/I0CAAAA/5sEceKOVUFZHxPIK8SpO11EuV8gB+ho
UFJR8qZKSl0QAAAA8DepZK/i/MJy6/t4mFCZEhSSKSYkBwAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8CzU+
TU58WN+XIwRxRtz1csXn6hAAAACAz0leEOW+88zzd83N78ruJ8fFxV/q/IpL
SE2//7Ja3uUwyf2j67ckVAj/L30GAAAA8PEk9w46boivbgvm31XmXU2KDV41
aUA/Y6sNkYnJKSmXU1KS488Ebp77zdfz3aKfdhovUBSErVx7rJABAQAAAOAf
RCV/eni+7alXSs2NdQkuQ/sNWH9B2mnjgwPTjA0m2p/VvPmvkucftLaPfd3p
cAAAAAD/zaoS18xyvlTXeWNLFjCs38AuWYBKUegzw8jEaE7En5oxv7L4+EJr
r6yu1UIAAAAA/jsJVWfsx7pflHTZrCMLeCZqyQKM50aWdLrzLy8Jnf+te0bj
Z+8sAAAAgL9PaEh2Nbc+/abr/F6tWUBNxq4pRkbT1idVd95dJc/xmmwpytZz
NED2Ii0q2M/vdEalOpdQ1OREi4Jvl1FTBAAAAHwJ0pwD08ZuypR13d6WBQxw
DH5c1OZpfmZc8OZFM603B2W81TITuO7UUtPlIaV6rBUklF8WHUkorX96eJb5
6msNrZvq0zeNMTC2Cyr5+z8HAAAAQK/q4p3HTBc97xbYt2UBJgt3XUxKTGx7
xcdGBe1zc9l44HyBpHuwL7vi/s1Mzzu9DgaoFAVBeyLLhOaKCw6jzJyvqJcb
EipjHMe4RIg/xQ8CAAAA0IvyqMWj54aWdYvrtVYECfVZXlNNRkzxvF3V5QB5
ppflRNfkXrMAoe7+9TtVgiCOtDUdv+L9bATh5Ql3P30LigAAAAD8HUJZxCKL
X4LfdCvJ15oFtOz/KtR6YD/juQdyO48etGQBkya4JOgZx7+riLIZPGJTwvsp
ybJ0n4M3pT0dAgAAAOBTqblgbzHNp0h7RVD3LKC5PnnNyP79v7b/o/OCQLJU
t9FT3dP1zALEZ5ePMF1xuSMJUDXd9fe+XN/jIQAAAAA+lYY726d855mtfXZw
9yxAkec9bUA/k4W+TzrnDdLzjqY2R57pt8qP/O5uy5FWAR3PHBAqE33D3vdA
kOSc2rvrUEh4dKSvp3d6pR4TjgEAAAD0hVB9dunQJbHVXbfXxa1sfXbw+QbN
fauyDs81Mxg1bXdW58cLtD1NbMzOtCb92lQWBsw2nx2gfuaAovpGgG/SW6G9
hZSt0609b9QIzUJ9grPFzOCHWhYkAgAAAPB3qJQv/eeM3aURwEtzIzxcnRZM
NDXuZ2AxdenqNWvXt7xWuzgu+mnyRCuX3ee6rxGkqIqxs7BPrNG3UUX17b3z
rDYEJ6TGnfTzic6rbf/ChuzdU8zsLrWnBM2CwEAAAAAA8DkoX4bZ/Lzl9t9Z
oEcc6zRjVXxd3w6SVhTmFZTUadzrVxb4WVnMDS0n9gcAAAA+M0VNqtvMdddq
P/JwlfL1Cds5/g+6TS3oO/EFh++WRL3viOTxpaQHDT0dAAAAAOAjCX/GuKwQ
5X3ccEB1mqedR1ofBwK0U8meRbk57Toen5p0Psxf5BuaVsYzBAAAAIDPRBAn
7lgVlNXnWF4hTt3pIsr9JDlAh3eSipLSqkbqggAAAIDPTCV7FecXltunVfuF
ypSgkEwx8ToAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAA4F9H1fg8JTGnoU/HCOKMuOvlis/Uo17aLr8WHl/w
/9M2AAAA8D9AJX8euXFT7HN51w+EuqdpUd6bXVe5rNmw1m1fSGpxXcvG2lvH
IvPa9pXcP7p+S0KF8MU7rCwNXrQgolj5pRsGAAAA/kc0ZBxYuiNB3CWWlxbH
b5szbvI8j6iM160hv7Kh9F7UdmePsLCNlmYrrzSq91IUhK1ce6zwC9+UlxcF
Ll58oqyjx9IXSaKtHtu3uLkuW7DA1j08o4JBAgAAAKAH0gL/Jb8dK+18W73x
ebSdxYAZ6xIqOm8X6rL2Th848Kv3WUCzSp5/0No+9vWXvC2vyBf9uiaqfQji
XVn8tlV+ubVt74TqG/tmDTWZsD2pa1IDAAAAoIPkkuvkTXG1mptU8gJfq0Ff
jdlwo1bLATXpHhNMP2QBzc3K4uMLrb2yupUTfS4qed7+n1ckVKnDfHn2gXn2
3jfLZO2fCvVX11kYDLXc9+iLdQgAAAD4R1FUnXcYuzJForlNqLjobN7fyGpX
1jtth6hkd7f96KKRBTTLS0Lnf+ue0aht78+g4a7XglVxdR3vzjoMMuo/dEtS
U/sGoTJ0vrGJ0cJzjAYAAAAA2tQmrZlgfazz9F7JhRVmxv1HbUtt0nFQfYqP
b7bsw3uVPMdrsqUoW8+b77IXaVHBfn6nMyrVVUSKmpxoUfDtMj1rihqvbbXa
kfJXx1uh4vbv2z1Ds9uHBppVyhL/n40GDFqeINH1DQAAAMC/mTxr3w/T3NM1
w3eV4uH+KYbGhlP88/SfYlt3aqnp8pBSPW6+C+WXRUcSSuufHp5lvvpa28qk
9embxhgY2wWV6NOS0HB1o5XHHd3jDvKSE/MHGIy3P1vFUAAAAACgRWPsymEL
RZ2W3VfJ7m4d29/YcObxIv0n/MquuH8z0/NOr4MBKkVB0J7IMqG54oLDKDPn
K/VtW4XKGMcxLhFifVqqTlhrsyNTd0N117ZONB3tGF/CIqIAAACAVtXhNkOW
db6Hr1IWiX4yMjacqHeFTwt5ppflRNfkXg8Q6u5fv1MlCOJIW9PxKy521OwI
L0+4++nVXM3ZlXOO5ujaU6i46jF17G/Rj/r29DMAAADgX0R4G7ZwsF1Ql/vm
shtbx5n0M1t/oUbHYfLciHDNeQFtWcCkCS4JeqYN7yqibAaP2PShcF+W7nPw
prT3AxXimBVzfYp0VCr99ejYstmuF4tk2j8GAAAA0Kohxt50vvfjLmF1w4MD
Pxj1n7gqsV7rQYL41D7/Z52OkaW6jZ7aeX5BD8Rnl48wXXG5IwlQNd31976s
va3ODf8Zbrv8qPZCJVnJxc2Ou290PN6g9klO8ZdaswgAAAD4R5Hd9Jwwc2tG
1+hdqEpyGz944M9h2p4JLCsK2x9c0PkD6XlHU5sjz/SrxZff3W050irgz/a9
hcpE37D3QwuCJOfU3l2HQsKjI309vdMrPxQrqZQlQYtsorUV/Cuqbojcfe99
mA8sSz908KauJY4AAACAf7eKM3bfLonuXvqjkj4KsR1j/v3mKyWdS3/Et496
BuZ1vnGvUhT6zBizM03PsFtZGDDbfHaAOpxXVN8I8E16q47fhaqUrdOtPW/U
CM1CfYKzxczghx+yDXlRwGLb8IpuK/+oGvKOLJqxfOv+g/vbX3u3r15oF/CK
+cEAAACANvLi3+eNdbutLX5XyV9fPery0zeTlm07nnQrO+t6fLTftg0bA7Pe
dg3EFVUxdhb2ibqmEXSjqL69d57VhuCE1LiTfj7RebXtX9iQvXuKmd2lju8X
BM2GFHk+v6470/1JYI1XPcaZ9Otv1OllMH5VEkMBAAAAgFYq5Ztji6YcyNA5
o1Yle/soPS4mIizyTFxmUa3WibniWKcZq+LrtH2km7SiMK+gpE7jC5UFflYW
c0PLta3zr5Ln7pvjnKx3ogEAAABAN0GcstF6bdJHP2hXpXx9wnaO/4NPsDKP
+ILDd0uiajveSh5fSnrQvuZnQ+auhWuT9JhBDAAAAKB3KqHstMuS4PyPDOOr
0zztPNL6OBCgoyeyZ1FuTruOx6cmnQ/zF/mGppW1z1tuvLpltlcaTwEAAAAA
PhmFOHWnqyi376F864EuH3NgD95JKkpKqxo16oKE+lS32Z7ZFPoDAAAAn5T0
VULgyXt9u9suVKYEhWR2n7D7qTU9Dtl2NOfd524GAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD9qBqfpyTm
NPT1MEGcEXe9XPE5etR72+XXwuML/n/aBgAAAP7pVPLnkRs3xT6Xt/z73Zvs
pLi4+EudX3FJ1zLyXkuU3Y+V3D+6fktChfDF+6wsDV60IKJYS5cAAAAA9KYh
48DSHQlidSD/riI3NfGPQOeJA/oZTVt1LCE5JeVySuL5E6LtrtaTLW23xjyV
dIn4FQVhK9ceK/zCN+XlRYGLF58o6+hLfVFiwN4Dh4/4eu92c7RdF5zyounL
9gcAAAD4B5EW+C/57Vhp53vqkosrTPuZrIx4qxnxC3X5gYvNv5657151p0RA
Jc8/aG0f+/pL3pZX5It+XRPVPgShqLq8ebHnzfY8Rvkq2na40dfuseVffIAC
AAAA+EeQXHKdvCmutsvWuktO6iygy3ZFVaLLKKPvV8VVdYqwlcXHF1p7Zck/
b1c/UMnz9v+8IqGjE/VJq0f0N5iyIU3dAfmfQXMM+422jan7Uv0BAAAA/kEU
Vecdxq5MkXTdrisLaAmxb20fP9BwakBep5BfXhI6/1v3jMbP2FVNDXe9FqyK
ex/kK8TpojVrA9Mq1VlBU97BH4z6W65LoSgIAAAA6K42ac0E62Pd5/bqzgKa
a2NXmPUz/mV/ruZEAJU8x2uypShbz9EA2Yu0qGA/v9MZleoqIkVNTrQo+HaZ
njVFjde2Wu1I+UvHp8rHflZDBs4IzJHp920AAADAv4o8a98P09zTu8fuPWQB
DXd2jDfob74kuvMAQt2ppabLQ0r1KMUXyi+LjiSU1j89PMt89bW2xUnr0zeN
MTC2CyrRp9NCw9WNVh53tIw7KBqq/syO9Vo4bfHRtEoWDwIAAAC0aYxdOWyh
SMua+z1kAdL7ey0N+w3/+ffOs4FlV9y/mel5p9fBAJWiIGhPZJnQXHHBYZSZ
85X6tq1CZYzjGJcIsT6drk5Ya7Mjs3tD0qeJIQGH97k7OThtj7he+sUmKQAA
AAD/KNXhNkOWabuB30MWUH/bc5xB/9G2MZ0rcuSZXpYTXZN7jb2FuvvX71QJ
gjjS1nT8iosdAwrCyxPufnoVFNWcXTnnaE4Pewpl8a7fGJk7hxe+0+PrAAAA
gH8X4W3YwsF2QSXdi2d6yAKqYpYN6We88HBh56NasoBJE1wS9LwD/64iymbw
iE0J76uKZOk+B29Kez9QIY5ZMdenqMeHE6iabmwc3X+gmUNSNWuFAgAAAF00
xNibzvd+3JeKoPrEdeYDB/166lWX1EGW6jZ6qrYpBlqJzy4fYbrickcSoGq6
6+99ub7344Q/w22XHy3q3Lb0Qbibk7PPzfYlgppVyue+PxkaGXx74A4ThAEA
AIAuZDc9J8zcmqH/7GBpwe+/DBmy4NCDbnNzpecdTW2OPNNvTq787m7LkVYB
f7bvLVQm+oZld0TsgiTn1N5dh0LCoyN9Pb3TKz/cz1cpS4IW2UR3HrtQKZ4c
/NHIqP+o7alNHVvy9002NDa0OvGcKcIAAABAVxVn7L5dEl3TbXttrMOQfiZO
4WKNkhp5+d1j9uOH/7Ip4U23wQOVotBnxpidaXqu0K8sDJhtPjtAHc4rqm8E
+Ca1P6VYqErZOt3a80aN0CzUJzhbzAx++KExeVHAYtvwbuuaStO3/miz65q4
I+Rvenp0lonBeLsz5SQBAAAAQDfy4t/njXW7rRG8Sx+EubuuWDDxK+N+BqMm
L3Fds3b9mrWrnext58+eu3hjSGqx1kBfURVjZ2Gf2D2d0EFRfXvvPKsNwQmp
cSf9fKLzatsj+4bs3VPM7C61pwTNgqAZ8SvyfH5dd0bcvdZfkOQe3+i8ze/8
zdyChxmnN/9kPuW3I/eZFAAAAABoo1K+ObZoyoGMv1s/L451mrEqvq73HTVJ
KwrzCkrqNAYWlAV+VhZzQ8u1xe8qee6+Oc7JOhMNxdtndy6fjzp19vK9p29Z
JhQAAADQTRCnbLRemyTpfU+dVMrXJ2zn+D/4BFNxxRccvlsSVdvxVvL4UtKD
BvW/GzJ3LVybpMcMYgAAAAC9UAllp12WBOd/fAxfneZp55HWx4EAHZ2RPYty
c9p1PD416XyYv8g3NK2s/bZ+49Uts73SGj5FIwAAAACaFeLUna6i3I+K41uP
dfnIY3V5J6koKa1q1KgLEupT3WZ7Zus5+RgAAACAHqSvEgJP3uvzrXahMiUo
JFPLhN1PrOlxyLajOTwLGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwX6W+6HLKg7/6cIAgzoi7Xq74bB3q
se3ya+HxBf8/bQMAAAD/GxqLoj3cT7+St/xTUfbw5vX06zpf128XigX1UZL7
R9dvSagQvnRvVcrS4EULIoqVX7phAAAA4H+F0JC1/ze3K+2xvbz41vnTYfsX
f21gZDDOWRR17uy58y2vM6ciQny3r5hhbmTieLIjDWhWFIStXHus8AvflJcX
BS5efKJMS/Yhy/efN9vjpvzL9gcAAAD4p5E/9Fvocvxl5xvr9aeXmpgYzY+p
7BJqywqOL1m898G7jvcqef5Ba/vY11/ytrwiX/TrmigtQxCNT4PmfmU4ddMN
sgAAAACgB4IkabWlc6qky+b603ZtWYC4a6wt1Cd5bklo+rBBWXx8obVX1hcL
vFXyvP0/r0io6toxleJ5xO7NDpYmZAEAAABAj4SKc/Y/OF3sNiu4axagqM3J
zG1NFVTKl6F7jmne+5eXhM7/1j2j8Qv1uOGu14JVcXVdNysKo/dH5jw48L0R
WQAAAADQo4Y4VwuHY6+7Vdd0zQKkOaLdJ9+o3zTU1mqG2Sp5jtdkS1G2nqG3
7EVaVLCf3+mMSnUmoajJiRYF3y7Ts6ao8dpWqx0pXbMWefEZn5DcRvkjsgAA
AACgZyp57p4pY/dcb+r2SWsWYGw4y/daTm5OTtbNSyLb7xyPv9GxGlDdqaWm
y0NK9VgrSCi/LDqSUFr/9PAs89XXGtpaSt80xsDYLqhEnw4LDVc3Wnnc6Tzu
oFL+eWZ/0ENps0pBFgAAAAD0QmhMXDl0RsjT7mv8qLOASWv9jp84Fhrku8Nu
0lAHnVmA7Ir7NzM97/Qae6sUBUF7IsuE5ooLDqPMnK/UqztRGeM4xiVCrE+H
qxPW2uzI7NyQsvjs/pP3pW3fTxYAAAAA9EKoPmUzeF60lrv4XSuC6m/v8gx7
nwUoFZ3qd+SZXpYTXZN7jb2FuvvX71QJgjjS1nT8iosdM5KFlyfc/fQqKKo5
u3LO0ZxOe8pLL/gE3JW2/ZssAAAAAOiV4m30okFzI0u71+R3mx1cmXox7T/t
8wIyvA8nNmjs3JIFTJrgkqBn7P2uIspm8IhNCe+XJZKl+xy8KdWjt+KYFXN9
ijQGLlTKN+cP+N+v73hLFgAAAAD0RmiItf9qWtAT7RVBWlcKbW5WPg/ddqJT
EZEs1W30VPd0PWNv8dnlI0xXXO5IAlRNd/29L9f3eIi6s3+G2y4/WqSZschf
n/ewc16/Zq36tc51yZQhBsMmLV67Zr3PxWL9ugMAAAD8u6hkd7d+N/5Ahqzb
JzqzAJWyNGT5+iudbt1Lzzua2hx5pt8qP/K7uy1HWgX82b63UJnoG5bd0QFB
knNq765DIeHRkb6e3ukazyxTKUuCFtlEl/TUiNB0Ze0IA8YCAAAAgB5VRy8d
5hJd1W17XZRtSxZgfabLs4OVNfd+Xzx+uqhTWY6i0GfGmJ1p3Rca0kpZGDDb
fHaAOpxXVN8I8E16q25EqErZOt3a80aN0CzUJzhbzAx++KEZeVHAYttwLQ8M
1iA0pa4eavC92zWyAAAAAEA35bPAuT9uuKoRNktvB29Y7fjr+EH9jfqb/bjI
ZZ263ma1q7O9zaxxZib9+o9bcUlzKEBRFWNnYZ9Yo2+Tiurbe+dZbQhOSI07
6ecTnVfbHtk3ZO+eYmZ3qT0laBYEzYhfkefz67ozWuqT1FTKNwneG9c7WI0z
Mx0xdrbzuo2BKeX6dggAAAD4l5GXnlw8eWu2njfytRHHOs1YFd/tYb49k1YU
5hWU1GkMKSgL/Kws5oaWawv0VfLcfXOck/VONAAAAAD0RKhJdJvlmfSREbZK
+fqE7Rz/B91nFvSZ+ILDd0uiajveSh5fSnrQvhJRQ+auhWuT9JhBDAAAAEAv
796cc10iKvioQL46zdPOI62PAwHaqWTPotycdh2PT006H+Yv8g1NK2svVGq8
umW2V1pDz4cDAAAA6Auh7PJON9G9vt5sV4hTd7qIcj9JDtDhnaSipLSqUaMu
SKhPdZvt+XdqlgAAAABoI3se73cqqy95gFCZEhSSqXPC7ifT9Dhk29Gcd5+7
GQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAZ/B/JvKC8A==

    "], {{0, 184.4769403824522}, {769.4038245219348, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{769.4038245219348, 184.4769403824522},
  PlotRange->{{0, 769.4038245219348}, {0, 184.4769403824522}}]], "Input",
 CellID->256750185,ExpressionUUID->"31a48622-ce06-4d11-a364-e03ef9cbb923"],

Cell["I have an equation I can solve.", "Text",
 CellChangeTimes->{{3.8750126891702814`*^9, 3.875012693506366*^9}},
 CellID->450800702,ExpressionUUID->"74da9bc7-679c-496a-97d5-5f969845f664"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"m", " ", "v"}], "==", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", "m"}], "+", "m"}], ")"}], 
     SubscriptBox["v", "n"]}]}], ",", 
   SubscriptBox["v", "n"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750126945118504`*^9, 3.875012708570874*^9}},
 CellLabel->"In[34]:=",
 CellID->298245692,ExpressionUUID->"0266af40-15ee-43ed-a783-029ccbe742b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    SubscriptBox["v", "n"], "\[Rule]", 
    FractionBox["v", "4"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.875012709238929*^9},
 CellLabel->"Out[34]=",
 CellID->136267825,ExpressionUUID->"7d5b5674-eafb-4dac-a108-a6548bc48835"]
}, Open  ]],

Cell["I think E is the correct answer.", "Text",
 CellChangeTimes->{{3.875012714299218*^9, 3.875012725274757*^9}},
 CellID->586162579,ExpressionUUID->"898d06c1-2cb9-401f-a49f-0e5c0ef6e267"]
}, Closed]],

Cell[CellGroupData[{

Cell["Problem #7", "Section",
 CellChangeTimes->{{3.8750134612863703`*^9, 3.8750134648080893`*^9}, {
  3.875014511273945*^9, 3.8750145115862675`*^9}},
 CellID->311728381,ExpressionUUID->"c97a9d6d-8425-41f2-a99c-387d20e4599a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7wvUEWVu+nRGmrDAgsYy7W+GC5NeaDzXZtMa0rbHlbOn2DmFDnrKpJOhDSIb
mWikHiDOXiWZA7fCdfoIIact2JhEsgwXzQ2xyp/pyxFOutfDo0aOra7GXrfG
qcI4bb5GCgb+9egJJMRKvaJ97vX0ZO9w3FPXudkHHKq62PpViFJ89ocHmxXk
DgQg097ImcRAY+LO2+/FtYfG066qEC1nLOHh1Qo53q6hqHsxvIc3Of4t/01a
DVaCz+e1+xuTNp9BPon8yKlw0F2rvs/jMxfOH/NtNq5RN6S0Chr6s/elMVHr
SaY4+F6YzNmpN9eral5K6OTx2d/yXqc1DEJ8Tq27oYqZV6s4soR9WpAJ6bBd
AQuz+ZOjeY+2rJU3pTQKl5W+hRirat7Om04NxhMtSdqnZ2wEYhbY6xP3+dZw
xG2nHVE85VGPVVdpEkCyD439or8KZVLusldjp+MngUdj1VAPrjsSMt2syZ/d
oSYqsFsQhSesYgc9eVH2IaqPEVGYfWA1AQtp0kAF1v+9qpvui4dcTgvjmW8z
Mn6PFT7aQTzhVj1lv7xmbyNNA/JnQenIEVRF7ZuIpbC/5L9+VzOIU9uJajeJ
AJLXHGisQTqbIDIyTrGjvqKcgR+itFJMQJbsQ5oQoG/JN7aTjjA+wQ0eKfK8
51c8LGEWkt6A9fqKzrWI6am2/vin3mV4it2XeFVLyTROdCnLSKwFadfNt8Ju
hiMlr0dB4m0AMwWCrtuTwgV3guJZz/qfokKa3A2JRo4VOB5Vmroi21H0CKoX
/ZewTHwnAPVEn1cnmr0R6gTU/+I0ccuFOLEv4nNK7LYRRcM3AqJmqtjZB37/
yu70BG2vcd5N2GfzcSr24DX424UK9BvXS8zIPvANHMe1TsqmBnAHkQ8Q997J
mjJQbq2ffTjutY/spmD3l23oRgINvrm25cqLH+JfcCbYMsYgyNoHwVBom0KQ
CwEUdlJLxhdWT2GIqKRwJLAeVXM4leQDG454f5VYY+p4aaqla18uMKqZ2QfU
EX95o+qfbySmxoeSrTTkJXdezRjrJ6XZArcv5pyygnXU38JHd4edUVG5mCJt
7hrXZpdmvJbqJzGcM5qdyikddcgTDUVQf4gpUf/mW8Gf5+H98KIdDM+GWkN8
00asddd0simtd/BVa3IkBdaNMzLsvJKmhNLcF5YE5g+v71PMs8vH9DUU5P9A
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
2b0SBXJ6cylXzaztvaLgZtlfOX/xeabkXQOTzDzyKaPz7onZH1IjvSgBKTRT
IlFF38yamicYwVGbgNqFUqWBA+dbiImW2aveGX3G5/Xl0K+cNnvIiE2FlcvZ
jvoBUa4fGZTbFoc2qatoG565ZvM4RvJimzm1ZRUw7lqd0F2vorHP+Do9vVNY
1YGyQGujI9bOoUmwtpEdvJIE2w+hwVzqOQwT6BWWo6GisdfY+kko1jkdTCE4
Bb9LIl812a2jrqR6+NGHMUFqEHB2i6qSitaOE9fu+BR9n+ENMrv+jjDXt7Dz
oAXEZmRnJb1wuXPH59PsN7mgwKpwMtwnHvW49TSjgzaSa4HoApmj26N5/neu
Ht2uoaK256SVbWDJcHUkYl3qpPVbjCxveeZhRHe46rr0ZcriBPicr2EXN2ho
b9XdunXbRh0NBYKymv5lietaBouoJobnPV9lf0iL9HYLTPI6o7SGBPeyT9a3
/NmdjqPkRZ/n6/RE8NqCjHXNwme1HtVLTA0ZqrCSnLV+ECNYwJNi4OiuVUY1
mC7le8JlozvvZNioPV5K+5/6mjWEPxR3nqWW9jUzjNWJf6yRJ2489yyjWyQS
9tu7OpJrH7m2WzddiMMvd/TdvT8dswsiyWSfiLTMtFAXqwuXyfmzXaes9ZRt
yOZ2faRamV1xpEckRHo9vnzW6nmq4LrfyZHigHuWJ/VUSTr6xjfvhwpWbKG+
Ij9rU3NHv/j05AhfdzeGu4X2WvmtBy49DqueM9YzZbAFTkuU+WZVnR1bt27f
vGmjqqKCvPo+M5e8XiwnIIt9LcV4je0nI4pbUZ0zjrR1j1g8oGX2tCY9v3Fu
vzZJQ8fQ/KZzRvs8vB9GtCP642yVxhw+8Mav78WB4u6+454muGoYs3dkUi2o
L932gME5eKDydmMU4q4BYCqhECz35ZslursYzai5NQFm2zQPeJXItAV89OOj
I+dpkR63bj70jM0orCjPS2LcMzG6kfhZ+PUFK97vCq+z+HVyyeyjMv8WeOP9
LTU1bX1zT61AY30ttTVtg/jZE8QcHEQ23A22V1dUNnQzZe1nPquvpeZTfduA
6Jpr1tDfozNEyGV2NtS2/T1bZ2WrlVSgcfjxdS19s4oZ62ut/VT7dUD08pGx
oYGx5etXiPWjpaGlZxT1CWjNhz9fUwX/ckL09aGBmd/ljXyrr/0yMFtkPFbf
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
TGazPIykcgnWMLZrFWZ1XjyvVU9JTk5OK28nOPX5kdc8r1x0Cij4qvihkVo8
xpYb7a8zwmie3l40H++AlOKW76SJl3pSUKjxl9pmyqzLA/0txcmhgYHXaKHJ
5c3NZbx/Xz1xNLKkZmwnx/GcO0j2/SdXVdbH/EhfzysXnMPyhLcr5GTs6KM5
loMu81yMGi1y0CdHjSbLQIkyM3SMFK7R0s65k7dGc/sq3TcvP51Y+5PupE0Z
rVn2/5y4J3jKDfH18fl1C81uvB4sZFz2t+qiNBdDzbm73OP9Qp7w6wLrbfAO
naXnyxj8JrG2JMdv3wJ1lbWX06ro/ENOtL1Jslk6a8fZG09rpXY4Ee3PvLbq
GUe94o8sZ7c9PLNimUv2N4Joe1ecd+PcpllK6iaXinmXG9y++vDd2rP1D3rH
pFU297fXV5Q9CzSdrmbill9eVlZe/rZV0I6wu567Gy46GFjVK9h4zpmVG09l
/0sM9La8eZx8ZpWaznGvQP/b1U8uGUyn7E5tZ3+tKUp1NdRW20WLD4jKa+Ql
ua82ZAdV36NopFlKs9vpdE8wgIhoz3Naa2AaVjNShmRHHx31FeVP/c20VDf7
5pfx0vniTbNwaBK3/130oY22YS+FA+r/e59gtdEs6gX/L5Kk8lfXWuCxfYH+
yZjKf1lET2Oen0tY4pXN5qGN/OpMrynKuLRZQ3Wnx2vBuYN/LHx2z5upa/9M
ePSIrgJPwxVGgdU9giOb77BW3+7huIYgsuqCNqtN0zuQLDwbEr0Pr/kW9vcX
nvlLaaaeY5lw1jnxJd4z4oNYtvCjj1kbzgZ6Bz35LF5yhFnZln1654n7Tfxl
2O1PHNf8dTjsNUtYSEgOt0SGd9aWZLnt1Bp+DsD35hTbf2g1g+PBmG9CTY1d
nku2aZyO+sry4mummrM3XX3MW39ZeU3z4AaE5+7tZwN8gx40MXl/1gVsp25y
Hh5iRlKAJTbB7Wt5VXDLbiVF38o7yDuluuiKgQrFOr6Nf1hJaxzJjkvsJg+j
5sahjQdiq4S3shhvb1pvMw18JTFfYwjzdcyh7fvD3gp+zmXU3jiy0SLwRS//
2uDb+/KSZLtl2vr2aSW8Ldb9K61sjzdb+ppeFySeXkWdZ0ULoN2rKXbVV9bZ
HS9l/X0tb8uLg/ZqzTH0KOAfkbLy0uL0q9tmqW6P45d3foEvvHfJcAZlv0d8
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
eShMFNH36JSuEpXXYDLbkj1DJOZXyC85fY1PY9wdzpxz9b4WFuFgOFNN2DMu
XPl4og9eYa6562Kqr6U+TUl1mtpfhmcza8cRfZDFdAoVYBH89k1yE7JrnALR
B6chdLuG8jKfctFLEs5bv03TVVYPF+yRPeI0BW1Tpeq7ivYE85vZjaraqzyF
K1cs+hhntvAvaShmd8h6PMSzS170QZaGwTXIyFjFrlXEqqECWSe9FMlOidxr
FQW2O6HKpeC1ita6Iy6nzTdozbWKrR9VNKRdq4yzeChw5dZ322KGxswjD/oG
5JJ9UpDR+MtrM6XWZXbltc26K93eCtbX/8ZnveaGsDdiWaXwyVF6Vsg9d0j6
BVVVavQh86w6vuhD9rkYNXpy1mhFog/Fa7ScEjsJazSXWejvI3a7AMg8v7ZD
V3ffzTfCviT+Re9Yow+i7+kZPco2t8o++m3vgAryqUNEa/yeGcp6o95lNuo3
Xx96n7E1XaS98/pbsZ+JXpVx+189KfzKakvYQ1FeMzLxWXxFgpbH+ubokYSy
20mip8Jn++xleyPf9Qg3mnF4xvijD0bV4xI6we+/U1PZ4PRMNJ39b33Wq6qa
+dWRJJWZdWKOhvrBTJHhvXKjj3fD7QPRFruHornQofSHvCma33S8816vqkE9
nHLfLyR/uL4x7tvNV1fR98hN8g1+I3HpKqfkdJb77Zg93ybqjXB13WlHZpFE
H8LDTXLPUOyIfP/6sYm/OnZX46uHyT6Wy2fqGAaObmcHiTaSzKpHhcK7SjJb
XUUKsCipjxnpkV3jSHZcdDeJ5lizGSp/ezwTTQb/qbnTVTZF1UkUTeJbtCmF
usi5XPS2G7vac53q7I3+wmUnFn3IyRbBJc2eu/IfPDjB6ENOxip4rSJWDeVn
ndRSJCclkk2E4GuRQyx/uxOqXApeq8wz9KvtY9cnHFxA3RlTI9bKjuVaRU7x
kJ8bvMbw5FwNilhjSIYt86Qgq/GX02ZKf2QQqzbmzAHLow4+UeE+Zw4d8c9p
HHX6U/jkyDeOc4ekX1BVf2z0QXLQ5Z6LUaMnZ40mObGKpVDxGi2nxE7GGk20
f2jAOwYVQexSV/sncPjpfD1JB/lBfTurKj5G2OLJjz54tazCc43WQrv4UPck
mW/CYDWE71BXPxQt+sYZgl78qGqoEDI/3vbwzm/ndD5wXK678kKJSDNI9GUf
oVIsY/gVm+i6fS3oHZvzIWiHho5RtOjbfNhtzwvK/xsYZ/TBH1JLVTW8PrQX
RE/qAcH9FsbLGwnP+hWKPjJt5qiZpgi649pu0WLec7icumuGlL8OJIs26l33
T+ioGFwTzOqQllSiNeXQbNVFV5+O3B0QjIOliEQflZcN1HaMtA+s4kvLhmad
c96H7qRSjJPEnjDRVvzwxXA+sWUdKEn8i1sNJa3VO9yeigT7nbmn5iupLllh
HvlK8spVVskRzFPQmGM48jzejtvmVH5zyqqIvc5roiUPN0l6xY5IW6Lt2dSR
0Pl7c4zJrEP3pd9g6btnTdUxiRV0oXbd8g6qH5xSIesSV24BFielfeOP9ZVZ
40h2XGw3WbVBhhTNE7dEb9vwe5m1Da68knLVxXkbYDhzxsEM0ZMwI/foHNUt
l4XlYYLRh5xs+TXRh9yMHc+1ivysk1KK5KZEsokQ/Eyse0vedidUuRS7Vhl8
+jGXaL1ttWD+JtpbkXo0lmsVOcVDgdzgpeDQHJWR8RWCFbSVPq2STDdX5klB
ZuMvu82Ueq3CfhPofKOew2V2/9vFJLs9ouDJUWpWyD13SMmBn19Vf0D0ocBB
l3cuRo2enDWa5MQqlsIx1GjZJXZy1mgCsYdCOJtU1MwjmgZj9W+5zutmzzO+
Tu976kcTHkHW0/NLZq0Y7IoaEHT7blKb7/pQbIge61PkTg0NA8tkeSFfT+HV
dbprrr4cuoIlep572YUL7073N2adMzv3RPhEiL4qzw2aKyxTmoe2y2W/vLKc
IrzY7n8dEii4yOx87r6euubayAS8nqeep+PeC2ed37fRUhO9VSLEKHbRV1sZ
8HK4uNb7bKSstHsoLK7V/punq+5MaBbuBtF632X9bHWL61//K/AJftzPH11/
ZfnsdbKu0/r5L2AVDoBhvwym5Qham/bCi2vmGMXWDo9ObIrdp7PuRJbwtoDU
pHKZb/22Uv/eG98y1Po2pR9fpCoSfRCtUSYzhm+LEb3PvbbM1Zx7QjhQlOgp
ubyOuvNK6fD4w85n3s5h7/gLsqp8t2jPWXq+ZCxjE/vf0NaqKi07mi3a00j0
5h6bq6QtUjxEyCo5vGz33aQ6d/gdE8S3zAvrdCi7kul9j3xoxUzph1sa/hGZ
s85HWIS+JexdbBQ+PEPzOz3efLMnyShmdpnbytmr+K09l/02lDZ4yhXO5d/m
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
Mx63CwAAAAB/rv8BceqwGA==
    "], {{0, 182.22722159730034`}, {799.4000749906262, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{799.4000749906262, 182.22722159730034`},
  PlotRange->{{0, 799.4000749906262}, {0, 182.22722159730034`}}]], "Input",
 CellID->131925393,ExpressionUUID->"88f8a6df-2995-4df9-b373-1f428c765a58"],

Cell["\<\
Find the formula for rotational kinetic energy by looking up formulas for \
rotation:\
\>", "Text",
 CellChangeTimes->{{3.87501451787031*^9, 3.8750145308827558`*^9}, {
  3.8750145617140484`*^9, 3.8750145693633537`*^9}},
 CellID->22559742,ExpressionUUID->"09adc2f2-a10a-4f60-b41c-f2d92a75a680"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8750145332936*^9, 3.875014554618638*^9}},
 CellLabel->"In[99]:=",
 CellID->64030437,ExpressionUUID->"1552a22c-1b41-467a-80c1-19e059263cbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", "\<\"OddsRatio\"\>", 
   ",", "\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.875014571437372*^9},
 CellLabel->"Out[99]=",
 CellID->27847239,ExpressionUUID->"a0247553-5b0f-4ffa-b392-da34685db6b0"]
}, Open  ]],

Cell["The first one is the right one:", "Text",
 CellChangeTimes->{{3.8750145731554003`*^9, 3.875014580771331*^9}},
 CellID->142301700,ExpressionUUID->"25ff0de3-481f-4dc3-90bc-5fb09d1b37c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"First", "[", 
   RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750145814958005`*^9, 3.87501458641264*^9}},
 CellLabel->"In[100]:=",
 CellID->64841848,ExpressionUUID->"9cfc09ab-5f7c-4a5c-8404-4b418c01b3cb"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"KineticEnergy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " kinetic energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
      "TextStyling"]& )], " ", 
   SuperscriptBox[
    TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.8750145875514393`*^9},
 CellLabel->"Out[100]=",
 CellID->389687925,ExpressionUUID->"d01c2a2e-c5b9-469f-939f-cf51351222cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"initialRotationalKineticEnergy", "=", 
  RowBox[{
   FractionBox["1", "2"], "momentOfInertia", " ", 
   SuperscriptBox["\[Omega]", "2"]}]}]], "Input",
 CellChangeTimes->{{3.875018320200938*^9, 3.875018351069661*^9}},
 CellLabel->"In[1]:=",
 CellID->819891380,ExpressionUUID->"4f792e96-dc64-4fca-a09f-1c557eee4590"],

Cell[BoxData[
 FractionBox[
  RowBox[{"momentOfInertia", " ", 
   SuperscriptBox["\[Omega]", "2"]}], "2"]], "Output",
 CellChangeTimes->{3.875018353278885*^9},
 CellLabel->"Out[1]=",
 CellID->316923695,ExpressionUUID->"1dd60bc4-578f-4be2-ab7a-0b19c1f8917d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"finalRotationalKineticEnergy", "=", 
  RowBox[{
   FractionBox["1", "2"], "momentOfInertia", " ", 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}]], "Input",
 CellChangeTimes->{{3.8750184631119123`*^9, 3.875018480481181*^9}},
 CellLabel->"In[4]:=",
 CellID->69396303,ExpressionUUID->"2c9e1fec-5034-4d52-a102-18b0ea8f59a6"],

Cell[BoxData[
 RowBox[{"2", " ", "momentOfInertia", " ", 
  SuperscriptBox["\[Omega]", "2"]}]], "Output",
 CellChangeTimes->{3.875018480832119*^9},
 CellLabel->"Out[4]=",
 CellID->216270289,ExpressionUUID->"68cc2ab0-aeea-4e7c-80ce-78ab0ff08265"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ratioOfFinalRotationalKineticEnergyToInitialRotationalKineticEnergy"\
, "=", 
  FractionBox["finalRotationalKineticEnergy", 
   "initialRotationalKineticEnergy"]}]], "Input",
 CellChangeTimes->{{3.8750184824176445`*^9, 3.875018501235796*^9}},
 CellLabel->"In[5]:=",
 CellID->190051681,ExpressionUUID->"b0298fa8-1ff3-4f14-a58a-9f40d095f757"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.8750185014630613`*^9},
 CellLabel->"Out[5]=",
 CellID->269600678,ExpressionUUID->"460274d1-2cfa-4539-85d5-34d22b94a8fd"]
}, Open  ]],

Cell["The correct answer is 4, which is D).", "Text",
 CellChangeTimes->{{3.8750185093422356`*^9, 3.8750185198876305`*^9}},
 CellID->27430406,ExpressionUUID->"41aa7a49-52df-4e02-b0bd-f0ae52f8bd80"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #8", "Section",
 CellChangeTimes->{{3.875018813120265*^9, 3.8750188148833265`*^9}},
 CellID->347459731,ExpressionUUID->"d9f7865d-10d9-43c5-b40c-6b332bc7a281"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
nvO1Xg5ejSA0n5qF6nzz3cjxwXddTacOLCNQVsc+VjYUrG/9PW0VdEsinuZR
NZcNGR9696Y533k5ibjmyCMNUvkcTg1N+fFtoKftKt2cglvkfX2hehIftbIM
90v5IV0SjmhMb5i1abnfHyZa01Z6lHSN8z9gtcSYEBHgZPe38VtEJwC4wzeD
VlHWJmBFSokzGY8s8qhakEUKa3igr6Mxx2k5CYcn6Tik3mwTTy1vO+7nHzAi
o3+i2R6rfdYtnlq+9rXWZnusIlMN9yZd5KWWBVLYcL/WBZkssox/Ms4dLnHS
xuF13K//UtsvgFitnLmw2EJJ2fOXlWabsjWB++Wyuw4BIRgxhLkInZU9zypC
zRBE27Na2D+5H0J+CpyB0/baJNuCD6iQ4A4+yI+PL3ryy6/2qcN4hesi0ILk
t+ospy/fN65Zbrcmr3lQCb+j+ub0nvJX0Ke5hjtY7rocTVtGofdmrb6fxJpR
cHhE9I+oszXoQseY+HfY3acdDFYHzdyXHn+RZbvcKvrhKNApRi+7uSUft6Hh
8NQ14Y2y99Q5vdkOnlfBjiUP1kOmCRmV2O5Xv0v/aao13gLtnY7Lpa+yU4Hd
neUSWCMxRyavu2mRFkZ9q9id5rmRnHd520mq1De/IVU+iwhzrL75LcjdQdVU
fc/d1JgVk1VeOvgFr755gGYZ7mCFqx6qvk2ki2VO3ynfo03qRD52e8p6ks6+
ErGVLuPtx7dQ51N9/8T4PHNOtS3zCyf+T4AzcMaeorUzn1+kPMw7klD0eMEW
KSisB8xVBFRiu1fKSy1riXhk0YHLQ/JSS+aB4BuSPZvjwkZt1+L0F+6hkHfl
CQrEgiPxxT/J9oqaulBitSLUtJiSEVkoKXvestJsUrYmoK7joYuq7xVhEleC
J6s9F5OkhbbcDyHzDasx1Iiic/j3XXIwWem2GLQg+a06y7ofaRutQH1XeWv/
luqbdZ9pH6VmpaU54/3PWl5+nv3Zpp7E7TxwNO9EQmxURGxKzqXGnhGp/MLp
L3GhURzy+8Vvhk/cZZiSzeMfgTRg9LK799WRzuztixEcySK04ZvUCbifityD
b83Cb1n3w02xGsnz+ojMnxrDTAh4ZMmhKzLym/u5JDSmUdLNJqs9Fi2Q+lax
O81zIzkf8ncCqu8bfrR5Ud8f8mxnkcrnamrMiskbPnq/ifpWI8uM97c1t8uY
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
1Zgjmh+p1xh9kzzDTrJ/1q7bJLlTbUrmNzV8EuUgPPTTFc7Ld6IsKJOLvskU
Zr+mHoNck5yc/vKNxnQdmlXQlqg4+VOL+CI21cx/S0zcFZVLfpEY2JDoBF5I
sqVF1ZpY9E2qknPrts9h6jDXKPakY1dzNCRVtq+ewNhe6+ib/NB3MtG3fDY1
p3YydZj0KVvurETylM2t3WFHo+ivUnKYv/cNjKRgUqfs4QmMyUch+v4t+qu2
zKYx3eXveRXNUzNkrlpPOPoW3eTkSGeYL/faOLr62s+HW63olsFJsZtOylwg
6quKsyL03eTXFvleEWFOneZxcORKDcmkchvzXJg0q+jbsikVt+hfEn2TTf8v
ib757YdW0OmmMfckfQXn3vbos+N/JXOJeKA6yZbOtN35RLa3EZ68oqIuaty/
EO919mKCZrWMHTp6QwvnYcJswiwsKSbqhFRA+fN2jAlVrlvjPk1dQJOcgzh3
4mIuSRaKai/yEGX/7sjMzd2tsWd7yCZ1KqLvxzvsFibXyxQ+v+2gm4H3yW7V
G+E+S/eJu9Yh+yYN8TOqFJb3iZGHgTii1ez1fE/L3KklWhCVNt3nJJkrtd/O
+gWqaIOCzqshovXQWGGy0beg5/GprJQDd9sn+uh6X1mQEV1022SwwvS25Nk9
CsMw4PI3VT8nVdsHqrc7EITDzseyVV3QdWFzzMWekQ1NLvpWWZ2mNJEq9i1e
h4e1sVz2rgZ+8/7lDJpVxI3xN5jIx2L9d2OsmYxlB+V7uxubTWisFWN9Cu/d
XlcDikLl4Xec3rj5kmjBV9lTuagin/I1pBkt29dI6kZLuei7bqftvFT5lrF/
xbTVxV1aRd/DAzXb7HRpdskKRXtxU9SlHuXjHI39AOd2lDmFarb5ltRGuc9S
HJiSgffP2wnRZ9W3cY1HfArOMkqib357obsuxSy2anTOOjHmnNr6NUxyzXMy
Z6jJ9s9adZtkd6pVyfyehk+iHDj3Ys1o+quLpTbBe5/nLP3GMcnPJhZ9kypM
jT0GiSYp+PrkZEbagaoJn1JG9V3ZKFo+gjYj9IrCqaUiwky0soRR0CWVpxYy
AxsSnUCJJOdaVK2JRd/kKjnvbcFyXarRmlOf5Q7MqeCokcqmPqnykRHpsb3W
0Tf5oe+Eom8N2SSRWlKnFRU7J3vKVohYyZ2yeW/3uerRDbyL5dpfe3Hoposj
KZjUKVu8E5Jj8lGIvn8PwbdHyc7GZn5nxx9LEvQ82OE0zSKguEWqF+m/EjBd
yU2z6khOKMzl+8ZvMn+8Yy6Txlp/Wu7Cj+DbwxQXlnnAGalEfH2QtNDAaoNU
IsgmdejNQbbpNOesJ+NXVTnvToTMnk7XYXorPqKihNLM8pqyFwn7hC13FF9V
SC79wz1nvZkEfeXhdqnNDt2KNqEKR5L1UhngvcpyIqgzQ9Wvpywhiu90R5cw
5TXtjcmTuvO857Qvk6LnLnNj0NCtSHMKMT9lfP61/3H2ctZ0t921veOxQOvF
6OCC5+TamOSGaobrgbG+llO3cw7BZPmelT7O/OYDbroE3XnP6GtFhfHijfRI
b3v6tDXF3fye89FbR64hcBvS7Omjy0Ly3uZH5b/mkU2q+Pkpuml0lfIXSirV
e8FXl2D6nh+51C4cPs3VZa06JnXkBF2Xg+d4n1L7skh++7nNG3Ib+qU/KQk0
JUzYRU3j1eLz1eBZhm57345/0l0RPsvIJe81ia6V03Y+yMI67HK78u8Kuq+H
z2LKRd/c57uFI0gduXEIKb2lgTMoVOMAJdPbkmf3jPxKVJ/KVNd2+1Spyf/+
J1muxgYumdKHtKUkdmP+i9FD2nPaW1+HwS6SqcW3I03pcgufqqK6Ok1hIpUT
ncoZLNslwXkNUoPkltPrzI0ck+5LPyHWe34Dk6LvfXpslCHsU9IWs2ZtOPOP
VJ/ycLujobnfmWapXP9sOrraRNci4FzzWFJ4n67FBmY+EbcAca8lLKjxzEhW
LWMujKv8rHnwLNs0hNH3HLqx55FWqZbRfTnI3vukhteoqmmVfY9zXFlGS3fX
STfpCzGh+eO9T++5ddN0mL7jZaOhHxCOlFYI+73FuU3jPU1FRuTq+YSuj6in
ORebeEtTG9d4xCd9lpEccZ9z0o2L25Aynxhd95jXVBCV90bTMeI15jgT1FnR
d6RqougOW30dff+SsbSROENNtn/WqtskvVMtSuY3NXwS5SDoOu8rtQ6SsBg+
X08PXWlHo82OeyB9L4TqIYfoPWFBBhQ99tHxQQrJwtTQY2huktzn6QtpFIIy
M2rCp5RRvVc2sqh0VoCS6e3+6xEzqMR0P3VREomBDYlO4K7kcy2q1vfSACMd
htdR2dGwql6ObCXnvD28xoywDDrbMn5gOq7F+2fWj25QbVLlhjHkB8wk24JS
JIe+KkpMBbXZJJdaEqcV5UifshXPSiRP2ZymI2tn0q0DZA7z9S3+2SPtb5Kn
bMk2yI3JZfOyXuZcJKlO3mdlrkQp/RAmQdD38nS8l/OKwC0ZRceP5MWtW+YW
kHvr4+ix5zWf2uS1zNHGiDWDZWRl77qKvTrtFql3z/Fb9ruzPI5IPbLAfZa2
0MjvopKxiaDvxekE9pKV/rFZhceP5sRvcHELyh5PBLmkjhl4d2n7msXum7NP
XSktLkiOjUk6dWevh54Oha5n4egSfFzlFT3lmeU8yvZxd3EwZRmzDM2sF3mw
PUMK5W4wUZ9+3utDG1e5LbA2NJzBMrRycFu1oaDh5+cr8Wz3RTamLOFmTe0X
u3vtquwbup/p6e5qayrckbHhLEc3dtTpVvWFLOh5lMO2nLU0Zv/h/LjAHRWS
9z7zXh0J8nCfbzlTuB2WxQI3j4C99ZzPpYns5c7WM4yFe5wxe8kyz5SbIxcQ
v78+v43tuMQnPv9o8al9yVH+EXsfqJ/NksZv3b/MeOVh6eP8PHWeyYYSuQUo
OC1XkthzzOf6ph0vLb9QlBGfdOpp7+dr0Q7TTJeu9U84+3600xLmKdvLwtwt
et/R/C3B269/kdqO6qRyqrO82UvtLFnCYzdzziJ3L/bGQwq3AcniNR0NER4X
G0NhKbGsHFy9km+L7q9Nmr8gLCc7Njrt4IXrNypKj2VE+QRk3vms6bY7QU91
biA7OKv4Rk1D/f0LmX5zTReGHH0u+7YIQW994Tr7xSFHaj72fe96U57q4eCc
cK1NwzCG9+bIxqXzbYxZomPHmmEzzzXs+DvFSizovhnrFiez5qrg270dTibT
54aVaIiQlPh2OZBlGKh0DqL/WvgMlv95hSVGxInVVNtn2jotF9b2sW29OZfo
tdBpXXze8eKTB5I3B4bveSg+pLxXh0M8ljlaGM0QHlNzhxUefvtEtTjea9mi
ueKiMLNxcmcLm436bCitTlOWSHX4Hw+xl2Q962+9kpGwY8/pK9eunsrd4uni
taX4+diogNd4PETYVGcJm+oMUZP3CDn0aiTdfS/Oxnm6LPePzyg8cTg3wdd1
RUDObcXebqilPNl7vrVzcPK+EycP5ySGRWVWdvCGRb3WStd5ol6LZWG7lO2Z
cqdf+GH6EhMDloHoQ0s719iSDhW1QlnT4D7eNc8hIjsrITql6Py1yorLxzM2
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
+5czaFYRN0ZT1n83xprJWHZQbjJNNGlIY604KDPDIuguWc+i67GTtganyo2N
B6qTbOlM251PZItaGGZGRV1UnR1JmtoPraDTTWPuSX7Lubc9+uzYH0nd+63l
3jUfdM7dmFlU5tpiqSPCe5e/WPqNY5JfTSz65tyOMqfIrQ3FfZbiwJRE3z9v
J0SXiPa019WAMt3npOz8Kr/j9MbNotXntS7zvqo4K0LfTX4tsO8VEebUaR5S
x3xC0ffku6BJ1SIx3mthkEWzWsYOHb3JnPMwYTZhFpYUE3VCeoKPfDtSVTkH
arbZ6dLskhVa8MVNUaPvBtA++hY9eOBIZ5gv99o4uvraz4dbreiWwUmxm04q
mXAn0zOTKt7JRt9qqwGpjU+m89e6QybZKHhvC5brUo3kn+bmd5wKjpKkTTb6
FnUoJ71nUqe7FzSSm5CVi77rdtrOS5XvovavmLa6WPF2LvmSILHmOZlc/7wd
Y0KVu5DLfZq6gCaJvjl34mLE9/Pz2wvddSlmsSPL5XHuJ8ack+oAtL7z/P2e
Ze7578g1IcG3hjPZyftvfZh4iwMAAJgobkOavfCkL3lMl/c2Pyr/9fhQqee0
t74Og10kPf4cuh1pSpdZfrb/SZarsYFLZm3v2NeGWkpiN+a/GBrfkC+Toucu
c6fa0K1IcwoxP+UpiROeaEigp2/nEpjXMD6i57ScWj/LYNHOu9IPH5NIjAb9
tzabM3QYqi4L9J5bN02Huf6c5M0mwkBsri5r1bGW8UwIui4Hz/E+NbYgTe/5
DUyKvs856dfuiAZ79GkOzkH50vlpLvYzm754xz2pt570XvDVJZjeUuGIdhnk
N+9zm6bDcMltHE2ooLMiPdrLXpfpfaaL33MuZnvV2Nw3g2W7JFi6pH+2nF5n
buSYdF+qpAXfHqYtZs3acOafsSGe4OvD7Y6G5n5nmuUP6ffKyFlUip5TjmKZ
9j/OXs6a7rZbOj+tF6ODC55rPGCi9aB0Rxf35jXtjckbv/OcXNXVbu+aD7qg
69yG6fQFqWPv9+F/vp4W7j6HSbVOeCC1ZfEDoXTT6CqlzyL2lwYZUPTYR8dG
7Pzm/SuE7WhxbpPUUcyIXD2f0PUp7hYexdjEu6JPfzYdXW2iaxFwrnlsX7xP
12IDM58Map/rYfExT3FhmQecaZU65g+SFhpYbSiWKozh76UBRjoMr6PkHqOc
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
AAAAAAAAAAAAAPw/8b/+mzo/
    "], {{0, 244.46944131983503`}, {991.3760779902512, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{991.3760779902512, 244.46944131983503`},
  PlotRange->{{0, 991.3760779902512}, {0, 244.46944131983503`}}]], "Input",
 CellID->678271631,ExpressionUUID->"f85f5fef-aa7d-4746-9740-bca544ce03b9"],

Cell["\<\
We have the buoyant force is the volume times the density of water times the \
local gravitational acceleration.\
\>", "Text",
 CellChangeTimes->{{3.8750189858656197`*^9, 3.8750190314886675`*^9}},
 CellID->381195077,ExpressionUUID->"b49b8bbc-dc7b-4244-bb96-f22b6c51fb1f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"buoyantForce", "=", 
   RowBox[{"50", 
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"N\"", "newtons", 
      "\"Newtons\""},
     "Quantity"]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750190342553086`*^9, 3.875019060880951*^9}},
 CellLabel->"In[6]:=",
 CellID->252368223,ExpressionUUID->"6bed2510-8f90-43cf-8faa-c85ecd241115"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"densityOfLiquidWater", "=", 
  RowBox[{"WolframAlpha", "[", 
   RowBox[{"\"\<density of liquid water\>\"", ",", "\"\<Result\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.875019114188623*^9, 3.875019139003112*^9}},
 CellLabel->"In[8]:=",
 CellID->878434633,ExpressionUUID->"85608b4e-6ed1-44de-9aae-d8ad726cc352"],

Cell[BoxData[
 TemplateBox[{"997.`", 
   RowBox[{"\"kg\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"m\"", "3"]}], "kilograms per meter cubed", 
   FractionBox["\"Kilograms\"", 
    SuperscriptBox["\"Meters\"", "3"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.8750191326160994`*^9, 3.8750191417053833`*^9}},
 CellLabel->"Out[8]=",
 CellID->828653261,ExpressionUUID->"5247effc-bdc7-4852-bc1b-526cb7531667"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"localGravitationalAcceleration", "=", 
  RowBox[{
  "Quantity", "[", "\"\<StandardAccelerationOfGravity\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.8750191495587153`*^9, 3.8750191652514286`*^9}, {
  3.8750192342834783`*^9, 3.875019237107692*^9}},
 CellLabel->"In[16]:=",
 CellID->375016948,ExpressionUUID->"cfac07c6-b862-45b2-992d-cd01dacd91aa"],

Cell[BoxData[
 TemplateBox[{
   InterpretationBox["\[InvisibleSpace]", 1], 
   StyleBox["\"g\"", Italic, StripOnInput -> False], 
   "standard acceleration due to gravity on the surface of the earth", 
   "\"StandardAccelerationOfGravity\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875019237455058*^9},
 CellLabel->"Out[16]=",
 CellID->35837058,ExpressionUUID->"46fa039c-9a66-4933-b2df-65848c3d2204"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"buoyantForce", "==", 
    RowBox[{
    "volume", " ", "densityOfLiquidWater", " ", 
     "localGravitationalAcceleration"}]}], ",", "volume"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750190745666356`*^9, 3.875019108355548*^9}, {
  3.875019146315798*^9, 3.87501914674772*^9}, {3.875019246386615*^9, 
  3.875019249370549*^9}, {3.875019370948206*^9, 3.875019372309866*^9}},
 CellLabel->"In[22]:=",
 CellID->109626934,ExpressionUUID->"01182530-f91a-4294-b96a-465abb4d30c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"volume", "\[Rule]", 
    TemplateBox[{"0.00511392283338981`", 
      RowBox[{
        SuperscriptBox["\"m\"", "3"]}], "meters cubed", 
      SuperscriptBox["\"Meters\"", "3"]},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8750192497159133`*^9, 3.875019373090459*^9},
 CellLabel->"Out[22]=",
 CellID->75491000,ExpressionUUID->"fc0ec181-c15c-42fe-9b17-e7bf90a97b2c"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"weight", "=", 
   TemplateBox[{"30", "\"N\"", "newtons", "\"Newtons\""},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750193101041927`*^9, 3.875019349213525*^9}},
 CellLabel->"In[21]:=",
 CellID->658564798,ExpressionUUID->"8ca4de10-c517-4785-8e83-b46880422456"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{"weight", "==", 
    RowBox[{
    "submergedVolume", " ", "densityOfLiquidWater", " ", 
     "localGravitationalAcceleration"}]}], ",", "submergedVolume"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750193553867188`*^9, 3.8750194007465496`*^9}},
 CellLabel->"In[24]:=",
 CellID->220047259,ExpressionUUID->"bed80434-8234-4c08-a25f-19bb2ab5dbfa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"submergedVolume", "\[Rule]", 
    TemplateBox[{"0.0030683537000338866`", 
      RowBox[{
        SuperscriptBox["\"m\"", "3"]}], "meters cubed", 
      SuperscriptBox["\"Meters\"", "3"]},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.875019385182211*^9, 3.875019401307876*^9}},
 CellLabel->"Out[24]=",
 CellID->6555054,ExpressionUUID->"3c6649ee-04aa-43ea-999e-724d0da3fa88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox["submergedVolume", "volume"], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"First", "[", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"weight", "==", 
         RowBox[{
         "submergedVolume", " ", "densityOfLiquidWater", " ", 
          "localGravitationalAcceleration"}]}], ",", "submergedVolume"}], 
       "]"}], "]"}], "]"}], ",", 
    RowBox[{"First", "[", 
     RowBox[{"First", "[", 
      RowBox[{"Solve", "[", 
       RowBox[{
        RowBox[{"buoyantForce", "==", 
         RowBox[{
         "volume", " ", "densityOfLiquidWater", " ", 
          "localGravitationalAcceleration"}]}], ",", "volume"}], "]"}], "]"}],
      "]"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.875019404793604*^9, 3.8750194225714364`*^9}, {
  3.8750194535730696`*^9, 3.875019463626807*^9}},
 CellLabel->"In[28]:=",
 CellID->488357377,ExpressionUUID->"06b8b552-7748-4538-96c7-14aad5287809"],

Cell[BoxData["0.6000000000000001`"], "Output",
 CellChangeTimes->{{3.875019457916071*^9, 3.875019464012781*^9}},
 CellLabel->"Out[28]=",
 CellID->563804406,ExpressionUUID->"43e39d59-afc6-4e78-8dd7-6260a63eb697"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rationalize", "[", 
  RowBox[{
   FractionBox["submergedVolume", "volume"], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"First", "[", 
      RowBox[{"First", "[", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{"weight", "==", 
          RowBox[{
          "submergedVolume", " ", "densityOfLiquidWater", " ", 
           "localGravitationalAcceleration"}]}], ",", "submergedVolume"}], 
        "]"}], "]"}], "]"}], ",", 
     RowBox[{"First", "[", 
      RowBox[{"First", "[", 
       RowBox[{"Solve", "[", 
        RowBox[{
         RowBox[{"buoyantForce", "==", 
          RowBox[{
          "volume", " ", "densityOfLiquidWater", " ", 
           "localGravitationalAcceleration"}]}], ",", "volume"}], "]"}], 
       "]"}], "]"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750194671146107`*^9, 3.875019469580016*^9}},
 CellLabel->"In[29]:=",
 CellID->12105372,ExpressionUUID->"49774bc3-4576-40e2-bac5-9559453a490c"],

Cell[BoxData[
 FractionBox["3", "5"]], "Output",
 CellChangeTimes->{3.875019470425585*^9},
 CellLabel->"Out[29]=",
 CellID->70662872,ExpressionUUID->"547fbd7f-8dbb-4287-8960-c6964d7d5d18"]
}, Open  ]],

Cell["The correct answer for 3/5 is E.", "Text",
 CellChangeTimes->{{3.875019475672965*^9, 3.875019485432948*^9}},
 CellID->9460224,ExpressionUUID->"3c7dc69b-b09e-4c59-8005-276603d31cad"]
}, Closed]],

Cell[CellGroupData[{

Cell["Problem #9", "Section",
 CellChangeTimes->{{3.8750195220809565`*^9, 3.8750195239790382`*^9}},
 CellID->238400550,ExpressionUUID->"5216ed70-a808-4299-84cb-f63c49232dae"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzsvfk7VP//P/7+fj/fH74/fv+DWc4slgaVLVTWkhQqISWSNTvDMMhO9iRF
G1IUUhRp9cyW0q5k6VlRV5ErlJi5ZubyPWcGs56ZxwxJz/e5Xa7X9XpOM+c8
zn25Pe63x3YIB4J3eP/f//M//xP+/8L/s8MjyiwszCN65/8H/4djULifT5DX
wS1BEV4+XmGGB/4P/KH1//U//zP1//zP/yD/fxYDBgwYMGDAgAEDBgwYMGDA
gAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDA
gAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDA
gAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGDA
gAEDBgwYMGDAgAEDBgwYMGDAgAEDBgwYMGD474Ez0j/wjfenW4EBA4blBnvw
zuUHn7h/uhkYMGDAIBOs7x/733+bxioUDBgwrBDArDTwfhRjpRWNifoAE/cL
o5iTRIHV/Bj+KDgTw29e9H6Z+r1pOXU7Yh1klvKI/Vvvsij8/NDd9uzzzHLf
lvP2IsPdxWm7jbXp5vg7rOW+/f8GiHuW01/FdN/jZAcb3JJ5kyX+xcftzz7N
f8R+fMLP3XmnvbWFxa7cJ4uKXPjCbc8/rRjncvovMTz27rLfZmm2mdG8Ypo1
D87bSrqH6y47uHlbYpclJX71N6Tss3OOzM+j2xvbZ7SMKWZDzvjHniePu1+/
H1O2gezxoTdPHz8bGJlWrbEYFg1ObwX9gLOjg42lxeb4+8vO+b8NK4xnMCwK
v/qvpey3dWbk5kVtM9mZBsJKfPAmPwx8kRcEfAbqfjYwijHQkoD3rdbb8MCF
r5i0FYWimh8uxKI9XRx32FhZWEQ3i5HwcvOYeOG3YiCzTkMv3lboU/wJ/Oyt
idu91SXgcP7xgkRvO3vvo20jvyk7fzaH6pJwkNnhzhVqed7X6oPaJBzRiH73
1zLfemZsqO9JdehGCo4WdB3rbJYa0p6d+T7c//QK3YyC0zh0bVrki5d9tAgQ
wYAx/8Wpkfdv208eWEOgbEjsUl3b8r5e8lqDx5P1I+8td2yhgfV9qP9pLd2C
iKf51q+8mGMhKXEpzJyI1wn4/SnB+9YcbqxhkfJoijdW4aaOw2v5XJPnKN74
k3Phe3e5BdJjGP5O5jSamXNs5fMJEOr88bIiytnJP7nkUlVpXsReZ5/81i+c
pXoODOBAIqz7UpgJRKIF3fyPaNsVyDMYVAZvrCl8PcUyrWuK963CnYyHNHzr
FbuVO9l/p8h7o/amzJeyeWXy1Xm6q5NvanHV5dLcSNfdfvkPMAZaJHhfLxww
8KrFliSLQXHNz4ILsSe1UaYQpO7XIFqILS+PSRd+KwYy6zTZxdsKfoplBu/b
3YStq9Z4lA3O1ey8kaYQY52t2d2/wzCTjaF6ZCoOTzaO61iZ4pY3UuulAysg
4z9UF0zXeWviMW37G4Di2el6fy28uLYdqfbVhsnBMFqUHLjvix1Ii9S2I9Ve
a2GuNoi6v6JYZ7o+QIPwh7Utd7AkMFk2J0xf9aUSlkHbcofO7KGQdxd/5CKu
aj2VlFLWJWeGZPp5gZtryr2v8wUha+CSvyFE0rA90jEh/0acvjOuqzdGNH6Z
v/jUiwJHPcuEdgW/Wy7I8cV/E1NXDlL/S9p2hfLMnwB34GTwMsTy70sZ7vBZ
J4razhIBK7UVJ6WVymMl7vuaeHeXPc5uvkFum0h4ikXGMxkdFqfvtLPehvAm
IQM9L9y11vpw2+RveILfgWVyq3LgfTq3x8S/fnwZb7ki7SAO0Jp/usFPkySu
bZeZx2QXfisHMus0qQ9X+lMsF3hjN8L0iRSL9KciBMjpzbOD1HYd71vyYbyJ
+mDX2DRPGh4iGMc+WKkZOTX0tOOF3KU8vxHT1/xomLb9TZDl2enrATri2lbw
xU6JL3I/luxcpLblX/hJ58s/FVtomL4eRPvT2pb1IG7XYRRtW39IfTm0Les+
w4ioHdYE5B3ux3MHXQrfilEk72vVAR08Xm1z1gs51MkdurhfS93x1JDo/qNf
92MMKRZJD1dEZMjxxX8T01e91f5D2nZ2hfLMnwDrAdMpvv23G+L3pQyrJUYf
WhN8E/TanKmJiWmEWpCiV7a25Q5VeNAoziXiDHSPYUI2S1kZDKQQy+RWpcB9
X+JoHN60rMMDK9EO4gCu+advBNDEte3s8vOYjMJv5UBmnSbrwxX9FMsE3pcy
V02c1Hq/mTuRugSUEb/FYPxaoEt+z2idjxYyfRZ1H9Nv0sC07TJDpraVgaXR
tisSK0Dbsp+kW29AGdddNm17K1yPuJZ+C6RP4I1dcNPAkfR25j8VEUS80Yr9
FDwEbc5BF7fc/gJ7CLJKldi3PXnZnULWDWv+qWrrlw7yfPHfxH9P22IQgP00
bZN57G8v/n9jyszcoq+B9MKBWEkMqNoWZqDtVKJ5erf4P0xc8qQQDUNXAgMp
xDK5VSlw+wp2Lvdqv5VoB3GA1/wytS0GEQBrWwzImGCUARlHNIq8L5YdnJc5
m0kQZF80uKRHm32vDXQ5+pYzO3HtELLSQH/5d7T+QfB4YJswMG27zMC07R+i
R5GMYL+r2L+airZmaUVq2y+le9RxeIiy74Lo0QQzTaFaBAivS7+NdhHe11IX
dRzZuWRYnA9Yd8J1SQSThD8uKeX74r8JTNsCAbQPWzFgvzvvoUPa8LuL/9+a
MkuubXlfy5wpEGn36SFxb87cpq8lkI3jV+pJKEIsk1uVA+d19lbz2LblbNKK
tIM4lKj5MW2rCH9W2/5l7M9qDllNwhFNYlrFl18OFtmRIERhLaH45I1d9t1X
0I+o5YkbIavhClAvonlK2av86r9RmJR4JDs3PzsrOzv/TFleoF8xsnia87o2
jckICfB1dws5+/rXl67KLCYjLMA/ICaruP75N6FI57yuTmdGhvl5eexLuD7C
GXtUnhEbFRYYU9o9zuONd55NZIYH+R9wO5AzT1PcDzfz46NDkSsHnXrJ5o69
qMlLSUhMiAgIZhY1D0qZaLKv6WRKfHQMIzQ4Jq++d/T9rfyYmFj6XoutyS2K
16ssaFve+MsruYfjY2MjAwLjjje/k7gPb7KnNieemZiaGM8MCwhOqHgqtQkH
1VYKIf/iyhpEHibf1hfE0aOTkuKiA7z8Yk61fZaUjrzx101ncxND/QODwmPz
G/qnEGFxLaWA3wVzPzTmJ0aFB/t4uu9LvyMYceaNdZxJZNKDA7z2u9Or3nPn
riLDs3xIaFv4i6WJ0fQgX6997nmiX5zXtg9/Dnecz01PS09LSkrPOdP46rvQ
NHAQpjIZwf4++90SG0Y53x6dT4uNDg6MPcePrY6zyYzwELip7rntC7EF1n7u
h6aCuKiIAG/PfQFnEJM/r81LSkqMjwwITixuGeLb7Ndg88lEZnxsVMghek71
i+/gTIRCjz966wuZkcyEpMORAb4+Madb53yD3hhZgTorNyPuvX/ZcDLe2VAN
hyfRtoelZWRmwH/Z1c9E2rKgbXnjr2rzEmPj4lWINO7ok8r0sINeQfRoZiQ9
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
mSd2oWyUUblgA68l/ipti7zPmgiRdp8Zlnqsu5GGsC8cT8//C0A684tq+Cdg
K9JFr8O3oaxmiAKg4+b+W+QAB4DZYamZf0Btq4RBFqVteSPdba8WNngBUAqY
iWTe+cfEFP833KnPbzobz+cE2uoR8bRdxfMvBUXreXkjZXvUcASdwEaReVvU
V2+orm1nZ6fuJbnabLY7VHS9tf1WWcyuDbaMGqUKa3Z3shmFaJb6mM15fTQk
8wl7dvJmsC7VOK5jBia01NATg5JDUoqpEnZRa49wD97itC3nXW3gRg2qFaN+
7lyJWd5ohStZdW0LHKhoXhNsFiMbxrTKNrSAcsnOki/PAWjrfYaRbB5g3aPr
kUSuqQRVsvobMsODGGe7J0TPxPla6owUAFT7IrTfIXO7EF7N+exniXcANYfp
4gk6hxoU3hlE24Laiv041RSimCZ3szlvjgZlwxXdZFPYWtJGhBZYnSnBxZIv
6kWLSeTV8LLvOHOXoUtAAmNI8C8gcauQIlSFXG07O3MPaSoOskp9OqtM2KBq
iolKDzKeRAtsUpRTEmTFmZxceP7ejsaKrEC71RCk7liicPEaWp3JGyl3IUN4
WvBCcS6z1mr/I9oWJtz7Kc5bt9gGnGho7Wgui3XYaEevkV9vz10L2EdLrW3F
2RhE26pajSw+DuGOcy9JNA6Belig+4pG6pvOpvKs4K1rKDgNJ2GmKta2C7WH
6iYC+iEA83DfnYT1AnFDoox6DUzbggfkorSt0sWA6sWwQhcDc47cgk11bQvT
R0uS8/ZN24KON7S1N5fHOJhvjayVP70iid9fsC2Sf5a6YFOSVaS9JtizTzSJ
foBiaJULNvBa4q/StrzRS+6aENEqU+rUjIlLnpo4yCL58fw/AIT9+BVfGkHm
6yY5498m5JUJ48i7DmWOwHDGx+Z/CdJxs9rjNhLw2j5XJawPqm2VMMiitC27
O5NxamEhMQilAJlIBtiP0t2Sxcd6WH3FLjpkl7KvC8kks+dltUavI+OorvO7
53+bth2rjYhunOKO97XUX6ppauv59FPpkpr9NGMzETKLb+3OCc7jL+v8dTfS
CFoXc+97a2LIWeklQIqpEnZR5BmRfUyL0La8kctea/CQVfJjlshnSE/Ep0pO
3/WG5/IDUyrYgAMV1WvszsT1EERxLf8qSWmC3nX8ircOHo5Y2dks72lHqzw1
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
2MSXSb9T9rybxLphwp9+uZ7st9ZCQ2NuZLlEEem84KZJMF3ype5WKvpQUQ1G
sqxyhP1nLWM7j+CIsPCoyOj4+MQ9aSeLq0lVuCTPkTApbkyqlr3URLe+WyFG
VMI6UV19KaaqNia58bH2RkZRDgmq9izHAzUSDed19gLGdOlySLaFVbtfYeBj
SbDWS1+phZ7z3UbevzJQVNzOSzdsSvseY+6wqf8hyRaz7+URx1nTlu57PDLl
l/M2x3fuDDqF6SL/DKAcsgWyu9BruoKHU5SZgM7AmPJW/SkmXeeo7LApKick
j4tTvdNc22S5Ryg7PDI8KjYuPik5Lbuo+oPKqZlyfnOHbVz1z2/psJEsqCrO
Guf1iY0GdNOt+e9G+mst18M9UoYedR5rh41kX2I0HbY/hKDr+dko56VrPMP3
ZGWfSI/ctMpua9qtT0PHxHtxzHud3UJTHR19lo6Jld26LZm1v75ciXK0X2w2
i8XSYxmY26523lk6+PXulxdinGxtXWPST+blHNoV5BG8v7yVVF50vzwX47zI
dlNUenbu6cMJwZ4B+x+If8mrP+7rsMrGWFefxdI3slrj4H6whvOlMMp51eL5
esIEsAzNbO0dd5YO3aPpeXMpft1Sh4DU3MLCvIyEqND43NuZ6+hUYUNksmCl
36nX48yQxjNBzqtszHRZ+ixdE8uV6xzXJ93qVrlF0UbbH6Y4GxvZsQ+ezAj3
2XZd/IbrUeat8ixSivto5wKrwJR90ezErPPXSksuZ+8J3rx1992RKGFwxlRQ
TmFqeFTywbxLZw/EudhYr404Wzd0iXAepm5Ya2duqMfS0dc3XbrG0dkr6/lw
drw66S88O7NFZ0fPaMEqx8Q73aM6Ll5bxZ41OixTc0trS0ureXPnzmJpiyeg
ztt07CnpW0T8d4fsWQ4nJF4pya1LWqTrflGmeeS9yvZ1sLeeYyBKhvGiFY5J
t4fOnaC9Yp+jqeGKiMwTmWFe8QOnaNTnSBFO09U4J4uZ5psTs69cLTiWHLUz
p67zy7Vw8+lGths9I/MblNaUKgub6oKq8qwN6ntXnOBibbrUJ+FgzunjqTH+
oXtLWyRua/54cT7O0WaZa1TGydwzBxNCPQIPkLuaBV3P8iOdVqz2iNpzNOd4
WrTbyjVbU28PJY3XmBviuNp2jp4wbQZGlqsdHF0Sbv1QvcHOmmM+9s4B+86W
VDx5Ul16jL2cpW3mvK/sq2S823F/u+3MGfP9pd5yKvzpYXfLxf4nKj51dbe+
KEp2sFgRXfxBXZw22mqHXF7xmw6t0lt7XLKcPt21YOaWArlVJgbSrrBMDufx
2WjHZWs9IvYdzT6ZGrVlhZ1XyvDpJ11u1VYRinNVBX7zhTAnu+U2RtMZ4pWp
9EyXrFm12n7g3/LFlob6s81XecWfrvoi28tQXWwGt/4py3npnqddTUV7onbs
zy26duVsKnv9cseoM3WqXgc1kCkKKivu43jrhf6pKRHspCMXrt8oKTy1J9R1
6947X9Qf7OD8wIDThSlRUUmH8y7mZ8S4LbJ0Cs99KpcU7rsCtu1cu9BDF68V
FxzdHR1ztKo6dTkhjP11zG3X7LjR/vqkr/B8mYnOl66Z9ap1XsdFPTb5DxXV
YKMqq7zWyn12unrGFsL6doH5fHMTQz2Ghmhuv+nm43XqK1w154hXf8JLmLzZ
BiwdYfIW2jlsPSBKSozj6qWm+sKU6OnPXbbKKfGm6ndkKyn5o934WHsj5Mqh
eE6yf86VfRExuw7lXzybGeNia+kgVw5JtLDk9st9FG9j5Z+2NzI84UjBtZs3
Lp/aF+TmtXugpI4UFWE+mFitdE64PZKVCvoeQ8bcYVP6w9G2mD1vL23bsMQ+
OOXMlcLczISIsPgzdw44aFGodC1jmxU+2Wqf+VFTIBvPBjraLzKZKWwHdYyt
Vzo4OyfeJtFfm4DOwOjzVuUpFiNT56hq+hWWk9EcF6+tco+dAWu2laWltYWF
pZnpbBZTVM8zTd2zSFQfw8fxmzpsE1L//J4Om5qCSqLD1tdYtMvFct4Sr12Z
2bnHUuL8g1NuSvbXxtxhU92XGEuH7U8i6P32tvbR84+d45xtMLSxN48rq+tb
ukcb4ot+WVNR/aJ51L+Uwe/5+uZxVe3bb6J7FpyWF1W19W/ef27t5pC9vTSh
GTKA2/a2qrziWQv5JeUUGVUW/Wz5KF5Dntv+rqa8rLz6ZbPM7XnJp4H6vjfW
Pap586130m7M8N6f87BcEFL0XnoWTk9L7bmoFSym7d5npOdB9rQ0SmesoPvj
u2+jXeyV2/qmuvzh83GeIoX6Whvqqiqqno2UKF7315b2cS9HO+6CKhCmrLay
+tmHTsWZLdrB48pH9S0/xnA1v619PGHXEK/jbXlx3rGM3cmpmWdKnnxR+ybT
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
q3z+deITLOzv28cr7tYW+Wj/893aselpflJVL3cyOOXRDnHk45Mx67vioSUV
2/b/vuKhiorjFSanarKTQ8Kv8ug5GgRVx6dQ7gYcpyzaWIOgsDwuyA1HCL7m
sePLpC+DvqterInsFSu/DJWZyDP+H68E+q77suRjW+XFW/HlPxn6rvmzpjq2
VdF0Tkpp4dyPMNHQDb5BOv+VJ3iir+Kp8Htrfm5tgqUmhb54z7ORCXm/bgbp
0Ai6w8nPiG0B4I/ErYqfSxAUbeeTLUNBKq9h/1JhbKu5PLOJr/R3/MaMlQRh
nfiEK/Vx9wVXJmNWcOnP35jkCcF9kmQzL/Zvim1/E25dsvX8bf/dbu0E4tbt
WmgZM0Wx7RSYtOOdQH1l4bMZFJqBd1G39B/4zSdcWUyCQtVzv9gu/SfBt7yI
bfdkroIJ7hWruAwnwX+9ElAY2/6RxfsPiG1VNZ2TE9veCjHUmMm+RfbMqEjw
vxDb/m787o+v3rVLPGr2s2KbaGL8mqPvlPcPAQCm1s+mB9duPm0dqbv6SoNm
0ika82NURH6Cb9lO2hSGY1aL9J07zp2QWXSa2fY/PGjkvs/dqK9pitiW+7/T
G2cRpv/hbu2E4b4/46ZHn/efiW0n8XgnUt/dMBMala7re01q5FbwOSckLiXM
TDRj2eNyh9SfWvPD4u/Izvib0F6xysvwt0MloCC2nfziLRCQGAWbmthWImmq
m84/MLZVmWDEtkooLYyC1luR5kzdRRHFH7mKvwEA8AfqKg010qDru+V9VHFX
jvMgcg6DwvQo6JH+XDSDhUlhOJ/6qvy3/I8l6dvDgv093Fx9j7/g8tufXdy/
I35nbKi/X/Thm03yj438eFOUGR0WvX3HtjBfz61Rxx984Q5s51bW/v2ZR44c
OXroYGZa+qXnP99czUgXf3Ik80BG+rlaYfeV/+HW0f2ZBw9nHTl8KCO38mtb
ffGROMfZWqJ1Y5YH70rekyz8t6/gqWTrxv9em58c4L7Vhx0dGR4evvPYrfcj
qeJ/vJkeFxnk6+nq4n+sXpj85xfTErbHbw/1DYg+VCqT/N7GkowdO5JS0lJT
UvakZBzLSff2zno7yuW2BJ1VJ+OjQ/y9N7lsSnnIGUMyFG20/XlxVoyjKZ1K
UFkrA5LE+ZCccl4iI4Y7KoLOF5fS4mNi45RuvPttUUYsO3LHjthIX3evqGMP
v5Bs+FRlNe9VQXJ0WIiPx+YN/tkve78+ykuJDgv19fSP3H3s6tP2keLJe12Q
FMsOEpUo/5Over8+ztsXyw7x3+obvTur+Ol3ReVY5SnuV3HiBJ2VJ3dGhARu
3ezqmjrQ8RVm5bUjMc7GDIJC01sWmCzOyT17LzyT6jGNOYv6BV1vbuWk70nY
uTMmMjoxu6KlWyq2VVg8eK8uJUZHBHhv3egSX9zG+/74zK6YyAC/mFO1ncOd
lu43xRnRERHxCTHh/u5bY7IeyKZI0FlfsCfIdf0Wz6AwdnBodMa1190Cdccr
TE52fCTb39N9g2vaQ+kOJb/tSX5S8BZ3f3ZkdBg7amfWbakL60ZGbHior/B0
+54Qlehnl9J27IiPC/P1iz1Y+n6iHifrvRthpEFQ9QOuS4zcCr7ksuP/r6ss
erbwTyyvyxKP4wraCthxt3tkNzPcKxZm0uXUbXExMUrSKeh+cSk1JnrHzvjt
kSH+fvFnn0g+G0jiMpSn8IyLj63xekbC9uRUYbHduyc1/fjpVB/foyqqmymu
BIQXeFJ0WLCXu9uG7ddaee2PTyfHhAf7RWVLFFKVpVTp8YrKUlxEqJ+wELok
3/45eLAVJ3ZGsoNEuws7/0GyVpCKbVUWbwWX/+hbtO6GkiO7YqKi2cFB4WnF
r9s+lKbHhMeEOy1YHl/WLftlaUpiWyVN5Oivqe6GG0cS4iKjIoICotKK3rR9
uJUeFRXDXm+1ZOe9D+qbzlGUFmVU1cz85ttZe5KTfBbPoGov9dklPi85lQoe
kBcTtKtNMOmrmERtqYiwgGbuiN+9LzV93959+9JP5KT5eR1t4Inr513REYGi
5jtQ1GQ9yt8bHRHs6+0btfdo0bORJkvYtO2KZQf6btnouk1Uj9fkJMWFBQZE
ietxRfXARJ5x+cIoaCv2mz3LPr32r1hTBQBATPDz7QW/+XpmW47UdKq8idx7
xUOboGh7X5FpY3nPdy8UP53xXMVOOhsqSi+muhlqMEyji0rS4jPvi5sJ/pfL
XrOJ2UHXJNsq/ufr4TYz5gUVfhioursf71vFMvW71MzvF3S8fXA9O2yZNpWg
W7Nzbjz9wml9ca/4qI8lQdU09ztR9OjTL9GaivVXUzfPoWsaOsQcLnnT2dX0
qKzsbh7bnGDMcj92t6zsvvBf+YuR5Z276w67zF8QXDi0MiC/rSrNwXRpxPXB
Sdvi5F9KcZlD05gXffVm6rZD9z4PJL/Q01DTOOD6cPL5n/K3LA0u+jrcUPW+
POysZ727brQ3PPuaa29fydhsRpNYIZN8MpScha53j/7v/r38EAsmbZbn0bvi
fCh7UC+xzvVAR8X7VNGeqEwVG+e3lIRZ684NuDJ0imr2rtQ39bncrHbGkpqs
FrS+LCs5v8teh04zcvbyCdhX0tgl3C/na9UhN0OmkUNq5eCTkYLWF/dvnktw
ZNEYho6+3n6pJY2iGOzX1+pDG+cwZq1LqZReakTdKVZ54oQn405hhrswCBru
DHc1PRZmXl6IlYaGsXvWPXFOlpVLZOXYs0jwvSJt/RyzTZmVX8WlhtdWmx0R
uMGaITFuq7B4tL68V5Ifu1KXynDMKMqMOVDx+XmaLZ0glu4Xv96G33I9cgHL
wr/ww8BGuh6nrNCZ531pJEW/3uZtNdOzCr74ZjCu47w85jJ/7eGXXDXHK0pO
YeamOQzKNJ+rEvVDV93RDWY2QZffDeX698rUdSaLoyUurMqbF9NcjBg009gr
N9LjDpYNFrrLPrPopv7XJmhZzt47oYZ0Cs3Qv+THcC5/zQ0XzToenLGs73ll
OLgVfC+IjCmVC20He8V+p67uizqgIp2c+kyXtTv/b/Ajflt5/LIZxq5Hnw31
MUlchgooOuPCUpvnviJAstS+Ouqob5OkorqZ4kpAfIHnbV/JotPXZl49EJfx
8Mvz1OXC2ntJ2kBArrKUqjpeUVm6dTnFeRaDwnTLH+yI936qvXM1y99ceBXY
pr2SzGDp2FZl8Za//EfXoglab8cs0rdgX28WZdSPunQHFtPE+/I3Aa/hpPuq
kMKvqgu5gthWRRM5umtK0HorbqHOAvY1cdK6n6bb6zOM/URJe5u9ZSX7UoO6
ppN0aVFKXYsgPjV3M1z0qPQ1SaXi8/Lkk7K4WaC2rSd7FauvLRURFtCtSwKL
JQvoYcdZC5Kfcgfq5xsXEtbqUzXmOHr7+aXcEDdZwrbtyEYj7ZkOaRUD+xc1
bTfy4lbPoGnZHyjOiMl8+Lk+ZYmwi7Ui7Y3CemAiz3ih7AgFr37fCuvo0b9w
CQBgSgi7JqnhvpvXWs7Um+t+qKxZ3RydjnwXJkGZ7it7/5j3cq+NJoWw3F6t
bo+9hR5aDN2Fm1PKRm4B9hT5CRvuTQXDHUv+uxPOLMI08IZEbdr7fxGmmrMC
bwz+rLs0cBaDYXdk+NkPweczztqatmkSwxWcym0OUXckbkLy3qTb0hkK5ikJ
2q4HmdEt4quk2kt+c/aG6TNWZ7wc+XrvZU9NjZnWbmn3JZPvo0ed5n5hMPn8
xowV0zYVSN3h7L3Ddto76thWTNhtkF8hk0QyVOK9TV2iSVMxHZGqZWi3R9XG
+U0nnPQ0ZoeUSJ6ismgT+uyAEpU3d0lmNf/D4VWaFObSpFrJ+KKnJsmWrmG4
KX9k9Ub+h6N2dIKxeLf0F2t32WjRZrqPfFH9fkmcuL5iT9mFVXlv0pYTGoom
MY45i/q5b48569CtYiuknl/vebhtHiE7J1lR8eC/P7SaIOYvDhCNOAu6Kg94
uXodeiSazNB0ypHFNA66KZWiyLmEYfBginqqd1prEwt3Pxk+mu4rHjMICn3J
vlfqjlecnKteOlSJ2FbQVhJoomW+vVo21511p6/MfCF5YXlMp+nZuKZK1gvF
3sLQY/NFMiWahJ7SEGMqlW4QeHMwWwXf8tjx4iWd++6Gi2Ys63gXDe5d0H4p
YtsNBcsHiHrFFMYcu2SV6eRWx81lUOgLEh4PFZ2fd0KNGZpO2VIPc6i8DJWR
OeP8xsyl07eclxpq6b0d5qz+VtoUVgKi3/7v4EpNDbOl/qLxLGEhPejp4nuo
urtfXSklcbw/L2zWlohtxTgPo0wYKmPbwUxRVbwVXP4kW7S+B1HzaHSHo8NR
0U9RmZm2Lkf9ba6B38vGtiSaSJLXVN/DKFMGIbE65E9R4nWcsqWSprTpHNgG
mdKiDNnGVzQnmcp0v0BuUQ+VCSZ1FauvLRUSNiPLdNwuyBTQCMfdT4cKqLBt
syeo2ouTZdq25EUMhsHmkZWJ+e8Pr6QzTRcHHRXX4xWZPhu8j1QPbVhRzT+R
Z3wE9+lux+AiRLYA8NfhtVakOOhomW8+Uqtq5LY9b70otpUalxH//IUottWY
H1ulbkfC7sE0QsMyqVai58WpiDPR0Fx2oHGwauU8ENa9VMPwu1LNUu91P32a
bsD1wfag5w7bhEZfsX8oluV/OuGgRSdsUl4M9V54rzL8dksteqWsveM927eQ
zpy7vVp2cua3005Muo7H5eGbz+JGnGmRKJ38mLk0+sqMweTzXqUuI2asjL/5
/udwTgq+Xj95RdVkb+UUzkYjkQyV1Hdr1Wz8V3mMiQZ9Fvue1LOfvSV+Ogwd
vxL54a6RPZPMav6no2s0qXJPVwm+nt0wjaCZRJeNDFtlrabTDUJu/5L5Yq6r
NpUxJ+r/+sjul8SJG01neMxZJGi75KFHJ5YdaJA+k4IvpxwZcrGtguIhzLu1
BFXT7tD/pDfAKY+aS6PNZsteVwEsDQO/66I9tJx2mUbVXCpZhnjv8oNWL9mY
Uf1TzfEOJsdXTyK25T3bs5ggLLZVyeV6znoGzcDj0vBogri3SSxIkCp0lTHC
PtjyTDIlmoyfpSEzaQR1VuhNce4L2s4PzzoenLGs5ze41lTHlYiYG4rmiZJL
J7/5vNdc1hz308PL8gm+CKsn6qywO5LZNrbYVvqM816l2dJ1l8WXNkmV2uxC
tdXN1FUCIuILnEJfc+i9TDrVlFISx9t3xXOGXGxbFWs2/thW0dpTZFq0gXcQ
TJOY7zTQYk7zKiQ3a1f2MifVRJIqq7zn+6zphLZEDcKrT1kk/ET63bEkYtsx
tkekG9+Jjm3V5Iza2lLZjl+n2GpOX77zhlQBLTk5UkDF9TPNMESubTvjwqJo
mEUOtW3ipo0g7I7IXiIDx6Cg5p/IMz6SrpZTXuG3/qy3ugEAkMRrSF+qRaEZ
uuYq7xV1F7gJY1stz0LZ2PZZsjVTXKmq24u4J0Bfnys5VYlTtd1UQ9M27c1A
v4Nbm2RBEIRN4t23jRLeFoWZa9DtD38c2lJZ9BwNzcWpA70V/vusgJAINxZ9
4a7BG/i8ZykBKc+l5vgpae94L1OWCGOBNVly9y05t4Nn0iks70KJm6XaVC3n
M1LzDyvj5tPoy1NfD0XZTdnrdOkUKmPanOXrfGJTcm48bxvlo7aSGaY0tlWT
DFVIDNmo3Di3NnGBBlVz0c77UqfoTTF7LpNYdVR5ASKd1UpiW9Fd8eXiuyhD
51BJbCsa31lGJ2hm28XHSGq/6k/cKDrDY86i/s6LntOpciGDKDzKHkVsSzMK
vSOdpIGH4um2O+81SKWoKMKM0LQ7LPxG+zm3GRSaUchtFbHWaGJb3qt9i4Xx
i8Rw1ZCBVyWyPK8OxR8DIykup6XrBVE8siSdTIkm5efNAOG5phkHiyYbC9ou
RIzMOu69yzZiUGizfItF5a/zanT0NYWPQI4+nZzvjU8qbl/LYy/SpLACrk90
bCsaXnI2oFIJ2nQzW2e/6NTTJSSrmymrBAaSLb7AZYL9fhKlVP3xis/R5Ma2
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
tqX2tMU77kk8mzUQ2zJmOe+vGS63vObr4RZMHZv4Mokvqt2vuhMn1HnBTZNg
up2XPBnc2iRL+tDawrw3GaEZwyt1jzWL+vteZjnq6yzZUzMysshpyPG2mE4j
mNIxi6LiwXuVulTUP78j//xU96OU1awZdrslr6umi2yfzKEUcV6f2GhAN92a
/244ibyW6+EeKcNPBqo4XmFyzm2aRmFuHkmOMNcTV7CMtuY1SeR6efyi6SZb
ct9JXVgu2hSGY5ZUobsdMosutQKt6Kac6NrRl3+8mrTOK94sGp21VcHQbPf1
QH0aMcNdRVxGJp38xkNrhFfQkrTXQwkXfCvZE7LemtB0zW3jt5+LiLk3eDwq
LkOl6Zc+48JYbx5dz0m61F72snQ5rfb1MlNYCYiXk10sjKzDFRRSlaWUxPEK
Ws9tmUGXmFzE/3I9KcB+HpNmGl0uma6By9klX/J+gqrirejyJ9micap3mmub
LPcIZYdHhkfFxsUnJadlF1V/UDe8PbRn8Ul3OSuRUvVNJLlrStRiWmkZ23kE
R4SFR0VGx8cn7kk7WVz9oVsqaUqbzoE9jac9Itn4/ijcqqvgeShlVCWYZM6o
rS0V7vfR9vmarHWnJGo3Qetln3kuZ5pH7tsKY1vtWY4HaiTatuvsBYzpS7bf
H6l7eK/SFgvDc/Zdhc/BKqr5J/SMD6XBlk5QqHo+xVgpGQD+eILOmiz/NY7B
e3NvVDypq755gr1EX8vEZe/9r5Lxbse9HbZ6uvN8pd5WLuisPbzZ2sb3VMWn
ru7Wl0VJ68yXxRZ/UBfZ8l4c815nt9BUR0efpWNiZbduS2btry9XohztF5vN
YrH0WAbmtqudd5YOfb/75bkY50W2m6LSs3NPH04I9gzY/0A+GOQ3HbFjOR0b
ed+peNE/va0XFL8zXtD+MNVx9pzlYYeOZ0R6bi/5KhH7dD3Lj3Rasdojas/R
nONp0W4r12xNvf1pqEXg1Z/wcrC3nm3A0tFjGS+0c9h6oIbzpTDGcfVSU309
Yfr15y5b5ZR4s4v7KN7Gyj9tb2R4wpGCazdvXD61L8jNa/edoRsJgvbSaBvW
DBOzZfFlKvOM9yrbV7jHOQaizDFetMIx6XY3+WSoORuC9op9jqaGKyIyT2SG
ecVfF2fEaDfe/fJCjJOtrWtM+sm8nEO7gjyC95eTidfVZLXI4JzkoJzC1PCo
5IN5l84eiHOxsV4bcbZO+iVVg3OSA04XpkRFJR3Ou5ifEeO2yNIpPPep3Nus
VO9X5YnjvT7pKyy9ZjrCnGGZWK10Trg9kpUPU5yNjezYB09mhPtsu/5Vcrdj
zaL+njeX45xXrAlMO114JffArvDQnadvH3RgEBTaDCPrVd6n3vxSVDw4D1M3
rLUzN9Rj6ejrmy5d4+jslfVcunP548X5OEebZa5RGSdzzxxMCPUIPCCdor7G
ol0ulvOWeO3KzM49lhLnH5xys0Ui5FJ8vLxXJ/0dVtnM1tUXpsdowSrHxKE3
Swtz/Wy047K1HhH7jmafTI3assLOK+WWxIV13Ff4Q2PRD/WNrNY4uB8UFboo
51WL5+sJD41laGZr77izVFToBB1345fpsix9C0i+F1SRjkIPHX0PhUOz3df9
DPQ2X1AY2o4mnZymwm3Oc2dZuu7KKSy6eDQ5Jv50XeeX62wLnZlL3DyizjUM
XfgKL0NlFFYI3Ec7F1gFpuyLZidmnb9WWnI5e0/w5q27734hkUFTVAlwHqa4
2q+wmiU8Ch1D08UOjk6+R2VnpCotpaSOl9tUELLMbEXYwYLrxReO7Y6MO1r1
KGWJJoWqyZq7bHV8adfI5azP0jWzXrXOa3jCqsLirfDyH02Lxmur3GNnwJpt
ZWlpbWFhaWY6m8UUPxZk6p5Vp2okcuSk6+jrzLGxc/A9Vj/0N6VN5GjKaj+v
tXKfna6esYW1peUC8/nmJoZ6DA1hOKNtuvm4RNIUN50T1B6prpl5jbkhjqtt
5+gJC4yBkeVqB0eXhFs/VG9RSYJHlTP9JGpLOdzH8dYL/VNTIthJRy5cv1FS
eGpPqOvWvXdGCujgnGT/nCv7ImJ2Hcq/eDYzxsXW0iHqzHDbxqnY5+K43GK2
MJEsg3mL7Z0dvY8NXyKK6oHfccbFuh8mLp01w8wrDyslA8BfgtfRUF6Un5W+
Nznl0OnrdV/U3WuX0NNcVXgsbW/SvoNnSl9/n8AH4mQIer+9qamoftHcraxB
6Wl+1yJ1S1HQ/bHpm6qokdv2purBw2efFb/Nrffb29rHzz92jnkOzs+Wj+I1
/7nt72rL7z+oftmi4H5of29RfOL9KV6hgdv6prr84fOW8d2RFZ2ix5XV9S1K
T5HyHyrNasnnbfu+N9Y9qnnzrVfR9iWft+1re/ekulbJF9Xvl9yJU4zb9raq
vOKZkqwccxbxe76+flxV+/ab6NLkfK6vqn3+5n8tbd2/xtvREOXB48pH9S0/
lKRI0NfaUFv56NmHToUXt+rjVbLHhtpH9eO4sCbKz7qLl2oVr9nUW1946bG6
+0JkCXOwruphlURB43V/bWmXG3Ee32UoLLVtg6W2prysvPplM/lSO/69Dxlz
CVe3VblSSvp4f7U1Pql6+LCmoVVUzf78WPeo9mXDxy/tP7nqkzj64q0Kr+m8
x3yb4Kv/kzr1/J6W2gtRS/WYNinPxtOAqm8iVSbtnOc869Ar76Xn0PZ8rj0f
s4SlvWiv9Fv0VDad4zf+xlfWxCRYbW0p6WfzUAFtrHlwr/zRi5Yf0gVU8nlb
YZNVV13zVl2TNYFGecYBAABI4j5Lic5Wv/TWf5bSdwDJf1HJO4AAAKYepyJm
npaSx5851TvmMVcflF3Rf7JwKmNMZ4ysJyD9t+p4S+ZKuZcNwHgpfQfQZMAZ
BwCA36OnMiUuH++MU24wtg1FbAsAfzPRc81MO8UhQ3cp24jlcV7u5a6ThPsk
wXKa3FJvA36UhpiwthRMVdL+XYOxbfCUxLY44wAA8Dv0PMkITVfypnTo53P7
ultusM0YFObajJftPRyesheycvt+tJSEm2oQzDWZL9p7fin7IgDAFBG03d+x
bO7yuOJ3Uivj8lqrszabz9906s3U3ZcTtN5LWGpqF1vUJJu0Ix7zzdxPvZ7i
x2b+NaK27XMJez6Nqr36gKq27bfBGQcAgAknaL2be+kNWhBlOBVpm51dNm1y
9/Rw93DbuHF9aH6jwkeAOJWpbi4bXN23uHu6b9myccPG0LPv8KwQAPxxOC0P
c5ICPX0Dw6Jj4rbHREezA328wjMK6zum/H7cr5aKnMSQrd4h7Ki42Lht0VER
AV6+YelX/4Ck/Ws4Femu611dN2919/DcvMlt/YawKWmycMYBAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
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
AAAAAAAAMFX4zVkODN2gG3Lxa991fxaVoGjMixnjjF7e02Qbutn2cc8H5tSn
LmdQtS3j/k9tlNovWv7qZgrbf9MaawOWhfvB/2vuI7ub3suemhozrd3S7o8s
x9xT5KNHZVisjC0YeaERt3anBZNYekBuDjcAAAAAAABMFW7NTiv6vPhquRHR
X7fDZtKEsa1JeNnYolP+p6P2dG2vQtLRpeL0vc2yn6FptDm3YZSp4LVW7rM3
0JzrcaSGTEzc31fko01lWiRKTqLmVMTMpdEMfIsllsTivz+4UpM2J7ocz/AC
AAAAAAD8KTgPoszoVsl1crEtv+ngCjpBoc5wv/RD7Ub6FASwgtZsZzrTLa9z
HKnrqkxYrGfqcfbNmAJk3tuMJQyCarBJ3RO3IuLYVsv5jORLeTmVcfNpdJs9
zyXGaPkfDq/SpBpG3EVsCwAAAAAA8KfgPIyZS7dKeiL/JCuvfs9CTQqVOX9H
jerHXPnNJ9nJ8h8Lvoli203nuuT/RDJpDTmbLG3Ciz+NcjmqEbznu62Fh8Aw
jatUG4mKY1vtjfmSyR2IbZelvJKPbcMR2wIAAAAAAPwxuHVJC+mmCt+Sw3tz
YBWTShCLUlS8Vlao706sf7b8x8Ig0J4+3bdobHOS+V+uha5el1rVPjyMym9r
bGpXOruY01i0J9QnMru2S+Irgm+nHLUowkNYeVjtG24R2wIAAAAAAPy1RKOr
DJZfscIItLssYq4mRWMu+46Kwdcft2P8s97Lf86tTbRmWCSqGfRVnKiOiuRN
7oefSr5Xl/f2YHCK0ncAce5FGGoQFFFw2jHyKb/56BpNYWzLcMqRWwdaFmJb
AAAAAACAvxenLNKI+f/t3fs71Pn/x/E/xTDjmCmlRGwtUnRQbTQ62XSkpERb
oYO2SKLzgbK2g9RaFbaio61NJyGidPgI2yU1l/iEZq6Z99UXbRpmxjh9O+zn
frvmF/P2fr9f8+Pjer5ez6fXvme665oNt7eNt5JIRq+/+lp3OHybH79o/RVd
0bcxc7GN+ewUA8NxdWgqSQpdnlTc2OFLoTp5wZK09rArvL59bGtUwuWqf1Kn
sjDGVSIxG+6X9FAjhypyVw03NRJZTdlneGQP2RYAAAAAvmF1aXOthy3P0bd1
WF2bu81riLnUM/KPp00dLwnyOwlL/XfeatB1n6p0m4fVuPiyHo7KUVWmBzla
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
    "], {{0, 245.9692538432696}, {950.8811398575178, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{950.8811398575178, 245.9692538432696},
  PlotRange->{{0, 950.8811398575178}, {0, 245.9692538432696}}]], "Input",
 CellChangeTimes->{3.8750195490660276`*^9},
 CellID->28736227,ExpressionUUID->"da2eeac8-bbec-4f4e-9abf-6e551e1af9d9"],

Cell["I think I need Hooke's law.", "Text",
 CellChangeTimes->{{3.875019735799076*^9, 3.8750197400895805`*^9}},
 CellID->6317737,ExpressionUUID->"c5d9ae26-b6d5-4405-b476-a458eac89154"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<Hooke\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750197121621494`*^9, 3.8750197261531963`*^9}},
 CellLabel->"In[43]:=",
 CellID->650218918,ExpressionUUID->"9b07b281-08d8-4381-a6c8-a84910fbfdf8"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"HookesLaw\"\>", ",", "\<\"Force\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"F\"", "\"Force\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"k\"", "\"SpringConstant\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      TemplateBox[{"\"x\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"HookesLaw\"\>", ",", "\<\"PotentialEnergy\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"U\"", "\"Energy\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " energy"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      TemplateBox[{"\"k\"", "\"SpringConstant\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"x\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8750197173695574`*^9, 3.875019726932768*^9}, 
   3.875019996888959*^9},
 CellLabel->"Out[43]=",
 CellID->512095672,ExpressionUUID->"9dd378f4-95e3-4ca7-9500-f00d3c1ffb89"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<HookesLaw\>\"", ",", " ", "\"\<Force\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"QuantityVariable", "[", "\"\<SpringConstant\>\"", "]"}], "->", 
     TemplateBox[{"10", 
       RowBox[{
        "\"N\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"m\""}],
        "newtons per meter", 
       FractionBox["\"Newtons\"", "\"Meters\""]},
      "Quantity"]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750197674183383`*^9, 3.875019797561493*^9}},
 CellLabel->"In[42]:=",
 CellID->758126877,ExpressionUUID->"ca186b9b-d2ba-4315-9372-4beab35086c2"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"F\"", "\"Force\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   RowBox[{"(", 
    TemplateBox[{"10", 
      RowBox[{
       "\"N\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"m\""}], 
      "newtons per meter", 
      FractionBox["\"Newtons\"", "\"Meters\""]},
     "Quantity"], ")"}], " ", 
   TemplateBox[{"\"x\"", "\"Length\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
      "TextStyling"]& )]}]}]], "Output",
 CellChangeTimes->{3.8750198004181285`*^9, 3.875019995630232*^9},
 CellLabel->"Out[42]=",
 CellID->346173830,ExpressionUUID->"7f640293-dcf4-4dc8-b5e0-dd9f31dead71"]
}, Open  ]],

Cell["Add the forces to get the net force:", "Text",
 CellChangeTimes->{{3.875019822401359*^9, 3.8750198340726023`*^9}},
 CellID->273562586,ExpressionUUID->"af25eb70-b75e-41b1-9797-82cf3cb2894d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"3", "\"N\"", "newtons", "\"Newtons\""},
   "Quantity"], "+", 
  TemplateBox[{
    RowBox[{"-", "3"}], "\"N\"", "newtons", "\"Newtons\""},
   "Quantity"]}]], "Input",
 CellChangeTimes->{{3.87501983975655*^9, 3.875019846139068*^9}},
 CellLabel->"In[36]:=",
 CellID->183362079,ExpressionUUID->"5d9090c5-c197-4a6a-bfe6-22ea2a0e84a5"],

Cell[BoxData[
 TemplateBox[{"0", "\"N\"", "newtons", "\"Newtons\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750198495781617`*^9},
 CellLabel->"Out[36]=",
 CellID->44358730,ExpressionUUID->"72e11f80-6b58-490b-9d73-09a073d8c44c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<HookesLaw\>\"", ",", " ", "\"\<Force\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<SpringConstant\>\"", "]"}], "->", 
      TemplateBox[{"10", 
        RowBox[{
         "\"N\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          "\"m\""}], "newtons per meter", 
        FractionBox["\"Newtons\"", "\"Meters\""]},
       "Quantity"]}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Force\>\"", "]"}], "->", 
      RowBox[{
       TemplateBox[{"3", "\"N\"", "newtons", "\"Newtons\""},
        "Quantity"], "+", 
       TemplateBox[{
         RowBox[{"-", "3"}], "\"N\"", "newtons", "\"Newtons\""},
        "Quantity"]}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875019886867113*^9, 3.875019923581276*^9}},
 CellLabel->"In[40]:=",
 CellID->154617259,ExpressionUUID->"1710a633-dbaa-41ac-b551-eb3a9125f923"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"x\"", "\"Length\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"0", "\"m\"", "meters", "\"Meters\""},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875019900181881*^9, 3.8750199241024733`*^9}, 
   3.8750199902252665`*^9},
 CellLabel->"Out[40]=",
 CellID->225290165,ExpressionUUID->"39bafbab-5beb-4395-a531-f62158d9bcaf"]
}, Open  ]],

Cell["\<\
The displacement is 0 so the length should be 2.0m. The answer should be B.\
\>", "Text",
 CellChangeTimes->{{3.8750199633916764`*^9, 3.8750199828989553`*^9}},
 CellID->1564728,ExpressionUUID->"962c598b-559c-4e77-ad2b-6a1c53af0e67"]
}, Closed]],

Cell[CellGroupData[{

Cell["Problem #15", "Section",
 CellChangeTimes->{{3.875020040841744*^9, 3.8750200428842926`*^9}},
 CellID->345674994,ExpressionUUID->"ab63bafc-ec07-45e3-b72c-6c8215e212ac"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
b1uPRobHhDps3BzbruIpzRn+yMMLyUE+3gERHE4UKyKx8Oob2RNgDumM0IKq
Mpju+zx8Q0JZoUFR+Y0vx4WzoqxrInDLZEzzw7T5uf596a5IDfT2YYbFcCLC
ww8XXZ0bQF5PVUoUO/igl7tL3OVh3uj9M6mcsGC/yNJujKc+0bxpQdYl7uXL
1tLsI4kJCZyIqKTTd4bGZWXyvM8I9ys1ih1yyNvThVn6YvLjvXOZcN+ZvgER
R4rrH4/K724475GX+trXZ1VpQW4uXgeD2Kzg0Kjcy+LJF/P9VUN+FJuTkHQ4
MvDggciTtz/IB3HB2KsrpUdTEpPio6MikktvD43jXHQ9M9nbmJeWe7lX2lwF
w2ccaRABskx9jPYz7q1IYxJR3bNKLnxPdyduJBPVHE6rOu8Mus2jey4ztviG
OMa9uVKQEMWJZTOZrPTqx6qfL+YPthWlpaYc2qJJVN96KFlo5GUd/98LjKgi
+SmG8S9FQEZF9bzzv75oLsmODmEyg8M4OZf7JhCJU5uUL3pmDmlbbGSwv6+H
q1tymygxCkY7TsdHhjF9ffa5hl94K7RijNQma9VwMDoVHxXChA/okSkdjGZl
cuePD3fLs5NSUhMTEpOyTjW9kOorZuZVFuX471pyY8JD/eE/uqZKmn+3JCGC
FYREG/ZFUfOXcwrmAapMlv3WrEwWfHtWkxUbw+Gw/fw5+VcUE9LM+KvG3Kjw
yISUuMjgAz5RRbc/zqfURJPJeDx3CbxbMN7bfCKZw4mNYIWEZzfC6fRKNieM
w3Yws4ppR3u8GZnx6LBQPzjk+pUgM/mkJvvw4fgYtl9AfOFNyUyeiI+K4YQF
HmJlVip4Po6Qi5WLUQsVNHAXMHibh5kBVTYP02ZUFSHybR19XFcQvscQIkJE
hm1Aimjn9syLj6VSnEQSwuZcnRPDieXI11e4ygO4fqpICfH2DmJzYsLZUYcL
22RCLL44MNtsHIWc6mZjDIqqemkeB1cd4ZWDpm7mgDNDS0lWXLBfYBArJqdR
lBnqE3OF+yYjGTY+LCQADvguKdckiaEkPooV4Oe1z40lTgzoAV9eJqOWqbMy
+d6PoY6zWSnJKckJh1MyS5qf/5lbgqiQyc6Bx8uOxCTlnK6uOV8Q6WrrEFHZ
s9RLawQjF7z3Hu8XTcCP1iA95IZFQMt3vD8f6797pTrdZS2JSF21N/NSxxvx
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
DDbtsD+Q94D7sZbjsGur0UpknFdtsNntmHRlbOrmkb27t5vrIYOvuwae9JAK
5Mocd6A21nmdnplbclltQ3VhKif+DNyaJpap1iprd+/IC73f78dbbGJmZYaz
Uk5UNrU0155OC3U7kH7tIzLM010JG80DMzOiWElFFy+3Nl8qTQv2PHDk+kes
OZvuirc0Z2anR4Qlnqi6fKXl0umMIPeDR67N/Ui8MCPgTG1mZGTK8fPVFbkc
981mjmHljyWhgHsny2XPDpPVOrC16BhZw0Z8sOjp7Lzxek4x7XdartFGDEl/
406HpGvjvOfFvvCoGiGjqmVovsNpf373z491kQ52W4z1EHvTNbHa5ZzQKjrA
yN203VoMIxMzCzMz8/Xr1ukx1ElEiEBb71H8ROVTEoLxp+cj926z8wlLKyot
yYnw2LnjQPZVyU5I01hDOmtBjYmuFkZbDyUeKztzMovDDE1vHeKhdk2ZwaBY
kWrzE/dBmc3P9m/sSUWkk+1u78i0wrKT2VHutrsPZLXN9o97J9PNzkZoaVp6
RlvsHRz9ChWWqcqjzJsWZF1iJl5dinG22R2Yfaa2rjwvOSw04UzbMXsqrOw0
9S12+p5+xVvYGcWrSYPKarPCIlOPna85lxfjammxJ/zcI4lpLnLkZ6b6GpJd
zdZbH0zOLy0vzoxhBmdeGZK69jf+4gLHebOVR2ROafmZ44nBPgFHb8to/4nX
NbEu1nbBmWfrasvzE8PZ8Wev5SGP0lDUDCxtDpWiXx8XDJ/30BDv6CL/j+45
945OwdebcVarNDcwZcK/4NuD415mW5gld9+PjQ8/b0i1N7WJanyLU2qg2rxK
z9Uzs7aDPXdsqj3d0c7WRA82PB2ttZY7HELPDaCdjddXHuKwy2qtDvxl3dVm
u+wdXBOvfseMKuJOYhr/ogMyBirnfbKvLt7VfJNLeG5Fbe2Z7Lio9LrOE/aK
i+2n+6tYVut2hBZUX26sKjwSxSnsvJe1HSJCkJaJ1e7DLaPKUpsyq+b1lPrB
nV2ri8yCwWYbh5Q2yUb3jjZpj8b76zMi4vPO1jfVluewnHY4SLsJVuZVFuXm
mj9QFbLN2IZ9rKqpsbL4SERMYWdXpjWdQKQz1m3bFd86utgpEHy9cdhKR3u9
X828X+PJHzgf6uK018Vhl7XRKmElo6WrZwKfzsXJyTX2snQZyHt20g/uowHS
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
ZDIAAAAAlp7ph8mW66N/gUye99n/BWXDMrEMMrktZBVNNwTPM6283qM2EGSR
9HBa5s/jlW40ql5wK7qm5L08Gpz+aFrur4Iv1yKcwlvm7pZOdyW6xC5/3YwD
uKc7jcPal/9231R7hDGJSNE61Cink/mDp1y01AlESNOrWk4nCz5XsOLlVfIS
y+TpR0mbzDi/ay6wzv4vkMkAhOlHKRYblt/dl82Sf15l6UKrQ3A/UIzRX5Dv
VMIff9czMCr1cM+PuzHmZCJjd2H/b3giBwAAAAD/dqYHzriupBv9JpmMfXZQ
NqDxO2Wy4FOpozqB6lA0JCvbuNdC9Sgk4zj0UpT3uqH+kdyngk8NIXuj26V3
5/pjZDLvRbq1+a8RiVM3Iw3IEFGH2Tgu/WfBYCmLkx1uSIYIDJ/qUZmPhivC
YxUX7C6lTJ4eKHPXoaz/TTIZ++xAJiuHx1O5QcCfxPSbMlc9yGi53X0ZLXl+
MhmzvyDfoYBm1ILhqxEmNO3N4Y3v5C++AgAAAEAMr6cmKSo8wPfAPtf4xhHe
l/tnkzkRAX6c091fBTOCb52l8REspo+Xi1v2HVFu4r9rzokPCwk44OnmknJN
dPNLMNpREh/FCvDz2ufGuvCWL/7ilZyYiCA/HzdXZvGzaf7o06rsxLj4uFC/
oJii9kFhZJ4caC2Ij+ZERzD9wtKrnmA+lSRq7suqlGhWENPb3Y15qmfyY9e5
jNhwdtBB/6gjRY2Pvyi7Jsr/0l2RGujtwwyL4USEhx8uujogKY+VdRBueEtu
dFion7eni18J0vAnNdmHD8fHsP38OflXxD8WjD6pPRZlZ0AnECmM7cHJqWmp
8L+MqsdYWZr/7mpxdk5+fsHx/Pz87Kyj1U9/vGzIy8zOzztWkJebm5l94QFc
5/PfthYePZpXcOzYsdzcc3dHlDQSz9klZYPg2/Pq7HhOdEyoX0DksdZ+vLf3
BGMvajJi4hJTUuKjw/39D595iHsP0om+y0cTYlMyM7Oz0tOyck6eyfT1O/Ga
h5hbVWoUO+QQPLbM0heTH++dy4QnhekbEHGkuP7xqJL5G3/dkBvNikxKjOcE
HPCNKL7zYXqeXxCMvWwty05NToiPDY9MOX37w9j8ZDJ/5OGF5CAf74AIDieK
FZFYePXN3BDyB9sKM1KTmVvUKWpbmEnIRGSWdaDviMK9HbGWSqB5V8k9LIys
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
KYdjYu68lLvz+1K+oqaCyPn2i6MyLl+7dunEvo3xJyoej7z9Mk1t56/YVir9
Jn0qyNPDxXI6x8iEYzHH3TPgUJWwozCeu2yhjamJdIMz7NyWe+0s7Rfc37Ny
+WInM470xumWLsu5kbmaByt+63S9/lxhalxcckZOfm56vN9cR6/Y7Od9yh+3
ZP+L3DjvJcv5cXuPnz2ZttlvyfKA/bdbRRoOUFx7MlR6o4XsRlNzp+We/kdk
FY/jLZ1nZyKr5Ezb+R7cHWUjP++SPQ/3cy2tFsccPZm+KXDbDe2TCX8/jKaj
S01WyE8ILHq+y3nG2jylmU80PAvUe9d65k1nLVoqO/MaKid8V5TInW1u55d8
prDk8om9cYnnn/V1XIt2mmq2+Df+5twGtUlG9GSHs1N4asrm6J0nLl0ru3Hl
zN6INQF77nZ8Xzvya6/LDWcL98fG7T6SU3Dh0BZfV5cVGy/UqDx/A68vx3vN
n78q/sDpnLNHd23gRxz8Q2HYq7YCg28KEr0Xeq7fn11YmJOeFBeVmH37sDdT
GscMrJ2XrMuq13ASRk7xwMucuJWLPAJj9544c+rAptVL3QPSbrWOvkQaz2/g
LXW1NeaYcoytHJd4c1cm39I2BJXsq85Y4+IamvWotX+g63Vxsrf9ooTRka4j
JXrvJi4y5jiG5qnmoT+v8I1odP25KZTfVclPjw74c9ftzS59VF19Ly91tb25
U+iZmn5t16X4VWawt/scGyMjU46RtZO799rD1V86iuK4HvNszaTXDMfMcYEH
T3rVC8r3eXkssTeTvmOYGFm5unOjLoxOOyZ+m7bYYWM59RdObRcG2Xtv+3wT
49mhBbosYKtG7xW+KYdP1ed7+M/r62ZyVF5duh7+dPv5y6SHP/wDLw3pqzOV
Z2HuHn3kdHpsyNbrmt8bqF7moqeJLnPC9qdujE4+dvn6zRuFWXujVgXsu9Oh
wwmi3vsPvbnJXl0X43lz56+OO3Am+1xGUkTg+oMPKEady5mYl7/wUYovd7GD
pbSSHNPZrh48bnDmi4l60xZ3P9q73IhjY+/o4ujoNHvWLDOOAYNO0NizV2e+
0KFdU9BYvMvXcfaCoF2Hz2Rnpm4Ji0gtbZef4G3gRU6812JP/saU42dO749b
6+YelDr6lqHzlab9TMqe5EcpXJuZbhsPnzocE5Q4eokJm65u8XKYYb9m55mi
q3mZu+N2nK2RXqOx9obm838L3CS9Rn/ggv/RK/lb1TR+8krfOC+Ecz3mWs+Q
fvEwMndZ4snj7bytdew+5fH+6Oed1s8UFaInia5OYWn7NsUmHcu7VnrzSlbK
Br+gPd9fh986XYedLUrZGL/raG7+hcPxvvMdPePOy13TD1NXebiNfM8xMrOZ
58n1Cj3+/Zo+Eyo9BKvpsjNvMdeNm3x74MeOS9xdsdd9OsfSydHRxcHB0dbG
ksNm0egE28b/xHPFi3rg4c6FZtNsg3Iw1zUAwN9L2NVYU/HgUVVDt6wB5XNL
zeNnrxpaOno+i/7OWRTlxyYLut89e1z95uOQ5h3KZsCpfvqype9v6Wck6n5T
+eDhiw8/+uPsYPu7NoXHkP0tTR9/tCltrHvXgaCr4XnFw8cvvp83cX/nhx7N
Nfzc3jKyWIao513VH+V/PH7dptRMIz84UfCpseZJlbbnTzZxytOKx7XtA2qK
aSsgGex887Sy+u1HWYITtr+qrK598/5D14BQ1y8KIxfQk4m8gAbbKgsz0/Yl
pxw5X1b/6Uf6GQ/VFx9MPfNI/Tc7sr/xbm5Gyp604xdLK9/1TNyiS1qIX6bM
c0hU7Qv+jdYLYyJ8rinIq/6T8q6h2qK8p5p+G/oRur40RN1vK/949KJ9bK/O
z21/nbLGqgf3/njyqv3PHzpl49v7X2SvrqpHj1+1qXv5yfsbXv4TSfz+It/R
ObL4vWIP2sH26otxbhz2gn0vdHy5kNIroLriyYvmPjUPkJ61huontWN/y9D1
9SLqevP4j4cvVZ9kaQ1rKh9Vyl+jA53tWt6+1RrbtfQ3fPKqPd4fovUzRZ70
qej69lRU/3H/wePX7YpPhfzYZOlXkprHVW//wWt6WNx0iW/nGnH1fwpdj2QX
9eW4hSbseam6XtQAADD5qV0QCiYFtSvCwKQmqkqa67xLW4d++MX9qy9/4aMt
Nga+qgs2jdz3ZJudwRLlYcUAWqldEOofIXwUP3vKymzK302Fj7fPZi870oSL
GgDgV4GYPLl9+548jiGo8BMSViQ4LNpXi3YL0OhfffmLniU76i+nTg0DtyMt
TNZc1jB2HYDSt5gc8e98pMmGbLPdM6gv6lvR5hz+JeqhJgAA8B8jEQn+bL8R
a6NHsJcfftUz+EWM9//JRPr8DbTfjLZl0dgr0l/3DArx/P1HCO7H2bodeouU
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
/haTh4dFDZmeHCaNmBVRKh+UdYjJ4tf7FjjF67IzAAAAAAAA+DmQnWe5U2zj
HihHObL70ipDgkaf4nVWy6zV4trT28+q3CppTF9sYL+jeuyLMI8nJgsfbLJi
0dj8PKXh1qLqJEc2jcXL6tS+/9GYLJv8+hSPwyAYVhHXvw+41h6TRTW7XZx3
Vn2vmqTlZnpCbFQof41P6KlakaTnRUHa9u2JW2JC1ycev982UnCoqexY4uYt
8bHhIdGpl59jGWoAAAAAAIB/1JfSCGO2NDYqpzHhwwQrPYLGmBl5e2yNocKb
4TNYK061jTnmjScmDxXxDQiaQXCR0iJQ4pd75ujTmK57X2rfv1xMlj6wKYtn
SqezzENL/poSTGtMFlZuc3bdIz8HN9nXUFGan+ZrzmLYJBTdOLDlSPkHWcUl
HVdCzNi264ubKo9tSS5sGAn3AxWJcwkOL/Pd+KYMBwAAAAAAgB8gaTvhyTKO
UE17guthHDpB05s91j7D4ue7XZm6dW+mNp6Y3JvryyZohqHFyjH59T5XfRrh
uO2x9v0rxGTZZFznfUyYND3r4KKvvyloi8mC3zfZue2vV12AaugK35Bh4rpq
/+/f578eLAnmMJmz3OPzPoz+riCq2mlP6C840KB9DSsAAAAAAACYGKKqHU7M
2YmPVaLolzsxMxjSmGwdWz62oCtpPe7BnBJYKNBelNp4YnJPzkpZTA65qhyT
X8lisp5dQqX2/SvFZFmX6ezVJgyCMTMoX5ZltcTkwdsxNkszqJqCBVeDODTC
OUl+ejFhRbwNi24cdk1ucjFJU8YSJstStUM8AAAAAAAA/F2ED+JsmU67VaOo
pOmoG5Og0af5a10aeFgooMjCZNcZHpPtl9M31qqNJyYP5PlJY7JqSBe/2O3C
lkXUau37V4nJsrb33DUz6XTmDP+8NonmmDxwPcyWe7KVqsP0SExm+Z6TX1da
WJlgyyLmpMh30ZY0H3dnMs1i7n3RXlkAAAAAAACYEMKH8bOYTsnPVKOouHbv
XH0anW23vUrzNFySttPRu1VvJj/KYvLqi/2qd+lmXFN43Y6YzqSx/S8rrfwk
qt7hwKYxlx1u0r5/ipgsW2M639+MSWPMXJ3b0q4hJvcWBVitOttBOTB7JCaz
/XLlz8zXmDw/rU41JkcjJgMAAAAAAPxjRDXJc5g2W6lGEIvfHl7KphPE3NRa
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
AABl+QRvOVa2
    "], {{0, 226.47169103862018`}, {969.62879640045, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{969.62879640045, 226.47169103862018`},
  PlotRange->{{0, 969.62879640045}, {0, 226.47169103862018`}}]], "Input",
 CellID->175901535,ExpressionUUID->"a0e5736f-17ac-4a0f-8c90-62d1635c4dcf"],

Cell["Store the known quantities:", "Text",
 CellChangeTimes->{{3.875020268585967*^9, 3.875020273441266*^9}},
 CellID->218832967,ExpressionUUID->"4abb6a03-ae8a-4268-9c83-64da00672588"],

Cell[BoxData[
 RowBox[{
  RowBox[{"displacement", "=", 
   TemplateBox[<|
    "query" -> "20mm", "boxes" -> 
     TemplateBox[{"20", "\"mm\"", "millimeters", "\"Millimeters\""}, 
       "Quantity", SyntaxForm -> Mod], "allassumptions" -> {}, 
     "assumptions" -> {}, "open" -> {1, 2}, 
     "querystate" -> {
      "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
       0.2575439`6.862396261446939, "Messages" -> {}}, "contextinfo" -> 
     Automatic, "version" -> 5|>,
    "LinguisticAssistantTemplate"]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750202799093523`*^9, 3.8750202856810207`*^9}},
 CellLabel->"In[54]:=",
 CellID->887460193,ExpressionUUID->"6bca77a1-67ba-4d3c-a59a-3e257abc052b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"mass", "=", 
   TemplateBox[<|
    "query" -> "0.1kg", "boxes" -> 
     TemplateBox[{"0.1", "\"kg\"", "kilograms", "\"Kilograms\""}, "Quantity", 
       SyntaxForm -> Mod], 
     "allassumptions" -> {{
       "type" -> "Unit", "word" -> "kg", "template" -> 
        "Assuming kilograms for \"kg\"${separator}Use ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "default" -> 
        "\"UnitClash\" -> {\"kg\", {\"Kilograms\", \"dflt\"}}", 
        "Values" -> {{
          "name" -> "Kilograms", "desc" -> "kilograms", "input" -> 
           "\"UnitClash\" -> {\"kg\", {\"Kilograms\"}}"}, {
          "name" -> "KilogramsForce", "desc" -> "kilograms\[Hyphen]force", 
           "input" -> "\"UnitClash\" -> {\"kg\", {\"KilogramsForce\"}}"}}}}, 
     "assumptions" -> {}, "open" -> {1, 2}, 
     "querystate" -> {
      "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
       0.3064685`6.937930836202899, "Messages" -> {}}, "contextinfo" -> 
     Automatic, "version" -> 5|>,
    "LinguisticAssistantTemplate"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875020288878025*^9, 3.87502029401138*^9}},
 CellLabel->"In[55]:=",
 CellID->288098136,ExpressionUUID->"a41be5db-5a7a-4d2d-85f2-f0d5a214dfdd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"speed", "=", 
   TemplateBox[<|"query" -> "0.75m/s", "boxes" -> TemplateBox[{"0.75", 
        RowBox[{
         "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
          "\"s\""}], "meters per second", 
        FractionBox["\"Meters\"", "\"Seconds\""]}, "Quantity", SyntaxForm -> 
       Mod], "allassumptions" -> {{
       "word" -> "", "template" -> 
        "Assuming \"m/s\" is a unit${separator}Use \"m\" as ${desc} instead", 
        "count" -> "2", "pulldown" -> "false", "type" -> "MultiClash", 
        "default" -> "{\"MC\", \"m/s\"} -> {\"Unit\", \"dflt\"}", 
        "Values" -> {{
          "name" -> "Unit", "desc" -> "a unit", "input" -> 
           "{\"MC\", \"m/s\"} -> {\"Unit\"}", "word" -> "m/s"}, {
          "name" -> "Variable", "desc" -> "a variable", "input" -> 
           "{\"MC\", \"m/s\"} -> {\"Variable\"}", "word" -> "m"}}}, {
       "type" -> "Unit", "word" -> "m/s", "template" -> 
        "Assuming meters per second for \"m/s\"${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "\"UnitClash\" -> {\"m/s\", {\"MetersPerSecond\", \"dflt\"}}", 
        "Values" -> {{
          "name" -> "MetersPerSecond", "desc" -> "meters per second", "input" -> 
           "\"UnitClash\" -> {\"m/s\", {\"MetersPerSecond\"}}"}, {
          "name" -> "MinutesPerSecond", "desc" -> "minutes per second", 
           "input" -> 
           "\"UnitClash\" -> {\"m/s\", {\"MinutesPerSecond\"}}"}}}}, 
     "assumptions" -> {}, "open" -> {1, 2}, 
     "querystate" -> {
      "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
       0.4469889`7.1018417320001594, "Messages" -> {}}, "contextinfo" -> 
     Automatic, "version" -> 5|>,
    "LinguisticAssistantTemplate"]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750202969492073`*^9, 3.875020301429068*^9}},
 CellLabel->"In[56]:=",
 CellID->533324155,ExpressionUUID->"d27ab5ba-368b-464b-946a-7781c7eaba57"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<Hooke\>\"", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750200499530745`*^9, 3.875020061651526*^9}},
 CellLabel->"In[44]:=",
 CellID->209152469,ExpressionUUID->"85457bba-7757-4072-93ee-4b792947f214"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"HookesLaw\"\>", ",", "\<\"Force\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"F\"", "\"Force\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " force"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"k\"", "\"SpringConstant\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      TemplateBox[{"\"x\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"HookesLaw\"\>", ",", "\<\"PotentialEnergy\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"U\"", "\"Energy\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " energy"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      TemplateBox[{"\"k\"", "\"SpringConstant\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"x\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8750200629391537`*^9},
 CellLabel->"Out[44]=",
 CellID->46278772,ExpressionUUID->"e3ab7270-709c-40fe-a952-99495f4ee7a2"]
}, Open  ]],

Cell["\<\
I need to solve for the kinetic energy as the 100g mass passes the \
equilibrium with a speed of 0.75m/s.\
\>", "Text",
 CellChangeTimes->{{3.875020201015207*^9, 3.8750202239204655`*^9}},
 CellID->598583440,ExpressionUUID->"5368e7e3-3408-4051-b594-d007a83ed5a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<KineticEnergy\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750202330836315`*^9, 3.875020234094013*^9}},
 CellLabel->"In[52]:=",
 CellID->18132850,ExpressionUUID->"aa0683ed-898e-4352-ad2b-2991bf5e7b0a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"KineticEnergy\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"K\"", "\"Energy\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " energy"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"v\"", "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{"\<\"KineticEnergyRelativistic\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"K\"", "\"Energy\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " energy"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{"(", 
         TemplateBox[{
           InterpretationBox["\[InvisibleSpace]", 1], 
           RowBox[{
             SuperscriptBox[
              StyleBox["\"c\"", Italic, StripOnInput -> False], "2"]}], 
           "speed of light squared", 
           SuperscriptBox["\"SpeedOfLight\"", "2"]},
          "Quantity"], ")"}], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "+", 
          TemplateBox[{"\"\[Gamma]\"", "\"RelativisticGamma\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " relativistic gamma"}], 
             TooltipStyle -> "TextStyling"]& )]}], ")"}]}]}], ",", 
      RowBox[{
       TemplateBox[{"\"\[Gamma]\"", "\"RelativisticGamma\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " relativistic gamma"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox["1", 
        SqrtBox[
         RowBox[{"1", "+", 
          RowBox[{
           RowBox[{"(", 
            TemplateBox[{
              RowBox[{"-", "1"}], 
              RowBox[{"\"/\"", "\[InvisibleSpace]", 
                SuperscriptBox[
                 StyleBox["\"c\"", Italic, StripOnInput -> False], "2"]}], 
              "per speed of light squared", 
              FractionBox["1", 
               SuperscriptBox["\"SpeedOfLight\"", "2"]]},
             "Quantity"], ")"}], " ", 
           SuperscriptBox[
            TemplateBox[{"\"v\"", "\"Speed\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
               "TextStyling"]& )], "2"]}]}]]]}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8750202348182297`*^9},
 CellLabel->"Out[52]=",
 CellID->439166613,ExpressionUUID->"bfe62cdb-3bf4-4802-9964-aec6c33b0999"]
}, Open  ]],

Cell["I need the first one.", "Text",
 CellChangeTimes->{{3.875020307447979*^9, 3.875020312018858*^9}},
 CellID->39345217,ExpressionUUID->"d01ad2f8-c0ce-4d29-8795-03c012d7e333"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"\"\<KineticEnergy\>\"", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", "mass"}], 
     ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
      "speed"}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750203130694575`*^9, 3.8750203502437105`*^9}},
 CellLabel->"In[74]:=",
 CellID->114617938,ExpressionUUID->"c28f3712-0db5-405d-b585-616ed1a0f91c"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"Energy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"28.125`", "\"mJ\"", "millijoules", "\"Millijoules\""},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.8750203182906427`*^9, 3.875020350713636*^9}, 
   3.8750203808438673`*^9, 3.8750205713098526`*^9},
 CellLabel->"Out[74]=",
 CellID->247975336,ExpressionUUID->"bd558560-4345-43bc-8439-f51a6ece301a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<HookesLaw\>\"", ",", "\"\<PotentialEnergy\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
      "displacement"}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Energy\>\"", "]"}], "->", 
      RowBox[{"Last", "[", 
       RowBox[{"FormulaData", "[", 
        RowBox[{"\"\<KineticEnergy\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
            "mass"}], ",", 
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
            "speed"}]}], "}"}]}], "]"}], "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.875020407548284*^9, 3.875020560663477*^9}},
 CellLabel->"In[73]:=",
 CellID->644662140,ExpressionUUID->"ba3d1226-cade-49d4-ad61-717209374188"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"k\"", "\"SpringConstant\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"0.140625`", 
    RowBox[{"\"t\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
      SuperscriptBox["\"s\"", "2"]}], "metric tons per second squared", 
    FractionBox["\"MetricTons\"", 
     SuperscriptBox["\"Seconds\"", "2"]]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875020433714587*^9, 3.875020511171466*^9}, {
  3.8750205520221577`*^9, 3.8750205611541033`*^9}},
 CellLabel->"Out[73]=",
 CellID->65065262,ExpressionUUID->"6c9cf8c6-b658-4093-ba33-f78224d4349d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<HookesLaw\>\"", ",", "\"\<PotentialEnergy\>\""}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
      "displacement"}], ",", 
     RowBox[{
      RowBox[{"QuantityVariable", "[", "\"\<Energy\>\"", "]"}], "->", 
      RowBox[{"Last", "[", 
       RowBox[{"FormulaData", "[", 
        RowBox[{"\"\<KineticEnergy\>\"", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
            "mass"}], ",", 
           RowBox[{
            RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
            "speed"}]}], "}"}]}], "]"}], "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.87502057431423*^9, 3.875020591137292*^9}},
 CellLabel->"In[77]:=",
 CellID->160911645,ExpressionUUID->"43718fdd-84bf-4be1-8448-fc86ae717ad8"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"k\"", "\"SpringConstant\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " spring constant"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  TemplateBox[{"0.140625`", 
    RowBox[{"\"t\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
      SuperscriptBox["\"s\"", "2"]}], "metric tons per second squared", 
    FractionBox["\"MetricTons\"", 
     SuperscriptBox["\"Seconds\"", "2"]]},
   "Quantity"]}]], "Output",
 CellChangeTimes->{{3.875020580315423*^9, 3.875020591677124*^9}},
 CellLabel->"Out[77]=",
 CellID->303102759,ExpressionUUID->"ca1be5ac-5b70-40a3-b4b7-3943fb09aad1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{
   RowBox[{"Last", "[", 
    RowBox[{"FormulaData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<HookesLaw\>\"", ",", "\"\<PotentialEnergy\>\""}], "}"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Length\>\"", "]"}], "->", 
         "displacement"}], ",", 
        RowBox[{
         RowBox[{"QuantityVariable", "[", "\"\<Energy\>\"", "]"}], "->", 
         RowBox[{"Last", "[", 
          RowBox[{"FormulaData", "[", 
           RowBox[{"\"\<KineticEnergy\>\"", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"QuantityVariable", "[", "\"\<Mass\>\"", "]"}], "->", 
               "mass"}], ",", 
              RowBox[{
               RowBox[{"QuantityVariable", "[", "\"\<Speed\>\"", "]"}], "->", 
               "speed"}]}], "}"}]}], "]"}], "]"}]}]}], "}"}]}], "]"}], "]"}], 
   ",", 
   RowBox[{"\"\<Newtons\>\"", "/", "\"\<Meters\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750205997205467`*^9, 3.8750206212844105`*^9}},
 CellLabel->"In[82]:=",
 CellID->20910119,ExpressionUUID->"1ba2e8e0-82ae-4015-a383-46ff0c555fd9"],

Cell[BoxData[
 TemplateBox[{"140.625`", 
   RowBox[{
    "\"N\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"m\""}], 
   "newtons per meter", 
   FractionBox["\"Newtons\"", "\"Meters\""]},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.8750206098789835`*^9, 3.8750206378811183`*^9}},
 CellLabel->"Out[82]=",
 CellID->254424629,ExpressionUUID->"ffae66ff-cf91-4bd4-ae02-e8d2769c1072"]
}, Open  ]],

Cell["I think the correct answer is 140N/m or D.", "Text",
 CellChangeTimes->{{3.875020640193961*^9, 3.87502065210295*^9}},
 CellID->298648440,ExpressionUUID->"ad557097-130d-470d-9042-9d71a5b041a1"]
}, Closed]]
}, Open  ]]
},
WindowSize->{1440., 747.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules->{
 "ResourceType" -> "ComputationalEssay", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> <||>, "CreationTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "UpdatedTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "CompatibilityTest" -> 
  HoldComplete[
    BinaryDeserialize[
     ByteArray[{56, 67, 58, 120, 156, 133, 143, 205, 78, 131, 64, 20, 133, 
      163, 173, 110, 116, 213, 165, 79, 224, 6, 70, 11, 105, 138, 59, 197, 
      198, 184, 193, 70, 92, 184, 100, 24, 238, 164, 83, 7, 46, 153, 123, 41, 
      229, 237, 29, 140, 186, 193, 196, 245, 249, 249, 206, 209, 115, 90, 164,
       88, 183, 216, 53, 213, 230, 216, 58, 32, 50, 216, 232, 19, 58, 203, 0, 
      42, 202, 175, 95, 129, 176, 115, 10, 242, 129, 24, 234, 212, 26, 104, 
      184, 120, 4, 109, 26, 195, 222, 153, 33, 67, 137, 248, 81, 232, 83, 154,
       229, 192, 62, 25, 252, 25, 217, 58, 115, 144, 12, 133, 69, 89, 253, 24,
       222, 134, 22, 124, 238, 242, 222, 50, 184, 70, 178, 57, 0, 229, 87, 
      227, 156, 142, 229, 216, 46, 237, 134, 72, 14, 191, 133, 139, 169, 70, 
      243, 172, 179, 214, 99, 207, 159, 253, 11, 55, 14, 184, 72, 45, 118, 
      213, 75, 185, 7, 197, 249, 251, 142, 185, 165, 59, 33, 250, 190, 15, 
      123, 180, 218, 201, 90, 141, 122, 168, 176, 22, 88, 238, 133, 251, 110, 
      167, 175, 185, 98, 138, 72, 177, 97, 127, 65, 248, 215, 217, 195, 86, 
      178, 218, 133, 253, 81, 123, 208, 236, 9, 38, 188, 205, 191, 188, 106, 
      149, 68, 55, 75, 121, 27, 64, 164, 203, 32, 6, 41, 131, 36, 134, 117, 
      160, 228, 58, 74, 226, 74, 173, 202, 104, 249, 9, 89, 192, 149, 140}]]],
   "ToolsOpen" -> True, "StatusMessage" -> "", "TryRealOnly" -> False},
CreateCellID->True,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
       CellTags -> {"MainDockedCell"}, CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{39, 5}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    AutoQuoteCharacters -> {}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.458824, 0.458824, 0.458824]], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[
               0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
                1.]]}, StripOnInput -> False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "]]}, {
              FaceForm[
               RGBColor[
               0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
                1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, 
           ImageSize -> {11., 11.}, PlotRange -> {{0., 11.}, {0., 11.}}, 
           AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
           "\"Click for more information\""}, "PrettyTooltipTemplate"], 
         ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ParentCell[
              EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ParentCell[
                EvaluationCell[]], {
               TaggingRules, "AttachedMoreInfoTag"}] === #], CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ParentCell[
                 EvaluationCell[]], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
          "PrettyTooltipTemplate"], ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] === #],
             CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ReleaseHold[#3], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.75], 
                 Thickness[
                  NCache[
                   Rational[2, 45], 0.044444444444444446`]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.5], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], 
                    Graphics[{
                    RGBColor[
                    0.9882352941176471, 0.4196078431372549, 
                    0.20392156862745098`], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]], 
                    "Click to copy to the clipboard"], 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Graphics[{
                    RGBColor[0, 
                    Rational[2, 3], 0], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "Copied"]], UpdateInterval -> 
                    1, TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain", 
           StripOnInput -> False], Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8, StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain"], 
          Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8], "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           ButtonBox[
            StyleBox[
            "\"Insert Code Group\"", "Text", FontFamily -> "Source Sans Pro", 
             FontSize -> 11, StripOnInput -> False], ButtonFunction :> 
            With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
              Quiet[
               
               Block[{$ContextPath = RSNB`$cp$, 
                 ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                 False}, 
                Internal`WithLocalSettings[
                 ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                  Needs["ResourceSystemClient`DefinitionNotebook`"], 
                  ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                  RSNB`nb$, 
                   
                   ComputationalEssayHelpers`Private`\
createComputationalParagraph[]], 
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
            BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue[Enabled], 
               FEPrivate`If[
                CurrentValue["MouseOver"], {
                FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                FontColor -> 
                 RGBColor[
                  0.17960779999999998`, 0.17960779999999998`, 
                   0.17960779999999998`]}], {
               FontColor -> 
                RGBColor[
                 0.5898038999999999, 0.5898038999999999, 
                  0.5898038999999999]}], Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
            Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
            "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
            Evaluator -> Automatic], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Headings\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Section", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "4") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Section"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "5") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsubsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "6") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsubsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], Delimiter, DynamicBox[
               ToBoxes[
                
                Grid[{{"Title", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "1") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Title"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subtitle", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "2") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subtitle"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Chapter", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "3") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Chapter"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Author\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Author"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Abstract\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Abstract"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Text\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Text", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Text"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"CodeText", ((((" (" <> "Shift+") <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "CodeText"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Item\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Item"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             StyleBox[
              
              TemplateBox[{
               "\"Open/Close Groups\"", 
                "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\"\
"}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
              StripOnInput -> False], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {
            "\"Open Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {1 -> RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "ColumnsIndexed" -> {1 -> 0, -1 -> 0}, "Rows" -> {{Automatic}}}, 
         FrameStyle -> GrayLevel[0.75]], "Grid"]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           TagBox[
            GridBox[{{
               GraphicsBox[{{
                  Thickness[0.03333333333333333], {
                   FaceForm[{
                    RGBColor[
                    0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27.,
                     1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                    2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23.,
                     2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.,
                     2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                    5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                    4.}, {11., 3.}, {8., 3.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
                    0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{9.697299999999998, 24.522}, {
                    9.133299999999998, 24.645}, {8.861299999999998, 
                    24.259999999999998`}, {9.313299999999998, 24.092}}, {{
                    9.291299999999998, 23.933}, {8.9683, 
                    24.052999999999997`}, {9.2183, 23.726999999999997`}, {
                    9.587299999999999, 23.601}}, {{9.553299999999998, 
                    23.447}, {9.169299999999998, 23.578}, {8.760299999999999, 
                    23.456999999999997`}, {9.102299999999998, 
                    23.348999999999997`}}, {{9.083299999999998, 22.633}, {
                    9.025299999999998, 23.208}, {8.567299999999998, 23.354}, {
                    8.555299999999999, 22.865}}, {{8.521299999999998, 
                    23.551}, {9.039299999999999, 23.703}, {8.711299999999998, 
                    24.13}, {8.2183, 23.962999999999997`}}, {{8.4073, 
                    23.197}, {8.171299999999999, 22.851}, {8.171299999999999, 
                    22.445}, {8.398299999999999, 22.837}}, {{
                    8.091299999999999, 23.014}, {8.395299999999999, 23.458}, {
                    8.091299999999999, 23.871}, {7.786299999999999, 
                    23.458}}, {{8.010299999999999, 22.851}, {
                    7.773299999999999, 23.197}, {7.782299999999998, 22.837}, {
                    8.010299999999999, 22.445}}, {{7.964299999999999, 
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                    7.141299999999999, 23.703}, {7.659299999999998, 
                    23.551}}, {{7.626299999999999, 22.865}, {
                    7.614299999999998, 23.354}, {7.155299999999999, 23.209}, {
                    7.097299999999999, 22.633999999999997`}}, {{
                    7.078299999999999, 23.348999999999997`}, {
                    7.422299999999998, 23.456999999999997`}, {
                    7.0112999999999985`, 23.578}, {6.6282999999999985`, 
                    23.447}}, {{6.593299999999998, 23.601}, {
                    6.962299999999999, 23.726999999999997`}, {
                    7.214299999999998, 24.054}, {6.889299999999999, 
                    23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                    7.319299999999998, 24.259999999999998`}, {
                    7.0482999999999985`, 24.645}, {6.484299999999998, 
                    24.522}}, {{7.113299999999999, 25.217}, {
                    7.158299999999999, 24.761}, {7.356299999999999, 
                    24.479999999999997`}, {7.344299999999999, 24.904}}, {{
                    7.5032999999999985`, 24.817999999999998`}, {
                    7.518299999999998, 24.279}, {8.010299999999999, 24.113}, {
                    8.010299999999999, 24.637999999999998`}}, {{
                    7.2452999999999985`, 25.302}, {7.4712999999999985`, 
                    24.997}, {7.8622999999999985`, 24.857}, {
                    7.656299999999998, 25.122}}, {{7.800299999999998, 
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                    25.192}, {8.091299999999999, 25.689}}, {{
                    8.171299999999999, 24.637999999999998`}, {
                    8.171299999999999, 24.113}, {8.663299999999998, 24.279}, {
                    8.677299999999999, 24.817999999999998`}}, {{
                    8.836299999999998, 24.904}, {8.8243, 
                    24.479999999999997`}, {9.022299999999998, 24.761}, {
                    9.068299999999999, 25.217}}, {{8.318299999999999, 
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                    25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                    "]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.,
                     25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                    26.}, {11., 26.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {
                    24., 20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 
                    20.}, {18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {
                    10., 19.}, {6., 19.}}, {{11., 19.}, {17., 19.}, {17., 
                    18.}, {11., 18.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                    "]]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                    "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                    "]}]}}}, {
                ImageSize -> {Automatic, 32}, 
                 ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                 Scaled[0.25], AspectRatio -> Automatic, 
                 ImageSize -> {30., 30.}, 
                 PlotRange -> {{0., 30.}, {0., 30.}}}], 
               StyleBox[
                TagBox[
                 GridBox[{{
                    StyleBox[
                    "\"Computational Essay\"", FontFamily -> 
                    "Source Sans Pro", FontWeight -> "SemiBold", StripOnInput -> 
                    False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxDividers -> {
                   "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], FontSize -> 24, FontColor -> GrayLevel[1], 
                StripOnInput -> False]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", "\"\""}, {
           ActionMenuBox[
            TemplateBox[{
              TemplateBox[{
                TemplateBox[{"\"Sample Content\"", 
                  TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                 "RowDefault"], 
                "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\""}, "PrettyTooltipTemplate"], Null& , 
              "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\"", True}, "OrangeButtonTemplate"], {
            "\"Insert Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`insertSampleContent[]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Clear Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    Module[{$CellContext`cells = Flatten[
                    Map[{NotebookFind[
                    ButtonNotebook[], #, All, CellTags, AutoScroll -> False]; 
                    SelectedCells[]}& , {
                    "ExampleTopicSentence", "TopicSentenceButton", 
                    "ExampleCodeText", "ExampleInput", "ExampleOutput", 
                    "EssayStructureExample", "CitationExample", 
                    "SectionMoreInfoYourEssayTitle", 
                    "SectionMoreInfoAuthorInfoButton", 
                    "SectionMoreInfoAbstract", 
                    "SectionMoreInfoSectionHeaderInfoButton"}]]}, 
                    NotebookDelete[$CellContext`cells]]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sample Essay\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    SystemOpen["https://wolfr.am/SampleEssay"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           
           TemplateBox[{
            "\"Open Guidelines\"", SystemOpen[
             "https://wolfr.am/ComputationalEssayGuidelines"]& , "\"\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             TemplateBox[{
               TagBox[
                GridBox[{{"\"Tools\"", 
                   PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{0., 0.65}, {0., -0.65}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None], True -> 
                    GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[-0.1]]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
               "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`ToggleToolbar[
              ButtonNotebook[]]& , "\"Toggle documentation toolbar\"", False},
             "OrangeButtonTemplate"], 
           TagBox[
            
            GridBox[{{"\"\"", "\"\""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxDividers -> {
              "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{2}}},
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
             RGBColor[0.99215, 0.843125, 0.68235]], "Grid"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Check\"", "\"Check notebook for potential errors\""}, 
              "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`CheckDefinitionNotebook[
              ButtonNotebook[]]& , "\"Check notebook for potential errors\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Publish to Cloud\"", 
               "\"Publish your computational essay to the cloud\""}, 
              "PrettyTooltipTemplate"], 
             With[{$CellContext`nb = ButtonNotebook[]}, CreateDialog[
                
                ComputationalEssayHelpers`Private`createSubmissionDialog[$\
CellContext`nb], WindowSize -> {350, 150}, Background -> White, WindowFrame -> 
                "Normal", "Evaluator" -> "System"]; Null]& , 
             "\"Publish your computational essay to the cloud\"", False}, 
            "OrangeButtonTemplate"], 
           ItemBox[
            StyleBox[
             DynamicBox[
              ToBoxes[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
               StandardForm], Evaluator -> "System", 
              Initialization :> (CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
               "")], "Text", 
             GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
            StripOnInput -> False], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Submit to Notebook Archive\"", 
               "\"Submit your essay to the Wolfram Notebook Archive\""}, 
              "PrettyTooltipTemplate"], 
             ComputationalEssayHelpers`Private`submitEssay[]& , 
             "\"Submit your essay to the Wolfram Notebook Archive\"", False}, 
            "OrangeButtonTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
           "Rows" -> {{Center}}}, AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.9843, 0.68625, 0.3647], 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {
            1 -> RGBColor[0.9843, 0.68625, 0.3647], 2 -> 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "Columns" -> {5, {0.9}, 5}, 
           "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 1.55}}, FrameStyle -> 
         RGBColor[0.9843, 0.68625, 0.3647]], "Grid"]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{{
                Thickness[0.03333333333333333], {
                 FaceForm[{
                   RGBColor[
                   0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27., 
                  1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                  2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                 FaceForm[{
                   RGBColor[0.898, 0.898, 0.898], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 
                  2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22., 
                  2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                  5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                  4.}, {11., 3.}, {8., 3.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{9.697299999999998, 24.522}, {9.133299999999998, 
                   24.645}, {8.861299999999998, 24.259999999999998`}, {
                   9.313299999999998, 24.092}}, {{9.291299999999998, 
                   23.933}, {8.9683, 24.052999999999997`}, {9.2183, 
                   23.726999999999997`}, {9.587299999999999, 23.601}}, {{
                   9.553299999999998, 23.447}, {9.169299999999998, 23.578}, {
                   8.760299999999999, 23.456999999999997`}, {
                   9.102299999999998, 23.348999999999997`}}, {{
                   9.083299999999998, 22.633}, {9.025299999999998, 23.208}, {
                   8.567299999999998, 23.354}, {8.555299999999999, 
                   22.865}}, {{8.521299999999998, 23.551}, {9.039299999999999,
                    23.703}, {8.711299999999998, 24.13}, {8.2183, 
                   23.962999999999997`}}, {{8.4073, 23.197}, {
                   8.171299999999999, 22.851}, {8.171299999999999, 22.445}, {
                   8.398299999999999, 22.837}}, {{8.091299999999999, 
                   23.014}, {8.395299999999999, 23.458}, {8.091299999999999, 
                   23.871}, {7.786299999999999, 23.458}}, {{8.010299999999999,
                    22.851}, {7.773299999999999, 23.197}, {7.782299999999998, 
                   22.837}, {8.010299999999999, 22.445}}, {{7.964299999999999,
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                   7.141299999999999, 23.703}, {7.659299999999998, 
                   23.551}}, {{7.626299999999999, 22.865}, {7.614299999999998,
                    23.354}, {7.155299999999999, 23.209}, {7.097299999999999, 
                   22.633999999999997`}}, {{7.078299999999999, 
                   23.348999999999997`}, {7.422299999999998, 
                   23.456999999999997`}, {7.0112999999999985`, 23.578}, {
                   6.6282999999999985`, 23.447}}, {{6.593299999999998, 
                   23.601}, {6.962299999999999, 23.726999999999997`}, {
                   7.214299999999998, 24.054}, {6.889299999999999, 
                   23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                   7.319299999999998, 24.259999999999998`}, {
                   7.0482999999999985`, 24.645}, {6.484299999999998, 
                   24.522}}, {{7.113299999999999, 25.217}, {7.158299999999999,
                    24.761}, {7.356299999999999, 24.479999999999997`}, {
                   7.344299999999999, 24.904}}, {{7.5032999999999985`, 
                   24.817999999999998`}, {7.518299999999998, 24.279}, {
                   8.010299999999999, 24.113}, {8.010299999999999, 
                   24.637999999999998`}}, {{7.2452999999999985`, 25.302}, {
                   7.4712999999999985`, 24.997}, {7.8622999999999985`, 
                   24.857}, {7.656299999999998, 25.122}}, {{7.800299999999998,
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                   25.192}, {8.091299999999999, 25.689}}, {{8.171299999999999,
                    24.637999999999998`}, {8.171299999999999, 24.113}, {
                   8.663299999999998, 24.279}, {8.677299999999999, 
                   24.817999999999998`}}, {{8.836299999999998, 24.904}, {
                   8.8243, 24.479999999999997`}, {9.022299999999998, 
                   24.761}, {9.068299999999999, 25.217}}, {{8.318299999999999,
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                   25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                   "]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11., 
                  25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                  26.}, {11., 26.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {24.,
                   20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 20.}, {
                  18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {10., 19.}, {
                  6., 19.}}, {{11., 19.}, {17., 19.}, {17., 18.}, {11., 
                  18.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                  "]]}, {
                 FaceForm[{
                   RGBColor[0.392, 0.392, 0.392], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                   "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                   "]}]}}}, {
              ImageSize -> 12, AspectRatio -> Automatic, 
               ImageSize -> {30., 30.}, PlotRange -> {{0., 30.}, {0., 30.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
         "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
         Dynamic[
           FEPrivate`If[
            CurrentValue[Enabled], 
            GrayLevel[1], 
            RGBColor[0.8730375, 0.83578125, 0.7955875]], Evaluator -> 
           "System"], StripOnInput -> False], ButtonFunction :> 
        With[{RSNB`nb$ = ButtonNotebook[]}, 
          If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
            ProgressIndicator[Appearance -> "Necklace"]]; 
          With[{RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False}, 
              Internal`WithLocalSettings[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; 
                Needs["ResourceSystemClient`DefinitionNotebook`"], 
                ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                RSNB`nb$, 
                 #2[]], 
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 False; Null]; Null]]]; 
          CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; Null],
         FrameMargins -> {{5, 5}, {0, 0}}, 
        Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1R5n1BhlAEFANlwxXNmaCoem
KIPacD1kBBQBisOVba1zbos1QlMDQUBxoCzEtUAtjRhGQVAj2EAGMCBGGZGm
Ee82In1KfLgREwvExCkA9SYWEg==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Hover" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1Zds2ptsAkFANlwxXNmaCoee
JJP7c4J/r4+FICAbKAIUhyvbWufcn2L6eH4IXA0EAUWA4kBZiGuBWiammqGp
gSCgOFCWAQyIUUakacS7jUifEh9uxMQCMXEKAB4IRIc=
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaNDUxIhCFkQWRlQ6vOz678/PIEgIBuuGK7s6Iz0
X++f/DnY+Ht9LAQB2UARoDhc2c4Wry/Pb/zZVw1XA1W5rxooDpSFuBZk1Nv7
aGogCCgOlGUAA2KUEWka8W4j0qfEhxsxsUBMnAIAq2R1ew==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
        Background -> RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
        Method -> "Queued", ImageSize -> {All, 23}, Enabled -> Dynamic[
          Not[
           TrueQ[ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
          TrackedSymbols :> {
           ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
        Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              AdjustmentBox[
               TemplateBox[{
                 ActionMenuBox[
                  TagBox[
                   PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                   MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                  Method -> "Queued"], "\"View suggestions\""}, 
                "PrettyTooltipTemplate"], BoxBaselineShift -> -0.3]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -1.}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05555555555555555], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh4qXaoYcOfoO
m+a+X37stKZDbP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4PzZRxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA8nn+Z
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.175292500000001, 
             7.416875}, {7.796855000000001, 11.3084375}, {7.796855000000001, 
             13.38}, {10.11998, 13.38}, {10.11998, 11.3084375}, {
             9.741542500000001, 7.416875}, {8.175292500000001, 
             7.416875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cTvZcLf/4oOD6tE1rk/5HNQjDzAkqeL4FsusdsW
1KjgwAAGAg7hCSdehX2Xd5BvfR24Q07QwaZCOJPjjZyDHdf1xQW2Qg56LJYa
iWlyDv2HvmrEzBeG80GmVbmIwvkvtjT6Sb8Qg+t/BLLPUwJuPti6DEm4/WD7
2qTg7gMZJyIm7QBzP4y/zEVob88lJTi/7+dk7hV1ynD9c3LzfPxZVODmr3ro
0futUwVu/0bpbbqnzqjA3Qfjw9wP48P8B9MP8z/MfFj4wOyHhR/MfbDwRQ9/
ACBxmlc=
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.7185389999999999, 0.5009625, 0.266231]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.47902599999999995`, 0.333975, 0.17748733333333333`]], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.854902, 0.396078, 0.145098], 
       RGBColor[
       0.0196078431372549, 0.28627450980392155`, 0.6509803921568628]]]], 
   Cell[
    StyleData["StringTypeLink"], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        DynamicBox[
         If[
          CurrentValue["MouseOver"], 
          ButtonBox[
           
           StyleBox[#, FontColor -> 
            RGBColor[0.9686274509803922, 0.4666666666666667, 0.]], 
           ButtonData -> #2], 
          ButtonBox[#, ButtonData -> #2]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {
     BaseStyle -> {FontColor -> GrayLevel[0.46666667], "Link"}}], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.905882]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, StyleMenuListing -> None, Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.880722, 0.611041, 0.142051], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.9821083, 0.94165615, 0.87130765]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.368417, 0.506779, 0.709798], Background -> 
    RGBColor[0.90526255, 0.92601685, 0.9564697]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.560181, 0.691569, 0.194885], Background -> 
    RGBColor[0.9340271499999999, 0.95373535, 0.87923275]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    RGBColor[0.898039, 0.898039, 0.898039]], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}]}, Visible -> False, 
  FrontEndVersion -> "13.1 for Microsoft Windows (64-bit) (June 16, 2022)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"b909d709-eca9-4c97-b883-4afa0def7ee4"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Examples"->{
  Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "Your Essay Title"->{
  Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "AuthorName"->{
  Cell[874, 29, 268, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
   CellTags->"AuthorName",
   CellID->960727095]},
 "Abstract"->{
  Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]},
 "TemplateCell"->{
  Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Examples", 667122, 12967},
 {"Your Essay Title", 667309, 12971},
 {"AuthorName", 667490, 12975},
 {"Abstract", 667649, 12979},
 {"TemplateCell", 667831, 12983}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577],
Cell[874, 29, 268, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
 CellTags->"AuthorName",
 CellID->960727095],
Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573],
Cell[1292, 40, 519, 13, 35, "Text",ExpressionUUID->"2ab7daf6-7cbb-48e6-bb85-21f224057b7e",
 CellID->274298377],
Cell[1814, 55, 200, 2, 35, "Text",ExpressionUUID->"290809a1-80cd-4333-af8b-40be97e687d4",
 CellID->291010177],
Cell[CellGroupData[{
Cell[2039, 61, 236, 4, 28, "Input",ExpressionUUID->"2051a3a3-bd48-47bf-b701-2a8727c2e04a",
 CellID->74017418],
Cell[2278, 67, 205, 3, 32, "Output",ExpressionUUID->"68361d60-8d22-4428-921e-11847728d889",
 CellID->297239470]
}, Open  ]],
Cell[CellGroupData[{
Cell[2520, 75, 172, 2, 67, "Section",ExpressionUUID->"9952e69f-1ff1-46f0-b93a-e36b077bffca",
 CellID->627868314],
Cell[2695, 79, 39255, 647, 186, "Input",ExpressionUUID->"229b9189-6885-404e-a75f-32107bfe6a4d",
 CellID->212968093],
Cell[41953, 728, 386, 10, 35, "Text",ExpressionUUID->"2e5cf91e-98cd-4cfd-9ede-d2adb7a20aea",
 CellID->143109431],
Cell[42342, 740, 490, 13, 36, "Input",ExpressionUUID->"8a3bd2b1-a38b-4483-9789-f22bbbc15e12",
 CellID->42039440],
Cell[42835, 755, 254, 5, 35, "Text",ExpressionUUID->"b3b9d832-2030-4d8a-8207-643ff59812ea",
 CellID->201421124],
Cell[43092, 762, 305, 7, 36, "Input",ExpressionUUID->"061e9e71-5877-46cd-aad1-112b4166347b",
 CellID->71618934],
Cell[43400, 771, 198, 2, 35, "Text",ExpressionUUID->"826019a2-fcf0-4a0d-999e-34816e8031ea",
 CellID->26772973],
Cell[43601, 775, 440, 11, 36, "Input",ExpressionUUID->"c0f28fc3-7dcf-42ad-97d4-31d9441386f0",
 CellID->18719899],
Cell[44044, 788, 434, 12, 35, "Text",ExpressionUUID->"a7bc4939-68eb-4757-8196-0eb4c2eeef1e",
 CellID->138601629],
Cell[44481, 802, 188, 2, 35, "Text",ExpressionUUID->"b24af248-f5b6-4b3f-88ab-ddf431b6c3cb",
 CellID->63492435],
Cell[CellGroupData[{
Cell[44694, 808, 372, 10, 45, "Input",ExpressionUUID->"6bfd7631-b1f8-41ab-b658-7ecb743d744c",
 CellID->713269602],
Cell[45069, 820, 465, 9, 28, "Message",ExpressionUUID->"a351d156-90ce-465d-8dd0-98f0c625f879",
 CellID->342123661],
Cell[45537, 831, 334, 8, 41, "Output",ExpressionUUID->"05b4b49d-2cff-498e-8d2b-53cb897ff52d",
 CellID->259623945]
}, Open  ]],
Cell[CellGroupData[{
Cell[45908, 844, 565, 17, 45, "Input",ExpressionUUID->"512763c5-0d97-408b-9dc6-a1863096cf38",
 CellID->614030663],
Cell[46476, 863, 488, 9, 28, "Message",ExpressionUUID->"03e6b759-d324-4788-8c13-621578460fc7",
 CellID->66728271],
Cell[46967, 874, 286, 5, 39, "Output",ExpressionUUID->"2c945c8c-6f60-4cec-b511-2f51fec211e7",
 CellID->612738351]
}, Open  ]],
Cell[47268, 882, 180, 2, 35, "Text",ExpressionUUID->"153c8926-e1c6-469f-9e5d-45a070b35fe6",
 CellID->58038683],
Cell[CellGroupData[{
Cell[47473, 888, 390, 9, 28, "Input",ExpressionUUID->"e757fbd8-19c8-4f5f-a0ab-f1d267719600",
 CellID->307634299],
Cell[47866, 899, 279, 5, 32, "Output",ExpressionUUID->"806f13cc-5854-486a-a0d6-d4f4ca85d6fa",
 CellID->457808490]
}, Open  ]],
Cell[48160, 907, 184, 2, 35, "Text",ExpressionUUID->"81320f42-189d-4e6d-86b8-89e976d31997",
 CellID->307471050]
}, Open  ]],
Cell[CellGroupData[{
Cell[48381, 914, 198, 3, 67, "Section",ExpressionUUID->"696c8f78-07ab-4d25-86c9-ea755f45cd25",
 CellID->743554474],
Cell[48582, 919, 44535, 734, 177, "Input",ExpressionUUID->"d4e3fb99-f2f5-4c9c-8a0d-fa183ea6c1d6",
 CellID->74227303],
Cell[93120, 1655, 779, 24, 42, "Text",ExpressionUUID->"7f17ee30-a62f-4d35-a515-e03cc878b8ff",
 CellID->23481574],
Cell[93902, 1681, 240, 4, 35, "Text",ExpressionUUID->"69bd7760-94e4-4694-a297-36428b74a3a3",
 CellID->386341421],
Cell[CellGroupData[{
Cell[94167, 1689, 298, 6, 35, "Input",ExpressionUUID->"a62931eb-57eb-4d1e-9559-b6180e221f7b",
 CellID->128439433],
Cell[94468, 1697, 274, 5, 42, "Output",ExpressionUUID->"36a3ac96-6e3d-48fa-a192-db286c4be9b7",
 CellID->173607952]
}, Open  ]],
Cell[94757, 1705, 273, 5, 35, "Text",ExpressionUUID->"0535b6e8-542e-4695-a56d-376695694e31",
 CellID->573981839],
Cell[CellGroupData[{
Cell[95055, 1714, 232, 4, 28, "Input",ExpressionUUID->"13fe0c00-a3f5-4ffc-9332-c872c8e56f4b",
 CellID->129662362],
Cell[95290, 1720, 281, 7, 39, "Output",ExpressionUUID->"a49e250e-5f76-4da6-b822-1904d6e9a1b9",
 CellID->149901727]
}, Open  ]],
Cell[CellGroupData[{
Cell[95608, 1732, 273, 5, 28, "Input",ExpressionUUID->"6d88d531-30c8-4521-9dd7-747615c089bf",
 CellID->749148820],
Cell[95884, 1739, 249, 5, 39, "Output",ExpressionUUID->"46ba40d1-02bb-40f7-a011-8a615b2cd073",
 CellID->214245323]
}, Open  ]],
Cell[CellGroupData[{
Cell[96170, 1749, 273, 5, 28, "Input",ExpressionUUID->"4f528f8d-8412-49c7-b002-2837aa795469",
 CellID->286673712],
Cell[96446, 1756, 244, 5, 39, "Output",ExpressionUUID->"085ee2de-5a58-4713-a79b-db2afd2ae2e8",
 CellID->127676115]
}, Open  ]],
Cell[96705, 1764, 198, 2, 35, "Text",ExpressionUUID->"0710ab99-009a-4eae-a73f-6213af78c789",
 CellID->7140843],
Cell[96906, 1768, 386, 10, 35, "Input",ExpressionUUID->"cf8cb438-cd33-4bd8-bf94-dcee1b8e4767",
 CellID->360578427],
Cell[CellGroupData[{
Cell[97317, 1782, 3306, 70, 68, "Input",ExpressionUUID->"4ec79828-b880-4bd0-9cca-1ff132654b85",
 CellID->92315837],
Cell[100626, 1854, 914, 23, 44, "Output",ExpressionUUID->"1a5fe07b-e41f-4e10-84c7-c602a789c528",
 CellID->244694661]
}, Open  ]],
Cell[101555, 1880, 200, 2, 35, "Text",ExpressionUUID->"57c7a02a-6a1d-4242-8898-30044270e750",
 CellID->21197662],
Cell[CellGroupData[{
Cell[101780, 1886, 3355, 72, 68, "Input",ExpressionUUID->"cfe3a9f9-8c59-49dc-8682-74f5485040cd",
 CellID->1000441859],
Cell[105138, 1960, 571, 13, 44, "Output",ExpressionUUID->"29fafeac-c45e-4eaf-8073-e195aa9c0ad3",
 CellID->468538365]
}, Open  ]],
Cell[105724, 1976, 278, 5, 35, "Text",ExpressionUUID->"4e11a26f-0034-4d96-bb7b-d36540966529",
 CellID->52762262],
Cell[CellGroupData[{
Cell[106027, 1985, 3604, 76, 68, "Input",ExpressionUUID->"2b21f807-2da4-494b-8038-32fdd8df774e",
 CellID->14537228],
Cell[109634, 2063, 473, 9, 43, "Output",ExpressionUUID->"fd6b89b5-f28b-4243-9a56-76891965dd3f",
 CellID->11451360]
}, Open  ]],
Cell[CellGroupData[{
Cell[110144, 2077, 229, 4, 28, "Input",ExpressionUUID->"18cc95d1-848b-40ac-abbf-d4d59ca65fef",
 CellID->90435974],
Cell[110376, 2083, 473, 9, 43, "Output",ExpressionUUID->"5d0daa33-c1b0-4138-8a2d-c7d39be5915d",
 CellID->61875961]
}, Open  ]],
Cell[110864, 2095, 435, 12, 35, "Text",ExpressionUUID->"232a5588-15ae-4fac-bc4f-93107ab8513f",
 CellID->143349560],
Cell[CellGroupData[{
Cell[111324, 2111, 207, 2, 54, "Subsection",ExpressionUUID->"597098e0-70da-4dc1-8adc-97ee49994453",
 CellID->516260892],
Cell[CellGroupData[{
Cell[111556, 2117, 252, 4, 28, "Input",ExpressionUUID->"746b765e-f10a-4d76-9c64-67f60d3bcf12",
 CellID->598535991],
Cell[111811, 2123, 14140, 314, 737, "Output",ExpressionUUID->"69501ce1-23ae-4cf1-8779-f1eccc3ba612",
 CellID->843888675]
}, Open  ]],
Cell[CellGroupData[{
Cell[125988, 2442, 266, 5, 28, "Input",ExpressionUUID->"5fc0f0b2-35da-41b9-9157-ac9b4280351b",
 CellID->370908863],
Cell[126257, 2449, 1777, 41, 90, "Output",ExpressionUUID->"02d0e583-1a56-4aaa-9e96-0bbc9860288e",
 CellID->48494446]
}, Open  ]],
Cell[CellGroupData[{
Cell[128071, 2495, 339, 7, 28, "Input",ExpressionUUID->"c71a048d-8451-485b-8008-e7057833957e",
 CellID->115714372],
Cell[128413, 2504, 15563, 389, 233, "Output",ExpressionUUID->"c03fa968-c276-4885-9ade-fcfeac0af572",
 CellID->273761703]
}, Open  ]],
Cell[CellGroupData[{
Cell[144013, 2898, 375, 8, 28, "Input",ExpressionUUID->"73664c97-d014-4fbe-a8cd-0ec19b3cc359",
 CellID->522980763],
Cell[144391, 2908, 3525, 91, 69, "Output",ExpressionUUID->"f8c535f4-6f5b-48c7-aef0-72e4ccc59dc2",
 CellID->234465659]
}, Open  ]],
Cell[CellGroupData[{
Cell[147953, 3004, 1453, 32, 47, "Input",ExpressionUUID->"dfce975c-0361-4117-aa8f-f19aa44477a1",
 CellID->181707144],
Cell[149409, 3038, 721, 17, 40, "Output",ExpressionUUID->"306154ea-f0b9-47f0-8129-67000350f3d9",
 CellID->425997705]
}, Open  ]],
Cell[150145, 3058, 193, 2, 35, "Text",ExpressionUUID->"2c6301c0-59cc-4a4c-9086-e6e0b18e2add",
 CellID->64642828],
Cell[CellGroupData[{
Cell[150363, 3064, 1514, 33, 47, "Input",ExpressionUUID->"207388db-fd2c-4b9d-aa40-a59ac5b9fc96",
 CellID->251402731],
Cell[151880, 3099, 378, 9, 40, "Output",ExpressionUUID->"a4694704-ac2d-43b1-99c8-537abc0a8a92",
 CellID->248414869]
}, Open  ]],
Cell[CellGroupData[{
Cell[152295, 3113, 2090, 47, 105, "Input",ExpressionUUID->"ecf8a4f6-674c-4b85-b989-a2eb1bd70bde",
 CellID->20244208],
Cell[154388, 3162, 771, 16, 43, "Output",ExpressionUUID->"147384a4-05fb-434f-80f0-d3e82d29d63d",
 CellID->103570259]
}, Open  ]],
Cell[155174, 3181, 174, 2, 35, "Text",ExpressionUUID->"b0b40329-d079-40d3-833c-5e742515efb3",
 CellID->99090438],
Cell[CellGroupData[{
Cell[155373, 3187, 2175, 49, 105, "Input",ExpressionUUID->"c1e4a17f-4b63-45fd-b85c-15b88a117ead",
 CellID->536368749],
Cell[157551, 3238, 440, 9, 43, "Output",ExpressionUUID->"b0e67ca2-36bf-4e38-b077-ba3f0360dacd",
 CellID->405072700]
}, Open  ]],
Cell[CellGroupData[{
Cell[158028, 3252, 2248, 50, 132, "Input",ExpressionUUID->"536193de-d178-4f17-9b22-69e161e81580",
 CellID->295541587],
Cell[160279, 3304, 436, 9, 43, "Output",ExpressionUUID->"80d78f54-d143-4580-8be9-de89b05ae6e5",
 CellID->8648420]
}, Open  ]],
Cell[CellGroupData[{
Cell[160752, 3318, 2326, 52, 132, "Input",ExpressionUUID->"4d91f43f-e9fa-4a80-999d-a592bc5e99f8",
 CellID->241982791],
Cell[163081, 3372, 435, 9, 43, "Output",ExpressionUUID->"89c7549c-9a4a-4100-b32f-aba3a59b5653",
 CellID->136378062]
}, Open  ]],
Cell[CellGroupData[{
Cell[163553, 3386, 329, 7, 28, "Input",ExpressionUUID->"e1356e03-8e5f-463c-81fd-1aef73ebbc04",
 CellID->390458307],
Cell[163885, 3395, 1359, 33, 50, "Output",ExpressionUUID->"d386a1ac-bcd9-475a-b298-908b5630fb6b",
 CellID->775034707]
}, Open  ]],
Cell[CellGroupData[{
Cell[165281, 3433, 1454, 32, 47, "Input",ExpressionUUID->"09bf6d15-1c45-47dd-84bc-ca71fa0d07d6",
 CellID->381520265],
Cell[166738, 3467, 1104, 26, 47, "Output",ExpressionUUID->"9a44295c-8595-4cf6-a883-4ebacb15fd88",
 CellID->531698053]
}, Open  ]],
Cell[CellGroupData[{
Cell[167879, 3498, 323, 6, 28, "Input",ExpressionUUID->"43ebb121-2483-41d4-bab4-7e9c9db917b3",
 CellID->337777051],
Cell[168205, 3506, 10305, 244, 108, "Output",ExpressionUUID->"e1490004-bcd3-4747-9501-b79ebca3a0a9",
 CellID->64982049]
}, Open  ]],
Cell[CellGroupData[{
Cell[178547, 3755, 276, 5, 28, "Input",ExpressionUUID->"e06b9c5d-fb55-4685-be86-1c972859cabf",
 CellID->311627600],
Cell[178826, 3762, 1672, 42, 59, "Output",ExpressionUUID->"40fe112b-b07b-4626-8cc0-1c43131712d1",
 CellID->447128946]
}, Open  ]],
Cell[CellGroupData[{
Cell[180535, 3809, 1760, 42, 70, "Input",ExpressionUUID->"b4e35e04-1fe9-4199-9fa5-3b25b143f9d6",
 CellID->482910854],
Cell[182298, 3853, 732, 16, 42, "Output",ExpressionUUID->"318b4e2d-ad01-47f5-a243-a76ecc3e8de7",
 CellID->11397043]
}, Open  ]],
Cell[CellGroupData[{
Cell[183067, 3874, 1720, 41, 70, "Input",ExpressionUUID->"701f283d-a61b-4aad-ae07-6b63b4556ce3",
 CellID->3550074],
Cell[184790, 3917, 271, 6, 42, "Output",ExpressionUUID->"3ffd7d14-04ce-492b-a65b-ba133eebb5d5",
 CellID->529484642]
}, Open  ]],
Cell[CellGroupData[{
Cell[185098, 3928, 1883, 44, 98, "Input",ExpressionUUID->"a3f2e80e-1194-4613-8bd2-48bd48426b0a",
 CellID->349150083],
Cell[186984, 3974, 262, 5, 39, "Output",ExpressionUUID->"67baadd6-d7ff-426a-898e-f8dbdc3b14c7",
 CellID->457008685]
}, Open  ]],
Cell[CellGroupData[{
Cell[187283, 3984, 1883, 44, 98, "Input",ExpressionUUID->"b1b61d46-37d8-4f7e-bb7f-fdac4c02c9e1",
 CellID->368208580],
Cell[189169, 4030, 268, 6, 39, "Output",ExpressionUUID->"100be191-1f64-4bc1-bfe2-2c1ebc51a9c6",
 CellID->18669221]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[189486, 4042, 189, 2, 54, "Subsection",ExpressionUUID->"789da690-ba62-457d-843e-a026bbb427a2",
 CellID->54694745],
Cell[189678, 4046, 219, 2, 35, "Text",ExpressionUUID->"f0327453-08e3-43f8-82c7-6b927ca54795",
 CellID->432498538],
Cell[CellGroupData[{
Cell[189922, 4052, 205, 4, 28, "Input",ExpressionUUID->"1dc925cc-9b93-4875-870b-8f12735e1c6b",
 CellID->90848526],
Cell[190130, 4058, 1670, 42, 59, "Output",ExpressionUUID->"006a8d57-9635-4200-ba2b-19dd8f144e23",
 CellID->284073927]
}, Open  ]],
Cell[191815, 4103, 179, 2, 35, "Text",ExpressionUUID->"485ee535-a2df-42d5-b5c3-392eed783d30",
 CellID->655512787],
Cell[191997, 4107, 1070, 22, 80, "CodeText",ExpressionUUID->"fbdc7b8e-5b8f-49f9-8d76-e8992b5470bb",
 CellID->72619800],
Cell[CellGroupData[{
Cell[193092, 4133, 1567, 38, 39, "Input",ExpressionUUID->"dd17d421-e991-47a2-b719-3058fa9ff2dd",
 CellID->49211794],
Cell[194662, 4173, 583, 13, 42, "Output",ExpressionUUID->"c24bdf5e-8192-4ada-bc55-1961a97510b9",
 CellID->759348372]
}, Open  ]],
Cell[CellGroupData[{
Cell[195282, 4191, 1631, 39, 39, "Input",ExpressionUUID->"5b47e676-803e-4bb9-8264-4979c3771b85",
 CellID->6846149],
Cell[196916, 4232, 269, 6, 42, "Output",ExpressionUUID->"68e37e26-b74b-471d-b3c8-a54b628fe67d",
 CellID->184712299]
}, Open  ]],
Cell[197200, 4241, 510, 11, 35, "Text",ExpressionUUID->"5ce4a8fd-84db-4ee4-85e2-9e40ec31a077",
 CellID->233657691],
Cell[CellGroupData[{
Cell[197735, 4256, 1784, 41, 95, "Input",ExpressionUUID->"4e73a815-5c4b-4a9c-925f-8a3b9acbc85d",
 CellID->51997200],
Cell[199522, 4299, 268, 6, 42, "Output",ExpressionUUID->"45f4b57e-8651-4e2b-8341-740dfcbaaf21",
 CellID->450185905]
}, Open  ]],
Cell[CellGroupData[{
Cell[199827, 4310, 1784, 41, 95, "Input",ExpressionUUID->"c8b221a3-e021-48d9-b93d-2ad4b8d333bb",
 CellID->861829759],
Cell[201614, 4353, 262, 5, 39, "Output",ExpressionUUID->"5dd0ab1b-ca25-4555-90d9-78ed25622071",
 CellID->127823888]
}, Open  ]],
Cell[CellGroupData[{
Cell[201913, 4363, 1786, 41, 95, "Input",ExpressionUUID->"abb705e8-37b8-476a-8767-b854273cacc2",
 CellID->115548218],
Cell[203702, 4406, 269, 6, 39, "Output",ExpressionUUID->"9d7ae15d-e13c-4d47-a966-a4d8eb32fb62",
 CellID->439594257]
}, Open  ]],
Cell[203986, 4415, 184, 2, 35, "Text",ExpressionUUID->"0c1b260d-1c60-418c-8226-9e8b8bbfa770",
 CellID->410541024],
Cell[CellGroupData[{
Cell[204195, 4421, 380, 8, 28, "Input",ExpressionUUID->"458d5458-8176-4893-a536-b247e08f98c2",
 CellID->278595614],
Cell[204578, 4431, 1382, 33, 50, "Output",ExpressionUUID->"c3552541-a556-4a43-a98d-39623ce57c2a",
 CellID->10769855]
}, Open  ]],
Cell[CellGroupData[{
Cell[205997, 4469, 3324, 72, 153, "Input",ExpressionUUID->"81f91a51-7a0d-44a5-a83d-ac633b4a8a9a",
 CellID->325463161],
Cell[209324, 4543, 1283, 31, 40, "Output",ExpressionUUID->"3cbdc303-1205-4e3d-971a-a5b4aefb71aa",
 CellID->279188569]
}, Open  ]],
Cell[CellGroupData[{
Cell[210644, 4579, 3421, 73, 126, "Input",ExpressionUUID->"d80a717e-937f-4bf1-a616-c7166cbeee43",
 CellID->623525069],
Cell[214068, 4654, 681, 16, 40, "Output",ExpressionUUID->"01442a2c-de4b-4778-8f47-2a433177d9a2",
 CellID->199355886]
}, Open  ]],
Cell[CellGroupData[{
Cell[214786, 4675, 3519, 74, 155, "Input",ExpressionUUID->"cc3fa637-fcac-4f08-9e1a-e2d3326cd302",
 CellID->312546000],
Cell[218308, 4751, 386, 9, 40, "Output",ExpressionUUID->"983ae332-b769-4b6d-b7ff-6dee50e2f138",
 CellID->185515779]
}, Open  ]],
Cell[CellGroupData[{
Cell[218731, 4765, 4205, 89, 182, "Input",ExpressionUUID->"02d8daef-2136-4909-bfe4-f9eb91324372",
 CellID->528494963],
Cell[222939, 4856, 769, 16, 43, "Output",ExpressionUUID->"4d653028-65bb-46ba-a991-b31ee99ea27d",
 CellID->81494287]
}, Open  ]],
Cell[CellGroupData[{
Cell[223745, 4877, 4287, 91, 182, "Input",ExpressionUUID->"392e3517-980c-4ae9-bb64-0c9bcab28b2d",
 CellID->431250660],
Cell[228035, 4970, 441, 9, 43, "Output",ExpressionUUID->"5116bd9d-2b3a-4ebc-bd20-36f130723f0b",
 CellID->93641013]
}, Open  ]],
Cell[CellGroupData[{
Cell[228513, 4984, 4452, 93, 194, "Input",ExpressionUUID->"9abfccee-15e5-41c8-aad6-7300a672f82e",
 CellID->430263126],
Cell[232968, 5079, 430, 9, 43, "Output",ExpressionUUID->"6a8c9e7a-4424-4f2d-8181-2e247b9d49bf",
 CellID->7023579]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[233459, 5095, 222, 3, 67, "Section",ExpressionUUID->"72709557-6977-45c0-b9f6-f2034000576b",
 CellID->532121604],
Cell[233684, 5100, 185, 2, 35, "Text",ExpressionUUID->"dcb17b45-64a6-4d5b-88ae-1a2f978e6ed1",
 CellID->11144587],
Cell[233872, 5104, 44026, 726, 197, "Input",ExpressionUUID->"31a48622-ce06-4d11-a364-e03ef9cbb923",
 CellID->256750185],
Cell[277901, 5832, 190, 2, 35, "Text",ExpressionUUID->"74da9bc7-679c-496a-97d5-5f969845f664",
 CellID->450800702],
Cell[CellGroupData[{
Cell[278116, 5838, 442, 13, 28, "Input",ExpressionUUID->"0266af40-15ee-43ed-a783-029ccbe742b7",
 CellID->298245692],
Cell[278561, 5853, 291, 8, 46, "Output",ExpressionUUID->"7d5b5674-eafb-4dac-a108-a6548bc48835",
 CellID->136267825]
}, Open  ]],
Cell[278867, 5864, 189, 2, 35, "Text",ExpressionUUID->"898d06c1-2cb9-401f-a49f-0e5c0ef6e267",
 CellID->586162579]
}, Closed]],
Cell[CellGroupData[{
Cell[279093, 5871, 225, 3, 53, "Section",ExpressionUUID->"c97a9d6d-8425-41f2-a99c-387d20e4599a",
 CellID->311728381],
Cell[279321, 5876, 48509, 799, 195, "Input",ExpressionUUID->"88f8a6df-2995-4df9-b373-1f428c765a58",
 CellID->131925393],
Cell[327833, 6677, 303, 6, 35, "Text",ExpressionUUID->"09adc2f2-a10a-4f60-b41c-f2d92a75a680",
 CellID->22559742],
Cell[CellGroupData[{
Cell[328161, 6687, 243, 4, 28, "Input",ExpressionUUID->"1552a22c-1b41-467a-80c1-19e059263cbb",
 CellID->64030437],
Cell[328407, 6693, 3417, 78, 166, "Output",ExpressionUUID->"a0247553-5b0f-4ffa-b392-da34685db6b0",
 CellID->27847239]
}, Open  ]],
Cell[331839, 6774, 190, 2, 35, "Text",ExpressionUUID->"25ff0de3-481f-4dc3-90bc-5fb09d1b37c7",
 CellID->142301700],
Cell[CellGroupData[{
Cell[332054, 6780, 321, 7, 28, "Input",ExpressionUUID->"9cfc09ab-5f7c-4a5c-8404-4b418c01b3cb",
 CellID->64841848],
Cell[332378, 6789, 1149, 26, 48, "Output",ExpressionUUID->"d01c2a2e-c5b9-469f-939f-cf51351222cb",
 CellID->389687925]
}, Open  ]],
Cell[CellGroupData[{
Cell[333564, 6820, 338, 7, 45, "Input",ExpressionUUID->"4f792e96-dc64-4fca-a09f-1c557eee4590",
 CellID->819891380],
Cell[333905, 6829, 257, 6, 50, "Output",ExpressionUUID->"1dd60bc4-578f-4be2-ab7a-0b19c1f8917d",
 CellID->316923695]
}, Open  ]],
Cell[CellGroupData[{
Cell[334199, 6840, 383, 9, 45, "Input",ExpressionUUID->"2c9e1fec-5034-4d52-a102-18b0ea8f59a6",
 CellID->69396303],
Cell[334585, 6851, 245, 5, 32, "Output",ExpressionUUID->"68cc2ab0-aeea-4e7c-80ce-78ab0ff08265",
 CellID->216270289]
}, Open  ]],
Cell[CellGroupData[{
Cell[334867, 6861, 364, 7, 49, "Input",ExpressionUUID->"b0298fa8-1ff3-4f14-a58a-9f40d095f757",
 CellID->190051681],
Cell[335234, 6870, 170, 3, 32, "Output",ExpressionUUID->"460274d1-2cfa-4539-85d5-34d22b94a8fd",
 CellID->269600678]
}, Open  ]],
Cell[335419, 6876, 197, 2, 35, "Text",ExpressionUUID->"41aa7a49-52df-4e02-b0bd-f0ae52f8bd80",
 CellID->27430406]
}, Open  ]],
Cell[CellGroupData[{
Cell[335653, 6883, 172, 2, 67, "Section",ExpressionUUID->"d9f7865d-10d9-43c5-b40c-6b332bc7a281",
 CellID->347459731],
Cell[335828, 6887, 65345, 1075, 257, "Input",ExpressionUUID->"f85f5fef-aa7d-4746-9740-bca544ce03b9",
 CellID->678271631],
Cell[401176, 7964, 281, 5, 35, "Text",ExpressionUUID->"b49b8bbc-dc7b-4244-bb96-f22b6c51fb1f",
 CellID->381195077],
Cell[401460, 7971, 388, 10, 35, "Input",ExpressionUUID->"6bed2510-8f90-43cf-8faa-c85ecd241115",
 CellID->252368223],
Cell[CellGroupData[{
Cell[401873, 7985, 342, 7, 28, "Input",ExpressionUUID->"85608b4e-6ed1-44de-9aae-d8ad726cc352",
 CellID->878434633],
Cell[402218, 7994, 445, 9, 45, "Output",ExpressionUUID->"5247effc-bdc7-4852-bc1b-526cb7531667",
 CellID->828653261]
}, Open  ]],
Cell[CellGroupData[{
Cell[402700, 8008, 372, 7, 28, "Input",ExpressionUUID->"cfac07c6-b862-45b2-992d-cd01dacd91aa",
 CellID->375016948],
Cell[403075, 8017, 408, 9, 40, "Output",ExpressionUUID->"46fa039c-9a66-4933-b2df-65848c3d2204",
 CellID->35837058]
}, Open  ]],
Cell[CellGroupData[{
Cell[403520, 8031, 531, 11, 28, "Input",ExpressionUUID->"01182530-f91a-4294-b96a-465abb4d30c7",
 CellID->109626934],
Cell[404054, 8044, 442, 11, 44, "Output",ExpressionUUID->"fc0ec181-c15c-42fe-9b17-e7bf90a97b2c",
 CellID->75491000]
}, Open  ]],
Cell[404511, 8058, 310, 7, 35, "Input",ExpressionUUID->"8ca4de10-c517-4785-8e83-b46880422456",
 CellID->658564798],
Cell[CellGroupData[{
Cell[404846, 8069, 405, 10, 28, "Input",ExpressionUUID->"bed80434-8234-4c08-a25f-19bb2ab5dbfa",
 CellID->220047259],
Cell[405254, 8081, 452, 11, 44, "Output",ExpressionUUID->"3c6649ee-04aa-43ea-999e-724d0da3fa88",
 CellID->6555054]
}, Open  ]],
Cell[CellGroupData[{
Cell[405743, 8097, 967, 26, 66, "Input",ExpressionUUID->"06b8b552-7748-4538-96c7-14aad5287809",
 CellID->488357377],
Cell[406713, 8125, 211, 3, 32, "Output",ExpressionUUID->"43e39d59-afc6-4e78-8dd7-6260a63eb697",
 CellID->563804406]
}, Open  ]],
Cell[CellGroupData[{
Cell[406961, 8133, 975, 26, 74, "Input",ExpressionUUID->"49774bc3-4576-40e2-bac5-9559453a490c",
 CellID->12105372],
Cell[407939, 8161, 188, 4, 48, "Output",ExpressionUUID->"547fbd7f-8dbb-4287-8960-c6964d7d5d18",
 CellID->70662872]
}, Open  ]],
Cell[408142, 8168, 187, 2, 35, "Text",ExpressionUUID->"3c7dc69b-b09e-4c59-8005-276603d31cad",
 CellID->9460224]
}, Closed]],
Cell[CellGroupData[{
Cell[408366, 8175, 174, 2, 53, "Section",ExpressionUUID->"5216ed70-a808-4299-84cb-f63c49232dae",
 CellID->238400550],
Cell[408543, 8179, 65158, 1072, 258, "Input",ExpressionUUID->"da2eeac8-bbec-4f4e-9abf-6e551e1af9d9",
 CellID->28736227],
Cell[473704, 9253, 184, 2, 35, "Text",ExpressionUUID->"c5d9ae26-b6d5-4405-b476-a458eac89154",
 CellID->6317737],
Cell[CellGroupData[{
Cell[473913, 9259, 322, 6, 28, "Input",ExpressionUUID->"9b07b281-08d8-4381-a6c8-a84910fbfdf8",
 CellID->650218918],
Cell[474238, 9267, 2519, 62, 48, "Output",ExpressionUUID->"9dd378f4-95e3-4ca7-9500-f00d3c1ffb89",
 CellID->512095672]
}, Open  ]],
Cell[CellGroupData[{
Cell[476794, 9334, 668, 16, 37, "Input",ExpressionUUID->"ca186b9b-d2ba-4315-9372-4beab35086c2",
 CellID->758126877],
Cell[477465, 9352, 1002, 24, 41, "Output",ExpressionUUID->"7f640293-dcf4-4dc8-b5e0-dd9f31dead71",
 CellID->346173830]
}, Open  ]],
Cell[478482, 9379, 195, 2, 35, "Text",ExpressionUUID->"af25eb70-b75e-41b1-9797-82cf3cb2894d",
 CellID->273562586],
Cell[CellGroupData[{
Cell[478702, 9385, 369, 9, 35, "Input",ExpressionUUID->"5d9090c5-c197-4a6a-bfe6-22ea2a0e84a5",
 CellID->183362079],
Cell[479074, 9396, 236, 5, 39, "Output",ExpressionUUID->"72e11f80-6b58-490b-9d73-09a073d8c44c",
 CellID->44358730]
}, Open  ]],
Cell[CellGroupData[{
Cell[479347, 9406, 995, 25, 37, "Input",ExpressionUUID->"1710a633-dbaa-41ac-b551-eb3a9125f923",
 CellID->154617259],
Cell[480345, 9433, 578, 13, 39, "Output",ExpressionUUID->"39bafbab-5beb-4395-a531-f62158d9bcaf",
 CellID->225290165]
}, Open  ]],
Cell[480938, 9449, 242, 4, 35, "Text",ExpressionUUID->"962c598b-559c-4e77-ad2b-6a1c53af0e67",
 CellID->1564728]
}, Closed]],
Cell[CellGroupData[{
Cell[481217, 9458, 173, 2, 53, "Section",ExpressionUUID->"ab63bafc-ec07-45e3-b72c-6c8215e212ac",
 CellID->345674994],
Cell[481393, 9462, 55567, 915, 239, "Input",ExpressionUUID->"a0e5736f-17ac-4a0f-8c90-62d1635c4dcf",
 CellID->175901535],
Cell[536963, 10379, 184, 2, 35, "Text",ExpressionUUID->"4abb6a03-ae8a-4268-9c83-64da00672588",
 CellID->218832967],
Cell[537150, 10383, 701, 15, 43, "Input",ExpressionUUID->"6bca77a1-67ba-4d3c-a59a-3e257abc052b",
 CellID->887460193],
Cell[537854, 10400, 1250, 25, 46, "Input",ExpressionUUID->"a41be5db-5a7a-4d2d-85f2-f0d5a214dfdd",
 CellID->288098136],
Cell[539107, 10427, 1966, 36, 44, "Input",ExpressionUUID->"d27ab5ba-368b-464b-946a-7781c7eaba57",
 CellID->533324155],
Cell[CellGroupData[{
Cell[541098, 10467, 320, 6, 28, "Input",ExpressionUUID->"85457bba-7757-4072-93ee-4b792947f214",
 CellID->209152469],
Cell[541421, 10475, 2468, 61, 48, "Output",ExpressionUUID->"e3ab7270-709c-40fe-a952-99495f4ee7a2",
 CellID->46278772]
}, Open  ]],
Cell[543904, 10539, 272, 5, 35, "Text",ExpressionUUID->"5368e7e3-3408-4051-b594-d007a83ed5a0",
 CellID->598583440],
Cell[CellGroupData[{
Cell[544201, 10548, 330, 7, 28, "Input",ExpressionUUID->"aa0683ed-898e-4352-ad2b-2991bf5e7b0a",
 CellID->18132850],
Cell[544534, 10557, 4198, 106, 69, "Output",ExpressionUUID->"bfe62cdb-3bf4-4802-9964-aec6c33b0999",
 CellID->439166613]
}, Open  ]],
Cell[548747, 10666, 177, 2, 35, "Text",ExpressionUUID->"d01ad2f8-c0ce-4d29-8795-03c012d7e333",
 CellID->39345217],
Cell[CellGroupData[{
Cell[548949, 10672, 516, 13, 28, "Input",ExpressionUUID->"c28f3712-0db5-405d-b585-616ed1a0f91c",
 CellID->114617938],
Cell[549468, 10687, 619, 13, 39, "Output",ExpressionUUID->"bd558560-4345-43bc-8439-f51a6ece301a",
 CellID->247975336]
}, Open  ]],
Cell[CellGroupData[{
Cell[550124, 10705, 996, 25, 48, "Input",ExpressionUUID->"ba3d1226-cade-49d4-ad61-717209374188",
 CellID->644662140],
Cell[551123, 10732, 816, 17, 43, "Output",ExpressionUUID->"6c9cf8c6-b658-4093-ba33-f78224d4349d",
 CellID->65065262]
}, Open  ]],
Cell[CellGroupData[{
Cell[551976, 10754, 995, 25, 48, "Input",ExpressionUUID->"43718fdd-84bf-4be1-8448-fc86ae717ad8",
 CellID->160911645],
Cell[552974, 10781, 764, 16, 43, "Output",ExpressionUUID->"ca1be5ac-5b70-40a3-b4b7-3943fb09aad1",
 CellID->303102759]
}, Open  ]],
Cell[CellGroupData[{
Cell[553775, 10802, 1219, 31, 86, "Input",ExpressionUUID->"1ba2e8e0-82ae-4015-a383-46ff0c555fd9",
 CellID->20910119],
Cell[554997, 10835, 394, 9, 40, "Output",ExpressionUUID->"ffae66ff-cf91-4bd4-ae02-e8d2769c1072",
 CellID->254424629]
}, Open  ]],
Cell[555406, 10847, 198, 2, 35, "Text",ExpressionUUID->"ad557097-130d-470d-9042-9d71a5b041a1",
 CellID->298648440]
}, Closed]]
}, Open  ]]
}
]
*)

