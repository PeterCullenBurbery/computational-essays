(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   2414417,      44171]
NotebookOptionsPosition[   2280813,      41573]
NotebookOutlinePosition[   2393410,      43719]
CellTagsIndexPosition[   2393197,      43710]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Implicit Differentiation made easy with Mathematica", "Title",
 CellChangeTimes->{{3.8746913986729965`*^9, 3.874691402114029*^9}, {
  3.87476439282938*^9, 3.874764395202193*^9}, {3.8747716299888616`*^9, 
  3.8747716322345295`*^9}, {3.8748192452982364`*^9, 3.87481924898717*^9}, {
  3.8748472768033032`*^9, 3.87484728002593*^9}, {3.874856138820654*^9, 
  3.87485614726498*^9}},
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577,ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Peter", " ", "Cullen", " ", "Burbery"}], "Author"]], "Author",
 CellChangeTimes->{{3.8746961443750143`*^9, 3.874696148507888*^9}},
 CellTags->"AuthorName",
 CellID->960727095,ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c"],

Cell["I work through various examples of implicit differentiation.", \
"Abstract",
 CellChangeTimes->{{3.874696359497938*^9, 3.8746963684605875`*^9}, {
  3.8747644009473295`*^9, 3.874764404247607*^9}, {3.8748561264609184`*^9, 
  3.8748561363092003`*^9}},
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573,ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e"],

Cell[CellGroupData[{

Cell["Details", "Section",
 CellChangeTimes->{{3.874848227199978*^9, 3.8748482282156997`*^9}},
 CellID->162740927,ExpressionUUID->"9bd85d45-8ad7-4d96-98ff-1848a6742313"],

Cell["\<\
These examples are from the documentation. I modified some of the functions \
and created my own examples.\
\>", "Text",
 CellChangeTimes->{{3.8748482638303604`*^9, 3.8748482691704617`*^9}, {
  3.8748512295279427`*^9, 3.874851240718422*^9}},
 CellID->588262695,ExpressionUUID->"296d84fb-a6cc-403f-b47e-7418c5a7e6af"],

Cell[BoxData[
 GraphicsBox[{
   {GrayLevel[0.5], AbsoluteThickness[1], Opacity[1], Dashing[{}], CapForm[
    "Round"], JoinForm["Round"], Arrowheads[Medium], 
    ArrowBox[{{0., -0.09999999999999998}, {0., 0.75}}], 
    ArrowBox[{{-0.35000000000000003`, 0.}, {0.9500000000000001, 0.}}]}, 
   {GrayLevel[0], AbsoluteThickness[1.6], Opacity[1], Dashing[{}], CapForm[
    "Round"], JoinForm["Round"], StrokeForm[RGBColor[
    0.368417, 0.506779, 0.709798]], EdgeForm[{RGBColor[
    0.368417, 0.506779, 0.709798], Opacity[1], AbsoluteThickness[1.6], 
    Dashing[{}], CapForm["Round"], JoinForm["Round"]}], 
    BezierCurveBox[{{-0.35000000000000003`, 0.10000000000000003`}, {
     0.5709256688955227, 0.13223486907267562`}, {0.9097781211160298, 
     0.2481767185780896}, {0.875, 0.5}, {0.8577034126980865, 
     0.6252420554070932}, {0.6749046870936615, 0.6699583127097692}, {0.525, 
     0.6000000000000001}, {0.38994334302150546`, 0.5369710445642426}, {
     0.2136626704448828, 0.3807582982423324}, {0.1, -0.09999999999999998}}]}, 
   {Hue[0, 1, 0.8], AbsoluteThickness[2.5], Opacity[1], Dashing[{}], CapForm[
    "Round"], JoinForm["Round"], Arrowheads[{{-Medium, 0}, {Medium, 1}}], 
    ArrowBox[BezierCurveBox[{{0.745556192621973, 0.6254711280920299}, {
     0.6716342616074573, 0.6408883355851214}, {0.5931108986823896, 
     0.6317863546587364}, {0.525, 0.6000000000000001}, {0.4611877585534539, 
     0.5702197654497654}, {0.404197214491897, 0.5264207754401133}, {
     0.3576830440847765, 0.4737637077096648}}]]}, 
   {GrayLevel[0], AbsolutePointSize[4], Opacity[1], 
    PointBox[{{0.525, 0.6000000000000001}}]}, 
   GeometricTransformationBox[InsetBox[
     StyleBox["\<\"y\"\>", "Notes",
      StripOnInput->False,
      TextAlignment->Center,
      LineSpacing->{0, 12, 10},
      FontSize->10,
      FontWeight->Plain,
      FontSlant->Italic,
      FontTracking->"Plain",
      FontColor->GrayLevel[0.5],
      FontOpacity->1], {0., 0.75}, ImageScaled[{Rational[1, 2], 0}]], {{{1, 
     0}, {0, 1}}, {0., 0.}}], GeometricTransformationBox[InsetBox[
     StyleBox["\<\"x\"\>", "Notes",
      StripOnInput->False,
      TextAlignment->Left,
      LineSpacing->{0, 12, 10},
      FontSize->10,
      FontWeight->Plain,
      FontSlant->Italic,
      FontTracking->"Plain",
      FontColor->GrayLevel[0.5],
      FontOpacity->1], {0.9750000000000001, 0.}, 
     ImageScaled[{0, Rational[1, 2]}]], {{{1, 0}, {0, 1}}, {0., 0.}}], 
   GeometricTransformationBox[InsetBox[
     StyleBox["\<\"(\\!\\(\\*StyleBox[\\\"a\\\",FontSlant->\\\"Italic\\\"]\\),\
 \\!\\(\\*StyleBox[\\\"b\\\",FontSlant->\\\"Italic\\\"]\\))\"\>", "TR",
      StripOnInput->False,
      TextAlignment->Center,
      LineSpacing->{0, 18, 10},
      FontSize->12,
      FontWeight->Plain,
      FontSlant->Plain,
      FontTracking->"Plain",
      FontColor->GrayLevel[0],
      FontOpacity->1], {0.5749999999999998, 0.575}, 
     ImageScaled[{Rational[1, 2], 1}]], {{{1, 0}, {0, 1}}, {0., 0.}}], 
   GeometricTransformationBox[InsetBox[
     StyleBox["\<\"\\!\\(\\*StyleBox[\\\"y\\\",FontSlant->\\\"Italic\\\"]\\) \
= \[Phi](\\!\\(\\*StyleBox[\\\"x\\\",FontSlant->\\\"Italic\\\"]\\))\"\>", "TR",
      StripOnInput->False,
      TextAlignment->Center,
      LineSpacing->{0, 18, 10},
      FontSize->12,
      FontWeight->Plain,
      FontSlant->Plain,
      FontTracking->"Plain",
      FontColor->GrayLevel[0],
      FontOpacity->1], {0.6250000000000001, 0.6625}, 
     ImageScaled[{Rational[1, 2], 0}]], {{{1, 0}, {0, 1}}, {0., 0.}}], 
   GeometricTransformationBox[InsetBox[
     StyleBox["\<\"\\!\\(\\*StyleBox[\\\"g\\\",FontSlant->\\\"Italic\\\"]\\)(\
\\!\\(\\*StyleBox[\\\"x\\\",FontSlant->\\\"Italic\\\"]\\), \\!\\(\\*StyleBox[\
\\\"y\\\",FontSlant->\\\"Italic\\\"]\\)) = 0\"\>", "TR",
      StripOnInput->False,
      TextAlignment->Left,
      LineSpacing->{0, 18, 10},
      FontSize->12,
      FontWeight->Plain,
      FontSlant->Plain,
      FontTracking->"Plain",
      FontColor->GrayLevel[0],
      FontOpacity->1], {-0.35000000000000003, 0.125}, 
     ImageScaled[{0, 0}]], {{{1, 0}, {0, 1}}, {0., 0.}}], 
   GeometricTransformationBox[InsetBox[
     StyleBox["\<\"\\!\\(\\*StyleBox[\\\"g\\\",FontSlant->\\\"Italic\\\"]\\)(\
\\!\\(\\*StyleBox[\\\"a\\\",FontSlant->\\\"Italic\\\"]\\), \\!\\(\\*StyleBox[\
\\\"b\\\",FontSlant->\\\"Italic\\\"]\\)) = \
0\\n\\!\\(\\*FractionBox[RowBox[{\\\"\[PartialD]\\\", \
StyleBox[\\\"g\\\",FontSlant->\\\"Italic\\\"]}], RowBox[{\\\"\[PartialD]\\\", \
StyleBox[\\\"y\\\",FontSlant->\\\"Italic\\\"]}],MultilineFunction->None]\\)(\\\
!\\(\\*StyleBox[\\\"a\\\",FontSlant->\\\"Italic\\\"]\\), \\!\\(\\*StyleBox[\\\
\"b\\\",FontSlant->\\\"Italic\\\"]\\)) \[NotEqual] 0\"\>", "TR",
      StripOnInput->False,
      TextAlignment->Right,
      LineSpacing->{0, 24, 10},
      FontSize->12,
      FontWeight->Plain,
      FontSlant->Plain,
      FontTracking->"Plain",
      FontColor->GrayLevel[0],
      FontOpacity->1], {0.7249999999999999, 0.33749999999999997}, 
     ImageScaled[{1, Rational[1, 2]}]], {{{1, 0}, {0, 1}}, {0., 0.}}]},
  ContentSelectable->False,
  ImageSize->250,
  PlotRange->{{-0.375, 1.0250000000000001`}, {-0.125, 
   0.8250000000000001}}]], "Input",
 CellID->48585887,ExpressionUUID->"5dac0e42-3b44-4fa5-bbb6-cfcaf5a37520"],

Cell[BoxData[
 Graphics3DBox[{{GraphicsComplex3DBox[CompressedData["
1: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
quGsG7resp8yT5Hnu4cb1lm8JuWAf3dw+zLytIPtvwfrH9rY4KDh7Heqn/nI
uoo89pfeX/fFHnmp3v/vzufYD858R8/Zbv/5sfWbu8z/g/+E3ws+vNQfw+7c
lm7tCT47Y96Zm5/28vjx8J8gj98D3N5NnL9i4wPdr3u6UqZ/N3E4fkjkp0x5
bO2ohzKD9OAP0XP11zNHb222Jd3wGp8+P7/LN3tMv9oJjp8KvH2LwOi6zbwe
8Ae+a9pm5xbvJwQPi8xY/VnD4PacPXxMdPxCjyPPvSw3YcysY4tO+vcdZ09W
6R4/NQ/PNLzGC3etbvtQRtC5mn7Br4X8gB86Pj62oW83cOSrzru8rEKlDHsX
wD/GuRf78b/1Hj1wS9fFvh3MT9vi7sKXwj2Onv5th73w7rZs03Njk4+OFKsd
rB95zu2MT/Rr+299+Otffl1w0vTQDsifmH7/5J6Z/r0GHL8BOO9Tqgc/p+LY
Obz9kVWjXjljesDjGhwdMeYd74ehf1l/OIeAZ43b9suo8km2n35YrvLsM5e9
POci5FkfkOe+D273juxP3y6RnxN0foiM65Sbd0+OyXOfQj/rA/LgnG/B+S7y
2IP8xl8Xdc6f7e08t7fVhjUPZZs87YA/XNsHfzh22v3U/S7Fpy27e3v2eW8P
OPaUrtPogQFDj1s/guOnZRzafLwn5rWsx9NMHn8I85d+x05w5PHPsD7YOce1
m60bbh/ku+Dcu5mn2s7gg5/OyR204bi1G3jdwr43P7z0qNmJft47wPHbqD8Z
vzTfjXpr35LfpuV5f5dr/9nnb3v+XHye3evBIze898XvIfkmz/4Ijjz74Oay
L/705/p8829w/lkx/JXPLoR5nHFS69/HH7yc6/UjHzY6/beLER5HvuOzw8Zk
h+Wan4HfFf3zPb/lROeafvCSEz8dlxXi5Rn/4OZ/dve4c31bdvg1Ks/woHZw
OOeZ+JfLvp+3Ite3j3zX2vm6Oj923ZAaPn/MuqhLUb7dbH0ot2ra5UKP23ny
4sZa53fnmf3I7zsdf6agjMfVztKDRi4e3neTyfNd5O1+4eTBG5/d9MPQ9ft9
/34S8e43BYn+ntVn4OlfIvLMH4v+i0fOdc2NyTUce2iHE7tfqlm/386g9kGe
e27JiZ93WJZ+yvwt7Hf4P83/7PYR/JbI826F/xP5Vretqf9k5mnD8dugHz3E
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
44e69Zl9md8Ljn5+l75TNGj73clqCfvt95o9Lt7V4qyc/w394MiDl94zIGxM
1STzAxifReTZp/w5c1uZOa1O2r7PfYF1DLzdj4dLHGpz0vAxRzoMr9DllMmj
x3iU7h6EvO2z43MnXHn5lN37bB907YD/Adz7h6/Zz7u5thvyzCM7lzoc+8Hr
Jz10ILvVSbO/f7FhsV91PmXy2g7I6zsp7X9x/H9bjlmQE1D+5rS7k+8c0Tsn
gDzzbvazo6p9FJJr8swvcOXJpjX6NGRdVH5Aebtb/yjYsyYi3+SnNa3b9qPm
BwM1DuSO/C7Ey7OuKs54Tr15QtysFd4e8CGfPfbOjOhck2d9i+7V6Pr42Xkm
Dx56+fSBxVF5AeWZlks8OHTsihzDWZe0HWydd3YqH7l/tfzaq8K8/dyLk4u1
rL4l18ubH7L2M5/8sN63D3bOWpZdb2m8txP5X5v9/urWwvyAxlXOr/niyKXZ
ywLKCwDvf6XqnBvWeD5ax8EPdG5z9XhA37sPb7nvYvPVHo/p+3q/mXmZJq9x
pI2X3FVm7p/bAhp3erb2L71v+D0Q0PhS5JWngLzyx/94/vGjn27ODeh7fa03
n/2m2NWjAeVhYSc49qu88RO/b9O6cNXRwL6E+97s/ovnEdO/yvNlnIOzTqo8
42F/ncbzlu3OCyjvuDDhiS8WRXgc/WU2zij5bW5eYPhXTeve8bHnEat+G+el
6oV/VsbrAZ+Rkbrkkxg/L/BLzE299PGezgUB5RE3v+3ipR1VCwLKI6762HOT
kuK9PPjB7u0u7I0uCCiPuPk7l39IXv833Plh5ja52ulw7t/0O3zE1ecrHUrx
8tiz9oGFmxN7FwQat1m84qk3Pf+X+aj84tQvR5+YFJZr7cD7iMoz37NG7Mse
UibHcPZB5JW//3ugwrr+o84ElHfMuqrxSLmvLXup55WkgMYj9Wy5uHrHikkB
jUdCXuOrx61e/2qdwr0Bja8G1/ilW94YXmrllUMmD/9IceKC+G67tDoNi433
8djo17joculfvvLKmKSAxkGp/cTh8F3lR7AOKI+g55JS8yrsTgwoj8B+r/AI
FCceFf3Kvwht2HTmU702BZRPofYQP8y6pLwM8LMrryt5Ls7HcbHOaLxWg5Vj
Zv2w6HBA47uQ1/gx2k3jxCrXKnbiX2NTDKd/dT0nHkz1E8dOu2mcOe2gcen8
XuW/KE5cLvuOxr2DK69Ev8t4i72h5ubdvXYGlDeBHuW/gCuvBzuVB4R8jRd/
W3Z4+9/4s269VV4t+zv4iRtWXhg5cVOQPOsY67/yfFm3lefL+YT5Yu/sot/e
hd0+ojzcRWNrNYmdlhvYN/DWeSeyPA8XPcqr5by0fOjdTU819zzcoHZw8pzr
lD/L/qg8Ys45ys/lXKT8XM45yre9MfHun7uHnAkof3b9/s0fdU3ONpx3fOQ5
/1gcTovvRjYOybLxBh5Ru0vJ8NzMgPIKkVdesNoDXn/d+lefL/T6sXN3o4dW
v1t4xnD6i31EebW67xD3Rb8oj5v2V14h9iu/vnBuu5SHZp8OKN+QdrDz26kF
/e5Zc9T0KM+XfZNzKf0LrnxS7h3KD6Ud4NcwHlQPOOd25RFzL1AeMfcI5Qtz
zlS/Ouuq3jdjvtj++cbnTxr+1IRiN7e5PcPkOz77WLM5Ef6++VyTtMO/XT1l
9oM3npU7onS5DMPx2yPfeOvp32em+HcKPd+CrwrbvGj10RP2XezcGHh35J6r
J00eOxW395TCUZdO/fdUQPnCtL/yfzl3gRNPiLzy9LnXcN5gnGv/ol/PaXae
dOdY5QVzbryl0ZW2+2I9D1fvcejR863FCbhzrPKCOScrL5h5rTzZFpXumfB6
2JmA8oVZN5Q/C655mVjfNJ8S60zCY/fU31PZ56FSPbTDkAbVlk3I9fd9fi/n
c+ULJ2yYV7gpxd9PrZ3Hfhnzc2GB9Tu/d0RGz8j2YdmG813aAXxgw9NP7o7z
6yfnKPRo+6Cn3Os/rYwOyzGcdZXfBR76Ytl/PxWbZP3eeO7033PjPL8YXPnF
rA/gxNchf6LXW6PbfuN5E6yHmv8nLWx5vfrxmYbzvok8/cW5jnmt+WfiRvS9
aXXSCcM5/yNfY26xES//5Hk36VtbVLsr5LS/b/Lu/PDcZ+7YneH1u/dc5E/0
3PJFm489X4n1R/P8TKmT+mPOVI+feKrU3ilLM01e8/awzmjenoTxO/r+2Ouk
tTPvIMhrPh/zP0h+ofR6B3b+/EWa2cO7CXqUD5X/asi/aoRlBpQPFf3s843/
m37a5Fkn6S/lPYErv2nFwAXHHhh42uR576Cdkee9A1x5WIrze9kvlEe2vNm0
0cU3pweUR3Zk66Txl1p6nHdbO8+49sRO23eYL+53gWt+qgoxj2/85ZTHedem
/dHDvOB3aV4s2h88qnPKlJaXg+X5brkVOatKFabbd9Hz7c3zbg9NzzCc+Afs
53zL/ks7aJ6lVY2W9ak7LdO+yzu1yhPPoHaip/2s13Y/E+3leT/VdQP5uQ+X
m9qhVrbhu1sPbpCa4tfz4XEz2t/+puez0M7Kdyt/scL8rV+cDCgvBnnlxTO/
lBcPrvyd8l0q9vzpsbSA8u9oZ+XrKc77I/Yoj4x9TXlnZQ+sm/5sepbJ845M
eyofh/VBeUlrn0++cmhCWkB5OrputJvR4PiRbmeC7IQHSvsovxVc+YBvDM9r
c2PVDMO5v9M+yocy3PkDGSeMB+UDzp1450uvbc42fP3EtVt+iz8ZJG/71PiV
xZo18Osb+OzNZXe1WuBx4hPQo7xC9nflRTIvlHd5V/Nihx5tkBlQft+R994e
12/gmYDyAdfX2flC3yiPE+eAPco3VByeNfd95XErDo8bv4Hy6BVHXvXA18a/
obx7cOV9o1959PhtlM+u+KA/Kz/3bKr3a2l+ALUff5fqMT9J34u7267abzh+
Nvx+mlcBXPNyzC67pn7FzGOmBxy/lubTwA+m+TTAlf/O79V8Avwu/Ml8F/+Y
5tkA13wF6NF8INOWx36YMeZIQHmRPVcOeKTpO/7cgr8X/Zqngt+lfExw9lPk
aWfNjzHwrf39vl50yK8Pbhyq3wy/nPpvLb+fO8/0rHhk5O2v+7x/zGvLs+fm
o+KsJ2NembomJD49oPkJWd+Udz9qWmhs/Qup1o/WPqN67am9OtXk4d3Tnsrr
13cf9lO1k3WJfQGccxrrv+ZR9Oeia+1jvHvZZ/GjYo/msQHXfAj0O/s+81Hn
F3itXyMfGLQq2fCe2f9q1qiil9c8CSci+qVNefygtZvpWd/r2wkHD/j3OLfO
oEfzb6j+klefPfzo13+zX/I2gBN3Z/G6rt2UP8J+qnHayCuvxOSFxwc+uE/i
ll25Pj6N9gfnHoq8xnXwTqpxHbZuSJw8diqfBf0ah8841Dh8zjMa10F7alwK
9mh8He+eGn/CO4XGh6BfeVhqPzjrOd/Ff6jy+AGwU+P5OWeC42+nPZU3pPrB
q8waVG/bV0XzUeL50aN8K9UDjp9NeRasA7QP/QWufAdw5TV8n5l9b4nd6QHl
L3DvU/6CnSeF/2X7mvDOtJ2N5+j2qfh6N7+bFuZ5bfS78trAlX+n7YYfHlz5
dKwbynOsUbn9lMgZHscPo/J8l/0OHP8PdirPjnZQvjP7uMZT6e9lHmGPxkfZ
uUjitcA13oxzhfL7wDWeindkjWdDXvnR3I+UH42fCrzx1JYRLy3bZfLp674q
tiHZ8z7YN4nLZR7ZfVb4EZwfwJtf3HZhRsEe06M8OPSEffnJ6tXlPK9N7bd3
B3dPUb4b98TOVY9EJlT1/C/VA859M6bHgOI74z1fxvwGLt6V32V+NuHRzNj1
W9odyX6eIo8fBpx2Rr/yX1Q/OH4S5eVxP1JeHvcp5alxPyI/KnrAlY/G/U55
bdw3lbfIvRJ51m30K98QXHmCrM/K+wNXvh5+RXDizVQe/eynyufCz6n8NfOL
Cs8Iv6LyjLjnKo+J/lX+EbjmzWC90jwYrEua78LOk+eeSPttts8rgrzy63U9
NHl33lZ+PedzzV/B+qN5RVj3NA8J8prvgvsmOONH139bB9y9UvOTIK95Qto9
XuaFd7YmBzSPSkTIfzJiTh8IaP4T7NR8LLSn5l0pjL3r9mlPHQxoXhTaWfOE
oGfFS5Gzc6f5/Qhc83vwuzQPibYP73Hav8hzTtO8IvxezW8Arjxx7t2aBwA/
g/LQkVdeucXbSN4Vvqu8dfNvSH4D7rmaxwBced8WJyl8dvPDCB8ceeWVY4/y
08GVnx73aJeSD+YmBjQfgvlnJN8CuOarod813wJ2Ko8AezSuHv0a9468xtsj
z7g13rTrL+UpqB6+S5yP8qqwX3kB4MovsH4XHgd2Ku9D9bAv0J6aD4TfpXwu
9CvvgN+rvA++q7wScOVZ2DwSvoaOK/B2W2ZdaT5hU0Dj+VWeeGb0K4+SdVV5
hZznlY/JOqO8S3DlSdHOym+y9VZ4psiD8/7oz8//5GOyfiqvlvuC8mS9X+KF
sqsLvbzfR/7J2zX/pPBz0Q/OexZ6lCdrfkXh25rfUnips5d8N+DuDsfs/AZO
OyOP/8r8TsInNb+i8FIVN36c8xcpfxB55Q+yDyp/UPsF/fOTGkSkTdgVUD6y
3aeER6zfxf+PPOd54zW79lTescWRCq/N4kKF1za/x3MDb9q9J6D8NeSVN8f8
Uh4cuPIc0aM8RNWD35X+5d5E+1tcgfBGE/JeXli+xzHD8YvaO7vwOlU/6xvn
as0fRRwReLW6NZeciTgZJI9+4qk0Xxb+lhojzuz7KsrzX+x9WXiU/n79T76n
ziPiBMA1r5S9g0s+K/ww4PwulcfOBr1SqmR19Xh0eFTE/d1OeftdfJfVO3Pn
f61bwb6g9SnAtZ6Frue8zyrOO6Pq573Y9k3hySKvfFvGrfJSwZWXSjy28lKR
1/xyen8H516s+dDoF833xXuE5jdDXvPd0S+a1444AXDum2on/iv0aN454hY0
b5veN7Ef/7DmcyMeg/lrvEI33pBvUP3JKi1eP+bjByQ/HvZrfjb8OYxPcG0f
9INrPhONb+S8ih8g+uefvpkX7/PegGv+EP1dtLPOR/QTX2H7O34A8beAE2ei
vEXWGeUDqr+OdRVc8xhY/LzkSWB+aR4D5MGJU0Je8zkwjzRvg+IW//nS1DXp
X+0KKG8a/cq/Btf8Cf5c/c98DuCaJ4HfpXljiJ9RPib2K7+S9QSc+AeVJ56B
78a9dMdrDy05Hl6j/YHtnUtkhWs+WPDIEo3Xvr30uOGN239UY8h92SZf45b/
ZZZ9NyV82tT8XR+XOBOu+YTBNX9veqeKY6ZX8vLkDUZe8waDx715/+d1h3oc
PZoHGPvJq2Bx3V3alhl0IStc86jvC12/pVKJ0+Ep3W+t27xOpvFJwcmrg/z6
p2cuebpITvOHJw8dXuypSh7nXRI9mod88q1Pjih7c0a45hs/O2r/TddvSzec
+hHn9l2/d+tfdbAcD5d2AI+9f9f9MdG+jsP61SdaH5jk5S3uyLUP+aAs7sjh
mve7f+MeV26p5O3c+MLauQ++ftz6RfMtg5OPGrxVzy8bfnQo2+QZDxfTeg9c
Py8n6HdNTs5av7kgJ0g+eVbPm7+64L+L/Pypix5b9lddHPIQurqE/C6tY8h4
sHp5zs6et68bNG/smaB263/08x9/LZ5u+dNoN3DNE76xzXun98xNC9e83yfu
a//GrjEeR77M3PGBDX/xt2eNzh7dz8uDk4+O/POMK80/D6755zf36nquZj8v
z3fjI/uvH1f0+6lLxXfBtR4uv5e8fFbX2Ml3rJ8+JLaHl8d+8ryBN6925P5N
j/t2sDztrr+07qetSy7/GHjVPU89+fzizHDNhz+tdpk9l55KD5pf6CGvmuG/
3PJRo+O+fbCH36t1h8HJuwsePe7PqZkzTgXJTxvXq+sDezPCta4o/UVeMotb
c3ZSH4G6csx38kVsrLFuZujPxwwnLwTjmfmlddMaV7gjblVRP2kdFvREFt59
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
HfS+XPqmslElivYPOz+7fQf9eq6mf2kH8PlDYwdOX7XH2sF4tW4egVs9euaF
9CPyjHPLW+XGG/w+/Ofgyu+Db6L5S3nX1rysvLOTt8HyKjt+iub1NZ6I5CkF
1zylvI+rHt7H1R7el8+Fb5xVa3FqQN/xyX+i8QbkWdV4Bs3LSjyD5k3lPdry
KUm8hOUlkLgFzbMaM2Rx9u0hBSavvA+tK2Hxt1JXAt4H8tRxwO+tdRnAyZ+m
8d7GyxaemtaP4B6q+uGbaH713Kffbb5hcU645qWvO/qB6NX9PK7xD1Ht+nSr
l5kaUF4G+eKU/6h6iPu19hQeJTj5ui1OQPJpg4+q0npWm0U+nzY8Js2nDZ9F
cXhGqt/iW8gDKXELljdM4iU0zzb8Gs3fy7u25jMn3kPzb/OervnGiRvRup+8
jyvO+7XmV+cd33jlEieg+c8ZD5pvHH6Q5mcmbtnyALe8tL/Zsz4uRfOHgw/u
ndchfdARwxm3Km9+FVefRfkppW6bcU+pc+l+/rp3aq03gR9G67/wnm55LJ18
WPt7Xg3PPG248lzQozwXra/Bu6R+F/nkES/Or7fA19EAJ1+H8nS0zgi41hnh
nU7r1OBHIs+D8iDIJ6C8VK2Hgt/J6p259dB4NCJvvGCp0wROflGL+3Xvs1oP
CHnyXSgfROvB4W/XeknYSX4S5Qdp/TvaWfOf816p/dK4RLVZz36SGa550XmH
VZx+1zzw4FYfTfhiWqcMnP1L+XRaHw0eWVDdNPeOrPrt/drlL1JeG/lP7Luj
Xmu0e2JauOaTp52tjp7w9ZBXXl6NizOyry/j68ERH6L144xfI/X7GA/oh0/B
+q/1TMHjqn6S+L//bjKc/Yj1U3myinN+U/2cfyyPovB5te4q+5finItUv/E9
pV4t+xe48o61DinnUq2PwLnO8p9IPCE4dSqN1yP1f8FbXV9Y2P4Oj3POsToO
jo+APPuv5glRHF4wejQ/hrYPuNbzhXes9SDYv7QeMeclPT9YfKmr56t5JPx5
9do6gD227wuvX+vJcr9AXvnvyJOniPsL66T6N8gXrf4KzYdsvAPJt4w8eZKV
p6D1PZGnDib9zu/VOumcQxTn3Kv11ukvbTfLY/DB0Zd3ttxpOOcfPS9x3lM9
lifH1UHQ+EnkNa5Y56+9W0mdFMaz1knBfq2TwrgFh5+CnVoHhP1CceRjh3xx
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
XPXC0Lojp2Uajj2l1hw7MOOv+Ef3u4LOz9xzXfuAW7+7+0ujJyoM+2Sgx9Fz
uGzzh6KqnrLfhZ1thg0a9coovz7o+oM844d2QJ48xsjTv+gpuabOyv7n/Lqn
67Cdb12eIvYvvmv1Lt28AKfOJuu87WvS/qyr4MyXyY/0e797sdO2jzO/wNn3
mS8V11ac0O6RDJMHf2pCsZvb3J5h8maP08P5B/mvZ47e2mxLuuHYOeCHjo+P
bZjpzyEOnzLlsbWjHso0/eCn39h35/sZXj/zke/aOZB25ne9kd3l9cN7/Pkh
44EPBrzt5bGz1bJdneq1Tje8ZqPKjQdUzQj8+sa4Dz4tlmV2Mr/AsZN1GBw7
WScj4j4bta/YGdNPv4Nz3mNcPfBd0zY7t2SbPHjqzG7d1tXONnn2R74Lzn4N
zrkaPfvGNu8YN9TjjLeBqY2b5t6UY98Fr1ilb/XU0cF2Yj95MtmX+S73AuTB
8Xehv+zQLr/vOpAdZE/NAcW3rDjv9YCjh/svOPaQF5r1qsbZF957tFi66WE9
BOcexHx/fHeT2K4ZGSYPnvhGZIsmS4Pl0YM/inMg49DyDbI+OJzfa/vFnHvL
v7onw+TB+1/Y+32L8+kmb+crp4e8l8hjj+LJE6tMr5Zxyn4X63Pitw0GFxb1
DzjzC5zfi54ZM2+/cONHHuf8z3etbotbH8Cxn3nXYM7XrSpOP2Xy4IO213/r
poVpQfLYw/ix+0KPDg/lFY077Afnu9QZiX64e7nerfw8ZZzTnjavnTz4mZOX
/vh4YabZCc66hJ3ci7GTdQA/Eus5OP40cOxhv0MP8wt868Nf//Jr0bqCPP46
9GAn8gezevU8luxxzhXWPm4d4xwCrn4G+h158BubfHSkWO20v/krrvnlrL+c
nfgnwdVO7C+9Z0DYmKpJ5sfDHvTg3wBnff6x3jNlP4ny7Wb3dOd/Q7/az3jz
6/y1cwV6wPHX2TkB/09I2vpXYvx6aHW+3DkfnPZh/DSPyy7/XYbfR8BnDx8T
Hb/Q7yOsnw0iXxib8vYZ+67dQys2W3J5ZY7hyHd+tMa/jnTx9iD/deeqxQoX
5hiO/IK+PzdKfsjbyT6C/ZY33tlZ+VDZmSsvZwXhYZEZqz9rmBW0j/w+80Ct
3/vkmH782LQz8wg/MO1suHtP4TzJd3mvAed34Q+Z1rRu24+aHzR588+P/+Ll
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
4MxP+FoO81D3F5z8t+RVwA7Yn36JfZQd/E53cnqd81j4xE3D1/WhwHU9d+Yh
8iV+38KRQ5w+89/Um/sPH9yuTrolR9eLh0+7xN3D1+uJzdVz7dHXN8Se/C74
nYKzXoEzLqyftGtX/91qF1zeJS05pj7df+L9wWUfa+UHQL6u8w4fu2F/cF13
DH3QX9ZtCyc/nuBOx4LnTzonfL476GPuCa38D5Ycsw+xvkcWnzyBEs9u4chn
voGzzvAdlPVTyQcnDx7zXHBLDvex4LretIyLtX+WfHQWTt0K7gNZB9g/c+8q
98mqHhZyuD/h/pP+gkv8iIXrOu9uvt1qDFx7VfbhEudi8XW/5Hdk1RmReDFr
vNBf4r8sHPm8U7Auwed9B/nw5f7HkuO7MGNuqR4xcv8Jn7ow4Nx36frRyKFe
ieQls/ThfoN7VMYF+8PnnQKc/SHjou/B5Pdo1auSOCZ+X1b+W87R6KnrrdNf
6jRJPjpLDnn4OS/I/Zu6jwXn/gp8y0zviWuOXhc+edJYn3X9O4cSJYcVmPlE
cN7L4PP7kjg+6/sLTl4IuXe15Fy6klp9Y1WDw0c+OL9H5IOznxE9vx5Rr9tG
ez56khcdfRh32sUOck+u5ICTj5p3TMaF+Szxeqz/Vh1z3gfB5Z7B6i/jDk5e
PvRHH8ljaeHkP5f3hebjCxb993+d7zQp+dNJJQNeOOv8or5d5vxSNs7g8P3G
dQ3Iq/5Cxgv+yKZ/zyvY1+Dw+5ascTu7wAvngMazY7b5Gr7gWUsmBlwzeUfT
QwrfvFAgyVnnNeV+TNdd8s2seT/hx2Rnnad02Mmpf6esMzj80OSLO+78nuSs
86+u7lJmU9iBJDv7oI9j1wc5vR49kvop6K/zxII7+lZaNsPX5IntnXOyQaGR
xp7iD1k5eEPGxWQ7OZUK71oa9b7RHxx9fMbX2NZqpsln27NpsyOXq9vr7+JY
wefoCGO3gGVzxzZockXk6LoD4OzDwU8di+x2d1mS6ENeZc6h+v4HnHWVd3/u
8dAHnPO+zs+MHN5Z5J3COhfDd+/9fV+vsEdyz6DzNnMe1zh8ndcanPcXcM77
Os+zvM/u6VjD4Um04NwzoCd1Dbgv0nUNwKf4PLgZNvyp2Jl7Hp3fm3skXT8R
vs77zf2MzpvtWP5nh5ePo+1w5PAOgv60q+v98f6r81EHNyraOL5HsrOug5BS
On9Q1kuDS10M6/eo64MgB/zaoKQG7afckXmr64OAc84iDza4rgMC7l3jag2v
GaYOCPNf/34z3/WeU8P9pbOuy7A8NeRKvSCDS3xBy7bh1d1eOuv6Cz51AmrW
9TO4+IuGpT6t0uSls66nEHP5l/pOHgbHPqzbyAFnndd87/IbypfPfCF6in9v
aNyp4JeJzrqOCfelrD8yXtyjpq186f6LqbvBvauu48A9rZ7/tKvHZcuqnc0O
VE+0G9/Q9SPf3/smwW4d43sBTl0J9NT1IHjv0Prw/qK/F4yjrmfBeOk83owv
9nd5m12/q98N+V7oecV7ja6LFzR71PnSYS9EPvojx71WJ6dpATdMnTjru6P1
GTk//wcNI818Ez/hHh+ca5RiP29ZD3X9UHD2pfBXtyh+PatjjKwDUofO8jPR
OOtJ39Yx07z//V7JPsTCqScLn3VJ6opafPGXsPbVfK/BdT1T/MR0vT/6peuc
ir+Kqj/Luip1Sy2c74KuV4hfiq7Hh574U2FPcLd99U5NCTT1Cnlf0HVm8UPT
+vDdtKuri7+KdW5FDvbn3V/WGQvHLwscvx09vvyOdP553kN1nU1+p7ruJzj7
AfHDt/SnXqT44fN+ZJ1bJZ7Oei/W9TR5X9Z1Qnn3BJe6kJZ8XccTXNfx5B1Z
19Mc89n8fxYHGhw+/WUfJb8v7GOdZ5nn4GJn6jVY81bXwQTHXwU+7wh6fvLO
ous+yPuI5UcEHxz/H4lLst5BtN14rwHne40ccNZz5qGuFwyOnyG4vHtafoms
8+KfYPnvjdlUpEafuveEr/cz+GvpOh2yTlr2QQ7zQY8LOP4t1Amlv7q+Jzj7
OnD2z7ruJ3zGXX4Xlv31OPKuip7U5+Jcqesvg7MOg2c2GfnEf4bhYx/Oy7p+
sfhtWvWLwYM2Tv7m/PQ7zrpuIOd93S449aCl/qB1D6DrEaO/rgPOeVmPu9wP
qPqA3Nujp8Q7WPdL1A2UPBX401p1PyUu1ZKv6wyK36myj7xbWfWj2Q/DRx/q
tYm/rrKn6Gl9ZyXukvtJq14z/t7gut467YKTTwA76zq58m6l6maC67qZcq+l
63VaOPU62V/J+5Gq19mz6kevDxy94azrq3IPo+uTyjudVZ9U9vmWnrr+KXxd
h1Te9VSdU/GrtPol8dpWv7CDxMtbfKlvS34S/But8ZL40/YZJ/P9uy/X9b7h
M+6CW+9Zul65vB+peuX0l3qmEi/Mfbuq7wmu63vKfbWqWwqu65bKvailp8Q1
W3bT9UxlfNX8l3tmq76q4LED37Xpc8V+vbL41F2VOpu8E+k6mxZOnU2pp5n9
ba3fW5yz48t7llXHk3wa8r5g8YmjkfcdJQc+9UmRw3lB1yMD1/XmuE/TdeW2
D2y8N/Hf8YDP9w45+lzJeUTj3B8in/WK87iuIwnulvNBtFMrU1/PdZ3zoiv/
jh/nHcmfY92nabzn/JVd0nYl2+kj9rH8D8GrzgoZ9/qmkSP7JeteVPzxrPqz
6Cl1Bq15CK7rDE6c9mmVhxcNH9zT78NfHxwzfO67kEO78LnnBI9p9mjHnCnG
brpuIOdl7My6zf5E1wOV/W0BlxOT9j0R3KXPH02m/fsdhU+77Et1fVJwXZ+U
84Lmc97X9UORQ7v8HhlH+us+tc/AdSOfCB857J/Fb0HXxcZfxfo9yj7qz25X
Y/YaPverrKu6zm9I/+aXDuy9bffdQT7rg/Ct9ZZ1RvZ1Fs56KHlIrHa3XF7z
5c7qpl32Y7quOnzWW/C6SxZ9ExbxyOxnuPdgXbW+jxKfa32PdF110afRhiIH
Dxg5la5dDU/2fWwnn37pevHYR+osW3jA1WJ/5b92V+yp/ah1HRPZ51t1TLR/
o6lj8n/9JImH1f7YTTLXxhcubvLcSryYhWs/TORof0KdDxZ8Vr4JRYK6mPyx
+E/C1/7nOo8ucnReVnCdR/dU/YMbooZHC1/7u9Ku9mtFT+3niT7aTxX52k+e
vLs6PkvnvccPB5z8jcw3XZdK3susvFUS93T8i7zNpx466zzztKvzzIPr/Py8
b+o8/PgjwSd/L3J0vlCJF7DyTmg/Up2/V+7NLBw7gOt6TJxrNA7fe9rfVbJ3
PgzU8UrEaep4Q50Xl3OxzlvLvRB8HW+o8/3SX41zr4WdddyTrpsm8YxWXnod
V0WefB1fqfMMgxPXrOModd5dcPL/63hSnQeee0id3577OrM+/F+/a53HVfxy
rd+Rfi+DT55b7KPzCfOOA679+XU+Z3DmrfbPh6/9Chgv7Y+nxx1/Az2+/O50
XTa+I7oujPi7qvqJHqdHzPPwCpd2tT+Drh/E98iu3oSFM0/AHRr+/kHcVcPX
fqe0q/1L7erdWLiub4Ic6ptov1n42i8XXPvxoqf2u5D4ceWnoesSYjfiysEz
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
Sw77Pc6zuv4p+Npnj3ev8zJ1S7ln1nVIka/rfsr7iyVH4n2sewPdLv4zWg76
FLo4veqMqqYOLDh1RXU8keyvVFwD9Ux13BBydByKrosKrusF45cCX8et6LrJ
4NRNpp4IdtN108DZf+r4GvpFvQbk63rH+DuB63h8XfcKnPtwHd+k95OS50fV
uZP8QqrOndxn6jp65Iu26uhRP1HyBKp6iPKOZsmRuBLrPlDzuZfQdQbBqTOo
43R0HUP4up4gfC1H8vNYdtDxONiN+kTYX++TGV9dHxk/N10fWeKgrfcRHXdD
nUGdF4L7K+qkwNd1BuVe1MJ1HI2ez/B1nUH41MvTcUCsbzoOSNcNlPgvVR+Q
e1G9zkj8l1UHUOf15bug8zCDSz0+8svpenwWTj0+Hacj9Umpx2fd1yFHx80x
vtQTlDxsFp96fxIHpPSBT31DnY9F13sC1/WeOHdoPudEU2fq/+ZF4Z1R51fR
9d3w8wFnviFH8zlP8W4Ijl+T1NGz6rtJfhK17oHren/4tWo+9uH9V+dd0fW8
JB+LqufF/YOuY4jfiK6jR395pwbnPIt9dBw0OHZAjq53hp8PuI5T1vqAc37U
8eCajz6FyqytVig9RnD8wLEz9wwSR6PWc3BdD5fvNb9rHf+i6wXjZ4t86nuy
3ur6nuCsV3JesPxm7ernWnrye4fPd1nXO0a+rnfMO7uumyx+GtZ3TcfX6PrF
xEFoOdIv6j6r+Hfe33XczdjLcb/sXZ1svoOWH6msPyoeh/Wn99TtVZLy8pzb
+r2+8Gm+lMCGC1v/4pXvXeC9L3t88Mxm8Of7Ho6cWiBP8K5dLuzssNDwNw6L
evHswzzn5O5zO/fKlxrYyLlCwrt3Rg64y+7kvn9Fvwuc80Ng3STbO5Hv93LZ
Kq8CBr9dKahth7kpIsf7zqpTJ/LeCN/3RNd2hfJlBl7w33/lhC1T8MZO20YW
KmDwvIbPncblvRS+bUW5uq/yTLvID/tt2p9hrXNEz6EdFrSbmi8v8O1Xwe8e
5eUIf32B2xWH58sNnFFmnO2+zfAn/dVo08RzuYF16z8p8diWK/wPx9T5YngB
g7fzuz2t47IUkY+c01FhMR1X2cu35Ry7/p2T0Qd7lm+6+aPeZY2d4dNu7/oT
yn5bICdw5+DmJZ7lGX2Q06dxv5uLSqY6U8dtsO+epDG2lMCAj0pOW25LE3zi
jYFhM6MM7tNqyNFSY5OEX7TkpjGLbKli5/ovBlX0sKUKv5d/rWTnli8Eh0+9
eOS0HDh06rq8NNHz9PiLY3baXokc8N+8R45clT8tcNjnsxaus72SdjUfPL1x
2XarbIbfNOqrUe26v7DDke8SXnXVzvyvAj07vPp5eV6q4PCjJt5ZsCnP8Bf4
T1933JYeWOa7F6s32dIFL1r11unj+Q2OPvCxA/z9fQ5/7pE/NTC84dxBi/JS
BMduA143/HGOzeAx5Wxlf8mfIjjysWda/on3L+VlCf+LL46sa5DvbeDEqx+G
/WMzeOawPqsqF8gS3Mc31avz34bvmljgyj955vc1Kcf2S+V8WfL72lQ6z+2r
vQaf2KWz29V+b+V3ceufasm98uUEbqoSE3Mz763IcfAYddY5X3agY/TSZ5ds
hr97xbjoLn9nB954m5d205Yt/CVxZ+KcCxi8Vfkn3TutSxH5yGk4LbFm5832
8p/Wf/RV3zZGn6iJU3cFD8+SduFjB/BzxUot+HSVsds3Z18u/KGT4fsNiix6
ZnKm8LEb9gF/NN+vrtPcLNGHfp3dWfRMgwKG39bLoUn/742cokvLtnxSP1fk
sN6ynoTOnDdl6C6zDoAXXbc3q/cH9nzk9HNamu15Jy+wa9PeaffyjJ2xD+vJ
mU5/Of50zMgplDu6VvivOc6bkt+/MiZfmt36A76mVELdtXMNPmPVnAkTuxh+
RMN6vx8Y/lrWmZ4Zjc9es2UEVtn4xWl/2xvBQ88u9ru/MiNwzLwbB3xtr2We
V/40JumJ7bXwr9w5f/DrTS8Ehx9ZZF+Rr5Ya+QU7uecenWzkw8f+4LODVvnE
zzE49Td1u9vKef/8UctkkU+7yKl7fnbA+W3pgQknnQ74570WO0dN8a74yvZG
5IAPf5r8+av8Bqe/8Hv39o3Z1StD5LOe0O41j+Ef1KyQLDj6H/3r8Q9d978Q
OfBpd+Pmz8pG5n8t31nqcupxAW+/vY7TqZpGfmv/w9Xey0u04489MTnLdi/R
Tp+0mr7fRu1LsMORf2fg/Lhr+TMCG7T5afiWdunSX9b5M2MGbdthM3aYfnFK
kP8hg79Oan71w9dJdvy88IV/dJz8wm7dLld63DPX4UY+OPJvXB53aevZtMC1
mc4HD4W/Fj2RE+Fwf9SKmua7ybrd5NqJESs7pgmf9ZnvDnj+M34lpm4z+Mi1
vvvLb0oSOeDIr3lteMiy26mBBWt+GOfd1OB8p5aPcF22fqyRjxz6Bb7yt5J3
Fs0xeP301zur3Egycrzar96RZ75rjC/2BGe8xM7WvIXfdrv/Vt88w+d3RL9W
H/jgUnxGgthnxi9bem3c/8qZ+qTg6An+/Uf7Ho1vZ3C3795+d35NvB3f5f6s
kSktEsUOVaqWb7FnZ4ash/wu0B+8QfqKUrG9zHri+bBCkS4nU+z4s1ycHnU5
l2K3/iCnzLTUX94OefPvvqLjjL8PpQsOHz3BO45t6n+rXYbgE3c0Ptj1qrE/
+NDY8a2HbDByNjonBGz9NV3WYfSED876JuMV36uu20J7O8Cft3hTq3fbzPoD
zr6a/nonN6swaEKq4Pc23pl5ekims9/lI91P5cuQ9Z/fOzjfC/B5oc2vBX9r
+KwnqyYXbfG1v9n/T679Vf+gK5nO7+rXu741X7p8p5ADzvkF3M2ryQj/vYbP
9x2+k+3zQSvaG3xzo9ix+6eniz5dm+6/5bfWjC/6pOWfvnNZVKrgrCfs98BX
R5TdsLpMmuxXe4f2btgjOsWOH/zziJ97vjT7T/jImTZkQqZPzVeBbg18kz1f
pAgOn/0hOPtMcL8WHmV7vbPfZ7qFFl8z5p2R45pY9E/PqBQZd/SED87+HP3f
m/B0/6hoezvAR/9+QfmfLr1gcNZV+run9NFLwy+mCl7q7bnSW1qmO3f32thl
Yb5XYn/mOfipMhl/5Ttn5n+3AglTvJoZPutPTNt2L7vdN/t55n/+wTOKTOyU
Zic/LH3fD7+NML+vWpXLtV9724wLclLqTIi4szRb+sV8Yx8LvrLjE2+PoXmC
01/Oa+DIX1bxpoubv9n3rn54w33k/VQ5P8J3X3Wl2PeNDR7ea/rq63veSrvI
Rw748hmhDj+3N3Kqlvyj3YI3Zv8GHrVs6/zJP5p+eXZI2ni5yluxPzjywX8b
8VmjxdGm3XNnLuSb+pvRZ7/PkoL/RGWKPuxL5dxh4ZwL+J2+vZ88Z3Riqh2f
+cy+XdaH7hWHzdpr5O8c/DTn1tfGzthtdTXno6dHZ4r+4LQL3veHuT9P8M8V
+WdL1/be+u6V9As+8xBc+nW5RrPl3xv5Sw+u2X2unZGv5WxPTpw5fVma8JED
/7Mu130GzM0R/utKcRP+um/G5dBnzStcWG/WPcaXcZk8LqDuorL247ijl9/x
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
H/CYyJ51XlwzdkM+9kROsHv57u2cDF6kWtbYfyLs+YyL7hfyqbvUvOwTp9yk
F4JTLwk+9gGnv/CXHro85TunnH9/d18PyE1/IXoiHz54a7/b7iPKGjnoCd8z
e2yF10nJwtftjqtcafa5FKNn103zvwnPibebh1sWlHe9k2O+m8zbiD9t78Ku
xYt8cL8rxxY/j0gUHHvq729jp20jCxXItJv/Z3cWPdOgwNtAn+s/jYnLSbSz
f+aRjEFPcwwf+d7O5z84k/NMcL0fAyf+VOPw9fmO+FDX71vUO59j+HwvHEZ9
NeHKqefSX/k+hvzS8NzhWMGRzz5K70OYJ7LPsezvsex8kZzgF4JjZ/jsH8Dj
xme1ejUvWfjIZ9zBWT/B2T/AL7j0hXf24RciX+vJ/kTvo+gv8cVNWq18ftL3
meDsq+H/+vHM2se9zD48qc53JY/lGPuDo2eNfTXWjz2VbbdO4vel9eT7xTxp
W+qTdjnXXgiOnMP93TYmrTbrv9T7s9qFv/D4/uXVv80KdExvE/VqY7Lg8AuG
dZyTOCZJcG1/vtfw27ZYXPtpeoLch/Bdpl/g+c/4lZi6zeDck0he9zax8VHN
E+WekO81vy9w9o3ImZXZ8cDKca/s+PUd9/T484DRB3sih/3GlgUnh2UNeyG4
nPssPvqbc99/1mf47HOwDzj7Z/BuBRKmeDV7JXz0h8+9ATh1ALX8uJ+XbfNp
b/Rkv4ccyd8ecTU0aaOxP/ZhfLkfg498cPZR4AfXu/Zwd0oTOeDIr3lteMiy
2/+eLwpOPZnZ1eBynrXsiXzJgzSnZZnM5qZd5B/2OO5x61Sc3IOBl6va3udB
TLzcN4KH/nbg4Y0BcYLTL9Zt5HA+Aud9DT7zBz7nNXDkX1n/o/vsMgYvfnhV
4ROJZt6e2lZ0+8MGRg79hf+i08zA8DoGl3PW5a9Gx+01/eUcQbt6/sj7xSdj
vNcPSQuc1+Hiu2fbE6VdqYdr8cG55wGfc/Zm7ZvHMoTvPWz0ly/TjXxwxh18
+sUpQf6HXgVW9Vx5N2uiweVe0eJjZ3CvEZWcUsoliz7g6MP7ETj3q3L/ZtWN
cs9r8FeR4w9lH4L/Kvw/5je6vO1wruBbyl34rNRuIwc8qMnJPys9eCRyxG/2
q/yVHOMfCx8c+fCJN+SeGZx4Q/FntnDyqoHvdt2+a4/N8JdXqZlbOj5Cvju6
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
bX+8ZPNxrSfCj8iY2Gzjltsm/6zvXidaRQvf/ozvYLfZ4YJTrodtw8ifZ98S
PGbwfM/bh0vlf9Ef+eD+E2YPWbvmvuD+/etPWHPqqujvduuT6CsWr0RP97tD
LxfVfKzxhs2Ljp2+I+XK/0Yc3Flriy73RFe7uqHbX5msB/WbeL/iA1NZ2exW
lyzjRQ64/9Tuq34d+EzwiOTqaTuyIk3RBQ0PtKsUq/XsXPrvym7muGvI4/xb
F+6LfOzmPsTy43k7IoSPfNduFe8/m6/1GdBhSEFUua4X+NgZPN5zlql9LY37
J9rYRhbdFX7oSb+b5y1K5L/m2j7x/KlWnOBOfUZZFY94KOUKruQHrd3rmVQz
WvCIEXZhx47cM/tf+2E7vqt16KSp/e73vF2qBOl2Ej9z6qv0E4ILf9VHI+oe
vmhafPT4y1dVwoQff7V115dTAs1wC683Hf+t6m8Kmp93d9wXF+R/wRdf9Cmd
/UWg4PEeR1pnT9blgjdqvutMzJQLIh99PK6MO/hZpXfjqNu1hY1tb0q54Ban
5/na2d4SPuXGd+2+3+mL8/q/vCzO1Yn4xxT/6RPPdbX8db9+9Xvn13f3CS5y
XL1PdFray2SxuPIX98+00v9rwOV/D/9blPODliO4gS/tmXHG7rfCReH3BA+6
0quP9x8h0r+oX4+9Bc97n74p/QW+xW92n7TackNw+LQ3s3FA2S2ouO39vrbh
uh0yHlac7Ola854uN3z3nDNDr4k+FhtsWr0ofytywJf8fLlVtoXGG13s/+N/
bO8K7uJ18XevjLNSv+oeuCnoVfuChRlnzHD755vLB2VeNiuX+qX9wAd3Sjx/
b0y9ICnXfv7L0Iu+mg8eEdPTo+tmrX/Utz80SLEoF/2d5m9p9avtHcEbfVYt
sk+dK2b/K+1tyZU//b+4rPHA4Xahd72lPaDn4q93Thi2Z485XtXr1o+Rx0RP
yvW+eaHKrVbHzfDF76UNOXronNit1WfPasVZvDHFz1v/g2n2Tal3cAsH9y2n
i+7I+ABOvZ99tdrtbPhDkQ9u/fmmB6FrogSnvRnlMy75R7WY2qvWU+GDM76B
u75/M8Qr6raZPt69wpxv1dHzqcivVWHssFNXzOtLtU8jP2h42qn4u3vFzmK3
Go3/uP+DxsU+qh7t3zo3X/XFRW3Pj5Y4Rvua2x9+o29rOe364pKMD5MH+luf
fX1Pxm2ZF7z3PNr/ncaRT3vz6Jr4ZrjtbcEXL7fuFDTlvNRvgE2ihe9PL001
d6+8fNEy0eRY46NFwyqmm3i3GtynV9B2p4Npgrf65e2ua99rPu+5H3VxDXR/
p0fACv9WX1ZMNfEuNnig84g/vqySKnLaVPeusivUnO9wxt/+2OwEkc/77MgB
5x1t8KXb3/N2qJImuL39itE7Tms+71/Db/Ww4NMaVZJFH/DCugf7f1IlRfjW
/rnjT+5OED091uT9vbF/gakwosrd0IrZpptrnk4pqZBn4p1u8IAbNVanrXgu
eKz7hch7czQf+djZe96p6t1WpApeFj7xn6edkkR/3n93fbIvuMAy2RS77j/3
F1bMNIUsfPr53lGFpgjbwGst/2vHDzJb+bwrn/+CP8T1ceaSvpkiH75H8Nfx
21dkCZ6cEZdQ5a6WL+/L7z5eVGdYisiHj3zbT+a+nFolQ+oRHPngc8d/2a9s
VLKZnPDKwxp1mGSuv913g11y7iSJPsgZ/yRz+MPURDNc2m2tW59NvJ5uGlnU
dvQSizyTc+3G915XzDVVnfTm5s0quabqtXdPX2mRL7jL2Pcu5KY9F37sk/qT
X7/NMVlsGbzoZkXNbxU6vtJtU7bg8Kl3tyTPP3yqZAsf3PMnJ4vQ6zmm9vkT
R65qonGjnN01t3e0ffelnSDH/7cBZ8s/zRUc/oLdFSaEvs0Su8Hf2XDh4B2j
MwWf/PuhSqu/zjd5bsq9taFiphkfPKz/ht67DmZJu7Wr/Wr7P8cyRU9w+P4d
i6YG9s0R3H1Tp/Fuaekif1+E6fym2ZqPHN6pB/dqNMLjSZrGH2yf/N6R4kz5
35i2Ub/uPKH54Ilu95fvLn9hav/Tw7CR7/qJUT64s9Xz6n4rsgWv+sOtIYv6
ZgifdgifdgLutf/HmSv2ZEi5Ac/XZ638QLcfcNfNpa02Hy4QOdgB+4Af3Rvf
f0OVLBmHwZEj/U7hjCeCO7g2nTRJ81lfyfphf4tlzXPP6HUd80vJij+/+eKc
8O2X/zj/G6f9Mn/BX5wW+qqJk4/gIv//s/404vRHxpm5cw5vvts3V8Zn8OxB
Y/MyDj4Xvu/7Jwb165sm/wW/ZFbziC/6pgoOf03OnM5NH6VIPYr8k8Urqz1L
Fnxjz6zDp/rocpHD/MJ4ZZQDHm6z8+GJ69liB3DaCTjjJPKxj8udkDaNpwTI
vA8e3+pAbPvDl2RelnWymse980a2el0vTPjgLh3e/7G27Q1dj2p9a5RjMWOQ
X7cpp6TcNi7jpx2591LswP9Ku8q3XtvjmTkO32pXwden0rLFPoy3vo8enp+f
liG423bfyMt19fhMPzrb9O6okW/TzOy88+eoeimLkqS/oP9RW891d/0SzfBC
353OBeVJIie2beu/jk3U8w78xeU73ALqaz3RR+Sred8p9urNYVXSdf02/Svv
yE8JZnzk0H/ZR3j18Zt10CpWymUdDs68AO6dsHf3gbInwmcdiD60K9b/4BG+
x18+rfJc+C4jH/hYv3kmdoDvf7Fv06KyOMHREzm0T9nvfHph75Oyp8IHRz58
5E8+XWfu5Wz9v8iPuDV/+jfv1vGsW5ADjp1l33TweOPB4ZoPbnssKdw9Nkbs
L/s4H/cdM8seC44dsDPrHOSAJ7fu7L+pZZbwW61eOSg69qno7+e72upKoq5f
cPqd1Pu0rJgDLTXOOg27gfvunfrvhdwEkYMfADnMm+KXKPzZ7VCPBLNyac8O
50YFJfZ9LviQ2b+e2XYgXuwATv2yHiuwdHsUVq5x+JQLHj+6TaNFVTJlf4Hd
7N587DJmRbrsI8BDTs9vPmtShvBdwoJPbZ3+ROpR+C++j120IMasfmkPJYcD
p/53vEeOc/GwCg8Dn4qeyDm77sSjs0djBZdyVfvEbvDDXnwxvzA7zqx94h9r
ZuV4v3pFyVcrOPsCcNvs7hvvvb4vfNoP+rNuB3evd2hYuwWPZL/A/y72/mt2
g8AoweGfTX9xeNLOx2b2ab9t4K3kI+Z6zm390+YqZQ9FDnj8xN+8upc9EjkH
xtjVSil/I/VL+8Q+4N2b9/M+UyVH9Mk716N8T+ATsXN5zPT3k07rejfaHzmM
b+69X0zzKM83xTbfNdXW8t061brP5U8sC/Q+SOHxc3ekfGKlcda98FmXwq/b
Oe18Dat8weFvvLPBs4Zlvl6X7p5pV6FLruDMO6wbL1WKH/6mV56sA1mHT92d
tMrK57/rzL9HrSzPk3KRI/sChQ942cGjpKIeDxcndp+0ZXm82X6Q9WGsn8fQ
asl5Jo9JDuu3/6rLRT76eKdWuvnooMZjqz6asqGJlmPkg686um1ggwcad7u9
xb+iU67Ys9Mv4+ZtLdf2bza4NONLyxfCx57gVk0+SffqoOUjB3uif+mwb53q
LNV2nvysV+6Tu9lm/MXBt44d75wl+nNewHhI+8TvMf3o0Pe8tsRL/wWP9W2z
8kxogvDxn9MOjXxw5mvGvcKh3wTfmG1eLvoEvLV4HTkpV84RGIepX+QMadg2
OfN0ktl6b0DJ2G1vF2l+5TdTm8XMKhP54PQjKVet88Hxtxj5R6/ZlRxokWDW
r9369uu2dZ15f7eq87pLwIEEkUN/D3ndwGl/XY1jhwH7K1Z8VJRotr+I6HbV
+tbIpzL+yPrWlL3lSJtYweEzPjMuwa+6JXnJ88A4weEzzuCHgQ++NMLKul1a
isnLL+16cBONUy71Am6zauxD03WNh0X1mbG+4RMz/RmHGW/hV+0/qfXAndGC
yzmRGv+zl2z47EVooj5HU7hDgNeqCiuShG+78fWlpjUfmTwWP1uYbKn59iu8
19ZsE2WGyzlO3B3T1T76vMZ50LYHfx+NEX2kXlS5XoNW3UyunCj1iBzPFX99
fTdV+w/BA9q37/hkeYI+H1TnROgD3/GuXdOkHQ8Eh0+5O1P2ZL7XN1n44NQj
/PammiUdAx+J/jLv2x0P/SQ2SnDGB+QY68VjW61qEWueSvuR+Z1zRuVPZnwG
nzxyu93DAY+0X72k+jc2UeZ814wDqQdOhYgfWNbDsxZW2vTyqhneKOdYjTcv
r5vJwV9tP3z95Sm1ngnuXfm3Tf8pChd/NXLY37n+9bZH/5r6nAI5+Htlfbsq
w23Oao3LPP742KmlNSLNzvtYJ1CPsv5R9uEcEDxvUuL7k4pumfnVG1082Gfz
ES0fPudE4Jfeb+sUP/iN1CP9DjmyX3D0O9zmeor2z19ckVK9YZTZuov2aWw/
TuP6fDCyzWMz+a7OWfEOA3S5ny2rtiH2pm7/2EHOLxQe8Ti+XVqLRH1+oXD6
O3x75xo97z65L3Lg2/7x4fFL3e6b2Zl6tLrT+I9LlXU9pm9o0Mhvxz0z/lm/
put3vY4UXNqz0qdmm57N305MMpU2u1Z679fXMu7RL+h34PjzwUvaT352coE5
37bL+Sy3hjFm4yrjOetA+Hmj33yWHx4n+JooxxlL3q0z5LxV+R9Yv4HH77D1
mlWs8cWPn+1o+tklMz7+K5fHXYbvyfGX9ZX4tRrkLD2Rc1xwzpeRw/qNcu0D
wmIu5V4W3HX1gh/a1NF6Ige+/9Pw4GXFV97NcotWLqmcp/1syj+GHDn3aVdt
tO2TY4LHf95uuX8rzZf/rd+7WptBfoLLfz39vHKx01EzvtHPJnwDDl/O3W7Z
/F1n7g3hS39v27RXh5Kbwm/Ute2EPXXvyLkYfOJAwOHnbVy3LXpzqPidxG7q
HA2cdSb2sfhl77FrOSc0/jy6192Iw/K/ghv+i3aF/sjHznIOPrny1ZLi67pe
/pMwwqKu5iOH/sh/wZfzx9m+thtL7prIv7f8/sDFqyuWm7rsc5oaZ1lm4p2j
LrNiKhyo+FZw3vEBt0y22pxv+cbEPS/kFG0sexnfrEzw2usvNfPJLxc+9+jh
hzc/d9nq3Rc9wb9fVzvVqpLG+5/v/93qCpo/JOXhvOdl2v+EfMN7SabA6gc8
4qzKzHD+Cz35r30elXILbLSezbbYLfypYpnweWcqyu5KuWvFN4LDB5f/Vfoj
B33AvRpcuuFa4Y2ZPd1afPR6RYKWz7tO2Mcon3KXDxh+Id9K689/eU6akVnv
3Rc+uG1EsLVtJY2XOj8K319B83kHCj7297c57fmmTPvV4BvegZJ6NOJS70pP
cL7oY8TJ92gmR/GZf5n36dfgk/OODbFY+1iPY2r9wDoHvm/N71vY7owyw5mn
oqO/fOY34KEefxROPAA48ztyKBd/KesQ5AeN/njN/JExgiMH/Ylzk3FDlcv6
TcYN1ts9m5/ZXHZf8Kqnh379oIbmy/x1blFQwJN7glNuidPjLV63Is34jCeN
FlbtPLJMj6vg6ZcCx/xWFinjHvo4Liy8ERf+SJ9nLZhw8a8nESIfHDkRDg0v
/13zvpyLSRyd4rOvl/g3ZWf26fC9lkdkbKn5QHDWM/ApN+xD7w6Puz0wqy/W
G8StYQdwi6pf3Bx0+6nwWVewboQffSI7P65hnODYDTmN5mcM+X3tM21/tZ4x
8r27Jc0cmh0t7QT9Zb396X9yvIqDtf23x+/f1jFE5gvsIOuHMR1tjxZfFX7Q
w6jZtzPOy/pB/B4qrgZc5Kt5ytXjy4o/zA0X3P7GUI8BRTdlPkKOcR4Et3ca
EBwQcUjmTeETR7d7aEx0zkmNq3gbo3zW7cZ+Yd+tqd3UGhFmfPRv9MJ0dVrJ
bcFdXv/Y7K+OV/W8rMarsQ0s52Rblphsdvx1ecO7L++UfXB+XUnliq8Ehw8e
G/tVpo/lK9EHOV4VH6ZssCrR47n36quVK2i+T8H4mS/W5JhCnBv82bhiqchn
XAXvuTO6zrbxGl81aGFm3V1aH95xg2/UBz1deq+03m/1ysR7psw7/X++5bnI
stg0ffP8o492ZgiOfN7DZb4A5/41uP2928v+digWPN1uaP1d/2r54MjP9A5t
/sfSIhP5n5lPtf3VeyUKX9Cs3fwdSzXuM27w6L4zX5vpwzwCbngX7//Lp77k
PbvzTWy++lfbk3fZ3IoPvu5W8bXgvO+GnuDkDQY/8Em6zVnLUr0eUHLytiXU
OjLkleBBTcK++eHia+Hzrhx8cNoh9S64qnfwz1Z80+2slcaXm2x7N66g+UHO
J95tpLJFvrEd0n627L778Qq3YhPvmNDOqV/4s05H/lTqrnHeqUEfcOqRcrOn
Rp5a5aPxVuErzrXqZ85Hzsjjv+fNCyky8Z4OesInzxJ6Lq5Xb+o0yyIT7+PA
B0d/+LRPym0x6erC6s01v7v16sZR4zNknUa55FUAv9Oixd8rPTU+1nKr419r
34idee8YPvJpny1m9Umd97PGeX8ZPnJ4v5j2ZtQHHLuBL/r1X49RgzSfvO7w
jfqAd+9xdoKz1UvB0Wfjb5evTQx5aeLdWHDaG/YErxm3xv7o+FeCHwiru2PC
Zt2PeJcWvqvLTtMty9e6nyp9dm7NrHTRQfevkatnTJp2u0z4yPdt+yTq73Na
H959YFwC5x1exjdw3iEFN8pHDvqAH96454N9T8uFb3gXVeQb3i2V/mvE4Rve
LRX5hndOZd+BPujfZpDjrdvNXpvIU4f+Rjtjf8fNL97csXtt4r1d7A8fPZHD
/MX4k77gS8efKuj9F+8yI1/mLzW+MT4gHzmd4nxCu1Uwx+EXhuVPuGX1bpxW
78nyv8g3vD8ruLzfofin31/t62v3ykTeGP7LyA8b9+eWPdc0TtwI68Dxv/Rb
VqtlsuDtLU92yN4ZJ/4r8LCBrt//E/tE/IfE/7BfwM8Gf+5dm2Dnmo/NcPj2
jf6eGtUnQeKRWMdS7pYS0/ETMUWiJ+XCb2Xj4hrS8Kng4o9S502cR7MeBh/f
ckidpn1TdPyhiodBDvy57987cT8qUfDhQZYJ60Lz5bzJyAf3arB5eGmLJJPj
gpOH127X5fJfrKvh4/+XOMCmzy+nrksy43N+Z/xfKVedX4B7Tvt76MXyBLE/
emZPyny7tyhecPic9+FfhQ8e/l7UnsjKCXJODY4c9ARHn409vbbv21go9Qif
+Chwh8y1pVkTE/V+oUlyy8BwzZd1smon2AE5zr/+JzF9QZzgEn/IOZc6r6H9
gD/4J+tyWZ8kkUM8BuXCt7C8v2l2mxjBiT+kPbNvkvg9hafnzq8etjxe5Dtm
N/zScbrms9/EbujPvgbcZVOPl8WVkwT3su6cmTQgzkzPoHOjRn824JHIl/gx
dU4HTn+0bnDv6XsDogQvi2kUsSW1QOLW8EuLf0DhxAlL+7R1a9v70zThoyf8
hulLli1uqXG3Mx7PmqWlCJ/9Nf0Fv7rYYdqLZiWdzHH7il9sH7Q1Tc6vt5Rs
81gzK1/KhV9+qvGt1T/lS1wo5dLOwct63FvltiJD+yvG77XtvFXLkXhUFa8I
Lv1OxUsQFwRuOyZ9zIa3GWblNqy98tbkOVof+OhD3Jf4l9R/tf/qw4jvJqWJ
PtiNuBr4VhfOTah0Ro8/2M32wdlju6PizcaTIamnRrR8myJ88XepcrmPAE5c
InZYPrXAdce6F/pc3lCuxOHfqmvx4/U0weM//WnqreXmfInzP3b4z+aTUnR/
5FyjyaV2b3NOSXuWc43xs4Z/kHta+IuvTl80y+mg7PfhBzWLLxvmdEBwkW/w
G4j8/0+8rsvhqcddp5wRf4XIrxHX7qcppwVnHMAPYBHnk77K667gi7vPHlB9
dpj4DQRX91WN91DkfNbAl3t5/2T0vFwcInqCRyTvmnGv+Jrg/im7rjj9cUXk
ix2qn/0ze+h1kc9/ef/qFt/9VJDw5f7ItM9fRQ4NNeNLuX6+b9LqXRc9vQuv
DD00+474T1hXwEc+8eGMq0Z/FHjYqfAHXdfG6vsaCufek8T/HIk52GHnI5ED
P92v4hcfTo8SnHsrzBeMk8jJ61nn4zVlMWbjrfhL1T1c/lfuY8ZXq5SdEyB4
o37FHVZPOWvWTuzHvnq7xslX2qfIMbRD4njFb6z0px7BLdxsD7dY+0TPgwcj
l8SO0HyZFxS/S+i8PT1uazxo5+xB1+bfFz71Jec+yp8J3zn9qxkLLmhc4qJV
veCHlH40+pfvPeZHCh8c+a2qdzVdrBkl8sFLvsuZElFT+3vFzznn3m83D2h/
JusH47zput07aWnd29IOxQ4P/K+Mi7oluNhT9Ttn758f/LhGt3OJo4h0sRs7
IFL+Fz25zy648ttjTxkflP2DGp8JqD0wRvPV/TXss8ix769nlheb1oS0zu7w
37g3tc4nbgG8z8Sk/X5LNd5jhY/VZ0fzhE89EufG/h0+OP4o/hf5LvF/O253
03iHbP/ozwK0HOLJe4w7PWOgZYHsE+GD55WnPjyVrPcpA7Zdef+b8eb/FVvh
2P1uzvkipzzm9/hD29+NJ953XZdYFsr+i/oCj8747vWDpRofXv7Nqbk+L4R/
YEy32COJL025FXo9n2T5QuTDBx/7nqf3+WalehxT8tlfC956Sa+FEVrO1NY+
bfw6Fcn/8l8DOvhF+m8pEntiN8qFn2sX29s7RONdxsWc6+Gm+d4vN9w9fl7r
yX9hT/AlH/cfFzlE46XNM3LGhBWY2S3iXP0eE9LN6yt+bnTAD7YaZ/zBDuyj
4a+rZLHBbcELwWlv/BflSvtUOPtluZfR/2SXgRbmegYffNN+cHttTz/flKTt
f74wnVjwx8tIy2Ip1zmlQuq2n16IP43zTcZt+Dbd/83LDimT8QS+9+cWLdKX
arzDsWEfJnhq+XIu8CK4ySO7YjP5X6csrxg8uUj4rP+RzzkjfHDON8GbWb79
NttC813avH2zY9+Ld+uJ9N/PWBaJfSQeQOG0W/AB1aqdvhmo+VWjZ+VuDi0Q
O4Az/6IP+iMHPu2K8RY+9QiO/siXcxalJ/20+rr6lQ7U1v2R+qV/gTtUiHv6
T2GJ4E0WDy6ZXFPzuQdK+6TdWpdefd+7U6HIoR8hp2G11vWGDigQnHUX7RMc
/bPnejScYffCDB+7Irzbkndf9AFHH85BCs82ubjnM90OaT/bV24+4ROnceod
PX1eVL9wzrZI+ODNdn1d+U5skfDDai//5kDdl2JnIx98QEjFn54nl8n/OplG
Fuy0fCn1LvOywuHLuLcg4fF+Z3N+wZBFXffYvpRywZN7jmmzxkWPG9zPRR9w
7mGB81/IWbBtr/+JBy/NcPjBuy/4V+tdbkrcdm/1oXUvxZ7EFaA/uM9w60VV
O2o77+szdVCit+YjH36neb/XaLZf42uOXLp4bU2R8Ge3KOr/b11tN+yAvwsc
/Rk/fU9Y31zeplD44N03tpyxLb5Q+NQX/Q4/IvqDl+U1PNB4mdazbl6C3WPH
YuHLOl+1T8bDmyExvf45rMcl/uv84riPT3XQfPRknAdHTxnnTWFRrs4vhA9O
f4G/fWV68JmNev6iPcAHZ3ymf0Vtrjpia7ju7/DRh3EVfHfIxSqjjxaIfFl3
qXopbFvcNsrztV633z++boOnXm/g74JvHN/AWSeAh0b1Tz66U/PZd8BnPJH4
B4VzPiXn9arfwW9xd3K/TRML5H85T5F7Ewpv9qJlg7UhWk5/0+Ie69zM+bb9
m1Z171Io8j3W9PLcX14o68OzD8eanN/pxX+Bzyqr2K23VaHgNg2ihrQN13z8
P9LekD8pf9GK83nSf9HnQeqyPitO5On5WvEl3k/x/xzeLGvZ+GLxV8C/c6XR
hUVWGncbNyso8l17Rz5yynpGvg71KtLn7MTFKflWi6d7TLMq0vZX+nNOJ3FZ
ar5DDn4q5ICTFwK7cc5Vv2GdjocPvJT1oZyPq/4LH31on/A9H4SsnTlE45+c
vrG4TYiWL371QRePfh6YJ/J3mjLP7p1VKPMdOHLAaYfgu0e/umXvbq4n+lAv
7r37LPjnRKHg6EM7Aff7fkL7Xxx0u7IaaRvXc6fmUy524BwQPnpSL3Unzvhk
+6gXMm4Y2zl45ZSZzrM9iwS383lweKaL5iMfPv0IfO7UIW+GTdZ2m9q6vIb7
nTxpJ7R/iddSOP1F4iVa/Hxx57v/g9/wXt3PPZcXSLnYAT2/L182cIR7geD4
5bCDkQ+eGnVh8+jxL3Vejgqf/jPbQ8vnXAM9wX89f+DjtcvzZVwy9iNw2iF4
0cSkOM8ALQe806+/NPHz1XK+Tx95ZkVwnsiBL3GnCqfeJd4gJKXHmf/6/wzy
0Z92xTocnHXa4N1Wd7ZWfyHywWe5fm+3647GmV8krkzhrEvBy5/PnLDbWssB
nzzuvHNAspbDOQvzLPMCfmxw+OKfD9l14EHDYn0O22/upQ1fFMg4Q7n4+cGN
csDZbwZd71hnQ129LzDywdm/g/+5onuNi110uZkXmh47Wa7HK+qX9QY443P9
4uBP14zNF/nIoR7B8T/UnVi/9orDOt7JyAfHHwIeXK/3w2fuWn7Iwr8HXA99
Jf2C9Qnx/OAlI6ssL3LQuN2gP2z6RecLn3tM8IlbBt8+0LPFd9n5st5AzmLv
v3O6dNe458em0xen6nWOUT54UNfT6eUBGncYt7HxSA+tP/e10Qf5u+snJ98t
LxX7097cvnN0uTW8VMZh+HKvUPHZ36E/fOtZ+1we+Wj8zvMNoa28tXzkRK9a
VtDSK8/MDsgn3oB7i+DwZ7foNyLopl7XsS7FDuCr4n970rC3xresW1dvUfQL
Mz77ONaf645vPnS1p7YzOHqCx/edfqROisbrpowKn2Kj5YOPtZux/+e5BWb7
uCZ523YWjdfr9uFBQ/P3/lkocUHgzC/g/Bc48XjwHbIq3rxSrv14tHP/UfHV
L83WfkL6NXaAz/4U3LGJV/vWPnnCJ68LcQiUS/8C913ZKKpVisYbfb9gx7rG
mj820aJw2RIdN2783+3W3cZUuK33HayTifeQ+z/4GRTOfkfGSbuU/mP/0PxE
t3kHQya+EjvQPskDgB2M9oH/WXbPilc9NV7QecvnXzvm/x+/4v/ulSOHeuc+
FDhx9eCJzed90tJD86Pn/Lkt+usyKRec+1ziB144poHFtTc6P+rMUTM7Ncs3
Kxd+cMUrc20eajmjLvYK6X02X+wM/3DNwbs6NtR41M77Cy+OLZH5DntKnkyF
Y3/Zf6l9ipFvYfmouudR8/5r77Pmg/ULCoVf2i/k7dPyMrEb4xv6j3T+y72l
p8a5j8w4gBz4yOHexJB5PvWzy8sFl/9V99TA2T+CZwdN79/CXfO5v8x4aywX
HPuA43eS+wjqPiPlgnOvDZx7FuCz1k2Mb75U83eOT8xN+aRc6h0c/cHpp+Cn
D/a+YWej+dXXfdjp2We6/RjbiduLzxo6+Gr+gTEJZZH9XwufemH8By8qrnAp
K0DPL9bVZh7r3F7zud+K3WjP8MFLW3xQt+YEjfdfMXJ637B8s3G7T9hPv/wZ
8EL0dO+dvfNGfT2e819LHvf0uFugcbnn2fL32PvrdLnwKXdJJcfWw1zM8cC/
v0qdWKLrd2lA/+Gr++TLeM644fd3atz6TI0z35GXjLhTcMZVcOZf8LAXHQre
n6HlgyOfcay02bxzy3freF343X1q/Wf5Fh3PZix3XdiBW5/9Uvp//O1+D5fv
0/HejJ/w3bPP+pXMNV/H/mlyeVoxpcRMPuXSTh5ceTxofZT+X9oJcsBZp8n4
v+DK3AY3Xgl/QIeqx1d9oeWDxyU9Gr98o75XBY4+Q3bV399r4GszXOKu1ThM
udiBdWD7/JoL/Vdp/yTtROINFI5fEfwnU5cDRzxemvEZb/Fbnr65st7Z3RqH
T14v5Bv9fpmf/NDvkoPGl0/t/R+/ntrPCV77U9fKXh+8EDsjn7xz4PDZ7yR6
9/q82ceaDx7aZ6P71y81f3HTfY7L1+l7Z/Rf7Fx/1rpFI78pE3zy92+sN40q
kHpE/tzYYvutRRpHPnn20BM56APOuo56RA7jjKw3VHw+cqQ9F/99rP8Grc8s
19dNV9XPl/8C57/AmZfB4/pYOv/RVvPjL33uuu60bm9iz4tD3q49oOXwv8H7
OlkvX67vP8InvyJy0D9m8JJxnut0u6Wdiz9w6AHX4uklZjh89iPET2I35LfP
Pzd9V5Tmow/+QHBjvZSVFt6u1fv/4Imvml3eXSLxV7mb/Gx6v5vnWT9IHsVB
I7t8N6RQ1hvkaYQPTn5I/C3IKZzWa5Pvs0wznDyHyOnx1/CL16N0ufCZd5Ir
X38+fU+68MEHTD78zdpHGcKXvG0qbwz+DdFH4eHFdT6fkqz5lLvuyaH93Za+
0HJsk8v+GpYh+Wpkn/jnsPkThqULzjxLHJpRT3DkVz85vX7I4FeCG+WDdzq8
r3fbkAJTG5cz8y8tL5E8OfgBJF+HwvHXgZ/dVLdi5rAc8eeI/ltNK2+2zDbD
vYK7/ZX9W47IJ/8JdoMv9nH/fG8tf60PctCH+ybYATu7hda+NbyZrt+jX2wf
7VcvS+RL/hxVLvcdfn22+8fIDq8lLo48P6wTJF5O5UECD9obs6CoheaPrfKq
9c0vSiVOjzxCkl9F4QfyHBY3TM4XvNGzF3993lLzJT+J4sc/9f63tafGiXuE
z3oVPclrBN6mpXsdy63JZnz/9Rd/S/o1SfSXdwGUHPJNgZ9daN2hxnNz+9Cu
kmser9TfoVBwm62jM4ecSZN2ezPjrykP9un/on1K3hWF179VFtPJ4YXI8dnu
7tpxhTmffI/GcQN9yNOFvwKcfo0c4ieNOHz6u/iF9iftHTApzUyfgJ/7pH16
JkVwyeNBnuEKBf0bNyvQeb8VTn+U/CR1plV9Hpck9QWffH3g5ANBDjhy/BMb
Vq5ZnGymz5q+56rfC02UegSXPJP9Vq8t/1HnWXIZf2XelRaaDy581S8epDbz
Su2kcfjsg8DjPtzysY2bxpulPgw8vi5B+MyTxF2Tr0zyxYUX3d9XHm8mPzzj
1w9ub0k0swPt6qezzlUdCrUdutR58qh1Pd1+OoRXPhRXV/PB+V/PjjVvv+qj
7QlOf4RPu2VcSu925ZephS913pL1teI21cuUcUne3VD5h2mHc2PzZkZ8oOXA
p73ZXdhmNb9lhtn4Zu2x8N87P2SbjefkSeOcS/xsOZ3/qH02V3D26Yy34DI+
/DTj7vP1OYJvX9nt/s0+elylXPK6gMPnf8E5t5L8aWuSh53smyVy+N/AnGFR
Xn0zzfAuy5osOPNblpl88paDw8eejP9tuk2Y6N2zUP6X+sXfBU4/BR9SdqFN
5cmaL/cgFD/x4JFvTAEat4v+zwfxxdnC9/w4e//h0y/FDkY54Kve31OnxXhd
LvVIexP5nyf4Vl2ca4ZjH/oF54DRlzoM39Iu0wzP7jvP8eLBLNGH83SZNw18
cMbtvJa3L/zbokjbWfHZ14DXn1j8QZsAjQ9Z4+Y+970M4RO3wDhslAPu3tdz
mbVD/rvxcJzr6bFaPvrDd0/dXLrzN40T74H+2A2+//6r9sGPsgQnroP6BZf8
7dNPjk2ql2OGow/zfovC86OOHy4S/RnH4IN3qLu2ueVSnS86cHuJyfWy5qNn
m9t9ev54ME1wyaumxjHksG7HT+V7/gfrDlYv5NwNHP1P3+xUZX+mzj+JfNoV
eIf5G3Nq2mi8S4erKevSMsz0cd0U6tn1WKoZzvxrrF/aufH8GlzO5cnnfPmD
VzW8cwW36uv65vTsYqkvIx+8+z8X247z1Ot5eY+gYsbg9+zyBc/7fsSyXu9p
PeVco+no9Y2vp8h/lTablXn5vLa/sX4p12N/QMdBPrqf8l+M//AbvXzlVN0j
V3DiPJEDLnGhb5NPpHbOEZx+RDs38sEPLx3u3bdZoSl6zu1DWbnlIp99JfMs
OPlzwPPetwx69TxH+MyP8PG3gFs5ZtQreZYj/iXkDKg9ZWpcWrbg8v6L/7pv
bfJyzeRjN/ahkl+uzo46dUpydR6bUcs/T457I/ogX/LKfrdkxofp5jjyKRc/
MHaDz/oEHD+2+JvVfhY+ctAHPeGD49/mv9CHfTr8NX8ezKhj8dwM5z0IY/4c
pyMtznSwyDdbdyHfmI+nzTfrUuPfZpvZgfGKeRY+OPHqkt/7rZXNzOuaL+2q
4u4pa+5myLkYciYHj4if/TZdx59/tej3zOByGX/AkQPO/VzaCX4G+JIPefbu
kMuXs8T/iZyyyp0vH3yUKTj/K+O5wiXfsrpfBk77oR65Hw3ecFHEb0V3c8Sv
iz7koTXilMu9ackfrvwe2NPidFDDrJhyaYfI4b/Aud+NHHDi4lgv0R6M/dSn
eoTN1WdZIh87hL11SzryNtMMR3/OkZv0COq8zi9f/PmMS/jrwImHkXuCG3+r
tCBE88Hhh4VVuu9oV2hq9pFNry33CuRcg3mNeRAcPvjSE+kbv4jW82Crw1Mc
3KPyRD645HVRcZLg6DP14uvPxz0oEFzyRav4RvTHLyf3Cwx8cPbXP7X799nO
YK0/ciSOxblznoO/xokbR47RzpzLUG6B5fwD6xPzRT7rJf4LvCywj20jG53v
Ov5Dm3lfFprnzS7s9zqiXbLOz+yQVX2be2Ke6GOUD57Y88Afds007pO+YnD/
ZK0P8tEH/qXshGorC/IERx/qC5y83BJPqO41GPnogz8B3D/ddH7SO3ujDzjt
hPXVuuPdbmYcLpfxkPWM5EtXOHlyZL9cNu3S0Mtpwpf9puLjl5Nx47eyft/P
SZN1DnLGl9yb/PWZVMHlvQO1PgGX9w54L0PFMYJXXdbz6bdvU0UfcO6rIsfL
b216+qpykUN7k/z5vGOy0XrcqCEvRX/eUYIv4zPvPan1Evrj96DdSp4LhRO/
J+8y5HtfrHhQ88GDCrt++OmxFCkXOT59W8fUfJss+ImuK1o8/l7vH7ED4zk4
eV3E/+Pvt2/3X5kyPmdv+fhJwirNl/sOKt8s9Ys9ZR7x73F/XF9zPHthXsTi
0Rlm7cQqeu/vU1ekm+kp+w6Vj0XiNdQ63DgvyztcP/5o33X8C43nVJmcvjtJ
2r/EuVS3fvSoPNEMJ88D9qce8QvR7+CD0+8csg5lpk3UfjOjfPItGP0/YYlr
HvZpp/17ZW9tKz/ZWCbzHesB+ODkn5E85ItcvC9szRI+8yN88lBZTg/+4OH5
1zLvsx6QfNEKZ57FXxHe8Jd86wjNB2f+ZT4Vv2XqH9s+iM81w7v/cOTFizM5
Igc/IeXCl3b73Qe7o49l/597fP97N4H/Muof0DCncdRWbTf8QshnfcL+CP2N
/AdnnD62Dss1w+Eb7YB88mIJ3mj5nPw9OSKHcxN5v0Dh07979J8dNgmCc1/Y
oYNHRU+reNn/gqfPHJ62ySJe+M4P2o0d+uap4PDTh3mdmf/mmcjBbtwntd/7
teU+i0TBq3bu0WTWwmcix7Vi7a7Xq5jz8V+hT03/F3+eG5Ki8yQofGdE/Y/9
LZL1e2FKT3DWh/Ad0zvX9xmg9ZF3GPO/vXzgaKLIMeoj75S992FigzcxguO3
lPd27+bt2Nk9QcY3oxw5B/ynlWXfb7Q90SfM6XrNdm+emDxXflzJLyBJ+OhJ
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
nUC54FY/5ne9Xvih4MhZ3mnexW2P9fxizGcO7nf0wNw64+L0f1jMa/wzy+uD
tCP30uV/ZAY54L5xu96V6hJrH1PQMvmQ51t9j1fJcZ9cb+/e5bpc8Ci3wc/3
P36j/6dm+O8A+Oi6fcrX6qL15L9sRr7lkErRHXwzTPLVo4++H7W2zMkgLd+Y
z1/yhTYrG95tXIL9AMtVzsU+vxA7G/s7OPfnjTh8r8o1v5VOipL2NcoBj63/
a+Cmusn2zt2ee1h/jtbvzdX4cCZp4rQCzyMFZxwwexLQ6VvOc/1/S+7/ONb3
256l5y9jvnpwnyqbB32xeWt/ptmEeT9+fqnfs6tyrSv0mnAt8YHsB/U7ynJe
Ia0eyL4PnPcO4PJ/FtUvkONjs6H/5N9fCc59e/ihvS/Ne+qu+eCuq+z7DcgI
EztQ7iW3BQ16lw4T/eV/K2qfCN+6Qqzn+G/RgsPnv0XhdR+0bfMgVPiyr1H5
fiX+YNifyvi2cd6vHb7pchnHWOfQrxmX0JN9E7j8l4Q8mUd/Pd6vYK7J+kri
lnZz9l1p+9918uG65330fhm+4y8+CXdyHgqO/HY99wd1nnZb9KdexAHQX3C1
v4bvdzKm/engJ4LDZ38RfqbGtLEZ94Qv+sdHPa9b+obg7FPIyyH/OyXvq8o/
g3xjHEPWY5Xemz+2e2ZvfWNk3erHrgkuefJP5178sfQ1kW+UA857WNud5kuH
Pbgr5YpfPetXN69SpH6Po8YT+jU49zDB/Uf1Ht5l2leT9RV8xlXiEuDweSdF
uxvXe+DkPwwvXPJE8fpR0o9kfO604Hr1s9GCG+X4bbuVULT+Z5N6wV8ebmn1
S0KcfcD7G80L/vhCyoXPOyw5DzLEdcHJxyjrQ3U/Qf4X07lPyxq3ovU5l2Ed
hRxZp82dPPJNvaeCM+6x/kGOcZ0g8bq4+rvvRX+ff3e5jEs980yfN5Fvc/0v
6xILPxM7GOPP4KyXWOfLuTn7wcXVCtXzuhWS36D+3d3mWSH4ufvurWeapN8O
6enp2+0v8w+Cpw+ubl7NLFT4xHvB4ZPnPKDb67qVnG6GOI/vEP7U/JOJHHDe
k4LP/a293/XBH4WfkzTd6usvV6Vc4rQB5m+rWdhek3IlL/rvbX6+lR8ifPIS
gIueKm+82fWQ7nauYSE7U0vddjHPNNETnPOm0Ed1Trazuiv6038dx+ZXsHYN
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
/ip4kWqfp1yO0nLAGQeMcpCPnUP3dv8ysbbuv/QX+gU4/unYKmy+a4ruv8b+
CL6zxvZmVWM0vr9u8LZOttrPLaNbnpu3PF7kG+eLdgtzq7n4m+LwI4t/cq7v
lWl/aoTT4/mHdD+VvGH0F/ZZaj6tum5pidWeeh5nvp7+w/nSHg56XcT6p0LN
52Zeo5MEh//l/JrTW+e/E5z1w+rThcZs6f5O/BN+44e1++x0SdbzneIvdS3S
w9tMy7lnY7NslXe24K9yCqUucNJyGlRd8Pu62kkiBz3hy7x5bEb6nGuf7B32
31qzwTdJ6mss97Jnuv9OT62/h/nwnist9XqM9Vta4Y1LPfro8Y12gY+dad/t
1hZe6/sk6XMHxd+yfuDC1b56vKK/oCfywWPj4xf5d08RPnbAn2X8VPUFt1iV
sMixu+ZTX/RhnAQ/MdXpl6p+OVKuz0Sz7XvdUsTfZJ2p5IOnTHxwcrW/1od4
CHyXS1ZFtx3S5SLf0bnUq/UDomWfZYzng3Ovm30c+1NjnJx9JfeQJU7OPl2d
13QtO8NnzTW9HkZP+C8Klc13KZBpcl6APk4ZiYOz897Yb+9kvnl77DtpL/wE
O4Bfs5kUPT5G48yD8LE//C+LjiV3dcoSPnZjX9D4cJ0/N0Ul6fWDQQ74lI+j
Fg6y1vjmAq0T7KK0nnN7Fmv9t0OytCN+MqRphUjvcu8E1/vZlQk7yiWLfHD0
NK9dy6FBvc8m/fHb6GothpbTci4GfHkxyUHv++gX260DAk8Gp4kdaBfrGg/s
Tx5KEzugZ/O2bksu5r4XHD7zGnK27Lxf7S+3bMF7zGhSrbKnlgOOnDf3qzx3
W/zJfqHlCafDnqlSX+Q7LHXdf8gtVeQb5bB+g5/+ttXOfxpqf8AOds41lu+x
1O0r+UkWXbl+sE+qjkcpftsKP831jNXzr7HdwWMmVig9Mf2jfWSSo/VA39cS
v+WciPU5uPez4dNaL9J4H0/3/M3rPwiffRZ8eX8R0fzpf6J0vwBHjvTrEn1f
1x4eZx+08t8zIx6/kX5q5IN7zrG//Ln6W8FrOwQ3HXdH87um3Z0+KOy19Guj
HHDPjl17lbKPte+5aNby4cu1PsZ6wae/n6vY+/ZYz7eCw2d9jpzw+pfH9g5J
EBw+9iTugd2IW8LvUeCdu2ezDyY4dhiwIm9eTfs4wUfFT2s9ckeG6OM0aPai
Pll63EN/7EC8Cxw54HJfS+0TiYMZ+eCckyJf4plqXMWe4MTZbMb+UmiA22uJ
N1Jf5ID7TJq5YUyIxjn/he9f7cja8WFvZfwnvo2e4A73lvVaaq/xY73H/3T6
fpbwO+yvNWlSc92OyGe9RzuCt60wb+DY+W8lDsz9ZOSDB0/vbHc8ROM7psYM
fz3uk/AtCnjtdD70Rvq1UQ54zrX9TW7np8p+XO5TGfwEv+L8Iq1wyoiRKdqe
RvtIvNc6rvP2Rcnf7fwiY0qQ9jf8ingj7YifsP4E5zwaHL9CDrj09w0XWnYb
niB4GevWi4fNzpB6LXxV4uf53poP3vDhwmbulrpc5LO+lXNedc4Ojj6Sf1LF
pRmHuV/N/QfmZeLVHvUDezZr9UDGf+LAYb+l1m2V+EDkgCMHPu+LweFzrsp5
B+tM5Jyp3DW+sU+4jOdG+fCJV4PDl/eqzTaMbhnwQNbVcs9cnasiBxw58Lmn
Lfd/VDwTfbJ6N99nn/NQykWO+42u89OPXhY58h8NdR5BuXL/R93ngc/7fXD4
5KMIOB1bNqXUZVk/GOWAy3t/dU+A/aDccyh1z7t9Wz/BjfcKWB/KvYIqK6t0
uugnOHzuAyBH7jM82BU8ZFeg8I33IuBzTw8cPnkGwqP6d3SucUzHyQ1ywMlX
EHGw4drE9ZdEjtE+or/KG8D5F/oY+eDck2x1P7zX7Ng4GT8ZZ+jXjJ+M5+AH
Z821XJGcKfzeLarvmBqmxzGjHLlPq8YrcMot3rlRyqIa7+RcAL7kEc1e0GqZ
d4LwJa+7Gh/gM96Cw+8+ctu0w4tS7Mu4NHm3qGqC1As94YNzri3ye1YcvfBg
ppRLf8ee8r7gxxkzG3uES7sY+yN8zrPA4fNew8vGYnLTSg/EH4xywDmHRU/G
23Tf+RkzFiXpcdWzsO3g/hlSX/a5ck+P9y81fq6x3iFJ3wtSeLkuEQV3ZL0T
XP4LoPaDcv9B8VnHynnfwoLZka/SZH8BP6DuqYz4Re+Ff/XiDfM5s7Uc+Ny7
oFzWz8ihXZAD7rfJ78F5+1TZj1Nf5MDf2zvw7LYTul4T40qV8rdL0feXlD7s
C+Q8+tLZn9JevReceQo++wLmNfSkXshZHvRl7PWQVJEDH3+Gj3x5v+l50HfV
fN3uxvZFDvMm9QXnfgU48pEDjvzggDaHfHclC/66wcs/BrTJEH0KnX35ZMsQ
zTfWd17ji7/2q6vt+cbWfoK3pdaHcuGDc8+hXca8PoNTXsv8i3zWmeB+tza3
31dD431zQ/6plajXaTkxbef1s3st87tRDjj+M77ohA8eoxNl/Yaf0L/kvpby
Zxk31LpX/hezYFfZ4W5aPnZgf4H+4O96O3Tr7a/vt2CfpqOW1O7f57WsM8HR
H5xxjHUjcppXLFL3jf17wVkvaX3ydwZaaj8Ev1e6g+Oxqtr/qRd+W77prjp9
ymb8f+dE/xd3oj+C/5H/uOdws3SR7+lo9Vd6/nvB8UOjnbnPiT433ne1XOKQ
IOth+JzPyr1i0f//5h34Lk/65N6z13hUra/FHz4y5SMn64vv7qBXKYI73D3n
cXC4nqfCWn4s5hql9xHICb77OWbW4zh9790gX+6ZHy3eP2nXe9m/UC7yPzX4
fYXLEL3+B8902zxlSLk3IsfoD+A+LRb/NO9Vkv3oPlWCewfp+6uMD+z78B/j
/u7Akm8uWTW0fPjoY4xLoL/37onmTrsS7CtFRH6a46DrazyfmjW3zYacLhpn
/yL355XdYvpmNvzPNR0/pNxD4z496BTxSK971f6X/QI4777BOZcx8lmvcg95
8YVDI4e7P5P5l3K5pwRO3ACcewjyflzdX5K4mdqXZfk2Dexb6ak+jzbcGwe3
2zegdMOQOHvXOUWrdvPRehr1Rz7307hXCQ4/6EjnL4Minurzbt6vlfjBdnZE
pKxPaHfrmrcGLzjzQuTI+30V74X/+K/XFTbVSBYcPvt676g//ceHRggff+O+
InzwmAFRB9YWjtbrf9YnU2d28c6J1ut8/lel4r3wGWfA4V8qNGTIy/w0uY8E
X/431Pbi+RWJul7g1As+85S0u7In8e2GX6rMnFY4UvjYzbVP/wGeES+lvsjn
/id87BAcvrXaGEftD/iVh+W31W7ukfp8kDhD3MA/JtV7LvrA93v1so2D112Z
jyQf15evDboH3pP5Qt7D/mD/uoDrNb3/NbyfAidPIHbAbomFxz1wtE8QXPZN
ar/P/Tq5J0Bca8dg+76Fnwou/ymY+9qzW8BjfX9A8S8d9Kk06MxTwXU/bWD+
u89DwY39Rdbtq1LW5A17KzjlEje7ZrejyG+FHwqOnNoRt3uN84nQ591Knz5l
R31wr/RCcPTBz+UcyvAuA9yt8dFZjV/FCU58HjnzGx6Ytrie5oPDp1zLxOJ2
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
4p+cjP0s/Jp7djbJ/0vrD5/8SMi3mHr526gDOv4M/9L7hi1HH9fnhujfvcW+
VPc92s60C/aU/1Emdfv6eLnGbUb4twvb8dGEj3/yf4S9q1aU2Ng0W9qF+FVc
7+v3vLdkS5yTOEOhvXGHvMw0v5zd4fSUa7n2x4P7nttqliN8v5/NbBKXa37a
+oGpm+ZpOfB33vqpmVf/D1Lurmqr0pf3+yjna9hhwNqZu1aZfRI8flSTz7su
aZx8s/CRT55Gyl0W1frQ1jytP/E3+FdK2/jszv8geNLbyuErt38UPvZMb1Ap
0SP+o9SX9j04s+DGpWaaj53REz79Bb5Z0Itdvve1HPjnPLaW9vnng5SbazHJ
fEHLLJ0/X9UXOeB2ts02/JOucfIlwi+2YUyTJfd0fzSWK/8VVX4FTp5P+NuO
eT6aPVePJ9iZ8aGEy+nnZj4aH7Jzd6XpBzLF/8HpL+DEZ8A5fzf6M+fURr9C
f+KoN1uGT/Ecq+sFf1yVCuknzHJl3cj8e67AvjeHzL6GWNuU933mq3H4UyIT
AuNqv5Z5Db7vhVftP13TOHzmO/IBwgf3H3pwxIPhms95HHnP4Jc8d+p8+Y8a
vzG45vIDB77ocyVVbomUFk/2mmmcvIXgpyamzy08U/Pf+LqGbv1v3mp1jsa8
jz3l3qzaF4NjN/iZBcuUOz1d1xc9yzVb+e2c2beQ5kNyPzzxjNF5uhQevO7c
9Q+HXgvfLszp7d7/5mFU5bLewA7g5DOkXugDH5zzOGM7Iod1Gnxw1kXOj6/f
3Gn2WXDycoNXWPOTa4S/Lhd7yv1hVV/44ORdxJ7s94384iUq9G67IFbsA5/9
iBFv3Krpv+/6vBZ9kDP+VLWxX1K0HXKmjbfaGZ8j7QWOHHDsLP6gzivhYzfO
K436UF/Whzs7vCj4z3ZtB/gOaQFPZvX7IOMA88K9BXNnzcvTOOMz44DVwqqL
PjXLFj444wZ8xiX5372ap+DL/KvmNbee2wdPztPrAcafK10/Fb1ilif+QL3w
Z3mPoPI4wcc/ad+tX23zTlhoP8Se8Dk3xz7oyX0Y4/oKPRn3MhqU/vGKhdaT
cqeOHFvpllm+4OS7A2+X/b7Gk+UxUq7kv1N88uaBUy/4ex7Z/rB5Z7bO96jO
rVgPgPsPslpYuEWe4La5W13ubNL8S+8f9ltd+ZPwad+l5gl+6yM1TvsiZ9lU
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
v/R3+hF8cPudk584fUg34dMfyV/0sljNLS5vMnQczDCeFJzx+siEt6Y4/Kzk
HXdqWGXa22QPnzjWQstHny91K35yK/NB8m8wr2Fn+Y+hijvJO7Kf//6rY1XN
X/s8/l/XWZnCZ7+AncGJw8j+ReXxgN+3v7+Z67BM/d9bJR8+OHEk8MglL4tN
9NL8my0XDJtzXOvPPI7+Ng+SYwdmadz1QsYf4ztnyD6X/f52z7X3XN5p3PgO
JfLW2d9qxer3KdgffoOUDgWueuv3YiP/rTSz0nz9jswhre/1UXt0Xhfw+EbW
/47aqfOxyL04JafeQs+eTVw+m+DwrabvcX7m/9X+xuD6/5m2LlPks75Cf3Di
BrJ//KHKk9ahms97PfjGe/Lg7OPAZ7/KD6vgou/ngw9Z0bNBIwctZ3TcTlu3
T7p9aRfqda7AyOqbbb+Z7OvZRxNPGzZnT9lxlTUu/nzja9rEfRpHftjNh8Mn
ndL7d/h95jt9HNda25P2rXc4yHXUFp0fxtjuab3N6nUd8sXkPjb9kfUS+zjG
B8Yx+B4vKhTpdl7jzVeYnfeyyJb+C44ccPKIekz2OrzK4pPgjNvIByefJzj6
wC9YJ7j2X/v0/Gicl+EzTkb2tfZbavFR5IPDByePJfexwSVfaJujfuMaZ4id
dZzq/+4hgxvjMCfqupmP6q754PCJV1ivOTXUJVK3L/yqX5yHzH2q/Rl/mFXf
+68dq3Pk/TJ2YP8FzroC/NTf0QO7H9F84rrwif/L+yCFr7tb+8FK12yJ1z30
tx1bomeKyJH4id3XYg1npQoOn7wrRvm5VvnlizZOkfaV+2MqrwU4fL9x2eY9
L2o9Ob/g3Trtixxw2lfe9aj37PBjZ197tMvms87LbShX8urYTIoeH/NR6gXe
Jyb0nzmXND8gzsI6Me6dXkcl+5Xz3Zkj79bxK/jgXxYdS+7qlKXfSam8GfAp
l3f9Rj3JDwN/leOvt/wjtXz0QQ74lI+jFg6y1rjFmwm3w14mmfDJS4D8uN6V
Xu3vqu1Au8c3cnl3dMpXwWkv4k6Sh0Stn+VcRuV7hH91790Fhyt81XmSVX3h
Sz7kiRVKT0z/KPg5/0tbHpbX/D7z/7DZ3e+zzlul1ifUC3xl0fwBbRZ/EHta
ri/a3L+v5oNLPnaVj5H2Qh/kiB822nryYt8kkYPfIod1l7xTU3kMwImDuY6r
OCqixzuxM/VtuHurVWanZMHhk0cIe4KjJ34LTh4G7CbvDZU++APlkmcDHD71
ot/BB+ddBud04EY/550deXqx//FRJdsuLZEg9kH+04Nl/tl0MkHkyP0WlTcM
PL7Rj5G+53IkjwfrT7kPoHDy2VKuc6syjs7X40z4kkdF7fflnoOSM7pp20Kl
bDXfNmBOD/fDulzq2/bclkFrxiSY+Cf50KhvmW+DFt28kSftyPkv8VVwuzuN
bvk45wjOeAKfuCt8zpeJR4EfaRczOMBW86vbVZl8qmCSyJH725V61bxz1xS/
WOXd7Pgn72Q9iT7kywKHP73cmbCj1xPFb+EzvoEnXxxXPDQyT8YT4ztHcO8b
9meD2+lyye8En3rB59xN7oEr3Gbx3wvvWms+8wjrK/hFa1WtVS1e43LvUfUj
Y73Io2Lkk7dEv4uxGXhsz1edp075idw/VDh5oekXo4+2qe+2QvPB4UcW/+Rc
30uPM25TPu8adjLORD754oz9jve84GcC5g0/0vKr9F/8HDng5IVGzuJTa1u0
qKP54PDJW97Tyu/H/Y2/iP6US38BJ/+23MfYePXdH6mm+rj6u9arOfmt4Ds7
NK5wqqceJxlX5d7s9Yw1ezolyjgp9zOzjw69NCbJhC//O+47r+UqL403vT5i
8MsF78QfxK9UfYmDyf1YhXdfGvChlfMH4fP+mvENfkTBPrM67NV4xK5rty+u
1vpQLnFsxjHGc/QEX72z3Jyxlz7KfWn5X62yg4wzCmf9CX6u1wizA2sTxT41
As39r7bOk3t02B/9wZ92SA4v65ohcqrPcWtqVseU75n3051im9+IP0i56j6e
ERf5yq+QE//FY2a652uR3yTLKfLa2DyxP/1CxqWuIStadTLF6RfYH1z+36HW
D9LfyeOt5hG5B9j5lPMbS62PvK9ReSypF3Eq7l1zD5l9Lni5J/Of3toZo9+h
d++67bdbUXLfGL6l5akCowZGC877L+6rc5+N/Ro4efzkXbD6fz18ifeq90Tg
lOvqMm9dkc+RJnzecfOuBz64U0bi4Oy8N/Yvi83ct2iLtgP6s+8LLb9sz/Xx
Wn/B1f/g4LMfRD738OEjv7ljqxHJw7T8iK0J/xk7J9qEjxzu+WMfcPIrggf8
fuN1+x9fipx5596cvXFA9y/6Ef4g+TnVuRv+LPlXzWv9tqxdtpxfyP/HVX05
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
9nHX4Unr7okc5iPk24+6UNCj6WORQzxHDvMF8zvxH5z1FThyOr3O3TK0YpjI
MXMc/TCuVbLIL2jZYX97xygVtzX87Jo+eYP7PpG4jZ7IAccO8NEHObQXPOR0
0tXYivcMdnfs0ycWPJX5Ud9ecPSnXeCsZy7X3t5kkeML8X/zae5lzxU/lXpE
4GYt23QweMQK3mlVg8XBs94Kv9JAS8u1ni/F/8FDPVKH7y54JXLazx5yqlTJ
C6mbBD9oQ/e8F2WfC77Yt9Tk8JK3wue78FMuuBzdGx4j8sWeOv3BQ20u1Ftc
9onIRx/raof7lS4XJzj8OpVi9p0rG2sI6tmr8upaL6V/MyeeHONY/Fj44F6e
M/ptKBsjOOsKvT5dvcwudHv6P3I0/fE3cPjg7hN6VvjNI0pwNS6+bh1t89gQ
+b7z+Jk+z4SvH3fwQ+p6v2rkEWlwbFe2w3LHOPEr+OgPbv/Pnn09yz5SdgvY
Y/exONlIz/YFH++E2RjLQZ8CszJ5jmWjhS/rQG3djp7grJPho0/o829LWnk9
NBSUX/5yXsBz6S/0QQ646K/ZGflin0Y/F7UtHyXxHNx/mv8Zm4LHEt+Qz/iC
f/n0vyW24Y8E9620q0MtE2M+crBD10mzl1kHPBZ/1scHvx599nrsSBf87Amb
L6NjY8Rvkd9mXV0HW7snoo/+u7I/0vwH+4AzLsCR43zk1isfj5j//P9TROe+
j4SPPsQf2R9pfo4c7ABuctMwoKtzhPSjfn8E3mbe9aJj1S/J/pH+0vPB2c86
Dx9l5xX7UvSXOKP1O3rauTUYO6jklfgn/OjtVfyalosXf4Ovjw+0CznwwfXx
CvmWfm8NCTbPZZzKPk6zj2Xs3SFTfGLFH/T+DG6RcnT8eA+Fdz2SGX7gcIZR
v8O3rpxo8ZNNpPBpF/GtUtNG9ZYVvBAc/dt4Rkw7cTbLYLm9/ZKRpkVW3buf
29Gi1BeDY4UqFicjsgwx7a8VO5t+tSrvPvW6ValCQ/j7bMvDgZmCw2edjJz2
wcGebXspfOy6GVOm3y8SObKe1+Qkng117/VLoaznPR4PdF9nWix81ofgyAcP
aPkiZsUFpU9KxdcrT8ZlCT/q2o9ZQ0sVyXcLcqpuWv3yq+BLX53pf6DoreS/
giMffHjzudWGmRrj8Md9eyXvZGaWodOc56UOmZZY7TJ9VNOh1FdDrkviyYCU
TMHht/jU8M8jRUoO/EH+1+6eT1H2gc86EDuDb2w4cvP5OGV/7Lb12ShPv8tv
xQ7YB/3RJ8y5+qCeDQsNrR5ZDvd1eityWH8mjOg+c9/Wt6LPvCKTGd+X+mz4
cmld8I7FGYLDRz5yLKyLvlZZofAW283bTt5UJHLAkeP/9c8b9Sd9NkRm9ux1
yEvJ0fOPbt5X9cBL5SfYBznYs1KjlqbBme/EDuD4A7j36TtuIxoqO4NP6u3R
c0GpYllXI7+uU5PuDqZfBe93sV//daUUHznYueXqzjO8SpUIHzzo/YYtXqYK
/2L3NOJgKcWnvc3bDsizmVEodi4os/ba8T1ZBpdPhwu7mBaKfdg/guv3HdgT
fwb3+eHqHedSym7g2OHN8ReOC0yLDbcP+nQJzn0n+tNe7AneOeiR85Rqys74
uZ5fecNVS/8Pql9iK291CCrKMuJjT3Dywj0am7kEFyn5ejvr+Xp9aFfoij61
jq/MMoTZ/bDwJ9MvYreU16+X+Q/IFDzJzadmjskn6RfsvHKtb6eSAwpvGrH6
QtM/FL/dpPuT/7XMNFS96F1Q1vSz1fe/pmS+MskXPrh9zeTjL5PyBG885caS
Co2M+eiTG9lj7rvr+QbbZddvHhueJftK+J6lyswKdMoS+eiDHeD/E7olIH15
vuBzzkeN/OJZYMRHTqure/wK56j2IufxX6vSIkrnqf6tN9+9xs7PYs85LS7W
2BKdLvrb5rW+HvH/1R/Xzg3AK71+MfBhA4VftHle/8dnn4XPuQT6cO4EH9zH
udklw1CFx57OdizaUyD8Cv083uy2eCvfxW6X7+8rtbfrW+lf7DC2XY3nWy0y
BIe/fcOfS9fuSRM5yGd+wT7oHxe2beyuOKUn+Amrg1E+/hnCR45nXJlp++Pe
yvgi7tW1bm65KzpDcOL8o1u9uu8uyhA/h48dwK8fqnC1hekXIxw5TqHmFXYG
ZkgcIM7A57uD2tr9/OMvCr89aeH2fTcV3zLocZutRelG8uEj//mlgz7fTioQ
/PXDjfFL16j5hX6HD37XPae6R9EbkQ9O/XBwzlv0OPyzxwbFb45Il3ahf79q
c33WhaUJDt/VZ1LD9UVKjpqnurqdO6vGC/yJvpPLnfNX4w6/mukaUv9IbqbB
1mrsxz2l8+Q8kPEF3qCtk8+uier81jOxg80a61wj/iG/Y5abNqpzUfjIWXTL
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
59XauwwNp04I/oyc88+OHGz53/pM7K+NF70c+M7jf3Q29Eo0uCcdmzKt/DPB
4bOOYjziD1J/g3yVOK8evimZgk8zH3N93Vi1fwQvPWW3zelIYzm0K+C89e4Q
63f/rTdevrHbmijxCvvg/+Dcj4AvfFjrN1evHOEzfvE37D961J29w6JV/AdH
DnzyJMHhP3hn7V7ZPlXmfexAe3lfJnUyNVzqb5DvpOWpSr0F+l3b98n5ybby
Y3ZEqH1l8QDvANeIVOFjz4iOeRWd41KkH/V2Bq+7qSjvkf97w8WaQ+86eCWr
8zRdHSdw7Azu2ayqS08ftZ8tKNPd/e+IJBkv2BM++HaHd7UrWaeKPfutHuvU
57YxHztXqniqTNewN4ZBy1xXjl+p7M93Nz+r2Gd4ppof9XUAwO+Obj0huWGy
vDPCbswjAY9PrhgaqMYReMKIjy2Ghan5SG8f8og4/wEn3s4pKLh5z/q9nC8h
B/lSd0XDyfuVOK/lfen5yKd+mvi/1YSXpqkF4m/tJv1jOWp4ouiJ/5Q23eg7
ITBJcP38Bc45EufD4PgV5y3oA+7/44n1jhHJ0i6+28bTvdnElCSxvzon0c7h
NZzzHzkX1eIY8sHpry/DOr7YHabGF/mltOujy7aZYy2ShK//LnhsDedQ+5R0
9Y4sbO+h6DqK373Goj8dFier/FhNvsUvHl8vmnyV927kTU35oUb2GZMi9U6W
32HR+H69btvdqx4u8w58v4sffnv1ROHX++VXuG5SLHLIvwLnfbfMj5r8hAUb
Blu53hUc+Rtr1Yn60/WeEd99wcPvhm+7Jvc+8N2zCz5OGXFd/Z6OxuedL/lO
8MHJD4FfP2ikzZmYBzIvw+cdOjjtcv7ubphPzH0jnPeDevvUb/5NlE11pT/5
CO6d90wetW+f3NfPmuhQ645JiSHUaWtOyGA/wUeO6jX0YVKJvGckTwA+OPkk
Ir+8z71hUSeFL/2i8cnrEPzy6PbhD/2M9HEftrlxsKP6bpRd7RsPP5bIu0va
BV/eY2r5EuhD3SG9HUI/t/m4JD1Y8iXEDs6jH286EiI4fPQn7wX93au8GR54
5ILwwf3uXip3r+kpIzugJ/kYyAcnv2JC9M1bviaf5f079/inL4+4uMOkQHD2
NfCpf8U8Ap/6QuCtv7d99TC/RPyTfRZ2kPfvWt4geuKf8MGzpyR9NyX/nvin
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
/B33FmHG+wWpF6StK8Cpu4Ud2I/ABy89y6Ly/HHKn/V+LnU4Nb8Cd7T7Nds6
SNmBdTt+hfzOH0wP21/PlnoX6E+/g7fI3WT+eqjC8x2S47eeVXFgzI2B307z
UHz0hH+5y6iQ4/4KX+LsM9P+YrbUzdDzwasu/DDjy8RPss5HPvrjz1KXRrMz
OHVI9PwHlRZGr3dWcWZ5qd/dp85R34Uf+r5FR/vT2VI3Axw9i3pGFYb7KH7w
/X9+cT+aK/VGuE+xuVOUsHRhrtQbYb+BP8DfZp7RdPuKEvFD+A1Nuo3b1Evx
D13Z0i5/QoHIgb/LvMvfpe6r7+JXyIc/oMOwl5PfZYv/sC6iXeBb46rt3lpV
4faJ31Zpm632rUv7Zy5wild84gn85uf/SfsjQeFtck95Tv5vHYSf6/ng+jjm
W/NH39Xtld+yD8KfOf+UczB+n07L9wCnPh582/BBJUtG50q/cz4sebAa7vzN
90v/WFEoeOdUD9PrjoqPPtiZexb5roZz/wVOfRj4gZGtq/9zV+nP+fDS/lZr
l23OFT/nfFjev/A7cdr5vLxPoc6Vhkv+8ONT3pu25ooc+NRr4ruSd63J8RoY
FtRvi/ou40tvtwH+1gsDfZSe4xbkNVz4IEfkIH9Ah0NZbgdyxM7w5b2Ahhe2
+rth64ZfVHybdNHubIqS0/3wsSsuFZR8+jc9+ZZh7uuPIgf+65ZzL7gOVf3F
vaG8G8q53uBp+0+C7zzl9Xj+whyJA/r2gh8bs3Du3zeKRE/k/9b/fsDYFQpv
d3JUtcStSg7rNPjgHpu7HvgnXsnHT7A/eLeFL02W/KJw6rbBv39gwSIPb8Un
Psh8ZDNtSJKfMS71CZMjYyclF0k8wc7oebZmy5Yraig+dpN3RtSh0uSAfxy+
9Ld9tfKM+Oj5wKeHt8+/JYLvuvLibqz1J4lj4F7Hrl656ZUv+ocEPOnu+UDp
gx0k/1/D/7zq+cvSXsWGWx0jZ3o55Ms4ol3wwYkD4NSLg59w7U7g4uaqv2jX
2oapZzy2q3GqH7/+ORUuXail7FZ61rWvk45miz/gz8RJ5H8qsb1Xea6aj67X
7P3klecnIz5yXq4KatpwxWdDpy4jrq3fni9xm7gq9tRw5l/2Ze0yg2Kbn802
4jcdciXw58v/c45tMq3K1IlKT/Rh/sX+HsOP3La4oeblhau7VrzSKd+IL7+f
XvesXfPkzwav4s2+jkNVuxjX8Kl/pY9jUu9dW88csvcov/qAwtFfzqXHf77X
w/OD0Xk+dd2xA+MaPWt3q/m69zAVxwZ88835u5dVfEsZWu/EzFbKDjIfaXzG
S1z9YxNq5Sj5y69ML9xbScW3wMg4s5k1lH1oL+fS2IfvyrpIm3f0OHzuW3MT
vo+fE67kw3e9Uv6Pq7nv5X0E7wp5pwnOu0hw6j/ARw55+LwPgg9OfRJw3jXD
53c35J2dVmcMfMLi3mPz+j8x+i7vH3nniHypw6PVd0IO7aI+DDj1RpBDHWzk
8D4FPHtEh2hv1/vyDoL627xXBYfPezTbm7uK+667IXxwfn8TPvV2eH8Bn7ox
4PB538F7EOFTp0t7r8Tvksj7Na1eCjjv1JDfvrvLP1eL3su5Ou9csLO8x9fq
rWFP6kvAB4fPOzXkULdBz+cdIn6Cnsgxa9mmg8EjVnDeper59Lv7hJ4VfvOI
Epx3cPQ7uLwr0d4Lg1PfAz9ET3lXrr03FPkaTr0d+LxTxk+kX7T6eODit5qf
BK0NXrp8Xbhql4bzDhE+9ejox5Cue82vZr5X7600HL68a9bqxUl80OSjj8QH
DeedMjh1w/T6yzs4g2/BumYnRH+p29O147+TmwUKP+GA3ZSwtCB59wSfekHg
fFfqvGn14sAZj/pxLfX0Qu4PtGp2VMaLvO9rP7mgVrMA4fMeiu/Cn9D73bcd
mp0TnHqn8n5ce58IzvtEPV/eM54qOvCx6SGDR+NxwzZtTRe/1etPnQrwpr/H
/DR3QKr0C/2LfPCCkiVLq6wLFZz6A/D53Q38Hz+XOKbpY1050eInm0jB4VM3
TMajlt/FuHYecuEHX/u3Mn4Zp8iRenEXXI7uDY9R8U2rX6HnUxcOPSNuPRo/
/fwHqVPNelLmTQ1nny7rmZtLevdbX/g/+/3/O/+kPjbrT/jgm21e+bhPUrjl
xQYWvxz/Ivxrd91/d4r5IPWuWR926nLSb0orJR8cOfA3Lo4uP73XV8MPX74d
MKWBahfy1z97fcTZVfHBR4zyN3Eep/SkXbu81j9wyvgg5xKse4cvts2b0lnp
CY4+8MmDlXXa4mtuP9z5bKQ/9WCR0/T4WedJ27NFH/C7mUuHT9qcLe1CDute
+BtqPuwx4UyR4MP31j7Ya6Cym/OVD3842qh2sc6BT7uObJqV3P9fhQ+61sLz
u6nGfOTcqGju8euWL4J7ZoacKHBT61Vw9J+3t5Wvyw2lf9Xtfn83/1PZk3Ug
+syf8lurtcnFghd9yb3/be/P0o91vkwYuzAmR/ShHzkPBIf/pUnNfJeqSj58
5Ncaccj5k5PaL4Mjx+7PFdPnnlH7aH6vQfLYtPti5EudL01Okl+vny1/NP5u
uM1mz855im+f6tvGJV/5JzjnhNgTPHxMs2GzvZUfov+JYy9LJnpky+908N3B
bw8nT1yeLb+vgRz6Rf1+a5bd3mSF+//g2tb7x2Lhk18BXy+n9hzvpWO7qfFY
yalanUlrs6WOPTh88NENvQs9Hys83qa03byWX0V/94ujp1yJfq/eWevmO6nv
ut+0yTOLIMGpQ0I8B6dOLHKs3424OelAttgTf149I8Nr0q5s6V85zwkvfDft
kNIfO4xbcKDalNoK18dbfjcNPvvQAS8Wrtt1Qr0X5hxP3ulo7zfxQ3Dqk4Pz
LhI+5xu8R0A++0Fw6lyxH7QODupx0jXRiN+igl+5veGqjofUPdD0of48OO/m
yEuRehra/T648LX7Yt7VwgfnfTTnivIeinrsGh+cekrgKenxieUeKr7Uk9H4
2BN9wKkjJ3Uk7Nv+UTQuRews+mv38lJvXztHRX/aS7xCPnZGT94t6u3P+2I9
n36kbiF4nf5JG09vT5T+Ii+R7+rfX4NTx1vqvZz5tOabVymiv+Tfek6f1OBh
quDC1/yB+vZSf0bD+X0ByUvU9Kfut+TBajh1yOG77AqIMtRIMupH+xcZo5+8
Vjj8gNw7vVJck6W95BvQXvTnnA099f7Zvv/QCVkPkkU+98jIwc6Md3D6Bdyz
4XvDa+9k4aeVdzk7/foHaS/v1uGDU19O8vG09+nwiZ98lzr/4CsDb8Y/epBk
VCenVnTISd8Y4/o5fJffWZA8qHojp93zSBL9wfkuvxcgdXim51gWdFR+jv6M
F3DurSTvRcPRH5zf6QM3u3RhcplgZX9w9Od3B8A32u+v9esOY/kFpeN/3v9O
1RnjvJ3v0u+y3tNw/FPyA4M3vrJ8kyp8cPj8/qP0Yy2Xlr3rvVFx7OX0otmH
PkrcwG/FbhpO3Qbk9zBttWvIjjfCB4fP71panJlk7bZW9a/8Tod2DgkffeR+
X8P5fUn0YX/HuY3YWcNj68dW+77iNeFTl4N5Gb77s1e7Gza/Kjj6s19zrP5h
ad66CFWHjTpyWh0PscOdERsH5N+V/SB86kXrcdYP9Rs5LS6xOK3ubTXcNjl4
SKbFKcV/+XPZT7aBsn4Q/r2lt+tGHRccfeQ8yr/HVKuKN1S7diUc3NkhTM4H
xJ7auRY48rM3e++M3RZuhGOH8rbRxZfW3RG8/m8tJ++r8UDa63zFevSiLzly
DqOvL8e+lfpUcn6r8dvcsL07ouxjdU+t4dR/Rk7aCdNW1ZxiZJ8r91/U83eo
f7hq9TOChz6Jcb2fftGo303ex/Z6GHnUyM58d49VmkvrslFqPFJnWKubLXGD
+pza7xPBD5l9986wuFjRE37o+B+9Fo19Ljh8qSur1XeCL/VRtd8zEv/Uzgc4
v5X+or6T9ntGUrdQO9dlXw8/oNKgxrX2xAgOv8D22Xafe1HSj8J/P7nWmXuP
BJ9Rrpf9ptpqnmVcb5624dK8VjmqLpAmX/xTwwMLmz4JCld4m8WTryx78T/+
o8Ur7Kzvd+fEayVtvJ4a4ber+bV71sX4u1IXWvv9KeZr7tNZh9MucNbtko+n
/S4bfHB+r1bPRw73BdOGvPtrq8cnuU/hnoJ1BTj3ViJntb9Z80BV9wAcPvdW
Hps3nN66+ZPkw7Avhg/Ofau869fy2eBjH+7j2GfBB+e+Xuyg5Q/Al3pfGp/7
X3DvMiabXBYrPQ+uWfXt5naKzz4U+dcrXXdyHp4jOHK+NErP+vu26hd55+IW
e3ZwLdWP4NiBeyiv4k4G74v5guvlDNh57btu9sb9Rf9y7zayXf866zrmCw6f
9aTk+2n3eg+X1N+x3+Gz9CPfJe8RnHMS8I+/bv+5c1/FJ88WPucwUodK+11g
7IycXQO3Nu6fqfBdp9rl7k1Sfgu+Z8rqL7tclb/p64f0beDTppm/cZ2QoVfW
jW26R71bLLX1wi8BI5WeyCePN3btqo9NfLL/5333/9UPwR/kXSr5txpO/g94
D3+vqhsW5/7PeYj1kF3jCuTeEFzq+mo455bg5G/A/7t1dr+9d5X/sx+X+FD6
aYWtgQrHT7pubjJjZ4LxuAg4bX7Xo4Xyc97xoY86pzrjtH6tupfXy4dPngP4
SKtOh45tzBM+fsjvtSH/79Z7O6+tob6LPgcetym3zVfJRw750uijP38AJz9h
7txM53U9Vd6Cnp9Rd/AfV63zjfIWrh/+2mZoG+NxNLq42zk3fzVON09LuueZ
lCfjFz+ED06ejOwftd9J19+Dw+d+2SdmXezyCgpHH/gN3IcWOFYyxv2aLe+1
JDLH6DxT3qdvyyhzMixL8Kbh9mXuW2XKPhGcfOmN+4+EPk1RdfnmeDskNFqZ
bXRuRl43vxsu52/Bzkt3jcpQv2en4XUqr7nnOF+tzzkPR0/5/S/yYzWcc5VP
2y82utz8q4xr/IR3uOCcy4EfrTR0b4c6is/7X/icH4J3nmc1vr35B2mv1BvM
aV7HOkDhYe4/rTnXuUjk4Oe87x53pVdY7xD1Xfl9rtnjZne0VHz1uwlzzjb2
UvUBqG9GnOS7yAEnnqB/ZqhTv8aequ5Es+PDrl+vrdor7/G/P7Xeec5H6Ue9
/cGp28Y6xyLjqvsSq3QjPu9c9Ps45PC77fB5D4gc7i/gI2fhxa47/Xp+lnGB
fYj/4JzDg09sP+Pgn24fhU/cxm7cg8CvkTouYqpFjtgN/nZv75pLY41x8qj1
+tzdZpuzIChH7OwyaIvXodpKT+SYNzg7KfCdwuX3ojyad/UPV3oSJ5Hffsg8
iz9iP6i6HFq9Gvh6fcC5h3Jv/PrgrmlqnYYceR8xafNPYzd+NMLl94u1+4Wl
zikng9YWinzaxTwLzv0aOO8O0HPzNM/ME/0KxT/19UZkHavdy4CPtVvm2WSr
cX0S8rqxJ9+9vOKX1w4FxvjyMn2bjZpgrD/f5d5Kfqfgm9knf22j9Px/GhfG
tg==
     "], {
      {RGBColor[0.880722, 0.611041, 0.142051], Opacity[0.9], EdgeForm[None], 
       Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1:eJxN23V0VUe0wOEbu7m5SW4EdygUh+LuboXi7i4JQYoFDe5WirtbcYeQEJzi
TnGnuGvh/fbb+631/vjWnTlnztiZmWNJhjbd60R6OxyOKn4Ohw+/A5wOx2b0
Q3cvhyMKa3Ax1OG4gfMYS3wcJsEV5nBEs20oluAlFsOH7QHwxgPijxFGuBvH
7MQ0L00zhe39MQzLLZ9FWIaloZq+K7qgs4U7Yj775mA2FmAmZmCM1A+j8QfW
YDVCwjT/tViH9RaWcodghZU7FwuxEqts+2D0w++h2ict0RwDiA/HICnL+ioS
SSkrGZKgK53bBR0xk31/YoWXbl/K73p0tzQRiPLW/tmFOoSbohm8yOsL5XxC
Z+KdLM8oS9PEW/v5Be6hBeeyFUaTz1d8w39eeo5m4ZX0g9Vnhpf2ofSVb5jW
czqmIpx4INxhGk6MRGF63kPhH6Ztl/Sr8JA8HuHfUB0zV/CPnFv2LZPyvfRc
PGObh99L/L7BBfRFjPWznLvpmCZjgnQHZR+/IzEKI2TcYTCG4zn5PsNT7JXz
xLZdodr2l3iNx3iEFziKfuiLIaRtgA64QPw8LnlpuZL/IGwhr604G6ppLuKc
5XkbNzGCfaVJO1DaT/yJ9IeUEab1icAJ4mfwzkvT3MV1q08cYnHW0iz20vTH
ccxL2zsA/cO0P09irZeOzyE2DvsQf4ueOEA8AYdtey/0l/ZK2zAIp6xdG0J1
+2AM89I5PsZLx88ojMQETA7VOTs1VOdjGzSxtstcmCTnT+YGemAH8X3YE6rn
aASGW56TEeOlfSvnd7OcaxmzeMP2Q1b/uFDNZye22xyfbu2SdWAj5oVqezdh
W6i2awKOWn164xXWkfdIh/bDXqtbbKiOw8t4gqf4YWP4Pb7hHcaHUzcMx2XO
wRX8Sng6YtADIzDO0nRBN0SiAvOzPMp56zjvLfUK13VGxrykqUedaqMWahLP
iTFyrG1PyrFFUBiFcIN2FGF7UcK5kBP54CMLOsJRDVVQGWPJa4Ll2RO9rM5u
9qWCL0ra9hIoTbyUbMNUh9Z/Mr8prA5lkdjSSN2cVpYL3Tl+O/2zGH0I9w3X
9p4ifhonZR6TV3dEohs6W1jGwBAMxHzMw2xsxSBE445cV3ALS4hvwRpLI+GN
OMG+wzKncU7WGgtLWRHohPPEr1p9hlG/AYhGb0RYOBOyIhu6oh8Gy7nm+J4Y
ZvUcbuH+7BuEgehj1w5ZE4YQH2rHSv9EWZoblL0fe1DBxk95hNGPoQhBcgQj
GVqxrw1aSl2ID8AwxHjrnJV5GmPb+6O1pW9vefa1fIoQb4rCcm6I90I7b81T
0vSxcocgB4ZaWMqSNUquQQP5bWj51EcHtjVCA2+9FnzHfZtHb/HZrjuSpr1c
w+ivDg5tYw+rQ08ZW+RV0dqY21vXpWgvvfYVRH7ktXCk1W2krV3tya+JQ+sf
iDzojezklcPam8T6NpG35p/T2liHfaVs/HvLdRd+GMe5qYaCbP8NtcJ17vvb
XPsu/UG8MzrCY+crCBmtLXJOAyzPH3ZdmILfw7QtUs9fpD423jLL3GdfRbQl
nF36AVkxyMLR3no/I/cqUm5qm8spJS/ixVEMhVDAwnmtH2Q8Z7F1RsrKb2ny
WXrpB2lvEZqYHavQ265BE/DQl+spHmCjP9cQbMU2HLXwfsRiH44FMidxFHE4
jv2IZ99jxEkat8Pxt1u3LyF+HR1xnm0X3XpscqTAHFzFLVzBFqvDX7hM/DES
MADzcAO3cc3SnyO/s9hL+A5uWponVu49f00/GRPlOOJXcRFRGIQ72ImDSMBh
SyPhgxwzBiOxD7GBWtZd9r20Y59b+BnWYw1Ww490QUiClEgMD1ayb4WliUBn
dEII+0ItTSZkQUZkQ2YLJ0Uiy/McTuMsWnH8LTSCg3g6fKdfPuCA9A2/T9n3
Lx7hJNv+xvlAbeMh6+cjOIwzss36RNp1ivgl297NxobUOT5Q85c6XMBFy/M+
+x5Y/z+xsSHl1kVtRGKsi/UXMfg1gPaw7QySE06ClMiEP9g/DdkJ50QxZMBP
SIstlLcVm5GMeBokwhLiMRgWqPlkReYAzT89EqMEiqOkhSdRzniUI1wWZVAI
BVEAwfTjN34/IwqrSLsMQwnnQRF8CdA0TrfWeQL7Z7m0zunQF42wn237XDpf
ZF4cQQqEIQQeCydza/5DMEjqSHsibDxLPXOgPAaTV09kszpnRAr0IF0fRAVq
OBK9bE71tO29EW3b63BMbfyGucTn2zxtJmMJQwL1fNVAdXSkzBDUlPqxbzAG
YhT6YQRGY2igHtucPJpgu5WVJUDrLO0ab+dR6vO7nbu67KuPegF6fpPiZzu/
S7E4UMsdamVJ+lRIHaDlLrL5K+NkG3ahi807GYeDbR0YiPZoZ+tVTdbHWqgn
z0m0LwxBqG3PGr/hO+k+4h0+4cv/C3/Aa3hxjAM/COfjmEJoL9cD/IRMlr8H
4UiCxEhk4WRIiskcPwZlCRelDdVRSM4n8a7o4dIxMAwDEYXu6AYX3FYHSR9h
23vL3GLbDH9N429lpUQKq08uD+cHOTy6vbPVbRBWcdxslAvTZ/YjqGv9Vh3p
kArJUUCuvSiGFLa9jvXhN2QivxLEi2I0xqAKKoXpPZg8M/bktyy/41EmTJ9l
JCzPLOWsb/ML8sqHvMht198sKG95VkUG6//0lj67S+uQ0od+x1aktPcAP6MN
cqI5slo4M0qF6TNjSWkfxxewcotbe/Oist17SFuKWBsLh2kfRtj56osBiJYx
JvPJwmvpm+VYKNca5s1LeMm1jt9bFp5n47Yp/sB0Oy8jMBTjZFwyHz7Am/QT
iI//v+3k8R5vsYz4YiySayDxa269dgTAjSu4beXekHlMusZ23fmZfH9Cerlu
sy+DhR8Q/hd38Rlf8AnNOaaZ1Xk+5li5c7HA2nvT6iDl3sN9y2cA+/rbnP1I
/JVbr3ejiY/CSMTINcbCwzAE1enPGijv0vBwtrVAc5kbVre21Lmqza9OKIF2
gbq9CIqhFPKgoIVlDeyE9nLeLY3MzYrEa7l0zk62e8VJ6My+rpZ/E7n+ubQO
vsQbBeq5eIP/rK9aBmr4K36zNA2lXMunC6bQjkmYamNgloWbkm8zNEQLNLLw
TPb9aXP/m40Byf8rY+Q1XuAedX2Mu9jJMrba7iGbMN8aoxFmc+84E3MxDMMR
g63Yhi2YjwWYJ9tCGNNoxrHjiG/GDLQm3gotZR1hrTmGFjLv2TcSI1CPeCVU
RGUL10VDNEB9ebdAurEYjUEYjPEWnoCB6CT32miD6qiG5vL+I0TzmcRvFOl6
oae1K5z1ICn6E+6DaGQnbTbLR7YPQD9f7ZM5mIUaln9pq6f0m7Tdl7x2YQ1p
hlLeEMzDCuIrsVz6xrYPRmJblxIhGZZ4a31SIw1S+ejalQLJEeajdQ618Gpf
3b6GvOZbWRuwEAuwjPwSvLWfV1kdpCzp/yXojX2k2xuifeUNLziwyPKR8yLH
SlmLsRA9rB8WWZ+c8tHtCyzNXxy3DlsQS/nxWCp9aGXtwlTpIwzx1fA0TIFb
3mOx/0/UZLxMQ3K2VeC3PJKG6nmUOkg/SPqAUE3jsrDUP579B5Hgq9udSAY/
hCGRvJti30nEYQdicRo/ISP+RmqkxQkU5JgCyIcH1GUntiMO0zEZaUjnB3/s
tzz32LGJrdy0SIXC8mv5p0BR4sVQIlTDRSxNPfZFoo6vzq+++B27sBs7EUS6
QPigLdrZvPNi33l44xqu4oqvpsmENDa/JuKs7PfRuXaZ342052+PzkGZ+xux
3vKZjEm4i/u4ZeF7uAP5cPGJ836c8H/yHor4IVs3dttc2Cvjz1e3H8ZRHLG2
hCI8VMfYQVtnVlgamV9n7Nwdszmbw9JnxRvGzmvctvy3+2qfe6y9/djX18bh
HJs7Ml9+eOu8S4fRMk8wDCPQGCVwiTQXcA6HcRWH5N0b+4qgKEqilKU/zr4T
+JPweqyV+eqjxx6R9wSEz/N7xfKMIT7cypVjT+OYt86jg9gn73qcXAMw0I82
Er+Ged4ajrP6nJL3QbiHleS12MqVso7igKU5aflHsK83uqEHIi3cCL1QEXOs
nouxFzux3VvbtcFH2yJlLccytEFHtJD1Aftte1U0RxWUQVmUxgEkIB7t0Rnt
fHSdlHV1k62Tsh7uwxbstfu6jdhsaVqilZXbDG3RFJ3QwfIsjwoohxqoZvWp
g3q2vRIqW9tXobrVU+p/mXbPxh50JZ4LczHP6p/T6v9Z3vXx28TqIGlm+uh4
kP6ca/lcYfxdwyPcx0MLj8FYjEYxjiluYyyBeXnAo9tz2/aMyIrsKIj8KIBv
8h6N32xWz3z4yjYfH1279mMK+Tz31jEs43868Wkhuj2f5SN5rrfzLmV5wwtP
5Z0j6aLtuubno/Nd8n/MvkfemuYY+w7jKPrbHOyDL95aH+mrUcRjMAwjMNLC
XRFh6T9669ryQcYx8Tgcx794LPsxEZPxCS/wDK+kTRwzFWvlfR/xz5ZmlcwT
2/7Q6vxA5iT7zlidV1ia5bhJ/DruhOg1xdfWXrnmLrU5sgO7bY4kWD/HYr3V
Te5JLuOJ1X88Jlg9v+Gr9A3+wDhr11lcsvVtKx7YdXYm3tl1c423nhep51M5
r5bPS9y1Okv6GXiPD3hr4YfcF963+8NNHj0X6/kNZw0NgBPpvTj/8j0EGdif
Ez8jF/IgL35lX1VLUw6/2TeU4iiLYrZdwqXwK5eMypKG37YOTV/Xofl/pPx3
Hs1fysqBDOxPgkTyDc2+3cizZB7iOZHNS78FxGAbakueDs0/Hfty4BeUQWmr
Qy7ktmNTkK6kQ9PIN2X5ni7fxJMRT4s00hb2F3Vo2BnOWKLP3sszMNtqoLp8
n/HS70GFveSFOuMEPognegT7EIdY7EaYpQmV8U+bR6Io4d/57Y1ihKujNarh
b/mmguO4hLMWPmR5Sv4hpPMgGE+J/4Or8gqDuBspEGThAJSTc+HQvq2IO4Tv
oQThB/zedmhbvlOfH3jo0O23cNeh6SXNK/a9xHtct3IlzXmrp+T51NK88Gh6
OdfPPdoPUueWKEG6UqiAD/TvF+tn+f7uQHyYfl+Qbxbt5HsT8W3YIu8oiOdH
ISwgvhBxWI8NFv4LO+xbjxy7W56N5F0Ax2TBT2iD1pb/bPbNCdPvaLMtz1lh
+o3yeaiGN5Nuk33zuk18VZh+F5Nnru02JuVb28+WfzCCkBUrkRIMqf/9NrrW
vqNJ/RdhPpZiGZZgOdZYeAnpWsq8QSVUtH6T7wWFrR9CyTjB+kfCHgQhFb6y
LSW/6UjXAElQ08azzMdqqGJj+x1pX8r7HpQlXgalZcyjmIXlfH2yNPsQa/nX
Z19DNEN6KQ9p0Zh4PTTCLulH7A3TcLJwPS+Sz3+2PRnpklo9pc5pre2JZfxa
H8rc9Lf8paw0yBCuf4/R3OrQ1KHfp6RcOe8Z7VzI3EmMxmiEFmiIBujAOO2I
O7iPW9iFK/ZccI01+Bau4J6leYi7luYSHuE8znn03vscTvvo88VfHl17z9p2
yee6pMM/uCz7cAYnLXwCN6zc53iPD3hnYQfrd3N8tO3tCTfkmPY4jQtWn4se
TfMJr3GD+EIssHb9I/cQuGb1aYmbOISDMqfZ9xZv8MXyKeOrbbmJM9hgbbyN
w3bscWvLDMzCUXsGkTzX2DuE1dgn9yyYgL3YgW1w2XUqTJ4z7Bkt3tLvsevv
Lkt/wo6diD/wM8ckludKO3aP5TnP2r7Oo89T/8k9lZxT3MF9JLJjM+O2bT8P
X3se9EEme65Mb8+Y0g/X5TpNvnMwG/MtvFLGivXhA3Qh3hmdpK999Tz+kPtK
4o3RCPXkHonfrh4dzzK25VtzKbaPYlsUhqMvKlk4BrVC9Ni6qINBbBuMYR69
Bsl1p4dHn0MropI8h9n1661Dr0dV4QzRsirKNUTui7he+MJHvsPKnCGPU/CX
66VtD7L5lUjuxRy6XfIsSBmFUE7Gq827DqiMKihr4UpoH6L5d7Q0kr4Zmtp1
U7b35Lc/+qGbR9s4ENGognGo7tF3DjUsLO8cKqIMIqhHd3RFYeKFUNy2y7N5
N+Sz7QXtHDVFY7Syc1QKJT26bpRGO5t3bT06B6V/6nv0HviAjVupWzlUlvqQ
V3mUkncF1j/5fbVdAzAaf6IPenm0D+V85ZNndeJjMdPSzLAxP9Xm0WQLj8cY
j85ZKeuzjb3uiPRoPhNt3r2094qfsJt0e+y57KO9l36DkW7GEgbJu+JA0uKj
vFf2Zy4gK6LZNxDD5Z0l+97J+9JA3R6DfvKNjvhXfJFvWsSrYRQe8Qz8EPcR
ygU0FTy4YtsvIx1lpEda5GRfMiRBDmRGRmSwNDnlOyfHPLY8s8t84uLcBT6k
84YXelB2FOagOs/iUzAIjTmmCxoiH3nlRi55l44syCPv1jm+EIqhFn5FdfzF
8QXYv4PfdRy/1uq/l37sSTnn+f2d31noLX3j1DwzIxu6Ee/i1Hr6IggF/TXP
QvLdwKn1GeLUvykdiPWSB+myIxP+I16MNIVxmrL3IRbxOIA4TKQvJmA8/uSY
MRiLGfgD03GUdMdwBF1xGBEYxzEjMQ0HiR9CguU5ybbLuZ5GHonQn32DUFy+
J9mYiaCOv5KuHLbiDfEPKMm+oiiBIljGvrqoh/fsfwWHvEvndzTy++sYkHGV
gd8wJEZqpERypMEaOxdLMZ+8aljby8i3O5THNvZtx1Y/PTaVjTEZ87X5DcYS
9i3HIuS1Y3+R7yTsS4fZmBqkbR+HTaTbYnlmsbE6C/ep+1vcw147R7tlnFCn
3diFhvJdATXd+p23KRqhMeqhLiZy/FSMRxvicdiD/JSRF6Hk8xPxeNnH2Fvg
cjjmyrdHwnvl70GwG4mln0lfDX7s84UPDrOvG7qiI1phl9Uh1uoj+exDglvT
S1mHMNnm1CSnzpcklNGY3xIID9a546GMedRnjnxrZVswgoJ1Pg6gP6o59W9U
Dlr+Z6wsaeMFa6+UJX9zIn/fchT5ZA6iMKpQRlUEkqcffOEM1rIesf1BkOZz
GqdQgWMqorxT03vhB2nyEy+IGjhOuhOWXsInrVxZ9/xkfQnW8SAPBDEyLy3/
rEjv1Dko8+U1bX6JF5jA9rGYiafETyHepeexJHLL+HLqfJT1IZ+sC/gFRVEE
hWWusS8agzHc1oe+0g+UXRWV3fruMdr+Fl3adRJ5nbqOOfFbkI6l1vKNS75l
co4c+OHSvxNogFryHYz4d3yTb3ccUwoFgrRueVA6SLeXQ1mcoe5pKScKo2z+
jkBva/sYLJU5hsXoRBmd0QLPKeMZnrh03Za1tAtWu/TvPY7jLh7jtkvb216+
G7q1fyqgIj64tC3v5fu8U9fbSKdej7ojwsZ5X7Rz61rdB3XcWp8OiHTruKqM
Snhl5/ENdtoaEmfrzAKby/J/AGVkPOMi8ctIw3UpFdwIQLjcm8IBD+lCEIw1
lLEOOeXemeN+QS5cwyVcwSeu816krYzZmItZyOHUdVvW8Aaki5LxTz7LbB2T
9TAxklj6G5RzC19IdwH7ZI2X8cy+FEiNH8S/BmuaZ6R9im8yb936Pdpf+pJ4
MspJgf2E3+EInvjq37Y99dU6f5bnGPl2Ytf0EOkXGSdWVjTxAUhKPlfYfxkf
iX+WNgdr+C1c7H8tdbD+DIWP9ae09z/2fQ/WeibgAOKljpSRHEn99Dola04/
BHKMn52XJEiMrMgg59XS10V99MBJ8jqBU7LG2LFyHnuyr5elaY5mdl8xHCMw
Gk+lH/EvfpPzhBZoh/Zoi5ZoY9tvke42buAe7uABWrOvKRphDLrb9bozOqED
OiLKwk1Qx9Knp65pPTomB9v1OhpXyfemjbF/cN76TdruB1/8gRmYjt6oiPJ2
35XN+u0G4zCA6+Q1foeybxiGyDwhr1irfy3ita29z2V9tj6ZSHym5X+G+Gnr
Z5kLR21cHcYhG6uR1nbp22eMrec23mTs/YvHeCHXfpRGCdKVlLY4tZ434UVd
q7GvIiqhK+MuQu4ZZX0kXh81bXsrtMBzuz955tRjq1iaAsiG3BbOh4IojwpW
hyjLv5vlX8vueeQeqbLVQa7RSVFbzr/V8x9kJ77B1gTZflWumU69zhZH1mC9
x5P7uoVBeo+xE3swBduC9R5sHseUkr9Rceo9mNxDyj1bGqeu26kwUtYBp547
B79BCHRq25/iE5IiJ1Ljq92fTHfqPZ7c87x26n3dRqwO1vs6ufd7J9cF6jcS
kUG6dkk+2ZEcKS283+455Z42kYwrp567POSV1/q5FZqiCRpbuHWwPjvkkmsp
4U7oaNu7BeszQk+UI99KNoY/2FyT7c3RFm2QWtbGIH2mSO7RtU7WqO/yTC/v
F+Q9AsfXlPtEmV9IZ+t5ddSwa4FcF6raut2OvI4H6zomY7IUCuEN8es238M4
H+EI9de/E65nc1DyrOCn5+IF20Oc+vfD0j/hCHPqGJP7/GyyhpL2vZ9ufyhp
cdf6X54jhsu9u5WVVP4myNZh6c+sHJcNWfy0jQ4/XcOlbjLH/dEhWK810lfZ
bfxntWMLW7vuW7mfnXpfJ/dU8veWct87A5NQn31HUNup97EZ7T6qHfGOcm2T
+zGu58dwFEewCRvt7znboJXcx8rfsuJggN6P5ZB7ZBwgvg8XMNmlf2u6FPNd
el+6GG3Z1x6tJV/iG7AJUzFS/l4Jh6hHAuLxN313Asex1P52awppLlodpKxR
xMe59O9sv8l9Cd5hN/GtOIKrxP/BJZzCSXkmC9K/0ZW/X5W/iX1pzzvhsnaQ
bwQ6B+jfp8nfPE936TPpBqc+J15l3zVcwTYrawsKWZ9kk2cC9m1Abrc++2/H
XHy1ufOT3NvZ3/p2sn5bgYkuvX8uillyf8e+gYhBKeKd0dypx3aVbQGa52ek
ZWwssWeT2da30s//12+XcDlAr3FyHVxHPmk4Zj/HHsZG4tuduj0XdS2JnHLv
Z+ESGC19YedLwiOszk04pgUaw4d0viiCx3YeHwZpGvle3wwz7NxJ336x+n8K
0rnvpG4HSBMXpHWLxWqsxB4cwkEkyLMi7ZmDWVjGMcuxEits++IAve63kuu/
U9MsxRKnjtsExMtznN0frsV1GzPXcJb6ncNpuUcO0vVqBXrJuwj5G2Sst/my
NkD/zlD+pnGMS99XyLzYg60cs0n6OEj/vrqrjbHVNk5WShrr/y3yPGHPLyfw
t0vH5FG5N5Yxhx0BWrddiCS8FAsxP0DHnrQrVn7ZvwMXZCxYHc5gjZSH53hF
/DXeyjMGZR9FB6eObTl2u0v//n+dv/69+k5LvztIz6P8Hbv8Hfgom8vS9leW
/xZcJX4Tl116b3zZ5uNj9t2Xv8VDnEv/bvy6jC9r42bbLsfG2voQh71Oba8c
+yBAr7nzscip912N+F1sa/hLlCFcD3Uw16nrg/TbTlkDrN+WoyDjtTCKuXUd
6ILuUg51vWvjYbU9Q6106TsuuVfcRp6ZbF3N4Nbxcxs3ccTWnBRyf235F3Dr
vJZx1UfaSXwLtrr1/ryMPfcdwM9yjyZj09aH5bhn4/8ONtt8XINUwTpHVljf
riG/h7J2U7826OTUtsizsDyzd/PTd3Tynm0laRdjGT7aWhqP00H6LPkXFtmz
4UKXzmt59n+ClHL9lucAqau//k9NcICOpXJO7f9n9kwkfSLt3YD1cq3y1/+n
kGuErG+lUdKpa1FrC7+w56N/5f7Q+lbaHmjrjAOb7FhZWyS82eaRP/VwIwCZ
g7U/M+EtcT95LnfrNUKeteX9gHeAPo87A/R5Sp5Pk8p2t6aX57Ljtv7vcGu/
ST+vcOua0E/eTQboNbcBGjr12ifX0HZ2LqRdshYVtPcecg2V8Snjtq5cY1z6
7mgtv4FW/5AAXevkGr0oQK/d7SVvp64bcm2ScXjPxupD6ys5L9Jvcs2SMbbK
3u0Uk3s9FHfr/xnJmP8f4yJ/og==
            "]], Polygon3DBox[CompressedData["
1:eJxdnXfcl2P7x++9d0RLexAtIZltpa2hoV2EpF1WtqaWCiUjeyR5NOSxCaFC
pYnQ0paZ8vu8n+Nzv3j9/ni/rvM6x3Ee53Ee57q+13XfFfsN7XhDUkJCwqmZ
CQkpurZITEi4RFwqmosBirxWDBX9RTdl7pwUcaQ1EA3F+eJscWp6QkIJUVKU
Es+kJSQ8JZ4VT4s9YqfYIXaLs1SmjjhP1BT1xQWWi7xa4kJROyXyvpackLBU
3CpuSQ4d0fUi0Uw8rbiFYpX4kKt0fUt8JNaLXpJxvRgkrhI9U3UVN4gbRUvF
tRaXW48rRAvrVU+8LZmPibfEm+Ij8bFYLpaJrspzkW1CG7rbbtTbTXQWXSy3
o8iTjTJEvsgVbRTXVlzmfHtlo5/E8+KFtGjnBeJ8caHIUZk0kSyyxULleUQ8
LJ4QV9NG0UNc4zbRtq7WDzt9IN63va6QjR6T3CuVNjglwg8mhl5XWlZf0c9t
e08+877YpnI/JEW7L3Kf0XePWZ+FbkNT9/VXqmtHcuidKlJEkjg5PfxilzhJ
4Wqq+yRRSbQSXdRH7UU70Tk1+mCBfYI+6GEdu9ve30nO9+IUySoQXyv8m/hb
rBdZ6eGT1End+GJd8ZlkrXbfvu2+Rv5g24F+vC4lfBrfXi0+EZtlgy3iETHf
44Txgl0pSztaisvcngUq0060F8+JGonRZtIuTwxboRO6YLMu9o0W9qHz7Q8N
ySta01fic/VJpq4fe9yh26fiv9LjffGeeFdcIhlneuxdLBqJxikRf6nHdUP3
Jfk+U5lvxCbxaVL4zru2EbYa6vlisO2DnQ+KA+JEWozjum4T45k+Zs64kr4V
kxOjH4jnvqb9pan1+8jj+b/Wn75o47FCn+z23PKdfaid/aWj6MDVtsdOVyRG
nhLWgTqnJoZPoAO6DEyMeYxxNkjhr2TXd8V6sVEsUpu/kx5rxUPJMXbbiVbu
p/3K81ZClNuXEP3ymchIjP65Wjp1T415iPlnrdI+FV+ILKV/reuDYq7YLnaL
PQ7vEkXKk888IPLEy4kxD4yRrCWJIedL8YNI1/106ThDPCBmMeYV/5PYK94Q
q92vLyvtkeSIJ31TQujCWE0UX6TFmKUdtAe90eN+lZmWHPXMTg5dkj220emq
pFhDBngOwQbIKBCF6C5SRKr4TTJPiD8TQiays5ye7TY/Kj0aeAwxlpgL0z2n
UO8a2mSbY3vaTj89aBvMdzsf97zOXPKouBFfTo4+z/Hcim1nudzDXmfw21O9
1uErK8VotXOU+K/CK1TnSs+R79mOm92nX9uX3havJ0TeJ9wvyGYtY21Yo3Z9
nhZrxMfKszMh+u0D99le+8RK+wW+Mtv+scfpXzstyXMtcll7PrN9PnUf4jP0
E21Y6XCS8452fJ7XKtq40nXsdhvfcnvetc+vd3iF28881VQ08XyV477Mtf/S
5/T977r+Io6LA+Kw+CshfGq6bYStnhUb5E8bxeUKH/G4ZEwyNv92uT/tSwmJ
IZO44jRkH3Oewx6nRxyHDuhykKIq+0Jy7CO+Es8pnJQY8cct+0v59Pdea5PE
KK8xzCv/SYx5u6XXYfYUHT3+r/b8xFr7cGLMI208h7RyGcq2TYj9Gfu0Ngkx
13QQ7Z3vjcTwuw6eh5BFXDvvK1o5b2vLnOT9GGvgnLQYG8xla5JijMxxGm2g
LdjiD3HINjlqG2GDYlscdJ8dtw2PeJ6cmRy+x9yBT+ODue5/+v3XhLAr/Um/
Yt8/LWOm55UHPHbnegw+KDnnew5gLiDfIo9xxjp6vmO/3O95cEdCjKOPPO7e
8NhZ4b7/yj50xO3Y7/jDbvMhx5E2Qn02XJwi7k2NfcgCzx3sUedJp46imfdk
dyvPXeJOcVpqtPk32/Co51DGYZbHxluejxZ4D5Ih8kSuSBe7xT7xk9iVHHPq
AO852QM1ky3bsCdR+BWxSWxg/yW+Zo8knXqJLuIK8UBK5N0qZjlM+cuTIu5O
5blLjBHjRUOxSnwo6oipyjNNfCHWiSrq46rsq0RtcQF7ELFStBAbGQeSXY79
OfsQteFMcYY4PTl0Jc9664we5N/4Lx03uF3TxTKRIpLFUnGbuF3cLyazl8Fe
Kv8841eMVdxNYgRtEzWUfq6oJaqL0YobI8aLm21DbIKd5ohbxBQxVwxPiX6m
vzuIJuJ2MU7cJm5NizKUnSlm+/qA24H+Y5z/dtv3fttzqvXfantscJkqakM1
0UfhbeI7zz9fug/eFm+JFWK5eEe863juq6iNVUVt8R/JuSEt+ot+G+J+vVqc
4/4tp/hKooYoK1Yy54gPxSqxWlSQrATxicIFokisFR+Lp1VHHaW9rOsD7DWs
D3q9lxJp1cQrSZGHcMXk0JO4q6TDYDFQdE2LdtG+la6/ruI+s4/haz+rzNGk
kIGs7cpTPinshr3wsxrua/wNPyR9u33uh5QIk/cbX7H11b7Hr+uJuvbvur4/
S5zt6zTGVVrco0cl25w2nZse44lxVS097IS90sQa+/Hn4lv783j78232x9PS
o0/KiDPEcMkZKUaIYeJH9iNpMXez/uxV2w6KA+JHsVMcto2wFefAD7yX52x7
rspdKFqKtobwZaKNwxfa1i3cL/TPNaK/203772duTou6johfXOch3x+2Tgcc
3mn99os9YndSjNv23uu1df0vMg5ZH8QLKaFXS+vSXJT1XLnXctJ9T3yZ5LDF
acmhB3W381pyruvIVlq+51zm3kz2oA6nO5yTHPkyvG9jXXovOc7WXN+1TVe5
7jzXi07nqY76tiF15rm+05znQqfXtY05B3I2/ZTxxTqjuOvSYtwyXt9RmQXi
VdlioXhCPClGiZEpYXNsX8nj6leFT4izFf4rKeYx5rP7xLyU6Md+orH7kz6c
KqaIuWKR8rzseZG5DV+b4L0EPnePuJd1Ly18s4vXm6s8fqmX+s/zvDvC8/Et
nk+H2Ze3yHc3ibsUd09KzNvM1/T7rITQ4QXrwj3rHjotTgkfIe0lxrNkzPbY
QN45nt8GidZpYbfXbDPs92BSlEfOo0nRbto/OS32TrPdxuGWeVx5fksKu2LP
JSlhozme70d4fGIjbMU+Hf990XXRzhFOY+wWt2mR9a9gH0y3/9KvrE+j3b81
NQeUT495gfmAeYT1cJnnkzM8V6yR7A8Sw9fZP51n/9vlswO6zBW/p8XzJ55D
8dyEcpQvLT732bikn0FxTpqgMrPEHHEfYwo/FtvE/uSQgSyeCfBsoBU2E8fE
LHwFG4vJ4h4/R3nUPj3f8VPFbPGYdXzQech7QnUcZTyLY+Jb9uveG+1Jjmc1
PI9kr8h58U/aLr3/Ym5Ki3zspfY6fwOlXSguFpekR933ixlikpgm7rKu063X
VKdNTAq5DVz2qNt53HVSdxnP32Vt0ymWP9VtZZxvcBsY78idYNsin2dCq532
ZXL48UfiffvzX4o7LraIjWKdyuxIimd137PXVp6NafEs7Ku0eHa13XZ9xPsK
nvf19Jq3zvkpt9bhTWnxXA0ZB9y3PHfiedN3ro96OVcgq3dSPAdgr7rRZ0Ty
kJfnss1T4jnUwJQ4J6xzXZyB2ev0thx04yzxpfOQF913++xLG3gu96z7mudr
29w+2rk1Kc6s5CeONJ6x8sz6abdhm/33iNhqvzqcHH6NP7+eFnvZFWK5+CYt
xsxvtslWkZAe8VtsI/z+hO291brw3JDnagc9Pl5w/Txz49kbz8p4FnaGqCGq
i9NTwlfZ/5/h+5lJsa+aZT/5xL7zrf1jvf1pt8cEfjzTeSe5r9b7rI6P5Ehm
rigtSolTxKkpseZlec/I3rGueDUp7PCWeNP2yEoJGeVEusgQJVMinvsfbPet
9seTnU6+QtFUtrtUNBGNeQ6huHzrlG1yXQcy2TOyT1wsFjlcxXoS957Hxrvi
HfFZasyXzJufpsZeq2xK7GPZv77p9lRRWk1RRXFVU2Jfy372xrRYgyuq/Jnp
4QvsPd+wT3zOM73UyEd6UnLss9iLstdl7rg7KeY95hDqeltUTY06T1eZc9Jj
n8j+sIz7IMvrQGnfl3H/rEqMtjDPM7/TJu6JfzQhxsomj1vGzCzb6TXP2cxB
zcQfiTG/v664ZZ6T0bGF/R2/b247pqmOeqlhzz2eO0tIl2opMW8yfz6utIfS
wm/x3zz3XUXbE7tWSImy+DS+jC/wG8H3Yqf40Vfuf0iOsjzXvyg9xtnmtLDh
ZK8NzMdbPP+d8HpwusdOScunbS96zp3ivliRFO2mveXt76d4DJSwjifbP/Ep
fAvfX5IUvoh/lnd+5vWmtim2fSkpzp3Put6S1ifb/vuG+/8t+w9+z/6JPQb+
v8h+vMR9xlh/2X1IXzZzfeRtnh7nUM7nnNM5j9bweGrqNecy/x7Rxs/El8hH
ThOlxTOigigjzlHaufzGliE5orFoKi4VF4nzxCUiM1O213WByFD4OM/VFT5V
/KXwl+Irnqfqvoz4WRwSR0RuZlw38JwzPe7JUzYj9sTssW9UeJbSZoqRCl8j
hothYqAYK0aJTqKLKJCMHJEt8sUIxQ3NCDmUHyPau8xoy7lODLK8Qb6/Vgz2
lfLIOUU86jbkSfbDGdGuctYZ3Y/xbDgj7PCn+DEjxg5z406F/1Dcr+IXkYkt
0iOOMxFnklTFJYhEkZIRechbXtfTRIOMyEMfNHTdha73Z/Zl0itdpIrkzJCT
LJIsj3r+cN2cC5jX6SN0x945llfObaMfaNuR9DijlHUadR1x3+ZmRDnyjxfj
bNvbM6IM+Wgn7Tvs9v/huNHui7HOT98Vih8U/s5632SZ54reoq/oI/qJjqKl
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
vOP2fiAOpMfZiLMU51zOmMvdjsVimW213bbDZozbA/4thb3WKtsI27DvWWpd
trjcV/5tYY7HzFr/VsMY+joj8mGr09Oij7Z4Xtjg8UUcaYxBxhFpc90HGzwW
N/i3C8r+5HbtEN+Kb8Te9Ijnfr3LMba/tA7IYFxvFG86/lX300CXR06f9Fjn
v3bebdYDfd6wT+y33a5Pj3nmc/9WRBnKbvdZjrMhZyz2nV/4zFh8dlwmxiXE
GZLrTWKkGCtuFbeJW8TNvO8lRovrxDW8Q6g5/KDYLY6nRL7x4h7nP6S4w+IX
8ZdIUl17dU3WNTE15EwS88W1rpO6h4gbfR3peqlvv8ruE41VtlFqlJ0sJooJ
CRFPeqquzUU+72uKo/xGoOtg1zNcDBOjxBi3iTp475xnwrwnzfvn860fsh8S
f0rOMfGzOOK2IftXt/FJ2/ExsTAh6jzqfJR5zG2kbU+JWr4uEme6zGP/L428
Q53nJZ/zyVc3IXQpnRr1/GxdaG+p1NDpOeVZJl4RT4s73Z+3Or64z8e6Xp6b
86ydMzpn9Z+t+yG3l37e63487n6kT+iLS1OjDupa4ufnVW3npaKK+/Im2x17
X8A3J6KNuCg1+pFz3zzb/EKdNxuIc8UFPO93HOGGor7KnOM9AnNUQ/FHSsg9
T1QSZ3lOO8O/KfHbUmWn1XH6md7zny+Zl4qmonFSxNcS1VOjrraKaymai9b8
HiTKisqOa6Y8I8UDYgFtUly6KCUaJYWc060z8ni3sK1lXe66L0mKco3czpbO
09AQphzveNS1L+ArZyXEux/YqKHTp9lexN3vsTJVTPGY4d2L6U6b6XEw2T7P
2KxLm0Vt22yC++ZhjwfkPOo+Qx7vdc+wTN7Dru3yDW3HMa5/suuqbNln/auv
ajvvme4rflur6/p5d3xbQvQT/cM3DPxuw3v0vD8/3fVPc5tqus8ruf/vt31m
ub1zrSt24L2Plz3GsGsdkaEyReJkkeXrSSLH9xXEAHGNKC9aqMxlzCOiZUL4
Af7Au7GzKau4Uxnr0rWOmMIcht+LybRfcWeIuqK+OEd5SyREOfJfSN/SfsaO
uEhcnBDx3JdjjkuN92x5v/b+1JgjmLemK9xNefqKS0UjcYfibhfzxTzRxPrT
jsYJ8V4v7/cOFKemhm41RXlRNjH0QJ8mxfmtD3qVcj3U1090TAg5A2w35NV3
W+uJs0XJxPjeiW+ASosy4lRRRVR1vaeJUq4fG7fHjxSu4LIni4qJ8a0Rv9md
Y1sin3zk75AQ30aUsrxTXPcpLn+S7091XSWL9VGZsow3ywXCZ7mOem5PGetb
2m3hu6bqbsepjq/uvGe4LWV8LeU83F/j/ixn/3pEVEyNOX+aKe0+pq87S7dO
oplojv8nxLqSL/IYj54niK9najqtUGhIJZwt6ossX89xm7lXNQmnOw95sz0W
CkWB1xzGC+PmF6+JhNNTY/0vbf1Zl8u4LOOphGWgK+tcdeucblmMtUxfKZPt
+8oJsa6cYb20pfxfH1VgLLittWyDmh7TdR2PLWamxhhk7M2gDbQp4X+vrCTw
6kqi25ll2XOVZ6rHLOWa2d7dPJ4eSo132+/weJqTGmXIO9PjfJLHJeOxi8p0
TYh+o78mWf4052Edf9hzELZl7ijpcVbKepV1m9FP2Xj1+H96Z7gdyY6nPTw3
4dkHZ3DO4nm2c47bnes+TnbZbKfl+r7QvkJ8getIdN3Ym31zFXGWz7CsXa28
TrI+sk6z9uWlxRmkmwr3EIvEYrFSaW+I18WK1Hhuz7cjAxLjmT1xvLPCex2r
UyOOtD6J8Tx/qcO9E+M3FGTzDdPLrmORw3zn84rrXOTwI2KSGCGGifvFo6rj
6dRYt9izvKrwK2KxWJIae+fHU2NPwz5qsdNfFovEDYxhcbUYIpa5TuqaLx5T
nmdcx6OW87jD1Pecrk+4jmVuM21nzWXtXWGZyHrUV2TPEw/9K47wAjHDeswU
08UnqWHzFZb9hOKeFAvF44kxJku4rXtTQway+E6Hb2OfdX+tdDsect0POw/t
og7WfGxIv37uPlzh+E9cN+25NjF8YrHb9ZLi30qNep5MDb3Q7znS3G/0Jd9q
vZ4YOqx0ndT9kvM+S5r4mXlJHBVHRM/E+G5tkH2Fs9FztvU6t3mPOCQOp4Zt
X3FdtPN2cbc4Km51PLrwnJTvjvbYV/CFfakxRxZaLvLmucwbttk0cZO4S9wp
9ivPVrFFHHT4x9T4DWyz47c6vEmMVJmx4rA4lBj5vhbrU+N3B+IPin1OJ/55
t5m2H7Ce+13fJsvmdwt+S9zn8vxuyO+FV4leoq/9fIzrRw9+X9xtfbdaZvfE
sHkP9zO+xd7jVftYb4/fXpbNN7B8Y9hVdPb1SvcZcg65f/ZZd8oyH/S3jOIy
/axjL6d19n0/pyML3YbZ/vTD/ZbF/DPZ5fa5L3e7PUvcv3vcp/2dt4vruMv+
cbv7k3lhufhJ7HKfrLftOZvzHSjfg/IdFN+28rs1v3Hy2ya/91KuQlqMixdF
Dc2pp3OuEFUNYd4TreJzCeeT0qKiqOQ4wqfxW544S9QTtcWfknlCJKmORN7V
VPi4+MvxrS2jvs8ryWmRxtrG+nmu5/uWPruk8n6cyBDp4hbFjRK3ips566jM
xamRh7wnXBdy0YFx+qv4XfyRGjpXSIpvVMp5TalsndCNvL+JY6nRlr+s/xzr
SLvPsIzTLKeC7VbF5zTOayfoB9on8ngvSPydGOfU1iKX9zvESYo/WZQQRbZL
JctGP86UnGM463E+Ze3j/Ee7WQNTlSdbZIkUkSaSkiI+xXokOR59aNff7gva
l+P+y7R+tJWFfoHbzLrB+sE6w5pSwu1Jtr4VbI8atgHtynG/Uxdh5B13vb/Y
vti5eA496r7Jcl9npsU8S5/z7X8H0Skp/gZApbQoQ96Kopfi2iXFN9G8E51u
XyFf5bQo21H0tAyurGmsQ9y3d3oHyymrMuVFOVGG5xiJsc51V1pX5yFvZ9d5
ivKcKk4W70ive8QEUVr3pURf10E5dB2SFOvI0+J6hU9SnpJpUW8Z733Qu5r3
QP2UZ5DokhSyhomhlkP5321L+pLxRptoG2vrFS7X1TpQPsO2xYbYqIbHDXar
6j1VnuOrO4yvpTouy/42MinG4snWn3a8nxrjkvE5QPRPCjtgn1NsD+aWPknx
DjpzTGX3VUW3+XTrUcXPUMnbz7pjvxvcfuww3HUMcp7TTT/XUd319HFZ/KOq
21rZdVR3u6q6bt6j4B053mng3YYp2phOFZPFJNFZG9gOoq3oVBhnQs5sW7SR
3io2ZMWZkXjuiSeds9w+hfeLA+KQOJj1T549Yq/YJTZazo+OJ52yP4kMbZzT
RKpIz448GyyH8mysd+r6gyiv8GFdj7hO6k5SXLL4VuFtoo/C54vzRG9xquJK
i04KdxWdRTfRMTviKPtXVshFRs3s2MP/b++eHTqW07WKqCjOFGdlR74zRI7S
j2aGHttsh9/Er7YHen8vTssO/bOy4xkNz2Yys+PMy1k4V+GyooQoid6iSJQW
hbbNSQ6TN8NxOZaJrGyXo/wpopS4QQwVQ8T11C26i4HiWvFFduhWSazJjm/u
+QZ7j8J73S9priPHdaMvz4KL+45nw7SJPDWsI3pXF7vd59gR+9HvZbLDpsRV
cbiG8xMuY1vU8DXXMrmnXupLsw3IyzME7Ehe/JL7Mq6rm9t7hfu8QOSLjWK9
6CF6Og95r3JcN/tKa9FGtBItxSXiUnG2qCdaZMcZmrNzY6fV87mQPHWz41zI
slHfci5x2QtEW9HEdVBXO9HMccVpTUUj50Fmoc+ayL4sO57RoUML5+Xa2GUu
V+bWoru4UlwleoteoqfoKq4Q3UQP0dwyi2X1cFqhDrxZ4jSFS4mOLtvN5S+3
fOqt7eco2KKODsf1RF1ROy/a1tyym1jHYrthlzSfzRlj2GuQ6Cf62mf72i7Y
6ursGMP0a/vsGN8XZse4rC0G+MocxBwywP3c03KR10EMzo5542hW1NXOdfy7
TupivDCXdLFvFNd9heW0dx81cltauZ+L/aBOdrQr1c8Jajqurtt6jnUnvpZ1
L+dnN8yhtZwPGWc6P/NcA3GR+MN5Nnrere34My0X26B7r+zwc9pQTZwuvhIb
xOeiquO5r+R74tdYNvqwJjBPF4iTxItKy/d1kSiVFffPKfykeEY8L37RXJmn
+FOYx/ltVNeSllHC8czZv2VGelnqY+5n3mAuZi7NinjujynPCVGk8B+ZUc+z
4hWxWLzE+LBO6PaQ8nUWj2eHbjMVfiArdHvBeXvZTotMF/d7KZdb6DZRnrIP
uZ3PO/4p61Dc5mesC/JPcntfsj5l3DbacNxtKW9bFBlsnOv2VdX1b10PiVd5
z4Z1RtffeTdE4TNFNmu2OJ01MjPSyXch8604y/lIr+V74iuK6rYvdq4mXudd
FHxJrMgMCC/Tdal4TjyfGfUgHz3+FMlZoU81y/rbuhe3kX47kBntPMltLHK+
cu7b427n37bNActFfpquiVlxxad+zox7HgAmsa8Q9W2HbMfXt63xp5Nt4xXq
g9fE62K5IbxSLBOjsmPd/I942mmPigXO8434SfyIb4kdYqfYJb73lXMr6yrr
Kesq6yt/54Nymxz3k2U9ZFk/iAezY5/AGRiZrPHbLXer2CK+c53fOy3b98Sf
YrnUxd8SQW6xDpss40OxSrwt3hQfi8/EB2K1+K94x/lI/9Tp5PvE5VY5/hPP
I8wnrLPrbYsCn913uQ07rSO6sg6zHrPX2e1283djeIg6lzw5mn+1rvQRWQrP
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
98LY1xwX/wda37vQ
            "]], Polygon3DBox[CompressedData["
1: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
9gw0SnNw1EENlPU1ziiMQRnUZH8t1MMj2uADrNC8P8nCro6aeqYbb89dM8Xb
mBmPDZyzBW9wvBmaa11H+hPUZ0j/A6SELO1rsc6f9+m533fk63scwimtyTSG
cW6akF1zj2vvoKbqKNLqMN7D1pzvLx93HvqYquej4/Ghtxk9K63s9VPBn9dV
SbD58SqsjrDn4Uu9DNJxLH2C1Vt1zc/8u/Y39faiMlZZq63mRW60Ic8vJts6
rp3Pgdexf2OCPV/W/HlngpWZ7i3XkOjlp3Y9NWRtsLq38Xy6N4TsuXJG5A3Z
83S1E7W7FWjA9hI9k6ccx2J00OakjbztKt/VUTvB5qk6pnPeQXryOyFkz5bf
9/vtRyhLGZfRfC5k9RDC6wn2fLwO6np447h+rLcftSO9D9DzUD1Xft3jVTmr
3ah96r1AeZTDq4RfK9LaiOpZcdXxstqQYM/qGybYOmaeP0te6/Wldwl6zq5n
8no2refUOqbnywe9LalO9cyzjc8zrpLfK0Hrk+qbjTwfiiPM13khRCOA3zj3
V9zAzaDNIzNQ3r04vySGqE3wPQmZEu1YRiTgGPFfwk84h6O6T9FOcyB7lD3P
7qG2S5jhkTZPfag1YNDmquUjbdxSW6+ObFyTFUcj7Rl8viiLS/EPJh1vIE2i
PWdXfD+G2xz0QLitv5M5Fptoc1rNkXf6vG1Hko0h6t+hSFuTPglampS2mX5f
+iTJxim909H6LITeCTaHjvI5clyipSHV13Jaq2geqPvZSz5WK18V/P5c2fOo
dMV7ucX5nDubl5PK6zlkwRBfK27Gpz5XT+NrJz33TfH7pdaIz0bYnPWmr98G
+tx8jo+XyrfmvIlaL+AZXRdveWqMJmiJtgn2vqAruvm9TvdJPZcNeRm9qPsE
6vu4WcvH2Lrxdl9flWRj43ovxwKcWwrFkRu5Iu3dyAFfJ2htoza8D/u1tqQ+
xgWtf2utszho70u0X8dHeHls9Ljm+vfNPgdd48cGe5sdpHEKzb3d6LMFmmls
S7A1uOqwqZeF6lrvMg57O9b7HL3rU/pLR1o/1lhRDI+C1o61zqrmx/U+sb8/
t6qCyv5+5DhOhFtfUdjVfI1W3cd5jQ1FqPeiUfauR2vPbSFL55vohNZeV7W9
HtR/lAaVbx4vX6VL41k5HI60sBRmnih7t9jCy6MMOnvYHb3u2yXYmlzrxNlU
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
BZeI7zqysX2I67fgKnqgM/brd4HY5s/Yf0cXP94IDdAzysKthCr+nFFxDPY8
/uJp6htn/5c7jK90v8JufbL/Pml4gJNsn4iz9wO6p+reuhYrsRGfYh3WY4PP
EfX/pkv4yeeLFWjnxVAS+by/6jm+3hXo+a2e0f8VsPcF3T2fylNXnCINh4j/
6zi7j+p+Woq89Kf8xqAk29Wxn2P7cB3zMAF1k6zOVHfD8I4+/Z1ELwz2uvrS
87/Py/cAKvu9Uv+Pa4BCmnOwvw2aopm/0zmrOvay2O5hLPD0HoizdI3F5Vh7
53UNV3ARadifFlGI9PZ0nev34g/cwDWcw3lvW809ftXRXuyOs3nbhVi75oC3
Cb2Dueh1q//XfO9pVT6T9Pza41YaUlXHPhYqLIW5C+05t4PnWXlvEWXzoj6J
Vv4DfI6kui3qZVQEhYP2nkTzt8ZJtsbQuqKX16naZz1U93asdrM5ytq76n+e
16PSldHnI1m9f6g9ql3q/ZbqXn2pmr+/Uzs47/nWO6dhXma/ce6v3q8uedn3
8flJX58Hau41z9trpyjL+1xv15uw1fui0qnxWe8z9f5M79HC4+w/jyMw3Nva
kESbZ1X2sqnga4b/A3X5pUY=
            "]], Polygon3DBox[CompressedData["
1:eJw12GeYVdW5AOADDAxDGWbooKgoFoqACihIkRbQeKMiKAhiozcBlV6kzlAE
jBpLFMWbiCiYiMaCdKSDiPSioFhQQMxzEyOCet/1rJUf73PWOfvsvdq3v732
qnn/g52GFM1kMiWLZDIlfK7MymRWsZrtfMwOfiyTyZyjVtlM5lLWKq+hW7FM
phNtaEcLmnN9eWWa05ImNKOpStrRlmZczbV0ojO3cwdduI2+9OIB2tCaPlQt
nslcRFnKUZPKvF4uk1nCHO7Iy2TupAeDczKZbSUzmS28ylDf+9NZW7vSng60
TX0p5VhpjvrvcV4ix/e80plMbS7hcqqTSx9j15sRBnMk+ZRjV24ms5sd9KYX
n3BJKWNJbepShysYoI5BqW0DaUU/cvShJFW42fl/oKryVudsYRPb2MxGBrGB
9azmfu6hrLnL5Stz14JryPN9rDEdzUjGMYZR4btz+vI+K+nG7awQE8v5ICvG
zLu8w8TsTGYKdxuv/+Fmfs9px77nK77hW45zo/o78juuoyntaZfK19KStrRm
nzHdyyfs5zmeZY02XZzGcAe7U98/dM56quhjVU4pf84Kxz5OY7WHXawrFdv2
NVliqTgnlU/wYn4mM58X+M24n+AZ5bfNzQ98zz85zSnuEgvdGa1tYxhVNMbG
ZWLlUi6iJrVSLIX/TGa2+3AajypPor85aEkL7uNe+oVymtMPSsW+LGcZd6uz
JwWuUVgkXjO04R1tXcLq/NiXZ1mQH8cqxN41bE+x9BEnzdkpiulLFkuUFzKx
aGqba0+gvnLdovHcxjRjJ5+kmPzVOb9QLifeU9mUoFu6N7uwTSxvoqtyNfde
FSpTnnyqMtPxjnRgFKMp4Iy5/JmVrKKGOb6AOxzrJwf0oSdd6eK3RVnxmnkM
C/PKAhbyairP5wX+Gojlv/ASz/FnXmSkXDaAIUzW7pE8orzcdZexoljsS3Xe
Zq2617GSD1jGGuYYm7k8xlRmMIvJ2ju9XPzPe3zFkpA7jN0GVrKOtezmfXVU
pEKx2JdXeI0/u9Z8nuN5XuBZ/iaG3uBdBojzbvxD+UnHnuIJXtPPJfxReRqP
M48FaUwKlfeqe09qwwqWs4tHjcUkxjKYgUxgDKMZx1AeTv85ZO4O8xlH+JS9
dNemSSkXLeVNepSIuetLDpaJ5x6gPt9wnK/5Iv0n5LqjZeK9/x0nOJnqWppy
3ZIScUze5i1m6tv0krGPIQZez45jEq55LOWQo6nNoQ2lxHoZPuUIn7Gfd9I1
w9h2N8b3sTjdy38vEcv3++2eQDnHnJUnj4pUCPHKZGM0MY3hKIYzjNkpZiaX
jG0Oc/cMrdJYhb68k+oKOaSP+LiHnvSlN71YJbZWM5d5rEix+lrqe4j5+Sxk
UXbMvbtYyzr+wgLy0rOvCmXJpQIH5Jqv+YLjfMR2Mo4V4ze5pIjPovxaJK49
1rKNS6jF5qz4nxwa0JDSFOctl3qbsUxjMa/xpTqOcoSvOJbaENpWNeWuelxJ
Gbaay22sKxOfHcdSLD2jzwVMYwbzeJzpzGYmjzI5/We7cz7iAxZynpxUjZ7m
4K4Uw61Sbr+7RMyxxSmZE+/Zl3mdjWktdCe901poA4PMfT/68qrcszAv5qL3
Um75B+/yPu9wrb5VoyQduYkmzNLW5+lOD6amvoRzl/MkT7GdrdwrVu6jOw9w
/39jSa56xPFmPntwd8q9H6RYms1j6ZqhbaENJcjiPM6nA5VSzgw5f1HKySGn
HUz3VBHPytM+f+TzUjHnr2ZTmTjmG9lAw5QTQg7Zx35a0SitRRtzkzjowNXK
rxjrxSHn8QYFKSdfIIaW8vdMjLGXqUlLba1I+aIxhrNpwV3aejMduZseaay+
1OfP2ZMb14Tf8HVuXGtNoYkxb5Qdc3LIRafdA2f5haMc53tqiI8qXMrldOLW
kG+NSwHTKGQ6U1kp5vZQQ10XcCys/QJ1bWQ1x/mWY2yWhy5U//nUoy4b/dbd
WPdgYulY13jG0UXdt3M+dWnDDaE95u1x5nGAg8xhmpgopKBcfCaGZ9wkLtC3
C2lAC0N6PTWUp5ufEWJ7HK2UWzKVLtp0Cw/Qm+EMo7G6m1CN81LbOufEd5bL
WCAGXmYHm8vEuV7Km+GZmJ5xU0rGNWFYS6/Sxy1sZhP1XKtOTsyx4VlZS/ky
LqQmF3ARVakenonqeJW6+lqbOgzQjuHOncA4BjOEYXTU77a04gY68ftMXNuH
NdXyMKesLh3b1syx5rSjPa3TuRuKx7mrQ3UKfR/MDONYyAbWsZ6NTDXWpzjB
Frbyr7AWNWfTeZgRjGYUD4Z+hDUW05jKMA6nWPqG7+hNX6qYs+pU5TyqUYlR
6tjESs6lmP8nT2jTkyziTdamNo9U90ye4o8pxiYyVN+GUMBU+tOHSq5VpUiM
pabGpQ0VlC9Wd00uzY9tq0wtxqS15SD6pz4O4TNzdoRPOcxB9rOJDXzIClax
kaau1ZxmNOZ6rs2Pz/qwBuhKJ26lZ/H4zH2cQmaEdWHKmeHcRlxDk5CruCo/
rl2HMpyneZZnaK1vbbiF22hHM5bKQW+ltWiltFZ8kzrU44zcdZarlRuntfek
sO7goVRXWDO3cq0/GMPbuTXV1bJIzO2hzU8zgj+lZ8cYxx7hB06mGJvCemN0
II3hXnanMbzNWPRNc9ePXukeb1Qstq0YJfhFW8+ld+1R6V1pYnqmh7XHw/9d
kzMqL+aQ4ZwNeYctfMsJfuYw51L5FKf5nNn6PZ5ZPEYhBZx07Dv+w0xm8UO5
mKOmqmcOs5Rb04IZjj3BvHJxrRXeBUIO3JfWuj/r+1nO8B86OqeQgvwYS9dx
Y4jPdA+OZUJq27isuGYOa9pzzv2V38rGa55Rx/epbbN5jJ84zo/8m6d4MvUl
7EU0oRHXpne68G4YctT48O4Q1sEMVR7E9XJc85z4zhLWoiE3NmNs2K/Q3mxy
KMZov5XXpubaeYXP2jSiMfPkqLlc6dr1w1pKeTw3qrsjDzCCR3i4VDy3DlfS
gIbUp7hr/1te/D+ylItRhKKpXIafHDtDWeVPxNIB9nEorDPYT6E2TMqOexdt
aU9rvteHr8jXn4qUpxSlU7kCTzs+nyzlz1xrZ7rmET7lMJvSO1p4x1zG+2zk
qrQnUz+tYa6mATfp80NhHuidxqRDeN9Qzx4OcZqX+SEvvmuEd7o76cFdKee0
SXspjWhC17CHx0jxOIVbxMDtdGZgWKe41td8yfHU92O0UHdTriOL0tTjjfSu
Gtac+/mCo7lxTq+mIZeHdbK5nciF2lSD86lGbtrTG+paw8J+GP3pxxD+JrYW
hZgrFdtwJfWplJ65Famc1kgVcmJdlzIkrJmprXwZfdI1e3Jv2uPqFX6TO3bK
Twv4Xwb63pfGYS8mlQfwIGHjdFnaK3ieD1nDewzOjWPYifa0ZKjf1odnCUdy
45rwGFs4L+zDcTFXUo9KYe9KnG5nF3vYxzpayr9VqMQd/C6tAbY5tpGP2cvu
dO59jnWjaybuTYW9yl5MNJeTeDQv3rNjGB+etc5Zw0528FG6ZsilE9J/puTF
XDculcO54R6fx9yUA+enPZbwbHqOl9JY7XOvHmJN2Evmoty4Rn3ImI9gOA+n
Z8ewtCc2Pexnhb0xJhaJe1D71LGX3exP98IuXnStTznEAQ6yOLyfmPtfxMFN
4b1fnI3mer8NLBvXZldQkR/DGq1sPPdw2JuiW3j/4Z7c+M61mNf5axrDV/Li
ntsM5jA3tTns6VU1l9XTnFahGpXLxD3Ds5zhHD/zU068Zjn5I5e8/JhLwxyF
e61YeA+iOEXJpD3e3Wnvbmva2wx7g6317Qau4BJq0YDmNM2OfR9vDCawwJgU
MD3sz2fHc6/imvBukvbqG9KYa7iqRNz7Wpj6PjHFRnjmdtasLvTIxD3J7in2
9qd30vAuuZN97OVf7o+izsvkxb3uUvypXNwTK0hr8mlpTybsdRQPe7SUyIp7
JiXJ5v8BY/1Ebw==
            "]]},
          Annotation[#, "Charting`Private`Tag$291006#1"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
          "Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
           ImageScaled[{2, 0, 2}]}}]}, 
      {RGBColor[0.368417, 0.506779, 0.709798], Opacity[0.6], EdgeForm[None], 
       Specularity[
        GrayLevel[1], 3], 
       StyleBox[GraphicsGroup3DBox[
         TagBox[{Polygon3DBox[CompressedData["
1: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
xgfb97H0B7avxF3Cs1hOxXPCi1kuxHDbdwDuW9lu4ynuWPiTndMP+IKvFr6D
W7iH+bTDRIzHJeKXcQFLLLwAy9i2GAuwBEstPJ1tMy39bEct53xMYtssTJC0
jtqfpczzMBdzsNz2neGo+UyzOi7DIjvubPafh53Y76jnYq+VeTnmII31Pfn8
Ppb4FatLWrsuHFAaJfCP9Ge2VUc0jjnquZBr7TROyWdgnMARHMJxR+23hy18
xNKcx1mckW3kdQgHhdXxgLXhYjuPO7Ad27AJG7BVjk3/mMZ+k/FU+gQeO+q1
+ciux7d47ajX6QvSP0/U6+uhrZfrazX7b0JK1t+1fW/iAe7buU7NtlQ5Nc1K
OX/ROlY8tP4g6S+S90ucw23p90jhpM9JfjrqM41fjhqWtt1HHnuxJ1qfe6x2
1GcIG7EF6yXOtrl2vtYQ34ld2E18l53fkuRV087RDbZdxzUkJ54MSW2skz78
B2vtWN+tPL8tvNnCkuYf6lYsp17Xx7iHHLe53y/qdt7q2Io8+6OHHJt4V8TD
L0rHh6fcU1axbaWMy076+TQnaqIjrrP9oszVI2kb5Gfdfza2S/rU5JEKXVhf
DJfkmYfMlzxoU5RFAuuL4G84Uz435EdnK4/s+5C4v9znWa4l3/mY56RpOqAT
Ftr6RViKmZiB3xzfAwWszJJe7ony+bpBoj4HqIfaqCvjKml/oH6iPitolKif
x/+w7hdqWXrZV9I0sTR1LRyHRMyyMkg56xAvjFhrhyJWZj/q5JVVnydUsHt0
OdRAXkQhbVb9jC/PIpyy6mfGzGjkpM8oGrMsSrp/rQ1rWFjy2c62rU56r5f8
T9D2x5GLcG5Ut7lBGeRDWZS09fKMTp4nyLO1OtY+tSyNpJfnDEHk62jlkf5T
MFH7gLfVywelLE951iflfM/xXyOGcASKo5Dt+39haSs5X3msHfJZWMocjmDy
9bX8c1mflDaPtPaXdpZ+FZ2o/blNon7Gbydl4xx+jtLnKlNom0nWTxrY3KAe
WqO+hZuhuc0ZMnCtpkN2rqkiMr9HXpl72zjTjTRp2J4aJVgfjBAEooClLyif
D2y9pFlNWeYgn62XZwXbEnXfIJSUzzPk28RJz3W4rfdGIfyNwhYOk89T8jmA
dKPsHj2XvBdHaTn7Ee+J3nKdsG4h/GVebOtlHJjFuplRmmdx/EzU+3gRO1Zp
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
OZSwa0HmJ3LvWIHF0o8pXxiiAnTMl/WxLOvYvKJBDu3bcp22C9HveeX70CYh
+l2AfAfRIUTv73K/88IJq8sh+Nj15S7zCn89Lw399Xv/YHuHStqhKsesEqjz
BwmXlfGUtL2xFy1o14aogy42/+kMb8bNy+x/Ufqhzc3kXWh5r1veSZb3luV7
E3lvZKCMEcTbox1Oh+i+8j7VqRB9t+qs5SNp2sh7ufI/NrNrepnPyP1ioYxZ
lLuzvD8VpPf9Opb+C+14E9cC9L0UeadlFhoRryX9NEDvy3K/GIAUKI5k+GXH
+omv+IYvaG5zm2Zy72ffQyE69+hkZegiZWBbuIyXqI51qIyadp9qhe6k641u
gjbtgh7IzLGzIj2S4zX7vQrQ9Q9ZppSxSvqZtfNay38NVgfou+urAvSeKPOf
FnAP1Hdo3dCaeJBcK/7a/s0tzZYA/buDzRhOuh7oivMc4wLOhej9Re41z7Ep
RN8v3RGi44nc+7rhGvEbuIVHdq98h8cBOm/sGaj3aJljDMTIQP0bjRE4Sh86
jGPSn6xNOsn9wO5ZtfCZfL/gk/T5IH1fd4DMy6jDX/jDOZphY76M1c9s7H2I
/DZu5JXxn/I4kN8PqTfxzdgQovsusn7Vzt7Ha4MHAdr+92WebL/DkFv+T292
fTf+JXayzy5rE5mbyWeN8nJflv+NStmesywWpH8XUDRIPx/J580Y6c9B+jc1
pYL03XI5R6+z6/v/0veiWYb5699BhPrr/ULG/48B+l6TvHM1T8Z5fz1WBDqi
K3riLnlcxeXseo9eZOPGReI3cR69rE+2R2OZw8n4b+OVfHaQe/pGa6sjIXpf
roDScv9i/8/4mF3ndXIukmCc3bPGIkmgtnlqZAjU964zIRXpUiM5GvnrONMz
h17v8vcU79DPytNX5stW5mvoS1n7oT9u0BZ3cB0/SPcTv+W+Ze9yV5X3I9mW
FH/hnqV/GqD7yljxRM5xdn3//w0qWv7lg7Qfdrb5Z4SN1cFyD7a5cTfcya51
ScP6TBw7L4qiMes6oR5W59DPgOtkDhCg79gvkvs946cn3EJ1LPWBV6jed2Q+
097uuTJvLIF/bLwqFqjz8+7oIf3Dxp+FAfoeuOQj16OrjS2FpM1ZF4RAXLG+
MT+H/p3LZ2tzudY+huhnhLfZNf+k/vrZwdXKNoZjjMXoAP18J3Pdquhifa8z
foXoHF4+7wTa3GaijIc2DtfDFDtfk+Q+Z/eX+php8/YpMvaQx6sQ/fwyLUDn
e7PwlXXfQvQzgrRJUZn/ynhiY4X01a82N/5/LZzBDYJAEEVPah0E/PQAV0MD
1mDwLMYGINEu4Iyl2IRXumBe/hz+fbP7Z/b9zWQ3eLewb8fCbwKw0AtvpjcO
cu1wXo/KPqEP/2U2hknI8oucAefQJ/dhkrkCRupCl1yPyCyZFxryTnqjPZtb
4KKyNqvTe6+hrzyTv4ae6b0h9Ja5/Sbfm7/sz9QmmY6Zf7iaLN+G7tnn+8qz
OvwrwszzSWbgY2gHjmMFZA==
            "]], Polygon3DBox[CompressedData["
1:eJxMnXmcj9X7/0f2UimzMTOWGTNjGYZh0KIiLUSFsmUpRZulTShFi/ZSWbOv
lTVLipBdSEiirEUlpai0qNTv+fperx6/zx/Px33uc65znetcZ73P+557qnTv
26bPGQkJCX+WSUgoxrVoekJCAfyalpDwB3Qh3BU6QUe4Fe6Cu6EXPJaVkPA4
DIFH4d+qCQlFshMSSkImPA7dibsNHibchzzVoAbcBzUhH7rDHUbhnnA7ZJEn
ITv0Sl8l4ipDJlSBXOuT3t7pYcMAGAyPwOoKCQlr4FHqcg7pF0MDKIQL4SBp
H1cIndL9DuEtcAnhxtABHoD+0N5217Sdsv8aaAv3Q3MYTZk/VUlIOAljCF+L
zddBK2gJtZFZh/6GXG+xHfXs8wvt12RIsn//zcSf6BkLr2VFnoauQw9oBAvR
twAutS33wL22qbv9W9vl9XTcLc7/fZWwV3Y/C8uzok0ftf9Uj7LY0C8r6iO/
yD/yq/y5DL/OJXw+nFch2qCPbegLnaGF+1AX23W7fXq/fSH7G7led1LGXdAD
7s4KPX3sa+W9Dq6Ha6GVryWhhO+T7L9EKAc3o6O7/AbdfNX9NcnkhW7I3AhX
SBaeJK0n9IJB8ATc5rgnbddtjpd9LclzFTSFZun/v4w7rOM84s6HsnCuy1F5
LS2f6PTzbG8F+AufnoYMwje4zlc5Ty/rftj2SW9bZNukhf47XL7q1h76Ex5K
Gz4JD2ZFm9zjftLGtrRzOS0d7uC+rrg/08Ie2VXeedq637eGIfTpypAGT+hK
3Km0yCf5Tm77bvZvV/eHqx0nv3Zx26huCcQVUb8n/z9wNuHSUAbOcpnXWEdn
xw9CbnBapDe3/e1chvrNHe5z9zquneut8u+nzK624fas8PsD0M7+T6ZOFSAV
EuFkZvi+I769Ojns1HyoeVH23kfaA1mhV/qKq0+nh4xki7ivFvd9hvWrnHRY
UykhYS2sgpWVYlxrTtJcpPGtuW1gVrSr2lPjUuNTZd7nfqE+oLaXjU3dd5rA
Zb7KhgTft/d4us7t3cr2FbFsC/u7uX2nMfuAfaw4rRO/pUWba70YYvsGeA65
yrpbWV9xZD6gPtvhK8gmLic95nDN5VXIcyb8Q53KcE2Cc+AsyJY+fNQcLoNL
4Gpo4TillUemNFSAVGhC3DXQFC6CK5yvMVwukLmSa2mlZUWadF9qmWyXLZ3S
nQbpDkt/A3xcgmsGFCYHGZa5gPAVyZGnIjQnfC46y9oOlS+ZdOuVbDZxeVAn
23bZH1Vcp3SXlW0brrTsP1WjDt0Y593htcoJCYshGZkU+zDJftWacnZW+Lcs
nKt5Cs6HauioAdUhV/YRl5MddjW27I3kvy4z8ohEKOf88kXJrChX5fWlTp25
dlK/JDyYNr8VesJDFUK2rPMqz8XJca/4i5IjvpzroPQHMsOH8t09hNujoyt0
gXZQHJlSWbFmJqjtsqMPqO3PzA6dJW2n2k75usFNzn+WfVUMikKb5KhzWdvW
Njnqf67T1KZq286uq/wu//fS+l85fJbttlRfO0Leb+E7OAqfwx74DHZCbfv9
PPibNr2QPDWzow3UFlUZP821L4MaaaHnGHxvfUMocwEsgj6wg7iPYStsg5vI
87rrfH+FKEttXcZl9ieuU1rIKf1hdNwDfeEhaIBMAdSFQvgDnbvhV/gTpiEz
A0ZmJCSMyIi6noIfXWflrQ/1rGOr7Ttlv0jPh/AR/Azj0TUBJsFE+IK4NPgS
DmZGnNKmw1RfVf4039eijAuzw+5CzwPXeN7QfHEYHV/DV3AoM9pMbTdXdagc
Zaisw07Pz44xIr+prdRPiruvqb9sR+abzPC7/K1xWceyfzus8Z3vuK9cvvIo
74HMqKPK3Q9vuf7ywxTY6z6jvvJJZvSLWtapfrbQ7a9+8BgMhznOOw5uTyQe
StG+pdOi3+1xuSpvruWHu/6Xqn7orap29zqp9fJmr9mLYRHMh7fhmczYs2uv
/izhhcQtgfWwAb6mT62AlbAHPq8QcQrvhu6MoVuTI/4zy62Cw3BIfZa0fsmh
4798K522E3ZZzyfwaYVYs6/A702hXHbES26H9/1Lseld10F1ke7e8L7t1Fq1
ETbAetv0ucvYZZn3baPsWJYV+2fto9+Dm/BB48woQ2Vts55NsBXmELcWZsKb
WTGHq8+chhKE9yHzJXwBe13uHtdBdSnu56Mst5F0rYYPYTMccDlLoFZ6xG+C
LU7/2L7ISo9noOpQFepA3fR4xsr0Gp1tmSzLKF7t+j6scPsq3wGXpfwDqPvA
zJD5T1b3K7PCV5+6HrJDz2LqKxdlRr7/+ox0r5KtWeEH7R222R/qk6r3E8g/
br2Puw2WOe/7Dqs9dtif+1znRW7/d2BBVuj+wG2kMiYTNxumZMUzWFX7Wv1c
ZR5H5ls4Aj+6L/wEJ9wn5rtvSfdcuJy+dSmctNwx+KFC6FH+UuguCmfDOdmR
T2NonvOf47Xwba9R6qvS+dP/lH3Sek84/JvLUNx5nuuLwRna65D3Kvjdcile
bxe7jLO9XznX9sh25fnNus9xmtbl3pkxx51n3X9VjX3C9ZmxRzjPOud7zixm
vy9xHRe47ESPFdlQxP6QX3SmcFlWjAv1+0vdLmqfOR4/KlNlK5/ODI64fb7x
OB7rPBOy4nl6p+eOLz0ONPdojvna41z7CO0nJrv9M933q3tMnGFfFnWZq+z3
XzxnFbO/z/L+Q3WTPzQvqI5Fnf9Mt7nqprGf4DpemBnjYYl99T7PBO2hHbxU
Kfqu5hfJKf2wy9Y+W/vrKzynlLDvFhPfj/hZ8B7hmSm0PfXdAB/AyKw4C9Cz
/qisaFO17f1wN5RMRR8UhTOgL3H3wkNwG5xJXBkobhnJnpUa8br/m/ISuP7L
9U/zD5yGUykho7zFrF9yRVJDRrKPUMajMEjPYS5TZfeAbto3sHZP4Tpd6xrh
Aq71oC7UUT9E10H0lON6vsuSvedBWUhODRmlJcGXyKZw/Yzr7pTQOw32Vgn9
p22/6lnSdhZxnRX3CTKvIz+J60QolRp5JFvC9Szusve5rGIOq8x1KSGXBSdT
ws50SHOesg7vT4k8d1JWH+gFt8MdmRGncE+ogGxFyIDyzqf8ik+Fv1Kijf50
e9zudr/F+Xt5nN9tna3YI1wLLeEaqK09EtSCvMwooxJ8ha7DsAMyua8CH6dE
v1L/0l5efUnx8tGGlEg/5b5Rynk2OCyfrLOuvyyndOm5z31S+tLsr4quo/yY
4naVP1MdLztln/xS2TYrrrv7fl/3tXPcR9Q3zoZH4FEYBA/D7/CHZMozDrme
w7UcpJSPuP6M2YEwAB6EPnAP9IXecBN0hh7QBV6kz6yAfTACEtGRBOdBWbiV
cX0b3AB9NO8SVwyKQhGYqvqXDx+o70xXvcpHnNLuJE976Ah3aI4l/iw4s3zo
mozMyzBb7cJ98fIhc4b1q1+P0fmh+7fylbENkvmGfEfga/UB65kHq6xPdsie
NKhQPuKUtjI14i7D503U17DtbvjN/pWf16WG3+S//vbnXxoncMhltiBvU7iL
vP20h0+JvviP5hbYiM1bqsS88YHOyNTHs8Mv8odk1Rf+To08n2jPonVDe4ms
GAfqH909Riq5/3ziPP863yXQLDXskH6VI3tqQnU9J1B2LtfTyOyGfnA/bCJ+
c5WwU/Ydcv2Oqg/Dz3AKvnPcfvtbfj+YGj7r7TJV9rfEHYPj8IP6Nz7r6X6o
/vcQcT86bSCc8L3ie7hesu+06yffqo3utn7Nfep7JcrHHPgH/vsIPoTffN0G
v/j+KvJeDp2hC1xifU09Z3fxeNO4uwk6EXcFdIQOcG1mxCncEmromQ/yoDr0
JM/ttv221JDRHNUIrpHdqTHfqwyVdQwfVKscepT/QEqsF5KRbC/4ifvuXLul
ho2ytYXXl1a2qaX1H0f2RErklf4GxDWHS13XD0jbCMdSQreuP6REGbrv4Pm0
tnW2t36V0xZWpYSOXranu+1TuZ0JP+h2rAk14ILU8Il8cS/0d9sOtOzl9m8n
t4nKLoT6/zOnaz3VutoQGpCnifKpL8BF0DA14nWvPA2cR3llRy3Isz3VoDpU
hVxfs6G+7y+GxtYp3fLl5ynRLnc77VJoZBnVWXXv4v7SF+5xGSqri+slP7bT
Wul0yfVOjXZp4j6o9rnfY/EBuM/X2+3D+0xP+1U2dLS/8t0nL7d/pLtjapTd
yW0oG4Z4jX4MBtvPze0z+e5pr993WFZpd0FX96FN1HWz+5D6wfqUWCO1Nq71
WFvv8HZYnRJ5JLvKY3MrbPHYbOP1XOt668oRv956lF5oW5+yrR+7vPXWMTQz
no2ete269nEddP9kZsg87frsJc9O2ON23e19zyewy3X70vGq42P2RU/b8Inz
77W8ngH1XKY9ovaKW73n+Nj2PWH7hlrmsNeDQ7bhKfu3uet3pW0e4vb52TbJ
h9+7zL0es8ds427H6/4K6xjsOaue2/YSz2/NnC45jb2rHaew5sYeHp/9PWa1
J9b+UHsY7WW0DyrpeN0PdvsUurx27meaK27IDJs3uR98kxJ76EEu82qHn7RN
ilvrvqS9kur+qH33pGW3u2/9bH+cdHttdtzvKbEGaK7/1fPaD54Tjzu8121/
wuvCNvfVI2a7dcveV1kDn64S+yLth5owX18BnaBjpXi2KO69iZ4dDvOMcwS+
hy/0WwV5foXf4YTOyYl7kWehF/T8nBbrotbHqYQnwkDWtEHwAjyvsxbqfIp8
f8O/MAuZ2bAajqbFXqyHzlGhJwyFp+EpeDI7ylTZv8AxqI7N9eEiuA6+Je5H
26b0aeicDpNhBhSj/BJQHIpmhi7V51zCZdRv7A/5pTH0o8wqkJQdv8WPQ8eT
MBTGp4WNA+BRaAtNKuKjjNApXxVB5xmZUa7K+4K0gxkRd05m1Ev1ux/ug4N6
7oT9cABaY0Nepain6vcxcTtgK2yBfbAHPoe9sA3ff5wa8bofhQ0HqsQ+Sfuj
XZbV3vdcqEFcDvylZzFYo9+XYBN8COvhI5e1EZ51m6gtntGZGXmzMsPnx/W7
PXX7Bc7ODJ8qXum/uU3yvH79iK7tadEPvoOj7g967tDzx7PWv9/+aEP/aq3z
nczQLd+dCV+7f6qf/gTnEfcWehbB+a6X6ic7jzs+kXC5zEj/mTy/OO8J+1X+
vRXfdC8ffpA/BhHOLO92zYh6nms71JZFbM+wrOhbrZPZbyTHuBims820GB/6
7VwyStNv6EXdFxX3ks7b1L+QHwpj0iKf8r8s0kJGstKjM2T1Gf1+rN+RB8M6
+kgr2ADrYaN/D9Xvoh/oeSgrbFW50lU6M+J0Jq3fXF+hjDsp63ZYnhbnHHo/
Qe8p6Lxjqv31s8e38r1o22XPUuJ6I98H3k6L37Q1fjSOHsgOvUqXnPQ/lRVt
r/co9P6E8ul8Recsyn+mffuibV3t+WI/bfGtn+P0PDdE54VpcZX/5Efdq6+o
P2rcqa2+4no4I+YAjclHPX4fyo656lnyPAePw2Np0cbSUcrzg9pB/pGf1B5D
PB9oXhibFs8Rep4Y4nv1DY13lavyfvH8JV1nZca8pPnpTZjkclX+CPkmLeyU
vdfTV65LjnPMhT7X1Xnu08iMhOf1u1Ra/I5dMjN8pfYsY9tLurzinv+kS310
g/tLc9hcKeRKuS9Lh/qh5nfN82Nsl8p72val+Pn8WfurlM6UU2Pu2JwW+1Dt
R9cRXqv5yfOJ5hXFPUPa0/AUzEyNM4DBjlNaF9qkK3SHW2AWcc86TfLj4FWY
BBNgPiyEBfAW3JwdOpRXz/p6TtTzouY9zXdDkRkF4+FJGAuLYA68AhOdNs76
R8Bwl6k4nVsMsc2yvTx6MyAdUuF54l6EF+A5eJsyh0FF0ipnxtnH4/CYden6
hHUOcl0fsW7VuZA2qgeNILNS+E2+Gmr7X4JhrpPiplHWdFgIM3WWRtybMENp
9pvqojMKnVUU9dlDaT+DtsmO96/0HlYHnbGWD59IR2mfdcxyW+jsooefh7v7
/OUp7ze073ilSpyT6LykjfUV+e+sJTX2G9Ip3bJT5T9p/6tMlf20ff2S69fZ
/UNtfFN2nJ08ZV9I/gaf7/T0+vymdU34Hx/oqnMdnee8h43Dq4Tdslfnojof
7Wz9xXw+c7Z9NNN9t4zPfG6yLep33bJjX9XZ51LaX72BzqlVol3UHs+5bwxz
nV51/3rFbTISxjhOfe+j1Fjjt8IHGmewBTbBZtju9X+bZTc7bSPscL9e5Pgd
jt9kXctT49xI50fvwwqown6mcsVYw7WGKk3nT0sso354IWS7P64hbqn6Oay2
bZ+lhV2yZ3da3G+x7Vttq/Yqn0K6zvyhBr68vnyUq/L/b19VJeS0f9ll+c+9
/0n0ed4ml/mR66S2055Cewm1oeaFhbZD5b8D76bGudg6+2aBbZOPdI6vd4Tu
8nn+eueR7Fr4PDXqrLoeSI05Z4H1aC65xfvZ2zz/vEbcvtSYp95yu46x7Cse
t8Pc7mrv0amRZ4zj1Pc1Nzzn/jLeeSQ7zmmaP563zDD3r9HOv9j1fcdttNf2
vGYZzVvJmbGP0vxVBRZXiXlL89VOtWdqnGF9Yh3Std4+2O10nZ3puf8L9yn1
pU/dZ9bYbyts24u2Y7Tr+Zp9M9b9bKnzKG8vn8f19Rmj3oHQuxB650bvFWTS
RllwNVwFv2mPnxm/++v3/pZJCQktoA9c66vue0Nf+Jl+9jscg+8rRto1cLll
RC+4x/KH8ctuyv0ADhHelR33iv9GoKMc63eS3uUgfAmcwTgppucLwpfBH/Aj
XAq/unzZ8QucVL93/C+2Szq/tn0v+PlqFazNDhnl/QmOw+pyxMNe2AfrkFkN
G2C95nbqcH1S+EX+aEqeH5z3cmhNXHO4Gbq73qr/fXBvUtR7I3xeJer/o/M3
dX3uteydcAe0sj9buMzqGeGfb1y3opXCP/LTBdAWmRuhvfPOoKwd8DFMhxRk
z4VylcKPf8PZhFPhn4qRtwN0tA7Fl4ciTm/vtJugE3SGAdAfroaT8Bv8BX9D
IvmSIcllFrG+CnpOQ99ftkG6T8MwbNypdQdezY5yVMZlLq8ZXGEfy9efIPM9
/fYIvEG4qdMl1yQp6i2ZN1z/WenMx+lhk2zbaf/McJk1K4aP/nBfk5zk30qP
fnWZ7VFdVVY7+1t+vyEp6qk8v7kv3kLcyzAcuiVFW6kvHqkYfbqh+57aUe03
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
YI3az/On5tGaVaOfHnK7qr+eIu5H+KFqyGqcabz9Dn/C3/CrfrdkLlqp37Oq
xhyiuWNi1YhX+klYlhnz4Gnnk/zPyHyn98zlC/cz9bfJzq8+sh8StD/Q+9sp
0d5q9+Xup+qv6ifqH5KT/OfwpVF7q92LVo1+pf71L2xMjj6q8mXHHv12xrUU
FIdiVWOOng3jYE5K2Ch/yC9/VI14pU9ye6hfar7TvKf+WcLts87zdxePcc07
DyXGWL/e/Ur96SHPJ5pX+sFq5piVsArWwDbYDjvgY4e1l//UcW+qD8NwmAtH
tU/zWcAPGbEn0t7oTXhPz6DEnYCfdD5pOZ0d7LH8LGRmwzytV3DM+qT3+4yw
QTZugHVwKTZfBg2gUHNGRpQh3UcyQkay62FtUjzn7beMZDd7j6W91VbvgXSv
+E1JcYYke2TXHNs0z2VL3yL7RH6anxR/t6S/X2oGF1YNH620zbL9Hftvu/Pu
cf0P+PlTth23j2SjzmR0tqMzBZ0tvGFfKqzzBfnmQu9N5MvF5eK8SOdGx88P
PTrT0FmGfP6e80vPUmhi/8mPt8JFFUOf9Mr3OlPT2ahsalQxztF01nXM7aGw
zr8ucty72rO5raVf+ZRfNsgWnT3N9bOSnh8bWfd+++BN95eZrqPO6XQWpbOz
lIrxXQp9n6KJ7Z1s38xw+8hXOg9bmBRngLJFZ2rLbZPOYHQWU9465Xvt7WSH
yp+G7ybCOzDVV91Pgnfdz9XfR8HIclHGQrel2n82cVmMq5nlYmzoWVLPp3rG
1D7zImy+Gq6CxpCIbBnN/8gugKdTYs93E3TWOpAYe0LtBUclxj5M+zHt87S/
U/wQzUeJkf444SdSQo/y65xQ54U3Qzf3S5V/kfunZAfAs86jPYL2CrJL9mjv
Ocv9vpPlnrGNT9tOhbU31VzzWErYsBRbXk+MPNd7jyGZDimxX9K+qa3XNa1v
rVJib9LVst2sb6nrpLq8lxh7MO3Fanq/sTwxbJCs5rel7tv3cn9PSuzlrrZu
7Xcuoc7XwAC4r2rovcl6pL/Q+/0L3Cfk237woOs20PdD3CaX+nnhQo8BzZkb
YRBpD6fEGej5XKvCV45X+iNcB6fEvKT5SbLtUqJPyD7Z2RBuTIk8g+277JTo
X+pnc8qFXumv5rQNnmvWWKfy3W+fd3A9nnAbqT561uhrXw20nOQfSIk9rfrG
ZI8ttX1/xz1hXXM8Nz7jvqF+rP58NrxeLvTea58NdFnvem64xz5S/W50/ftZ
vr/1a45T+QMcp7Q3PPf1d78f4rqov/X13z/fBXfCjYzpZ3WeBbuhIDnOv3SG
o7OrK4jrBN2hB7wCL8PzMCoj5k3ZK7s1f/amjDtgEPRMjHzKfxvcmhHnxppz
lEd59be7j8AT6sdwNTLN4Uq4GzpDe2gHN8FrMBbGZMRZ74vkGQYvwQuJET/e
Z8CjfS6iOVXn+jofuYg9xcVZ8Xfo+vvzDqR3hE2wEbbADtgOW43CK+B9mKGz
geQ405pOOB8ddbLi3Vy9e3qr69oTPpCfsOmpxLBT9nUjXzXka+sdL8J3E9cL
ntU8lhjx1eEB0m6D3ui4C7pCF51DU+bZyWGDbFmB39+GlSmxF/slm70g/AaN
9NsVHNO5POzJDj8PhvPSwt+ypabLVNkNiZ9P/DtwAeH7uN4DFxEuSIu4ulAI
jaAVdixMjDzKq29NNHe5Kq+p21Pt2kJrrda7jIhvYT/tsN/lryHoqYiemnA+
3Iv+nKywU77Tmdkyr1vqS7Lz7cSwSbb1tj/kFz1vdrHvOrv/XIJMmt4Lq4CN
+jtKbPzSZ4c6j1cf+dFrospqlxx1VN0apIXf5D/ZKfvuJi03K2yUrXe7717h
8dKM+Euy4rsJ+l6Cxkhfzyvag33kPqa+tQYaINMoK97r17vOUylnGiyDxXAA
G8/NoazseEd1cmLIzNOzJDwIS2AF9Pd1IAzwvdppgWXfcb6p1n2/4+fZp0qf
4vIlo7JUdlmomB02TCJuuOWUvttzyaewMCP63tnIf+c+WEhcW49hjeXCrKiz
6qr3uScStxN2wSSomxVj7GG/z/2p0yda/7c643UZKqsesvWz4u+o9e684pW+
GMoQno6NI2yzbNfYrWdZjWH15UX2kXyltmiYFe+uq02UNt15JXMzdPGcp7lP
88h6mOf5ROPwVzgBJz0mf3O4YXb4/F6PMY21JpTVNCv+tlV/D6y+eSg7zrnV
R7Vn135H+x69g3iX5w/NI3faDtlzl+/Vx9TXlEd5P/RY2+q+1w+ZHnAbPJAY
Y3CL5TZkRL940Dbe734xz+H77INJbvu3PI9pvnve81kP973eXg/6+17x/az3
Qcf3c9pA+1V51JZN7IsCj6WLPHdrTN1jHf1sfzuvF5rTNbe3cX9Tv2sAX2fH
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
xRlRnspdnx6+uzD5/3/7VTbJNskpXTbJtiWKTw+dHaxTumdr3wCvw4yM8GEr
2yBbbkiOPaj2nvr+qM6JdGajsxrtZYpQh6JQAoonxjtaWr+1jp+TE38zOd1n
Nmp7fde8X3p8A7i921Bt+QrsSI9zoFnOqzJ0RqOzmrkZceaksM5vdPYxX3sU
X+dkRF0qeK+p9/j19wWvu34fo/vF9AjPyoiyFDfZ/UP9RO8Q52FnbagFNROj
7W5KjjVSbXiJfSJfaE2ca5v+s0Xn2jrfnmx9U2Cay5hsO2fZJtlbwv77g/Xt
93LRJ0f4DEu+m+r8M9yH16RHG6ttV6eHnbK3KTROjHPIJT6z0dnQOYzJdCij
OQgyoDpUhcpJ4RP54SV4AW6mzFuS4yxX59/ad+ubf1qjtFZtRWY7fARb0mNf
pnvFb3Mf0/5S+8zN6dHPL7YdKn95evhU40I6zicuEcpBqaTIo7xzPYeMt+4t
XvfvI1+v5Hg20XluOefXe3N6X07j/rn0eEdT4/9OZO5Kjueg2533ToelQ/uS
N73XeMv5lF/7qFH2y2DvK+Sf83JiPtK8pG9pN/Pc0Nu+esGyT1mHvuusM3ed
tetZVmeVOjPVWanOLLUX2mnfTfB1q+ut+1fTo83V1o/btwtgYXrsi1c5/K7b
Yr3npLXOo7lBe9pCzxFrna55YZP50O222fPqB+5jazwuNzgsWwZa9ybP8w87
vNntVcb97Xy3p/rSfW6rbm6Le5Lj28VqE/WdZenRL9Qf/qGvNGAc1CBvdlL0
g0/sI/lKeyTtlfTdRP3+ssT+WOo6VHT/Vj+/PDH8ssx9VP65x2tOc9uw2vUZ
aP/KBvVN7evV51akx/hXn5WN+o6Tvo2kbwvpe0Tapz/pPqS9rr67pe8D6TtB
+v7Wouq0DwyEe33V/evQGz6sxn6qesgp/Q0YAxmQCkkw3fG6v8f3ik+E+TAb
3oJ5Ds+FBY6rBPtgL1SEMjUiz5lcz4KycD6cB+fCDOtXOX3gFJyGIqSdUSPy
zXdZpQgf4PoFHIT98KZtmO+yVJeXYLTrNNr3L8JIX0fAKN/vxx8fc50EGwnv
qB73ij/otE9gsmWUdyV8ah2f+v592AMvwwrHSfZz2A274LPq4QPVqTScAzut
X+XssA0qZwJsIvwq1+HwPDwH42B89Ygfa5tk20TnmWCZj6pFfl3HWVZt39t9
YYb9PdH6xjnvvzDTfpU/z64RcWXcfqVtv9qiJBwj7Qc4At/AYcr4Cr4jfLx6
hKtz/b56xImj8K3Ta+ZEHoWr54Tcj5aRbO2ckFVb18sJuW8dX91pkj1gmV/g
JPwMP0EWVJX/kf0kJ/z4itvpWdt8xH1KOmpYh/LWtB71yT8ct9fpkqvoOKXl
Wf4zt7XaVG2bUCP8KR/+Uz36vPr+YGx5IidsVl+unxP10/Wg5ZSewjXJY0Zj
R74+222h/qNxojKkW+NFthTlWrxG2KSr7ku4rY7av9+4viXcxtKrdNkl+8rB
o7ZFvinr8fqjdR6zjvNsW7LzJLmPqG8k1oi88m+K7T/i/iLbU5w3ybLS8Yn9
t839epfHz0bHbXN4A2yFtxsw9mEcjIcfC3neg9/gp8KIV/pcmAQViKsIGfAN
919z/Q52whFIg3SoBtmwDMoXRj7JKz4Rijl9E3HbIKUh+SAX1nNfiWsOnCb8
DxQlfEbDkJN8Ma4JsKFByCtfTcdJXvn+hTLcl4ZS8FeD0FEEkiDV8UovAcUd
r/TD2HYI8qAGVIeavuq+AOpCI2gAydDQ8bpe43TVtTQUdZ2TLd8UUnxtApf5
vjVcDYXQCq6F62BHfeY4yLRNsqUKFIFzoCz8Wz+uh7j+WT/uK3FfuTDyVXHb
pbud1IZJtklln2s7ZW8pKAklXEYCFLfMOY4rYbkSTpN8KfrUmZAJh5iXGjeI
/qR+VUD4amgF10BJWILcOlgL7xiFP4RV1WNtVHhL9Vgj1W8/gGUwDdbksw7D
PbAaNsEGWAcb80PHh9Yzx2PhAcrd5HHwoctb7TIUt8llqKz3bYfy7nG5y6uH
3e/a9vWwWbbAYtdhlfOutcwal7Hc8uusQ+vcCueT/JnYVh/qwe+FYWs/eNA2
C4XvaxA2apyeaVmN12KEG9jP8m9/GKRxW4v2rhV6pb8RNIQW0BJWkXdlYcQp
v/Rc5bZqablrXKbKXm5fpNcK/bIxq1ak3d8g6rjctvZ3nNIya0Wd1A5a25t5
76XvOOqby8on2exa4dN+tr+/faAyFPeAdd3vNNVNeSYz55YgXzH5mXDR6tEn
1Re/hOK+L2qZ0sRVqYl/oCThjJpxnw3pjt+s+bVapGdy/6nmWahaM647IK1m
3J/SGgIdoRPsrhHyypdVM/RI3ybN99Uin/JnuLxc+Bq7voIyhO/m+nu10Ct9
ZxFXFM6E0rIZSjlfGcf/RZ6C6pFezen/ap3j+hnXz22X7PkG3UeqhZzSb9Z6
xrUsnAtnaw9E3HYoQ3iv80vPHvheaxosyaUfw1T4mvuvYEpuxCv9BLybG/FH
YFpupH9L+DAcgm7QHrs7QHe4pXrISf4oTM8Nv8ke2SX/Sa/KU7nS35XwKngf
WsE+WF4j7Ja9K3yv+AOSI88x10P2r9R+2XJKX+B7xb8HrWEeLIV2vs6znNK7
YfOtcCPh72qEH8tyn1M9/HnI/r3Z9S1OmSWgGBSV7+izh3RWQ7g0lILT3P+t
M7nciD8HznD6Gb4vC0UgEZKgHJxvylmP8v+p83ud7cE/OVHmYa7fwMOED+RE
funZT/gurnfCBMLjoQN0hKWwCE7khP2qxw9O6wJDLfMM8Y3gJ8LtuT4LD8D9
uZF2J/G3cx3JdWpOtHM1fLUzJ9pbdh22T+SbLOIqQjPIgfugEnlqQA/CLaAt
4TbQXLI1Il1yT8FNhDtDS2ihMGXdUT3iWzhe6V3df9SOas/Wbm+1w2n7UL68
hLhL4Sq4EgprRPmyo6PtlL0ZcLlJg/LQBBo7v/RcXCPilV4BUnNj3B1zP9X4
2wBvwyJYVS38Kv82zI22OJ85/GK4BA6z/rfB9iFwJVwFN0OX6tFP1T//Rsdu
+BT+gSLEn+L6F5xRPeI/gX+dfgD2wWeaC5xX4V3WoetO5/nU4R2wBT6HrbAd
tunZ0Hol+yckaI21Ttl1GgYT9whcDw20dkN/rStaJ6pHvlO2W/n/su4HnF4P
6jtvIRwj7Xv4FX6DhpZRWiO4GC6EC+Ci6lHHz2zTHj/T7rcP5It8ZOpCHajt
q57hS/tez05nay6H7OrxHFXV4Uk5EV+yeqxZ2V6TtDZtyon1q4TTizvtc/ty
q/2ncaLxouc0PZ9lW5fWQen/wv7f6bbRGqjnRT03TsuJfZqeL/Wcech8ZRnJ
PlE92kJt/7Ttkn1KU/7P7IsvrP8C+6+d5sDqkecxt8G11aNPqY3UNk+5T14O
NzhPE7jMa0AnaFo92uok9HSc0rROdHS/bmYd0tUYLnE7XmSd0t3W9lwDzeFq
aOG0y11uJ687XTxObnFZsuc2p6lubVyWdMuuX6BH9bDvUY1txlUqPJIb+bpa
Z3fbcYPLkv3n+Hkvyc9zQ923j7l/tnL/VD9t6X58veuoPnvaY0Xt9KT7vPIP
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
GgvQh7R7oK/m7VoRv0RzhtNfIW4IDNB7rb7qfjA8aN1qM7WVyvha71DCd7Cv
ZvyuJJ/u9ftCeu/2swrh0wz/jqrfU/Xuybk+t9D5hdapRJ/T6LxGe6fRsDs3
/j+y/k/yp4SnV4v/ya04pRX1s6X2Xcozq1r8T2vJSFZ9TH1NfUh9qaTLVFml
fA6u83CtYyk+t9L51RPoejwvnuNlk2x5OC9kVYdznedsP+sr7ea8yKvzsm55
oaOYz2I0F8jGEj5LKOU49UH1RfVZ9d1BOfE/I/U/IR8k/L7euU2N/9E9u1rE
KU3/N/KBnPhdQz7f4/fF1Of/r++nhi795qDfHh73+yWprrPqqvVYY1xjXXOA
5gL9RiKd0qV3ZVSmypZP5VuVqbL1PyFb54Ru5XnS77KU828N5d2ml+bE/5DU
GNJYUtvLJtmiPiAd0iUZya7Vu3cpUWfVfb3e70mJOKVpzGvsK05p2id08pqq
/cIsj8/ZHo9HoYvGBhyB/pQ9HsbAQBgLQ2AwvKb9T17IPAgPWHaCx5ryTHJc
f8tOhmesY6zn4ElOu9/5JjvtvzJVzjgYAH2ht2Xvcx8bBN3dn3rCvRq30CMv
nnP0vPMCPG+52+BWuMXzfI7XhHud9pDn/p6uV3/bMcDl9nNdVX5tzy+q8xTb
Kt88ZptHeW15yHaOdtwg2640rT/ay2vt0TqtNew52yzb9Lyk5758j9lK1jHa
ekc6r2zubDsm2beqs84g9Jw6PC+e7eST530/xbaPd54Eyyjtadshe7SWvmIf
d7fvutk2PbPpWecM61RZHZx/jNvyNftQ89738IXnv3vt+y7/02a63gV35MW5
is5XBsF4Xx+Bib5/De6EK6EpjPB6oHVhuJ/j9TzfB3r7uVzP50NhCNwD98kO
6Ov4F+Axp9/r9AfgfqgNhTXjOSPf4+Q2+NbjpbvHz1GvZ31cRl+Xr3Mdne9M
gxm2W/Y3gAugvvWrnOpeNztAG6+f97jP3uv+qedMPePp2U7Pvw/KP8Q/qn5b
M/rZQ+7X3e3X3h5Hd8JQuNu+vt2+72KZ/9rgLsve7nFzm8vu4X5wq3X0yovn
cPUv9SGdJfRymsp5Mi/Gvca/zj2u9zjReNFzq55XX7D9D7oN7rb+HrZlsHVc
7zzdbIPKecJ2d3Hfv99xvVy21ic9a9zluU/PTy/kx/mUzqlqem58FYbnxzPT
28yfc2Gw3mmEp2AgdIbumt/hXtJvhPurBfMJD1J8tcin/HPgFsJD4Rl4HLrC
m8T317uy8EZOXHV/n8vqBK3hJugIN0I7x+u+FTSBzaztJ3NDtg1cD9dBe+jg
PDc6Tmk3QFvrbe34LtDCdbsWmtvGNpbp5Lim0BKuht45UX/54UF4CN7l/h3Y
ij3LuL4IL8Nyv+P/Erznvwd4BXLgWss8By9ozYSn4FW9/2wZyeq9/9H6u1K/
//+0w89ZvrPbZ4Dr8J7Lkw2yZTHM0N8K5ETbDnJ7vaW/Z6gWyH7V41GYqT2s
1tycaKtmrqPq9mFulDHAstco7L9X0N8t9M+NeMk3c/pU2yu7e+SEH5u6DdWW
faGP/Ar3wARYCGNgu/zJdSm8Uy3e63/b4cXV4h3/W+E2WK5+B5vIsy434ufD
eFhgnRMs1xPmWX5jbuSR7FhYAldg5+XwLuGX4GUYBs/DalgD62ClbVjjeP29
wRzHa2+ivdGb1eJvEpQ2pVrolG7tU9Y77xLHrzMKK22t++h17rvd5FPyXZcT
dVBdfsb2X+A5wi/aj/KrxsZPuTEGNRY1dm+2jyWjtBNwt/2vdrgT7oDboRfc
5T7f0jJ3O/4Kx99tP8qWHrDCea+0zH86ellW+mXnC/bls9ViXF7pfG1dTkvX
obd1q77X50QZqof6fAvXp63z3mH/qO3X50afUB94rVr0obfdDs94rL3q8fWs
x98Ix22Fjdpnwg64GNpCQ2gAFaEG1NGzJbTLib/p0d/93AADNJY0x0E/SIN0
GAhNoI3jtU9u7Xjlaep06S3Qc6n16z1fve9bAco7XNFpisvwveLLOb6uy6xg
0m2H8mdBCiRDpucZzTdVoFJOnEmt8RmEzh1U7wugkev/sOs3wLarno/kxLOE
nj2658TvR/od6eacmCtvg/Y5sWZ0g1ugmm3v43TJaW7dkRtttsFj5zPi9uTE
313p7636wj3O19u2PGYbZIt+s+riNlHb5EJX++Z8+6Ku6zHQfh/gNmlj2W62
TXket/6HnOdG16Wd27ufy33QbVrX7fe45fV3YRNhTE78fdgFLlNlXZYTfTvL
baE+vs7+kQ3qg2vgImgBq3NizlefVT9+0nkyLbfabay2Vp/dbBRWP/4wJ/r2
Bpez1nEXuwzpeN/pkluVE3O31p/dObHmaM3S2tUqJ9a3cbDS+VZZZzf7cYfj
pEvj6iPYbnnlG2W/THT8KOfp6nYb7rLUR9U3W7oNNSa2QGVfE13vzZbJsl+v
cd3lD42thrb7WsspvZHbRG1xia9qG43NS11uinW2tJ/kL42FC+37ZPtR/rvS
OqWr2f/olK7GztfIchcahbXmNP+fPJK92u1+keWaW+5Ky13uejV1HRo6rpnz
ao25D+7IjXGp8bjY680ar10rveas9Zp1WGdlOu+Cr+AX+AlOwM++6v6kzhX0
e6VllPav41cTv6p2pCv8N3F/1Yo4XXX/j84QdBZK3BswD+bDEeKO6gyF8Lm1
46r7Q3AManB/E3SGavARcethDWyFl9nXfqkzl9rxDLPB6ZLbD7cQ3x2qQmbt
kJO8yjqrdtT7oGX3QVviWsP10KZ22P26bZX9OnebRfjN2nH+VsR/azqO+2m1
428Ux3J9TWXlxt+Van+qfar+vrRStdhvad81SufZMAHGwGjlJz2pWsiNsp6x
lhlvv8l/M2F27ShX+23tu1V+T+gB32Lbd7XiqvuNsIvwFq4vwlB41eVqv6h9
o8p/wemS2wZLyfM016fgPcIjase94lfXCjvmwhzbo3le66XWKM2p5Ym7Fm5Q
3RxuBTc67qX8+H1Gv9N09W8DL/q5Rc8rhfA8PAP1fX0uP35X1319dNSrHTLD
zPPOp2f6p7k2Jv0SaFI78r7ocupYVvmftW79BqTf9PQ7n34/0m9DI/LDzq5+
bhrheD0/jYGR+fEblX73GuXnKz1n9XX8SMfrXueEYyyr88KurvtrLvtG+6et
+99FtcN+1UM21vXvL/odpg5kw621o5+rf+vs4FbH6wyhG9cUSIau0AWK1o6x
3pFrCd938RhLtnx5t1d3j78aHkPyo35fvcz+zKodZUh3LY0JqAI1IQ8uh2a1
Y97QfKHfQfOhdu34Tae10y/3mKvt9LquX03ry7J+/e6o36f0O5V+f9Q5Q47L
0nnDf3Om5jzNfRUhGcpDBoxlTD4PFxNemBt70hEwHEbCx7mxJ9Fe5A04oL/h
5zoTZsDO3JBR2iT4IjfiFJ4I46rFc4eeZbblRpzS9hPeA69qXMMnhA/mhk7p
1lnqdO+Th9km2bYXmX3wGezydYZld7tc2TLZZeg61XbrXs8g0xw32bKq2xTf
v267ZdvncCg36jTRaS96D/+s/TPctqker1iv9M9xPfRcpecvPYeNdV3lE/lC
ddZz0WrnkQ3a4y/1nn2F41d7nZrjuGXe149xmSpbvvsyN8pQWXpm++/Zbbzb
QOXqWenX3HgGec62D7Ndr9pmlTPbbSDZLTC6WuQZ47LVJ9Smw1zGOOuQzGiX
/bz7WbLncM3larsDbrPP3CYH3Kby+WKYqf4Gb8Mc7YdhDMyGBTAP5uqZFV7K
jff59V7/i7IHRsBwp432veJHWs9rjtf9xNz4foG+YzAKTsEx+F6/q9iG1/X3
89jbABpVi/239uEXEK4JtaAeNK4WcpKfkRuyl1WL/Yf2IRdZTvIFUBfqV4v6
qt6Fjpvnel5aLcalxudzuaHrO67fwhE46mdctenPfp7d7vH6scfbNod3ur+t
8fmAnvk/cNxO9/GDbgO1xV73///GmMbWp5b5wuPiS/tJ/vrO9uiMZKt1b8iN
Mx+dyawivDAn7Jb9h+Gb3HhO/9V1UF3W5sbz6zrbutn971fLSrfOmta4jA9c
l40uT+WoPJ39SNc4/Q1S3XjvT+/7nenfpG72WeKZ9djHFLAng1KEm9SL/1el
/3lyKeE20AEaKx5OoeM4/AZ/QA/yjYQRcBs8Aa/Aq/A0NCdP03qhqxlc5XvF
t4AnkbnLeZRXuk/A7y7jbzgNf8Gf+ltX5+tg2+4siP+po//ZcwfhofBUQeiV
PuX9F/6xjpvqxffw9V38hvVCp+L1O7V+B5beznCB6/yK7ZPuYfCMy3jC9XvV
tittODzrdMm9BI/Ao7bpebgG2kBbaAnXQ2loDdfBeQXh1zaWVbxslG36rfp5
6xrqsp6y/l6uc1vrbGX9balD+3rhN/lLdtb1/xiSvZfUC5k2bt8ziTurIPwu
u35zW5yjv3EsiKvSz/R9C7dlZ7eJ/JTvb4IOs11324dPuq5/uy1Vt7/cNnov
QG1wgXWpndQ+WQXxzU19xzWTcAVIg/KQCg9Cf7gduijO9VWdykEOcdULQo/6
QTmnqd7nw491mDugivo113SXId25zqO8Klt2JpMnBZIgEepAXciH2o6vAmlO
V5+/xP+DQXX6yeWp3B+gInrLwfmQBGf4XvE/1w1dlaGsdWbDDa5jqn3V3OVI
f6p9ozrnuA6pDmdDb+jjNunltsz2OFG7XOkx2sJ9Jtt5//U47FsQ/79KY05j
rxsyN0NX6GK7ZN+Vzn+Xy7rTY6haQfhYdlUtiL6l8V7N97fAvXAP3Gy/q+27
J8d7I0q7H+6zjOqp77Gqj2TZjymQbH/e7fr2tQ3yTS9/w1V5KxfEN1T1HddK
hK/1OCzwuwytPJ6uc9pO+Fyw994NnxLeDZ85raA8+aCB3geBXU6X3BZYC9th
G2yVLdS9N/SHB2GfdUqX9G+z/CbYCL/ABvlNYxM+gr0FUc4Wl1UCvxerFzZJ
5g/4AvbDSvpc6frM9fA+4TJci0NFys6oGzpUvuz4OD9074M9LuOnutEvT3gd
OEk5v2tdgF/qRb0vhOau/5fOLz1fw3fSASfgEPwIhwtCTumyQ/b8ha5c/V0t
OipDHuRDTchynNKOOb/0HIcXyfMSvAzDYJ399YvL/Be9Cej/u16UUd36pLeG
y7kYclzeEfIchW/hG+uQrgO2/1unn4Qf4GPY4TqetN8T6kWb7HHcT/aD5C+h
jEKoDxeVj78lVj9T39O7OmrH4lDa7bnH7bvb7VGE8D9cT7lPqK1fcJlfWFZh
rUXFHFa61g7FKe+/8BgMgb8K4n/Q6X/k/Wm9/zjtuYLYJ5y2nNKL1ov8/9gW
+foDh393Pq2Bzzv/eqdLTm2jfn8T104F0f81zrQu1PV7RPq/Mvr/MiVy4lvV
O/Kjz6ufqn/q/wKWdZq+X33A7fOb+7ts1Ro93DbrqrVPddS9fKu1Wmu59kL6
NuIHsD4/vpF4Vr34f0X6Znw242WDx4/G0bo64QP5SjJnuZ2kU7q0n/pvj3Da
+j+ijs3U7qqD1nWNwXqRV/o1r2h+Kam1hPtF8DYsh3frRJs9Y7vVnpIt7bJK
GumTXuVXvNqsjNM+s7zyaY5Zbv2bYKNt+dttK5tyPB7UN7M1TurF/8fT/8mr
QfhIfnx/WnOo5tJv8+Mb/opT2gri3i+IeW+NxipxX8Jx+AlO5sf/LNA3vX8h
3A+Zt+FdWCz7YFlB6FH+lDrxzXr9j4NkrZ/YkCE/w1PQC+6FPnArrCbPKlhi
nT/nxzfEZaNsvdPyyncHfJMf8bL9a9v4s+OUJhtlq3Qo/rv8qNNPTj/hOv3i
Oh53+GfLqO5bLKe04ZQ5AjYXxBx/R53QeVS/2xM+ZP2KU1oHOKg1QudRdQKF
t+u8SPf1Yo+SDt2hFnG1td8g/fY6UY7KGwlnwP3ezyiP8o6C5z2mNbYfhycc
p7RXNJfYZtl+LD++KapviX5hu7+zL+Q/rV0PWFb1G2k9RV3+To83jbut+aFX
+ofaxiVuvxkwpSDiH7cOpW9z3ZX3o/yQex0mWX4OPIRcf3izIJ5TFsGggnhe
Sa0TfUp9KQ3mErcQxsFYqFAn/j+C+pzkDlDGZ7ZZtkvXLJVhneXrRB7JSveH
yOzPj3jdL7Q9c1zG2fViT6q96Hlwjvd1ilPa5vzQkWr70mzrSfeh7ui4tSD2
TdovKU1jQ2NKMvLdYO3D6oVvdtmeDz3HPWT734CBBbGX1vjTONSeerv72k77
eKvbapP93cd96DaPt/fd3ts95te7rM2eT9c5vMV9ZjIyY2AUTIe7PRal65Z6
0Y5Kl9zEgvC7/L/L9g+qF/tP7UNnFoStGh8HbPNGl/Wl++cEZOYXRDuPdb0f
8zwx0H3nNZepstVvBln3m5aVP+VX5dFe41p83gra14kxpnGqsXunx90hj12l
tYX6UA8K4dx6sbc/x+19kcduebiwXjyD6pmoUb14zqjrcK168cxRr148y+jZ
Tc8i9SGvXux5tdeXXTf8v5bOLbaqKgjDAomXB4OiktPTqoEIKbSWffbepaUF
kTutEMSW2mKFFhCUCgpFJAgqiNyqsVYj4IMYEyzeEp9UIEg0YkzUeI14A9FE
fSAx6rOo/8f8D1/2OqvrNrNmZu01aU/FbV7fTNEsmsTcJOYpZhFHmY+YTmzn
HZ935hrPw7i1WdzJuDvzf+YmZgFlzgTOBuSqFhMt337rc5/3+KjjOXH9SBrr
nmK5EstV73EZr9X6arEMFY5VV1tHPMstA585C4Zbl1dat9yfrreOl2jOTWnc
G7kvUj/GPsfPuTtwjnEX4A5R9HjXWkfUc1fgf25wDy33HMO9BvIc5E4u3PlU
Tr1HyIYuF0qGWd4H9F9tmaus+5Gem7G5h07wz6u9B9xBuRNxF7rwu/RprIU7
DXebZbYf7AidlzRHKsaJsUnYRbXnYn9H2H5Y41NZ3Kt6vU/sD3Gf+L9X7HGb
zHJR16Mx14lJYrKo9FyJqBL9bltj+9meRh3l/jTOmT6PzTtoXRJn1ir7D7by
kn2fd4C7HR+IE8Q0zoonsjj7ORu61Gex6BZL/Vzsc5OzcsDt6cdZtkx1y5Po
R/uN7kPbOy0X8q0X9Umss99ysN5G1U0V08TNSdyDeadgndyH3/L6j1mnxDVi
JftEfJtBvE5iHPrX29/r7APzVNeWxD6OtV7PTYgzHf3W2i7wdfS5y7aK7e/2
c4T3jc/rLe8yy4NPDlgXxN9e1W3wnIssF/L1+nO196fOPr7X+9vvPZyuujVJ
2AX2wF2H+xDv+tydPnH85xzj/GrUu/RksVTcJFaI5aLLdbP4Ow4xXywQnXnY
KLZ5h8rDNM6r+DU5PJU3q+4R8Sh/+01bsUH0inUiFe1irdreK4YV9R4tKvi/
suIf7n2ap1b8p/IxjX1UHBFD1e9W1beIdnFZMdrQtiSG6PNOtdklnhb94kP1
+1LcpfJJPT8VP4kfxff4ltb9uOgT34hxGqNW5KJSfKA2t6hvkxjDd16ozXfi
tDhcCrmQ7xkxwPrEQtEmbhefq/8ZbFJt7yfPkMTPFvG37UnoosX9aD8vj/cJ
3iueVPkX9f2Z+KO+k0S55D0hWc+KYlnoHf2/gu9xFqrPHNFnHZAXID9wlcpD
RIX6VZRF3+tUPqQ+Z0rxHWB8r9dJ8XEp7kncjyZLB1NEnZhYjHGOeS8Yb7yo
FlViXB55B/IPPWK1uFxzXFMIO8J+cut3jBgt5vF3CoXYV/azS326RapyjZid
x3nBuTFT5YtVd1Ex7AZ7Oa+2Q/W8RIwUC/LIh5MXb1Z5i9guNkuWB0S9ylPF
JHEjOte8rYUYh/6f2T6wk4/EKfX51nvO3h8npojD4n2xSnVbPQ/j11lfjaJB
nFCbF8UL4l2xVu1qRB3f1eBnjXWXiQb7Y6PXmNs+2u07yIE828TsNPwC/3hH
vM2Zwnda5DHPGvshn++zP/ZbnlPOz2A3b4iGUthPl/2f3NjfafhVKi4thn/h
J9vE1/YXcjLkYFrVJ8ljH4Z6j9irKtsH7RL7Ef7E3swSg9YPenpPjFK7WstK
fKgpRDwgLizS82AW74+8R6LTN70fx62D6erXLZaIaY4z7fatTUn4LfZ+yP57
D/XiQbExj1iwU+wWu8QPWcQz4tpXKu/w+MzzmPgzifhCnLlC5X+ziD/EoeHq
36PnHsYVq/PQM/rGr/FncqjE006vmX1FfvTA/pInI182SpzPIg7Psc/gO9PF
DNEsmgqRgyMXt9gx5hw5OvGX+IM8l+b8Iou4RDwiLhGfTouVpYirLfYJfKMj
j3wPeZ+OJMZk7M4k4tfvHp95fiuL2Eb8Yx203S8OiGcdI5u93g7RVoi8W61z
tuRuiXPEu7Oiiny42sy1zMSQVscH4kSLeLkU30n4nNgnHlLdCrFVbCmLcZAX
uRlvjsdrsg7bvBbsDPt6Xm0GSzEu4231eEvEw2UhB/Ls8P7z3ZIHxeviNbEU
HYgO9yFODNq2iRfkWMnFotMOx2niNbFtvthte8FuTmVht+iUcwP7xc/wN3KX
59KwK+JZve2rshT2jF2P511Vz7F5nF03eO+wj189P/tO/CKOrbTd94g9tv8O
y4Ou20Wlxxttm8QOGJOxsA/0gA4PWB/E/hGF2Ef273/cflYu
            "]], Polygon3DBox[CompressedData["
1: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
tayfor7+wHH8hRO4hwcYhfu4W9TKrnPBFubrzVFWD7/ikNeH5vBYLEm06712
aIvOyTbmNPZ+x1lEojhKoBRKohiSkeTjSWNI469rsvXVnslWvt7eLnrWsNbP
j2qjWM9DGvVeDS/H2xywE7/6uNZ8oHGrfVUJUyXG2kvn1BWJ1pffZPmGrvHD
bfxpHGrO1vnoBcIGejlf9jngHu2ej2U4YvAwzsZGl2Q7vy/xOngQZ3NISLyF
13F6tv18oo3t5+LtObfmQp03BsTbuUDnBM3/H2TYnHER5Vj/nGuK11EHn6ET
YhLteiUJgYhGN7Z3iLTn7G/oWZ2eeerZI0Zm2DXe2Ay7/9J92E5sxHq0ImzL
SHvGXsWvY+aQ5wkYj0mYgZpsfw21Iu1ZvML3I5/90Qe90BcN2F4/0p7X1PW8
7yOdXdjtz8c36Tlmkj2vvICzWIp3/Fmjnru/h7fRkzg7oys+RIui9px9jd9P
bvH4FpLHBfgS8zDf1xcl2NxzOc6263z3I/bjB+xGe9L5GB/hE3zqtK760fVd
20jL53ndF2KZ51nH1Ii0+mnpxyjP3f26u4vnX3X5VYLlc4rXax2vo47efmrj
NmiNFh6v4q9F243y63S1Z218y/HrsRGbsSXBjlGdNfG20vEN8Wak1e3bHu9o
v87X89xJ3jeWcfw3Cdb2s7A0wep4s7+3oWv+H3z9sb8/8YzfB0ygHsZjnO4h
MRlrOH65x7MEa/FjqN0/6D7ie5Y7Qu29gZUJFn6dv0+gfqzn2n087+rTepYw
N8HON6fi7LlCfd2/4HdcYJwPwB+s/5lgz42P+zP2WVwXTsFUzMDMdHsvR+/p
TEYzNEUv4uyLPuiNnthAHg+GWh/e4mOmlodvjto+HlrRxp/7exqfoWlRa5sN
CXY/pXuoTQnWNurbH3gcikt1orpZ589GVM+dvD9obHdF90h7H0PPOSboHsnz
r/eCjlCeo/jc3xf6hPpv6+fPCd4edTJsThiCOMRnWP3qPYRePu7UR8oyF5WJ
t2vVEj6H56MegnVvn2jzj+acVl7G5ngf76I0cZZCeVRGReRNtON/xH78kGhh
yuAVpKCgrud13sE2bMc4jPf1bzEGo+PtvkT3Jw/9PHIjzq7DJ8ZbHON8Xv0K
i3U+xJp4u7bUNbKuaZf4PoXR/d1uX1eYnZ7ejnibyzT/Ku2CnBsKIxUFUCTc
5ukLKOBl0ZytMAq7wefYQqx/QdvMxhxM87442sukOb4nRsXbexnTMAPbE+19
jfbE/x7xNkUFnSN4XZew9ZQ/1EedeLt/1n30e2iq80m83WOM9XpT/D3j7f5W
758cxK9+rzvgf+p7rJ+TGvk5u6GnpTST9TwU+b0OUsItb+/4fUtpb/MR5HEY
Rvr1xfCidk56w+cjzW+bdO7n+Dgcp55OII31isl2vVwl2eZnzdOb420MdPHj
NuJnvQ+k+QC/4RdfLxRv94BX42y76n2WPyupS9628fow2w8mWBy/4pA/65iW
YPv0egz+Zp66jX9wHb+hpb+/1wo/EdeudIv3NdTE9nRLI4H1Gng1w8aexlsV
vOfjpZbP4yqLytTGz0HLfQxsxV7vh+qP6xLtGnA79fE9vkuyNFv6ebEa61XR
P19AwFvUYxO8jX75LJ7GkfZ+sc7NirMtx3yC3n7+Hqsl5euJT9ANHcPsfl7v
1Q3BYL+317XuLs/HZl3vIoO0i6IYiiM9w+7lNPZWx9u9oq5TT9POZ/TsF+dw
KtTyrrqp7vWlcuRHKopkWNyK7yefi096f/kT2wKpH6zEN9iKW+R7FmbiPG6G
2fsieg9E73vcxHX0LkC5Uun3GIsu6KD7J0SgKzpjBNtHYxRGYhBOcX18HvHs
/xyd8A7aIRhReBefohvy+Xbt7+7xdvX9bZFEWQoiRufcEPo++qEvCmlsoHCo
xZsHQQhEtNJiezTS8S3htyGW9QQk+r5IdE+1sij/A9E11fKuMjyLcC97Vy9/
JOI8/6+hOmqgFmqio5dbcajePkMq6RRACvIj2cuk9JXPrSFWvk9QktelUQrt
eH2b+nyK3sTTCz1jrMwqu+Ith7Jo6uVW+V/1fOl4xaN63MX6p2jvddvO22Z7
tKVXBnFe3zqmH/XQWXWB9vgUUeTj3yjLwwaOW48d6Ovtp7i3RNu+np7fHtgY
bfWjeqqLOqiNPl4/nf14xXNOz96irA5Vlyp3SfLdPcTKrbIWD7W4e3sYxdPP
0+rn8ShfmzA0xMquvrMfe0OsTTPhv2hrT7VrXoQiDLm9L4WxPxQvsp4Dz+MJ
rx/hJdazIovXeZAfl0v3YDgazByOEziM3/Amadcj73VQF2/wujLL8vguN3nG
m3qGTPzPEccLMZaO0muFT/Ap2uLjaOtPNVAdr3vfqoQHxHsfFVmvgCK6PsNr
Hl7Hvcv+N1jWD7U8KW9q//hQGyeR3keL0+4lURoZKJVqxzTAZY75x8tUke1V
fL/C5cczXmequ+wxVqaZbJ+N+ZiHuXiWsmRCAPufsszsYywGCQjxuaIdYT9D
D/RCTwQR/mU/5lkft7HeLtmQ6HFEenur/WI97qEcPxzDUm3OG5xq80pRr7MC
Ps66+FzYSXOhj4m+qTZGNC76oHeq5TPB00zy/vTUy6W6ULs+iLZ8ZvZ9j6Ot
Lx7yfpKPc9NZln8EW9upDX+hXxzKbf0kD+FzR1u9Kk7FHez1E+L9WHNh21Sr
L9XRDMxS+3D8q94nFJf63vuE/SDG5g/NZ+/5/KE+3NzHq8btKtLchm/xHdZg
a7SN9+2+Xfsvkv/d+B6PcB6jOaeMwUjkRSDO+b4zKi/+QQJ9qQwy8AqS1beQ
glTURl2s87G9w/OwGf19qTwor/0wAnMwG/MwCuMibKnX8zGG1z00X0VbvIqn
F9JJp0SIzT2lUBzL2P41VuAbzEU38n0dfyNA+WT5DOULwGDMwWz09vlSc2Mf
dPVxrPG8GmPRyfdt9PKt83x19PGu8J+jM8rqHIgiKOf11s3j1TEqU3dU0DyA
SEShPGp5XaZpTkVV1PG61b4qqITPOP5DT1t56ID6bG/g7VLXj1Nb78Q93PF2
V3pJIdamascIjOT4GV5vM71totkeg4JengI653k8t/AvLuOG95PTuOR1ftr3
XcFV394KN/NZ/1Kfaok44ozX+d/TUppvx9i1SLT3fY2BhmxvFGJzoebm19GV
/vEV+VyCxSjP60aEbYy3dAzejLEx0cTj0Zhay+sWvq8VPkRLLI22pV63xkdo
5uNO1w+v4xNtI+3mITZPK0/vh9g+hdG5tAHqowXbW4ZYeIV5L8T26fxaz/Oo
vO71898+7MQ4tELbELtO0LXBhxhCX22MRhjqfbgN2z/26xOFb636QwddT6Aj
moTYHKC5QNcVql/VR3sPr7Q+8rBveN6VL9WlxtPyaCu3yqj9GmefEfa1EEu/
taf1hPZ8jP9QAeXwF3PlKTxlvQqC8tm46ITP0dnHSBf0CbFryO4+vtUneqKX
xo/3j2J+TBcPo7ngS/LzRbS13yIsxAJfqn+on0yKsPn8gV8j6Fyjc85n5KcF
uqArPs1n+eqKxp4npfWNzy2qE/WdNpgVbcv/6zvKQ29v57c8jk4ej/rrByF2
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
bMyqPP+oH9NmcRG2/MfberTqkdchpDOX9puD51gP8z64w9tK5VnhZVJ76T39
Dp5X9cWXkUtj1PvlHfLwEA/w1POk+aYKKqO0zz3VUB3FkeH7XkV//6xTdQ9T
W9e+xPslFqBWut0D6174VZZ1UQ/vUJb39CwAr+ITLQlb1e/nqqNaut136v5T
99XliaMsarD+mp7XpNpnYqsVtrirF7Z1fb5UnzOtSpzVUB1VUBmVUA4VUAol
0QB1UA9v+jVKCd3n+efMSrJeGo08nx+jJd7yZxp6tlEbtVATNTze0p628lA2
wj7LUtHTVh7qpNv5RfO86kx1F1DYfs9Hv8HzFI90bce+L7Cc/jgLNXVPxvGt
8YrXoery30L2LOEfXYfjb6f1q7hRyJ5LLNN9pt+//4D92OflUbma+X3+Et93
AN9F2HOTQ37+b4y9/rzhVW+rN/y5wlsYp3MFZSmLcoXt8w9/kPYxzClkZVRZ
H+j6ELdxF/d1reNt9RFaoYXqlrA1C9vv5ujeQZ8l3Mr2n/ELfoqw5yT3PR6F
r4Paha3slwvZuvqN+s+vhH0fTf14xfOhp6U0P/D9ddOtvqdT77NRP936gvqE
+n8NlCpsz8Vqej9SfyoeYed0ndvDOC4Kc0PsPnIlVvj1p65DJ/uz4F4F7Vm0
nknr+7Od0QGPqfdH4bbU647ohpxYwDwwC1/ks3nhy3x2/tZ5XOdDXU8s9fG4
CHO8L6lPKZ726I1e6IllPp/p80VLsDjE9uv8r3PzTvSLsHlgun+etCbrxdCO
7X08bG+PW+mp3DGUf1luS1txd/Tz60hPpy5hB2EIBvtYXOz7dH2ia8OvdO5h
+1C8G2HXo7ouLU79F0IFVESlwhaH4hqPtn6M9pcvbO3VhPy+hfHKu54/F7b+
qn5bP8Lm2lEY7mO7MPuS9XzU01KaqeiWap9hL8J6itO65o+CHj4DaYUtjnRP
6zPi/NTrqKO3c710mzPVNupz6ntjI+wzkxMxwcszL8SuUSZ53aqOJ3gYfSaq
jM8NGntlvD6qokphK4/KpeuCEV7n+WjT4Gj7DII+i6DPMYylH43DMizH0nw2
T+m6aJ73Jc1Z01Ko0yT7XbFJrE9Nsd8j1O8S6rcVMyNXov22k34TqmeK/Rab
fudpZwbXi9iNXfgehdIYr+TzGs7hBv4L4ryEAH0uiOV9PM96DmTHc7lt3wqO
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
tVWevJQHobRZHBKwl+37EF6C9kIkNvB6AX5GFK93sgxlGYsw3Of1A+zAVnyP
aLbH4DvfrnXN8SEsF/vxOiYzyyUst2ObH6/w3xa39JWPvMiNbHjI9ke4iyqo
hnjPq/ZnRYKnpTTzI6WEza3K026WqSwL/M8+recoYXOy5l+9Vphk5PR9s9ke
52VW3md5XahOVEfKQ2IJK8MWrMdmL89v+NG3a/+v+Bc3cQ0HcQOH8TtO+b5b
vk9hruA6DngYnV+P4C8Pv9nPyzoXdytuc+1N33cSVz2eHzzOA56n/fijuJ2f
j3nch7AM3+BrLMdS7wMLsae49ZOfPQ7F9Qs2ehmX+3Hrilu9fYG5mOfHK575
/nompmOR71uLNb5d++egTHHrv+qzr6JYcTv33Ndz98I2x2leq838VAtvoy7q
oAJhK+J59RnqpKz3m1dQtLidDyt7mEDaLxcyPHyeEnZPdNrHTzm1iZ+vDuAi
bsbaufYHP5cd8fOH+mtQCYtTcVcqbnNLNU9P52KN5cN+zH3N1fgNZ/y8fdzP
SSdiba6NTrNrqlifd3We1flY50Sd/3TO1Xyo87uuW3Su0xxSEqW83ooXt/N4
mpdf91m65tExOic/RiOvx5p4ify/XMKOVzyqn8uEuYoG7K8fZ3WQ1cefyqk6
z+LjSWPneTwubtc7/yGTxqPH+6KPsRdK2LjW+FZ4telTBPj5RecUzTM/k9ef
8Cxh7hW3On5a3OJ5yetb/eC1OKtTXWOoHBM4t07EJEzG+NzWlsp/vTgrt65B
Xva8lfN+p3IH8zrA0wny+Sizz1/Kw5Pitl95Ut503/FMCSvnYy9TNW9/XRvO
1+9oxto5WufXGUjiHiEBOfCifksVK7n+vobr+BdrUKEkeUMV1EJNtA3iGgHv
4X18gqZojhZo9j/7td4KH+Fd398SH/p27W+Hz9AB7fEpzgRyT4XPfV9XhJB2
AgoiCvmQhF2Ue4/mStYjS9oxndHF49TxYWwvgMSSFk8ePzYFqdhYwuK5Gmhp
KU8dMSfQyl0ZFUtaPIElrdwqT2t8jDZBFk77glDb62oc28d7/aje+mIwhqIn
hmAQ+qAXevj2oV5elTEUwZ7nGx5+AAbiAEZhBK7iOq7pWb/6j94jL8gcxnFV
MZXtkzAZ0zDF41EehmMY+vv6aIz0uLW9n7fz+17W/9vfxss/xvMQ5vnMi9xe
Hz283G09ju7ojbFBVj99vew9fV8/z4PypXZORn5vr0hvey2jEeN1VBSFUBhF
kIYNHL8QOYMZ43gZi3kdwTISUVjE62SWuZCIJMTiIX3/ju5bWU/AMsLNCLLw
Om6F+gYCg+0Z0F8I8ni0PxoxWBVkYTcFWfrZg63MKnucx53saSpfLyEEr6A8
wjyvsZ63/B53HuRFMEKRGy/4MtTjeBE5PI7wYBt7zb0+XvS0cnjdXPZ2HuX9
5xy+wU9BVhcq/xJ87cul+ArLsQUbvYwq12Z8gVlB1gabfP/NQOtza7AWf/O6
tI8X9ZUIlCpp+9U/Z2IeVvtYXu/xKq6tQfbcVM+xKuSxZ5J6htrB9ylP24Js
Pinq/aEtY6IYy+KY6+2i9lmJLzHRy7TY23m6j5Xp3vYz/ydfanvFMd/zqD7X
h/j7ol0JS0/bMpCueaCE7S9L2FeC7D+y9L9YZVifyvICyzM4pXHJ65mBtn4a
Z5UWr58jnslFSBPLkY3Xv7L9JxzAQdQMsjAKe4z0jmASr//w9PR/XIdwDJuw
GXeRheOexRHCLsFizMU4rMVqZCLO7CUtXaX1I/bgB7ymfsPyJP7CJZUJOQj7
Ar7j+KXI4q+1/ZLmW52vWZ/Gvqk4zOusJS3cDY7/J9D6jfrKdVz0uDVPa26e
7emdDrRzxlXff0+/JYfbXr7/K+dlnFfdeplXsHyIJ1iHtYFW9kWYjmWYjQX4
0ut+IebhC8zBBK+r2V6GaX7slCJW91v89+1WePwbvB1+wwyl522SOcjydMrr
MWuQxa90VH/bFJfnbbG301eeF/3/g/5nrlOG/c+XfiNW5XmK+14fa7Del/e8
TjZ6XRzHCa9Lpb3a87rOw68KtN/pW4blXhaVaSftNRajsB17cZR8H8OP+B2H
cAK7sR07cByxaIjGeAuN8HaQ9SX1qfIsm6AB6qAu6qMefmH/L5pT8I/i5vXe
QFvXOVLnxSOBtv/vIDvn3vCwt/Evbvnxiifa463veYry+UNzmc5VOj/fxUWf
G8/7eNW41XlY583Lvv8KFgTa8qKHWRpox2hu1Tn6Ek56eq+jmteD0l4SaPkf
6HHN53UFlrU1TwXa3KE5RNcnula642X62fOkeP/yuUNzyE78GmRzt+brvWoT
+swP2IXdGnfi7fVDkI27B4HWht9hv2/X/hpBNs8c9HH/qrfrHvzmaX2rdg60
PN32Ot7uc8UulAuyMqmNK/lSr1WuisiO573fqK/8gS98zHf0sn4faGVQWfqh
P34rYnk4GGTnr689P1WCbK7VPPgnKnt59gXZddFNn2t0Ps2H0iiHMn4+1bKs
n5d1blW/34D12OFjIBfX0DXxPXnYgMysby5ir7W9Fl5DPY5vguWcr77HW6zX
Rh28icZ4Ha2ZAzuUtPfq9J5dR9Ybc3wjpKEsGqIkyqA+9y51UcLDKGxlXlfT
+y+sX+Ae5BJ26XMCOKn3T9IsjMK+g7fwHel8j234gnSXsVypa2Tfrv070ISw
b6MSx5dLs2P1GRN9xuIhHuEeCnt+lac3URpt0+w4Hd+b+qnKsgFlruV1ofLX
x0z2FfcylsJ4Xjcm7fqoi4ZohBGEHRls79PovZnhwXacjp+BIqwXRTlUQHlc
YvtfKMB6OqrjVaTiI44/SDx1UQetgq0t2mNrSXvPU+2i43S8ypjhaZTx/Bb3
bSpvHb2vRFqjilg51EbvEc9nHqfi/sjL0xQf4GN00v0MWqIB2vkx76CFb9f+
tz38Bx6P+k4bLFU/w2eU4SPMUf0qP1hBXlYVsT5ZNc36TxlvI/WXLHgOVwlz
W9cbrF8rYq+1/WXc0XmdeBdgIVbgGxxj+1G85OGexVzqaz7mYWAxe190HKZi
Ct4qZu/bDvQwX2J0MXsPS+9r6/3ty4Xt/a1ArPJ71LVYh9W6d1V/0RhIs/fA
A7CebSeLWHmyFrVxeSSPvcer91n13qrez9X75no/+SZuFLFjG5H2kmL2fnM7
3Miw/X/jgdfLFTRQ32d5FzlZf0HtT9/P0DzMODujz+qQxgzimOXPS8d6GY/4
WNSYPIHf0Yt22kP4/XmsH/YOtjFU2PtbQRRCR7b3CbbwCtNB1/Nsz655Bq97
XrYTxzb8gB+xD9/iVxzGId/fIM3aTG03Fo38tba/jltFrM2/9nb+Cb9gZx7r
E6pj1fWJItbmer9P5Vb5z+kzRKwvoV/ORCvK3hJflbS6VP3l8jZSX9tL2O/y
WN6VX9XH3Tz2/qvegz/n92ibgm18fsp6O6xkvZPXxddYj7XIUoo+gZOkd0LX
x8hcyrZr/Sj+1P0qc3lN1NC1KPueQ/cStl3r2dGf9cN5qTf8jmM4gmGU4WN8
gj4YrvNRXntv/lIeC/8rduA7nMJ/eCbY1i8ggPUnvv1XzTW6tyXNgvjXXx/R
fQyvS5ayfft4vQdncB4X/PVeXMTp/9mn5SmcxTmsI529eIo92JXX0lK8yciP
AqUs/3p/94CXWWUZTPkGYQCqaR4X8l8FpfxcmtfPnTqfVkMlVPD72cLq1x4+
v59fta8iKvs9cLgv9bpbkD0/GkP9f4eueBvdSti99fN+T6v7XD13KcJ6Ko6S
13SWJYPtXl2fnSjEeoFgu28vHmz7M1ACxVAw2NpK7azjU71MJT18aS/fUW/7
on684kn0eBV/ipdzjOdTfWkIRpSwc8526qySztWogeslrf5V54VxjddlWFZG
WbyCsFJ2XHU/d+n89q3PfZoDNU9rrBbj9Rny9qGuJ7AFp/PaehtsxTbfftWP
u+7zn+a1f/La/m+xGbe8fz5kOZXlEizy/auxDhs97CxfX4VlmI7xuhf287fO
481K2v5vsMLPVQq7Bm19HK/1uEcStj+a+/nvXT3j8fGtOWClx1PBz/NVvE4r
6hxcyupQ9RaKUhjB8QM8TsU9vKRdS7f3a/+7fp8Q6cfkQT5EoAIqejzaXx7p
pWw8XUElb6/S3peqe9/XGCjmYSt7njJK2dhbyL55WBxs43Asy9nB9vklXdfo
+ibUyxCC3P+TJy2DkBfBpeze5q7ft+hZou6BxqsPBlu8imucp/clJmE+5vq6
9umaaqJvb+tzmua2T9GmiLX/NIzyeNUXQmPJH05hQRxxx9n7p3oPWu9VNy3u
71PrN32xEPMwU785mJ8yIQ+CEIhQhPhrbc+HFmFczyARSWiFHJyX76Qz/lnu
ps/v0ueOPYzCdsBLWBFDH9HvX5O/vMiDcYT9l2Pvpls8Y9Lsd/Q/Qmu0xcco
6K+1vQ0KI4rjI7FMv3sZY/EFe36V73CEYSSGYwSGYShifP9t3MKfOIsiKIpH
eIjHOIczOO3bovE8siMKkUgk7YRY+z9n/a9zfKyVXfXV3MvR3sugsrzs9aJt
1fWfvyidYv9rqf+3VF2oHldiTprVy13SuYf/8AD/4gXCRdAfonWvQ5gd+kyV
8oOciEccrlC/V3Eft3Ez3fLVDJ39fwtUz8upx6+8PlWvS9Bb32fW71x73ffA
536cjv8UXfEBZW6JtxPoX2il/4qlLBdxAZdwPtnSv5Vufeau5+UU24/jBPZi
j/5rjPp4Q7/xhlRev6J68XpX/T+HLPmtXy31fC/S78Jis+df/WMMy9Ex9v+4
+l/tGkkWt+LL5e2tdi+MlxSvPmNKnv7BHupzG170+lS9vuzhrhLnZVzBJVxE
J+LtiPbogM9SrJ5UX53QJcz+H+JP4v4Nh3AQfyg9b1u18RRM8jEY4a+1/Y73
U/XF497/0tCEMpUkreIopt+s03/vsnzCvqfKu77jgBIepgIqoiz+pHy/4xB+
xR847stf9Blo/IYDOOivf9T3Cnz5ix/3M0ahIe3eG90wArURQ5lHcw06Rp87
Zj1W44B8FVAbkocbqk+ksJ6o3+Hz/CmfOk7HR2vMI0K/FZBi/7Wt//JeyvqC
FMuL0u+LyZ4/ff5lor5PgEn+WZgT2IxNOIkIz/tYD9vP4+lMvj9Hf/RA9wQL
p3o6nGZz11ivq6M4lmZ1qXrLQb/Lhk763JreR46x9vmA/LZMsnKqbCsIuw5r
sRob0uy/ffQ/HoVQOMP+52cf279LszG+X5/dwN/EecP7nvrgdQwnj4P13+zo
g2YJ1od3+PHbvT8f8PoZjcEYmGZz5xmf7877OSDG+9lp36f59K7Pm+E+z6pP
NvP0+qElmmKI/oeXMsYgEoP1OtnGc7UUm/c01z0k3w/0O/XU05cs5+A52jgn
CiAUQWE2PibjMAI49hksYX2xv9b2P/Jbv6ms34HUGPc+vsLrVu2+Fd9gKHkc
mGB19h7eSbDz105vk1V+LlO7rMdG7zOKR+c2neMivU8m6PdPyPc8n4M0Fy2M
sXlX85vOcYd9nOkcpnOc/jOml8+n+l/6L7Asxfqz+vVs6mOuPn9APD9iOusv
0RdCEIo8+o4FKlLmyqiCSiiP95ivG6E5WqAZVpOHNUjimGSEYwOvt2Jtuu1f
jxXptn0TtuAbtCbOj/CO4kab/Latpc6ftOHHLFthUZxde8zEbCzU5y9JJwwL
iWcl8rL+LmVuovmQfHVFss6JbH8R19NtLB1Js/NHO+Jt79cn15Ot3EG45+cz
1cFdtt9JtvKrHqrmt3C5M6wMm9PtmCfU7VM8l8r4xDOplr+8Xq+BCEZWtmfS
d52RA1lSLe+qi9xe/zrmfdJ51+tEdfM2phPmK6zDKszFDnybbv9ztBPfowX5
OIt/cQrNUuy/kfZin8496fY/SffYvtfDKOwd3PJ1HX8JN1Msfws8zRWe13Vs
34DdHseeFPtft6/VFkXtP7b0v1qnPf69HvYv1PN1Hb8ddXQ+pg++rs9S4E2t
c638Hsv3Y+38XxHl9VkH4pyfbv8bN93rQHOj2vZauo0LjYUdXhdrvA9+hw+9
36r/NkZLJOq3YxCD7LRzfLLFq/+m03+DLfI6/5C0m6I52mCwrzdDC8+n8qv/
VNwbav9z/x8ehVqe53odqq9+mW7jJAYBiPQxM5V8T8EMzMT0NGtT/XdVYoaN
L5VpFmP2T8zXZ31YzsBfOInJmIoTMTam1Yevet1oDDykfL/hkP6LFfeRie03
0u3a5FnWn8EvbP8Jj/Q/mh7uJv7x6y1dd/2NG/5a26/iChoz5t7A62iEN3E8
3f4T71i6XaPoukTjMpePjZd8jLZjrvwUb6IRWuMpYR8hi8YPMuu8RToH8CN+
9eu69oT9AM09DsWl4x7jIfJzLZtUxK4tm/s1dEs0xRP2v8S+l4tY2P/Q0K+t
dI3V3csxjXqd4nWsup4UY+fBbJ43XTfrnNjKr1WVp7b4OMHmJc1PNVBHv4Ok
eBnXHfA5uqBHfqvnez73aQ78V9esXp+q1170qX6h1m4byWc0yyhvwyivH+VH
15napjb63NPRnKdrZc1X/+Ex7uMRMvu8pPlJ+zSHqY/GZth/FD7xellAv1vo
fU99cF6spRvhfVntpTxcI53OXi6lr77xqc+57Tw/n+AzdENX/EyY/frPWdZ7
4RlkQs/89n+S+l/JcziP/ghKtTIov8p3LvzA9v04jq3YgpH+Wtv36Xomxuq+
q6fd1vPyrq5xvU4U70Pc9nPAVe/nao9O+W18KL9dvd10ngv3elCb6Jynaw1d
c/TjWrM/XtBvORHnNp/7NAeuTrHrxTu6F0OUXzuOTLPPV+elT+ZGDqSWsud9
eiah5w1FS9m+PAhGVj3HL2Lf25zi30HWd5FH42fyeBC7MR9zMZTz6BCM0H8r
044rqZebmk9xCudwG7H032wI1Ngi3DB9Lo7tD/AI9zz/edgfhMrxjLN4u8bV
d6K7634FXXU/qv+TJu3RmIpp+e3eOYqwkYhAOMIS7Np6bpqVT/Wg6+wWHJ+q
a10s1vmNZQb1WgxFUBTpYXY9rnqMRKDeK/B6VP0E6Zm+16nyovv3sZiIUZjn
dbQZ67EJG319A9ZhLX6lHi7gU+qvNdrqOoXtC71cKt8i9Q2dvzE+vz0zWOPx
bfV0x3kaw8nrCMzHl34+KENZXkE4ynrZ1DeU9xfwYhE7JkDP21lexFU8TrM6
VF0G614JA3QdTR7b6D+T0QHN9Rl9v3bN5v1Idd6K7e/iQ7TwcLPJ4xz1fe9L
B/JbWvreRjjLJ56u+qHi2ur3Rap7XcP39Tx0QhekJ9k916IUa0u1qa71fkYE
9RoSa8+bVH7VQ3vGUCeU1r0a2xfjoIfXNeEBf63t32O/vpdD2rGI07NP3d9o
XLG9B24T/3V017Ul6c9GI/QmHz3992YLeH+rp/9tRTLxpHiciYgvYucWnTty
FbH92jaHY+fpuijF4l6IXuS9Jz5Ca/TAMNKeov9N1WdM9Z/rcTZWJ3h/men1
nN/jTUCUn8u6EGc3fzbQ1cfYV16funed4+nuIc4+ip/xvUn/yRNn93t6vhOO
MFxKs36vvjjC09ccUZZ2qoTqKIeq3p/yIrePd437xZ72DPRPsnGpe47lmOt5
UZ40hzyHF3VupO4/8bnkWfKQqYj1Y80r35HHHdiOrdgUZ/1KfSk7nvexfIPj
H2AA+wfGWVue9PuqzEUsbs1NQ2Os/KqHruis8EmW34XeRmrz2Fjrez97X/oJ
H8dZ/Ernl1gb57X9OcQo/9/jWglWj5ovL+BWmtWp5rDxafa8bZ7PZwoXgtAi
Nt/qmGEYgkX4CkvSrG17Yxj6pNjzH32nZpbfB830z/6OQ1CszeGay8errvQM
FSF+r/t8mKUxyO/Nh3p63f05RC/09OcrwYQN8zknL3KH2dzUO82+7zPS56mz
pHcaY0mvPdrhM1+f4H16Ypyl1R/TsNjTVZ513Gl/vhys6wq/7l2ALzArza6L
ddyANMuD5sR85DEE1fS/8vHWD1W3K/3+eoXPZ+v0f1i6zyWdfXHW7/X8bIie
G6ifptizNPU5zVv/4amf15RnPcfQM58+nv/5Xue6F9Xz8JOxdg5dFWPPGPSs
YVCcjXGNdZ33W/n3skb6eVbn28E+zvd7H7mMK2n2/EXz6VmcTrPvKGhu1TO3
Z3Vdkt+e0WZKsTzpmZSeK+l5lL6DpfntZeTCNZ/r1G/6YWiKlV19KI/3C/WP
fN6+DZPsN0n0+9qa9zTX9fF4e3v9qw70fGqM92k9/9KzKs09ekb5uZ6LJNk5
fqeP3R0+Fy+Lszlfc7+egXXFhwmWD+WnIrL7M5mR3n/aex9Rf15GOl/72Fjo
faN4kqX5mbdlhv/2SjmWFZLst8N17aM+qXO0ztXnY62fdiTtzxLsuiPan23p
/KG+oj4TE2tj/yeWB/37Gj/49yAn+zm0tcerPq70B2Fgij13UV70HGkZlmMp
vtI5nn0j0NfHtMb2U3/mO9j7h/qQvten7/epXsqH2TlvpF9X6PpilV9HLPG5
QHPCXHzldaX6mY3lWOp1tsjH31QfZ/8PSuispw==
            "]], Polygon3DBox[CompressedData["
1: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
jtJ3qP4PN7tQ5g==
            "]]},
          Annotation[#, "Charting`Private`Tag$291006#2"]& ]],
        Lighting->{{"Ambient", 
           RGBColor[
           0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
          "Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           ImageScaled[{0, 2, 2}]}, {"Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           ImageScaled[{2, 2, 2}]}, {"Directional", 
           RGBColor[
           0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
           ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}},
     VertexNormals->CompressedData["
1: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
v2Hca3++3oglUx9xXv9QNw/35Yxq/P4UdWiazjzFx9JHyuwtjxfgXiXuldUZ
4DNCImrsD2fppMHUlrcL/hteSGOzRZ2EtocGbhbpJU3KJYXn4AdryZ7IPcA3
Unft1fQijcTNxY/vwf3tQu5NL01tpARvxF47iXPjLYVS/aG/uD3I+lB0PfVk
dMC8hbmPlOzLPqbj1URVV7eNRgKXdAI1s+NwrtB4DEco/p0vFva+EvEp4jY+
9xf6yupvZbKZ66k/+RwC+x81UbPfbonyMNEJ+0H7iP3pjdSik8p9bdz3nEtZ
synO1by0N+NcTD31lTtg1334+YtXIukB7jsgX/XWCHETjzZxngPP3JfrvuUT
9H2+qPaa+ORS56/LDCUh71xX5vXYlveThJV6mrOLhdScxH9M+rgf24oLUvaL
veSJ7+jHz/OFVGvnO6fauHYq8secZkNeL6m1EmaZXSikbvyTePkbdswH79jd
9ewjpuf9Eh2ZyykzpTZ2ZeY2Sr5iu2EU7DQM7lPXXSijJJhXHhpuaKO2VVQZ
lnbTiU+SZaPnv0Sq4ujro9+AY+deRp2KRXx8HFmWiK5aTy70sl1hx960MJQY
PRdNJ49MS+zXLxLKWaWqLxW4EXKn9E7jAo14D5nMJU8T6mHmRLhBcRfl+Kw/
wA35aiNPjj39m0jdVhDZ3Y29z/9iUdgryL37L53khP3Y9QqqU+CTh7eF+D1C
vf12uNx6iKWe6vlpQ5Uin5uT7amW2T7y7T/eUt/FKurGrVud46jz0gvPGoqR
r9BlxfmMv/MPudG77qp9K9V84RFddUs/MX1wdss1zJv31WucjdG/a5ZXbvkw
2E/4DcmJZqZqytp0qR9jTs3418sb1PUS0aHND/ayVFPTpOOODOKme5JlKwX7
EU8H4++LVVHKFTs0ilGnRTcPMwXBTi/PrnZ91MnhMrNyGvDk3F02F2OmAZLJ
HTytDlwoLQ0oZ/Gvosw/D89HQ/7MqfgS9kgq6biErxL0w9ofPUmDvPbPmQYp
+KOSNbriQXQdxX0t/+YdyGNY8/b8C6iiPiUo7dfHPfyXJjheB57UfKO77gO/
STA84e+Bertxw1nlHvSXVU6+MYTc4m/OZ4+HDVSzzS7BO4inU+v6oib0e/rz
y8NS8OvByYdXNuC+e1PPdjE+l7t2bJW5OM6X2G1s6Y/7nnQWuWri2EqdUGLu
n4KfypdZEjIQ//Gx+8vHgCdtuarHvIGT4Y9Y3svCn8efpRUtkafMnMMc18Hf
6l6fltCDP4f3rnK89aiBOsG8K+IJ5IfP/XzHBvu9By1uMT7fc1IOVbMTraIO
KrHelUXdmu8Pm5KGP89zz45w4B7Vq1fdZ/fvJPuFdeWZUM+8tlNve7Bvbm0a
9DRf7CRPJ9n8f86XUW4+/jZZcTRK3+1ephdTF4kunHm1PbGEKsvgiVnFRKeW
VphU81d1E6GitV0XoG/QdDvVAnPzj6fIsxuaXYSFR3dVNPqI3X1+dgD7zXhf
1bXJxW5yfHZHvjDk2xTrZw3BHzy+W87oMPWQnjO2hizDpZTl36G/H8ATOkbm
0i4UdJEjvzffbUS/h8bNL5dioVNHrO+ae6/qJmNRRnn3UP+5ZVL0Aex3VQ/4
qOssXeTzZS1HbvRR4dSevTexpzwtFc21YO4iKp82+t5BP871H6hR6aZTEXtK
7MMku8mwQdAxJvTLzf8kNrDAz4tOla6piIPhYrSpIOSXXNNerZvFPv5Z4plB
PI1kNoy0VeO+QRk3zqdjLxOZ3fFq8nYPOchyv28z7uXS0WxlwPgco86dbxXu
e3qEyeIi9O9InRa+VdlNRb/KmWc8ByRfsUk9EfrV9O8fM491UQGGdryxkLuJ
OMftQpyz4vLta4EPch3dJTe6eojqFmHRMsyF4SClkTzYXyXy8dcVxM1gPHGx
BHI3Tmut8s4e6rrmigq5xXbCfI3/NsHczNt+w8wI+9EL7uUhOUwdhLZa50kk
5uP8QMW9YOxTqfp32XPkOohbLLWCQpwPtWkeZbzf2t8vovPY0w4yIVs9Foe5
I/X5dAYd+1SGY65hIXMHYT1zUNUA+lVR/+6tEu2jZko2O7yC/W1XBNvpuFd6
Ycd1Heyb53uqz69AXhqOiU2FMhVRDa+jAoawV/63OovFDvrqpFP1BHA7Qzs0
Wwz7N9eJwCq7qA6iceM3dxLm2t+xpT+8GP4EVK/+50wnsda31FSBSxYRd9oY
n8ekuJ7dMSrfS+7/2lKxD/X8R03pkjbm6fTnpdGFmL9PkoxkUoEnugWk1v5m
OxXnmLecHXFWqKXrVqvXUltY2YQUgfMXLaIfT0Cf/zH7PQ3Ydxs/9zoH8/Sw
4YqXjO9P2BwSNLoE9o+30/U0X3VS7+aviLur0Em8w2HzWNzrZ9FM3hngdubk
x8mvzD3EW7r+QSrqzdWkpH/PNhqlsassOxv58jbKd7RF/PtdjE137aVRT94n
S1RvoxEFh41xmdCvOeORsxZ78PLTs3nFe2nkXMcBGwfoC5zXqtwA/viiQeBt
mssAsRWb26mN+M/vfHQrHzixKjxdU9h0kHCnTQg6z6EeanO9GoBvP33a29uT
B8ijreeXKU0kUjOTaef/Ad+CakYOfX89SK7UVjysHE2klEZfpm0Ano+92VWg
XTBARA94SP5G/GvmtJechv0vwlZBmcCfinHfp4zfl/3KdrrJmtZC9R+hrdjF
PEDUDPUfZ8PP6XS3nieTLZTzJJfugOkQSbtz80IG5i8l3MamgD4QUKSzJWwZ
Irtfdb5rwlzjntNQ7wT/NBQSN+DOHCKZSz+t3gd5kfjwVXHsZaEzH9J6mIfI
aM+5QIYdvq37Pbuxb66bCExIYRoi33Plwk+hfobyhngZ/NPBaK9gA/zhKmef
PT9PqK9+fhJi9GYqxS80QvTEEMkq7Vh9B/5zUTb2Dxn6rpVsj2End0BCsRZ9
9K70j7lkQTVl69Oi5wr5m18LbQWo/3uW6aVyPTXUDSf5+eT+IZKdINc0Bvzx
a1oz34m9L7Sle+5X3CCRGBzYcINvPclIsd8ziXiaLRgdGFgcJGekt7kznp+1
emen81utlpLMoF8tExkgQlOPdDvRLwav6Ck05EVELnuTFc8gkdXw1DFh/H4t
VZVswjz9OSvc2/4cc+35UJUp9vx/nDePbod9ThmN1+36g8Qyy9UvEjzER4iD
fMQc6d70rZDxvRZl/p4Rk7Cf2LX06xXct0+AduMJ4pNsKztRdauY6pf0fhzJ
+HthukeeOAvyqFj+hxv1vDwmYqM+eNo+sVfaHIj/rRqBuB/Dv6k/I1+2H8H5
lq7Lt9KGBslKneO+I0zl1JOgkndHcf60244Nj6SGidN/iQ11qMMDh4tec2Dv
Htsp3r3ZdZhIm523t0HdlhUnmeyaIpTZckumwPPDZJ9VrEM36v+suX9zDfQn
vHetz0kcJuuu7e7hnEqkjv7tuFkK/Xyvb7sk54ZIc4KtZCri+eU2i/J5zME/
bfxWDRbDpGxjz9b1guuJPhtTCAf43ddS5sa7sP/evHHZetzrePqVEul+8KaF
378+w/5qO7kdLJgX1nbvll4eSKR+hxcsLGsbJgf5v3ho49xZ3+8TKZD7nG7g
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
RM3/9mprhR+1uGqkyucokrjEhHWZxyC1ZHrgiQPsZLTe6HYv5Cfeq3KN/DBI
bTkr2t6PebzK9n6TBvQ3H/oS6co2SB3J184TaGmmVmf/vJO4M4+8z2xIuMU6
TK1V5PQ9irhVnjpl923hO9lkc+9hAOgcfk4y++IrqdyeBxv46fswntdk25oN
U+LRuz4Oor8nuSir1bAUEmX2JU9PFg9R6wP+8DRiHvzOXWD9gj6/5urvlU3c
Q1Tn1xyGCQtwWWbIFgb9fHaRzZ8U6FPk5F+0xaOJmrCUltaDnHmnaFOLjYOU
2H3FXyXQ/8WGCIcNsE+q84OUKosBqliAItOw2xWP0lNKu36Q/vtuii2w88Qd
Sugo8sB9vG6twUI5aS/ktR1iGaSc+fXyj7g1UMz31Qroe5E2hlX0FQYMUgdY
cgPqYU/7M+mlb043kz7XgVlX9L8Try2HT6N/XTy1O3QRUxsZ+WT6vBD0tvXs
Crdq26jGhUU2Z5ibSHiAr7QAo5eKdzBQpb9n3vmTm7oMus9NJonftj2UX80b
KXfEeUWo6od1oB+pc+R6i3q09MG68tN+HVSB6riLE32vd2ShqTLm4t2e8jYC
4A9OSVcY+tVMwhozDFvRP0ruu16ZxF/VPsv3pguNJPD9Hy5pzONuxXHCB+n7
v7z6OMxBD85al74Fr43uczOO4v/qEaT600IdYb2gNGIK+hunwOygnm6qaKv8
t2TQb7T2snvjtddo059r+P+9CXOFNSz1ZOuqmOPZqLNiht91HNs6qZDoN6/7
metJ7Mqny34+7KUkvu1U5UJeTxnNd2VHN5ISvhPL0lgY1KPU6YVjmMsmMztT
p8GfHG8TMI663yAhr810qZ1aep23LRl23me6pXof/bzBxoyhANjV9PXxvKuw
z6jSAkMAdnR7XrxLDHbdcCBtyhV0lbHwA8awCzMHVxQr6vylu/lf6eeOTrru
qN4PO8rv8Oyj63wU383lotB/7NXprvPQmzzgmCvGPiQPiQnN0vdfXLz7apS+
h/KD3v427KMnL96qDvq3PpcclYDer0WvlX3HPjwsDw7+mK8jxzeNjt6ybqfM
lNSEKGYGZX/ddYbBXE1+tHQ2aekMUbUqptZ0PdmwSCm3cL6c1AoPxfgOD1Fd
9eZrvNGHywrK5RxZqomJ9Kj+FPLxMPcdwQLkhXrX+6YLzBUkJ+BJogTkTJZb
nFoP+vKMBZFk5yqSG6POYYa82P8g+bUl+obntdlr9Pmey79f559BPAuu7Hbe
GVZHCVd0Wf8MqSNJnVfk1iL+S+t7RdYif1Oz/O7xYr8dXst5HkKO4YEra1e6
V1HSw7yVIUz1JDFngEnwIepDUXzZZdTJbqdAXT7kO+vUtkdfbEaoRjmGcw7m
05aXRv7GCxSJd2f6R99LZHXzkN5NzEHcXSma+agDDcUm+wwMR6h4/3D2GMxN
W8yDxUTB/85DNtM7cYRycRTVoO+3DTEu022n74tkNWTZs2OEKm4Mqe5AH/DS
TrO5PE8R4szbXOwxQh18pDCaDFzPGL9QHg/7XF7JJjOHum17Y8lvGv9nZckJ
ZyF/n8VGxYpmoG4bLFb+jblJ7uKfqDnwP+M8Wxc2M0ytCJTwicRcwCsjanx3
vooEihvKnh0aoF62/NAtQ/0RFbReagv7nNc/LfkR+OZ1bf7ba6g/pNCjQgT+
DVtu5fEe9CRf/vZCm1aKeci1Vou250U+Kct/DOroJZkMPcSph0BBaQv8cumv
zyeOuj7q0ApGuSXi6O4BFV9bxM+zL0v3emJdL428V3/RR7b7mAfdg/2drA4v
alk/QBm0Rtlzw79dji5vbbBuIu9C4b6pfkrdLWK0lKOJ4sznXnmZvocrcYVm
L/pF2jFHexPUwxmlzY0ZK6pIa5qoTgNLPxU1t36/FtY9cqRp9CXqHhl6xLLY
r5/SLZg6Rz8HJO/Y0KqGfD+wc/liU/F+SmfwjGYv+oUaz8UDb2YTCYvXpudr
4Me4zWo6tsCVH2Ndb8XPUkRpIsSGH/4aLCl9/wZzjE5Yr8zAXCJRjvv5+AL8
K1YulzoHf/WbplQ8TCoje7+aTSiiD0YLP3axRlw18HKsE6fPOTc64Htt6QB1
09H7vQ1zG9XrdCcrn7mQfF0VpbO7YZiSuzsqH0F/LnotPFEb/pVcuDV8BHLs
GP9N5qeXUYmfZTK+zJUTkY339B6h7zwrbgrggp5fatl6zqI/9u/QiattHaHO
LxVeaop4YzepPuIJeppEuyN9P9bVKE6OBMRtsn6yaS/0WVz6+tkocxf1xbJQ
UlSRQf3H9/tpMuKwuFVl8DDqoHNKm9G9KAZ16Efk7Uz0qZhg826Po11U+tmK
1X8xj0y/yp1yBr8s19Wv2791UXJ/d+05h7rxzPV3njz6lATLIdFWxEeJwq3H
HehX683GPoWiL8u/VzD+Abpn5KnX3+HP5rtut3gg59S59Gf5mDe69zNlCsE/
xo0q6bPQP1c69SEDdXKvj7ZFnlE/Vb1fMDUT/fr6q4BTXqBvz/sWJM7aT43Y
7hKfBB6IOZvVmiHTQWl+5phmQVycNt0pmmFbTJQenFWkP9++V3ugrR96vtP4
eIkTfk9jehKrCjvU8W3WPNXNoHpT98gNYd17CxKuw75Yl2kdXyLkM3XGpUqD
P3+L4AM7zFHnCuWFrov1UtMxuvM7QM/Wsx9xwGuvx77MTvi/6FWtbhXEYc7d
Gncx6Mm2cO58qGwfVebQnrkc/V1QJP3mXvQPVc1SmSdf+qiXDq5v9MB/2OdO
pjD6q2d93UQy9J8vF89SQ13qX6ZdtzKqnfK5kF79FPS1H5U30vjqcMWHxGKe
bkqWI0djCfySV7Ngsh90X7txH3a8Xst+Sr8S/9+RsDlOg75ndum1EzqIv4aL
K/feQjzmfEjWK8O6sT9ctygjTyhBvuwVyBtxHpdlP1HP9X/9rp8K7qQeCewV
3AO7hW0ze9QLOyc9sexaAj9tMlpnVQO/bbz+TrUa675T1EpKp/1kuejeP+w7
sbAs+yf4t4ho+/1j7qcuViZXFsE/M2MvcwrBP59pe/4t7KvV4akzC3u/YDgs
SUC8tbfG9QzSz/9ckHhxG3E3eXLbYgvESa+Fj78u9DjeptCwB3F39djpDfX0
eZSFQwXCiGMPGb7RGfp7EsnSxmfgr1GdqPdBHB9++DpPC/633xoiOTKTSIRX
vzv8H/ytv2Y2UJv+XivsX3UM4mR/Yk53O+QL84hZRoI/no3NNRt2CCxvHNgC
uqdQsPmiJ51U9hnBKTHYbTqYenAffo2/pJBC93OXmVMu08hrjkvT83fgV/4P
XeXq8HNVu6GXFPg/l6R4RMJ/fE6HLu+Bn9+tCr66Hf696/aP5z59P+5QS8J2
+Nmvv77nDeJcvOvRy9WwD8sN9vggOt6HIuSOoE42cHHtGgUeOvurWNW0rYda
v3/8ykHUjR+S70aWgq5YNppxJbqXWr/rGC83UzXxsFh/omyii8rSCzAeBd44
tOH47kDoY/HWOCasrJva+tZWMhb0NJW1qxeDf5Oh6+dOvGYdEtdswvuW7vI7
8BD8GxR1RV+Bvsi8sz0K79vC/kxyP/R508rGdhp6qL7LlGNi66LCalRH5Oj7
cK8cLDOHHtnCdfqroZfv4vKVhejXPP/8y0MhR0WoJO827Cw6vtGtCvXcwyb0
2A7E4a/VT4/0wR7ax1/++Yf+siNYWUcd9POtcUXL0WdMVl7x/ou+VrZwu/8+
4q8vLMI7z51BhZq8FbJAn5rfe8NZjv5+xT+NXEe/KunZvZ1jSy3xf3OgXhP4
pzpf9qgQcNm2T/sfT0NOyv615U/fdlDeLVpuhcA5oguqNmXQM+LPX34n6Bd2
bkL4HfSVjVLSHpeoJQeCTPYuwvutJyUF6Xu9S+p7Pg5ADmGJHMjC+9O4eKbi
Ic9o12Tys8RScq/V1pJ+f8NlydIP+PuqJbbzIeJ8i1gZTxBwm9XCo8C3wMtl
xwL1AkAXs06ue4HXjp1mi5/h/wz2bafuYn5pPdC/aynwnC6HL8su2Pth+DYZ
+vdE38qnO7bgdekj2ygB/D9sh0hsJ/SpWnvUMw12ka4KfhQJO30R7YktCakn
j8y4VSbR/0oPBB6i+6fSqPBK+rl7qkxlvz/orP76lg7Ib4UPY5cCYU+9Vw8j
hYEPhN8P2RUAF5w+9kBpHvZ5nXL38A3My+4q0iU7gb8uy1yMCUPfH9ty1eIM
+r2aUFJiIPq/G6892wHIEV97btc1tyrqit9v5wjgsp6Moc13gNvdUpU2WmHe
7yy84v0c6zLxt1CpwAkfH5aseIj5ROFBm/0o8ILyUjapMfD3vpee/fm8nnrL
fe/VDPRXZWs8cJ0+J8RMLjICuKGjaOltaZE+KvPUZeaS+UZioHY0ZE1WK+Uj
d3NbB/zjdb7qrwh9b93mKJ73zNUUt0O77YuPg9SdMr36RsTb16T2Qx+f11Hr
tVbv5MG+3AaqfgkAx7KXV1xsQF8/bm3iZQzcOtomYcqPvJB99izzO+ZABePx
kmfAv/HMEQb+wC3O/1y/+WOuXr/nyt0D4H8VpH82mX5u/4KM9SngsCWXunde
hn0MZz59oX//6CtRWBcH3Dw7d0pKDPj0AKfCjVrg4crnTpvHYAeXvl+izrCb
22q5m3ucG4jaUo03SuBvqdh8wRh6tpZSDF3WJsLxVF5rEXB5Mt+czaWIAeoL
j9LIM9jHPMB7+UnoExQRkxMCnGWfIpT/9VoriZiPWfUO/po6+3j9NOq04DWn
5UO+TeT416VJvdBTRs8kfgnsvGxYvLwprZXs2n/++To6fipel3GgLrpny4vQ
9xq3rzVSbwGuVXP7brkL+PTHduHelajPllqBEpWsudT5TSePKwFPiXQY8i5B
XY0aDPZRYSuk/uxnaowErjk16pE0j/r5wmLPrzbOQqr5obSJMvDRk69Fq+uB
r/xf2pt9wH7fRXronwA+CnbTDLqGdatVDz869KmMWqyqXnwGdIvQLXsnse4Z
1ou/GZxJVI64o+cF4DvbQp1+C+Dzb3mmru6Lkqgkzoey94DjRnLZL9DnAke5
zj+JYMuldLqiLzUCj8cnvDWLQJ+S6bTmiwK/XPHrwVbgrKzVjM59oFvWeu0c
Ab9f35M+B8gZync+rknPBcLmutKIh0aDEpVb2Feg0NfkWeDJ0WsNZV2shVTF
L7ZYcdhB0XyLmAvy1zr9GN88/Vy04sXdf9OHKRuxnTcDUFczw0Vz7BHP6r4D
6zTgL+ni61wHQN+fM23rA1xufef88GfkY+vz8xQdb0tlZs5zAx+XRQlP/QO+
Wrk74Hco4jPjfxRddzzVbRQ3U0YhI5IRUkYZhYwepSFFVJRKSaQyG2S0s5KV
rdCyMqKU8ZJHlC1kxr3ucN17bdkr3nP/up9O557nPOd8z3J/v+dRDM3v9+vB
N+aT1rEBThRT9kUcBLtNmZ7WdQBcUduCawgRI/icEHdxI8hJXeIQs+DNx8Ic
AdMcw2PYpEujnPWegVHC7Q/qYM+ivTECa7+OYPH1XqoiENfzwbv85Nfl4/C3
8p+SEkZxsRiX/HuIU1cZqZwcsI++4dDppgcj+JTXiaTdkB8y4pQJXwEPyon5
z4UdR/EJM1pxM52IdKovHTAA/ttfHppwwpwnXib4UTiIgGTmKgNqASfrLnTf
1gN6RsLutWc+9CGOY9Y6IrDug+UtcmchLtJjL0gVgZ5sOgeyXoGdQ97+Lu1R
GME9TOEuCujzuPsuIcOqHmv4fYtbA3ag3P5l7gr6BE0EOa8F+SdFf746KzCK
S0UrLptk/kZ9uY21/NBnBzOdxQicY5iP/6LOPtb9xB+Cj4SB/Fuu/ffKG0dx
++m7bZegbpY937chfk8VJr59SxwH/r0K/AG+4K8sS1ceOZgTREVlSK/kxnCQ
gKpuVVcHevG5ZfUA4CptyDGbE/gPx2lJvi1qRxaSVYHpYId3g9V/f3OM4cQm
1WJPWFe3v+2ILthfLS933QarMRxYfXYuCeT8m7R1Y4PvK7xYu3Ut9P8vQ3Z8
ugtypnzmD9fC9wcHjzqUwfonHRkVI5Bn5mMHTr4EP/H/fPRmCPh3v9/huZZ1
zm+ijuk68McymaDwC+L45rk9tYZQN6cZuW/2cIPeN7RedhRvxz8Pe/+igj4B
JskNTMD34T/GIpthXl67MrNoAfT3PKFcfKDfK9LT4iW+fHyp0l6bC/JVolDX
yAmwezPPh1xu1vO/k31mcuwEFPfcrPsa+E+FRnhWqluP53noxEDwY/LgTVoT
+O9LVPpJV5i/Stl5s1j36IiSpm+Zgp9OiD5saQf6hG+FJA1w+NApbbbpwyg2
zdROu1SyHUvpGe3UBr9M/HX5TAX73Bs69S5MpwrPDQs+2wh6pnNuzf8I/ovZ
vSxgBXIuGxaPWIK/fnL09EWCn1TuFSZqr63AbwSu0foH+9Dxcberc6CnxLPg
URLYIWbVJFYdcHirbirtDOvvDJ/Loylgz5nGa9v3s865/1wlFFM9guNnL534
D+xTZjowUw77qsw4ws8D8bOhlqd6EezDXxqsJtNDRC0mKqNG3CP4fvV/c7qw
7oBKCIV1/s955w/ePyF+xDsys2vBj44XiHfW+xIQm5TykePAvzfkIL8JzI++
d8JNFSD/dwbuPngW8r6X8s2eRqgDzkJKZ0ohbxcX8FRNQv3zr53Vfgb5+/Cn
vA07oC5kJbkR6qCfyUnnPH0mj4QX7UQHrFnvJxqmH5CDOvqlM+4JD+QVZ8W1
y2M+BPRR6vWnPsg767d32bCev2oWCyLVgZ4DWnzarL7tntxUj3lSN17NkZm/
BPRTVTxSz6CuN2gV+Y1AnRcKc7F2Afldx3FXAOQ1m45v5bNQl/7xiR/9AP2J
xM79TbUgJ6GYU+kMFwHLb1YIkoF4FDFLzG8AP86p1Lu0QX14ZxO+4nGDhJ6s
7dooyT2Ej524pvYD5KzabQ8nQv8cuk0j5Qv0Jynb1ayS4HsDrbFFmZBvQ8uP
fq/lasdaKrN9huBnw+AAFy+g57xi032b045r9TJFCVBHwr7IvbitXo9en+gM
mwI9Ohot908Afp2K+kJWoW+/xtVHSMj+jeu01qangfxWiZACr381qOzEzrJk
6Cv2Hk/YcA/wpbTnyqNW1r3O/5UF/mXvxvGk6Y4J/lF84ZTeqCXUBVvTuafv
gT6DVR9EOIxigdqTS0EwJz6W38PnC3Z/tPl0lN9WwF3LmLgo1EcxkTVneu4T
8F4x+W8/AXdbd/xbZs3RxCmLIwqs5zDEDN7JA14Ovh87ex32hYK+bmkhErHz
+L2UUODfs0iWnoG5NXsNJfsT5L35IJUkDaiPSk/fJTXDnH7EZYCHAvHJ9lIw
Jn9oDCv9IumsZc9Hy88yia9AHzmLbQ+KPo/gH86HXwRAHfxR+DTkR04fzmJT
d3sA9kkxM7WaBbqzxb0S1u8ueU6cPRyQb6YFnU+bwfxlEkxo+wL2+ZX2n/7L
02O4bq7KiwvWnQho3jba2IHPaIp7CkC+kanzn9jXQUb+S9mJ16CfPzOu0WzG
TkcUsnaeKjsZlb4X/OHE+j1P1b/DLpmO+oIEqXJA9xDkpd3vIuMko4Zm1j1l
5dzrpTTMKKgjRGPkDfTrMW2XpCbYaOi6r6pFJzsVGUueM/sDcvJnay9WCgyg
gTRD68cg59rCrnFxmN94/732TAK6m9KpNFPgX6i5lh15goLJX49K/wM5HRNk
6Q3rB5CDZ36tDPA3TG3LorCR0ab5eAlndhoqnuY/lAbrFr3JuZhynIIuGNhO
2cP37rZyCnbu7MeJFyYkjVdJiCjL0RKh2o828X/TzIV5ZyTK3VEO+Nilsl47
XOlHyq0iq7+gj69Jmx/sW6EgMQPulRurFLRni2JZI9BF2QM/0ez7Uey6S3Ks
e1HMy91v1Dj2Y1MJt4Zq4P8huzbcDOQPWMft7IW55jNbR+Z2WHdjZbucLOzr
/YelkUaY0xh7KhLugZ7X1KWdjWEfb+1DHVpAT02lMjp9tR9dc0zZdRf2FXLM
jT8G7HDo1YMqzEZFpqdC7BNZ5/Di2ZyPoL+iN/c1IViv+Lv0isz7YaTurnwt
i52MTx5UOzPJyEN2Hdd9H60Oo49aJQc+lfZhrrdOEleYeYgYesCmY4iB+O54
q+RyEPA98wM7+f+RUMm2DTy8rHthTBKt93MTcP1TV5W5IhKKPHoh8MIqA71x
WGAzKe3FEWZnglnnO/W4/PHs4R9Gbu72NJY99R/zfGW9b/vN7s+CjfMwUtE2
sG8AfTqfWtyImMZogHg9i3VPh75u3GGdMAK+La/Iy7dcgx6KP5j+wjaCOCKM
G0dHiHgyrDlBehYjO1W596XCAyjHnbDFAOQEcDtFngE783z6OlsEuHv0s/kB
63kme86F/Ox2MtIpT32TCfQfHC0VQYDPPWcLX/uz7kfQN+avAfzGSc713gJ+
hqaXPOscz+AMouRHsIPVvis7zUD+W9ui/j/LvehK2JjrABsTxa6xmQz6RsIz
wlzVHpBnpa5eFG4A+7Rs9HO/DHJszdZeuZnZi04G7fJuvsdEhhaBcn85qJjx
ZMXxLdS/hllblcI9g6jviC8tEvC5Oc723Md/zWiXYJ/GT5CvqimZt5pOxRr7
t3Qmsebk+EdKyiCfRiI5uMb3Y27jKJIQ8L/UjZW7EjiE5K0E51nPwcrpfUGX
ob8vCjnjPcQ+hEJzNxy8B/u1aVQxIbDuhcsPfl0DdCfdX13+GRT8fWvioxKw
s9D94RsnOgcRx9tXW5NAjuu/p0crYB57t6Kprc02hCJ+9Texfl/JEPOnCW9r
Q4m2uuNsoI93rfUfCdA/YCLPh0unE62qGFuGVQ2ib+HZYjywX+6ChtasxRq0
tkns+lmQU9tXbBwDdLIRL0nCuQrJ6LvfFjdkIqMxq9PXAf8uCsmKqqBPGuOl
UhTY4a6+eOkyxItvTJXAxPMG9DV/neE+xSEULTYnrwnrfnl4f74L8HC+6WGw
IuzL+MFm4nYdKha4mT5RCvQ1FTEbgyC+XD8fCnARHMDffRLEPoF/f6uFfBWG
vMTQy2ZjxV1N/PZB1n11BycCs3Xg/7f5qW7pgnUlF3bcr1PpRxXftaStIS+Z
3jvhdAPkPCOtJ86y3ifZrXq0dJGJVkJr910EnORKrmTOLHchNo8czQrQX9GI
GdrtRsEr919zjLPuYeWT0aYDHh/NJz1lcNLx6BXyM01YL9mpPKcbPi2qiX/o
QG/5L1f6KPA9/HrgGOt8hc1K9mvHX9Nx+PTVXNZ51x+veOWsLg4hlxsTissQ
p6W3e9x1/rWhOPvLfN4Q747Lx1/5QT1KXK8oRllsRq+t7rI1gP3fcf17e+g+
CW/VO+gcBbhqf3Hgmzzr+Y17MtynIO4qczgcWPfCyr5RVJkdGUa7/fdOBEAd
OXpwpSQV+CmSXq/KIW9o/6Ty+0I/MXk3Xe97LOChY7I0Bej2hUdPhTzvwbQj
XDXrl5rRwalRnnLwV/BQnfcA5I2UU0L2P0H+6mmL5Am5MVQZPHV+FepRxcdS
HtY9L9qPZJjy7GPoSuOdy7LQJ3Q9LTj6AnDCv49/rmp1FGkRVhQONrTj5ZBH
HgIzGIXsfbvHc2wUHU68NXwe6ibX9sauzazfw8L8zhw8NYo6fhFk+2C+rsxe
55IHdpBJObflUOMoeqESqRcK/UnspbM/TCAv5dsJGkWzjSHbE0KVrPdw6zi5
CFwjv1Bq+DjPEdBnpgc7byj7jXfI9NmKAT5X5zvv3HAcQ5suRNHqgJ/o+CJx
J9BdN/Ks+JWMIfLQ792l7C3YZ6/Nn4+TGO3mzvZhgB1+hqZK3OHuxp4qyn9Y
50nhp94SrHvuW2VH8vKgn1s8llWyDfrpxQjP7pTVQVTU4DObAn4MM/Kgd6d1
o+hnYZe+A33IzDgnMLsbi4wej5de6UVRfXm7uSFPhpbrOudld+Hhn+zS84CH
C+Z8z06CfynpN+VGwY98d5JiCTDXJT7rtHCRH0Q+7Su2DiB/i/J3Iqs/1iDE
dfAtMRFna+XGBo5u7H3z8qQd5PPCYqkfjfIj6Kzn0I9W4M+5U6LAgLjeM/sh
Pu3+CNr0LJzjPfhXiRx3ZfscRjJNIpa6DqNIkar+Xx/g5ECfp9Nz8NfMsTye
1PhR9FT60r402G/8Sl8TaSQPbbc066wsGEGfhqscakH+mwbhO3lQj1KHE3Yl
8I+ioR3dfTtBf4G3+U8jwF9eTQ41YbDfc7e0mqOgP0zZRTUrca5HN9HLCPFh
8OMZa8S653VHpWMdG8hRiTHhsj09hmhOidUvwe9HS4r1Tg3mIc70kUyfiBE0
/URzLhn08VI17LzMuq/PI43yBvBmsLH6DhrugLqmFB8Kcq7ZGWRcahpATq3L
/Ky/97m/t9ofBnk1kfTDnWxKQ+Mftb8FQ5//a+lmfP1CDZLWNLVUYqMjgUTy
TCcHHUdLbxF809CEVDT4fkix7usTL93IxsnEQVICS3chv/E/+1eWBfXdrPJK
9K9MBrYyfWGuC3jOfdrfdoKDjvgk5OY23qRjDvOLB95AX6tWFHqn6gcNjRxx
WfkGctx3oOYQVj6MkPRqXhlANmzzNgEDdNwt8zP2DcRXbzHed9WNjkhpHhPr
uOlY5Ba2ywY5TWmjm3qpdJTecyclhp2O+7QaN1QAP7cJReoa1E1eyRZzwZYB
PGzlahED+71ntf2otgIDGW5KDKKwnttbdMg9Ava0q1ZcYZ13n7B74mffNgYu
eFK8VwboO8hqTuehj7vE/qPGCeadDWXUM4LDeYgROb/FEOqIoaH31bQaGpYe
qmL7B/pPeyb/JAHdxdfzqyHk216Jx8vewP/qnN7IdH8/0k0SE8uAdd9PZeLt
kFeVtUV5lFKpSHxcnyoMdoh6/7VNGfLVVMKC4Faw53Lfy/OTkFdvP/p2OjC+
C338+d3yMOTvSYVcbiPgX5rSPOKt3Ylu2QYIqUD/Jtm5VaEyloFb/zWXsO55
ueugI8AO/deQ1nHRd2DPIY/PkavLbShi+IpIREw/irKWHQ0DOaoizzu9l5vR
7nOar3ldKGivj8B11nvp1K4zpaagpx1WCUyF/P36FGGuD/i/RB/nepHRixZv
NV+ohf7l5alGDQNPOg4WEdsaDv2GvBWJEAF1Zwt7Jq/+IAPqwoO9e2Bul3J0
Dt4A+9JgF93ewxjAmk4Fr/0gr+77Np2xEfoxaYqQ1HczqKeX0ptUIE53zr/b
dCGdgb6tF3j/hIuG/9tjFVDIut/k8kn/92CHlJANayg6g/iPjltWIei/lHKr
6SngU3KXzrEniIkletPZvkHchY+l5guAfZyEiSs5Pwfxw4L2ZjLg/KJDCFba
TUUJ+sVGhziHsIo0m302xHtUdXK5Mcj/0FM25Ab06clTVsrHqtBd9bWmjSC/
ZJxtnJ7BxByaRY/Twe9Uw6BW1v2EHSVR39LpTOzUE7KcBnE3IWipHwr1UCRP
58QgyLHmerz0DvR8ReAVD0mloLB97dl/gP7H9/oJMugpXr0ilw92VvT9+exA
8BAWlnf+twT8u/yecjhD373kJ7MmZ/0wzvXm+10C9lF4KCmpzqr/xLdDVkpD
+K6x0+dS0L/omMS6eMh/B77vVJdzHcb9rwYY3BAXdXsHr2wE/hdsY/NrHjLx
NjOZbnHAG3GfEOUj+Ou8ZvZK0gLE9emgINbflxM+l68rA326D4VboO5BXKs2
LTcJ/DxHueKSgX56i37oRpjrQ43+qBeKtSHPPHWRoVt0kBc16QfzxdBnUT8B
yM9r3M7tOMc6J13qULMX9D+UyZFhk7NEtGl/+Lb70QxE5siMngF+kQ2WZ7MA
t7wVerTHaUx09IPQvVLoc3p32nOYQn72Wdj++hCNifRnwhtZ75e+d1jJOQlx
SpRSNfibQ0MTP13FbwI/t6eE22fob3VMizYYgL/m02RafrD6onjlKAqdiKzr
s19arg4gY/S2py2MijnLPRdCQE8B/talMwMD0DfqyFSAnLOeaw5mAz6ViAGq
2yE/dB9Xi8qg9+Mbgtf6bCEuDNwKJGkXh5DBVMhZC5jjzCVk+rygLhyn0B1X
VgaRi7FAGOs5v5jIE2dLYX7ZlZY3rPiciugOu2wKIF+1XQrj2Q7rNr/90co6
t+sB91B6PsT7f+UKA61niOj89+A7PaD/s8xEknceDUc9v7XlNezrGvFPUOAM
Dbl/Cks+Bvl85Z2dx03oe9tqXlI9wM5BYuf4O0D/W9a/F4ogb0wfuDKh1E9H
54ZUXWrYadh8QeGoIdRZ8hGTO1+A3181xXfvPA0vP+D6EwRypJbXkRJu01Gu
0aw3P3ctFuu8YWMA9uqf4HuaAJ+FEsExvEAfdOX8vA/4hG8VfusHupA0p8Dv
mSZ88pxGVwD8m/Ays4ySBXNW05Vn5lDX1ndmJ0St9CPemmNbFFjPIRtEBieB
HOG09oT0YzRkXNpLfwP5/9eqj7sw8D+fmL5m/HsAHaPJ+O4H/kvj/ySEChtw
sath3H8QbxLfT12So9FRk8vbqEGuChx1SeMX61w6LOWltRn8leubyMUA+uY/
Kq/qYf/fvvmEeXMw0ZYhE5O7ayowmrr08dNPGlI07HuxjnX/VpBFqzP0Y7xJ
xqVKsf0oVGB9Vwx8Tugb69kBvWzvzMPPkN/PqD5NWYZ93MwqIBwEPZPlbRqf
wT4L7uUayIO/ijRCnFe+NuDN1Hspw5DXShVPvxeupqHLN0WE3WBd8oItvyKs
VzZyQ4v/OA01r/2gFwZ2+D5VoNgM/PU7d+B3sO9Ht4wXhVi/E6nnORwAuzw2
OeG/P5uC3tlz8DzhqsX8OS1t9YCzyDLuy9a9ZOR/+FOGN/BH21QtkoC+elpo
qzbgyvlgwinW+881L3pPqv4YRNsySQuZMF/84Jr6yHqPjhGiPr1DexAZ3zG4
mqLIQEGdCs9vr8vH0m1ClsqAj3cvbXKewudGqZPaHkA3Z9L8jgJfwqy+hyzI
v6qQc90ktgrrbZtaFoR+3cCkzrwV8oON5RO1H2tq8YtAxn4bgWHkLzoongt5
Jvhc9EwtrKujojhRCHPgSJG8wamNAyioaPJqG08+vkN74ru4wkDtEj49x8Ee
oUwlWi/QqyIzrGdgfq7SD/nRz8JzdKreceiLSJOONS6AhxSNe3ddwT85xK9G
MdCHBxW0OIZBfVV5F7nvL+SZ3iO08kzo6/yN1cVY9wp7lGStKwGcPOS8YOnP
eq7xOc9dVVo/srwuNL0COLomWrjwCfrS03t8SwNAfr+/86cgkP+d1lm+bNCJ
E4XiksJh/5G0SIvBRRriowYxbaFvv+td+/4h+KuOyDPyh3VvrbuVoTHo+dmr
+lIg6D3jJyg0C3SxLAHpbJCf4u2Z+xLWo2tvOz8E+WdetcazHfpt465Xvw5D
vSw4/46LAvJGJ93FLoP8749HvJ7AevUz1SGsc6B6ys+ONwH/FpkN2wLg+8n1
FZnncmko5dBvLQbr/R2xenHW+QuPdGaeHgf+Wq+VHzSgC4d7dQ9B3iy+WP4k
Cv4/MkHkldgoEc9fMbnI6vMW90nw7YH4lqJN2QlCf/vtThc7q963Rwo9SQN9
xd5Im7wCOtuGh/e2QV4LvC72hDXvn2rv7qCAPTm6dT/thX5CpFSz4y/Y6ZdM
g4wv+KV16VCV6H0mWuNP+RAHeIjoUqhz427H3ka+d7xgnr9vsamW9R76hVMF
vN9U2sA+N3uvAq6uPow1wiCPcIeTuxHkV14L42qGvHDNK5katEJC13/GuX6E
/l95j/nRLzDftmwKPCsAOC8R1bk2CP4qqZKWVQP9nB9313KlUZG75wbaU9Cn
LeKFkgjQXc2XU8dBzrEPf6XVSnvxJJ9awirgELX6d1ltG0K3fQICDCF+N2kb
W3Ow3sfWZb9l4TKMfq5abv8HeaZ15sT9Kfi+5RFF/g+Ad++Pa8ZHAf/MjakP
D7PmZB8fxmaYg2x8zabeQfyeLzrjWpNFQTUSag8vw/4uyBxttYc4Cj0WdzYL
8BnjqWW+NmgIbdXXvU6FeBl/XdAnA/aKN7c10gQ5m6M3WkdAvJ/neLr5dw8Z
WaoGOyrsYyKN9K+v43lg3U+pR0zA3xdvsmkacQyhHTkXTTRB//vXT04uQ9+T
syJUdx/ygfPeYKNhyA9cKp0T5bBupFjDP9b9RyPd9QKpsC5NOEFnF+xXR8dq
uYR171J1QWs3+EW4Pb/0HvQlmXIav7+kM9GJ7W/JUSDfna4Y/hXWrXyp0pRv
P4TybrT9CoD47XhLpT8G/AS/UTQ9AHJKhVrf+67Nx80HJR8ls84hDMw8aJA6
jEr1NnjcBrr8l+NCvWDPVPr7xlcDTLSx69HCecg/b/+EdDYBPit/XeITCKWi
1kv7/3ME/hX7zaOTYBfB9tmXHqz79lpaB6VAH4USFf4JmCcHfkl4a4JeL97F
j7Deo5nyKhA9BnKdtwRc3MxBQ/7e/D8DgH9NVEyRPexHs+bsplnQV+trYZAb
6C/rUVh9Gfaz+5Qg/zDs++q1XTWnYV3fgcCO0ffDqF3kZM1dsFPRXktzJZBT
cEynnRtw87vw8WgerMt/8vPOQPDLSJjQ32ZDJlKpDK7lAFyYvPeJIgF+pJV7
otgBTz5H7zxxhfjIsFb8GAb41CZlrfVknSupd9q8HuLj3PXlwRCIl8Sgxodr
WPd2yc3eHCONI84Y7/0mvPlYIlfjLWs+FdReZbzLG0deop3SikB/9HJP+ew8
RuUnze2YD8bResVAdBj01O0d2oOAvtzSX+kD/Dc/J7qFAT08MmGfB8hxpnEU
se7J3Ww5KxAFdgs99/3M9HIN2mu4ttlMbRyRw88Z3uWuwJGf+AsEgV6hYOQY
6ziG2GMue3wC/M/dGTynCPPXj1r18ZaeMfTP0CHXH/B/x5fjgwL0sRyamxYT
2MZQUHvv8ZTZX1hS9q+pNOs+D12DCHmQv9M85Z8FyGFnaDO8oN/my52aaikZ
Q4eb18RmclbgeTmdF7sXmpF4TkjCC5ivj2qPxb4Hvww7itvKF/WhTTYX7yew
jyBJDyWPItCz4cR7TjUmESW7NEQ1A92PpLyRHfyiNXA/f18wAW1dcv/3snEU
FaXNPx6DuEg6aEI5B32v2ykVV/dTo+hWy9KHMog7+THdokjWeZhKz/dEsI+h
P7iei7XfLGLMp57C3yj3yrBWLMz189Nbp8RY74N0Sb3jW2pGko9U380CXlY/
eVjzcLZg91HBY9YrvagkeS/eAfpY3vtvN/aqxxz2VWzPoN+z+EV+tB72dZht
rkEE+MfZ89xsAntQ+s7puFNLQ+im6QMHMtQFjz+fa3Ohn5zRd2mVHR1G5a2f
ru4E/KyN8JDZCn2s6h6VV6Orw+hwniSP6as23P+3WEIS+lgG/TbRCOJj8Ue0
3lngF4zYzybqTUKekXd1VWFdAzbu0QdQv14m/kk2Te9C8UqHfbYBHgZXLFpE
wW51l3celYU511u23NfkywiyfvWf4Qvgf+iz7tA2sFvuAemTzREjiFhbrbqL
uwVH7CJxsu71SX6ZujYd4n77zoaxcKgjrWv2DxlCXWnx6dE6Dnloe4RPAhvQ
d2VdWGmGuWJnVdHdfRBfVpoDGQYXiZh392PJXdCXnL/jzUyGuj0Z8Yf3PtQF
jTp3z9Osfv3eZ8c+kHNunx9HHNR9esJzwRjoA04pq/37D/T0X5RQLQa/PKVM
tYuAnVtuCTTrQb459aH2fhQHAWvkis3eHYI+p534JR7WOS1BoZvCutrVxr+K
IR6/3d1yzVNhBN2yib7ZBThhlsv+bQM/5n7nPrJJYBSlma7beA7woD631pR1
vxW1/sIej61jyFfOqmsOcLvnT8PNQZjH3/yMJx4D/P942zM4DXkgLJEnVaO6
HSXeJje4AF0u9TXlAtSFDJev+vpgz2m/ev67rPtL3pWbqEOc7lP7xahnI6Bf
F/pKKQ6jKNVm6fcRwDntjUsRGfwr9kCmn8tqDAmk+8R3w37bH/XfTgE5N2V2
P74A8peKRSwfAV3iNFv0CXoHYgvu2pWcOIrQQr0DF+S96L91R/YudyFB9bNF
Jqxz+L9ovFG6PIQJv8SXesEOPM/UXr5mndP779FXsbRhbDZfvs9wmYQ2lV06
JVxMQvxPI51mOZj4v9ONp0PAPtd2HKbxgL5G1Hs2LDr9yULO90ISUtmh2f6Z
g4DsJncy9AYZ+GC5h8wg6z7D95Inj8K6oZamHyW4Yd58bGkx5k9Fz7f3mhD/
5aFONEpohrn750feYnfoqxq/TF1oCCKgj9xzpkMcMEcHJQWwcE5VzWO2wboa
G4UvkGHuPh2mn8Ub3w3z1KI/N+j1o/1wxn7FQXzS2JcteLkXDfDseXYF+I9+
dwzzg/m60qZSMxnkjIb7Nwt/6EVC521GWH8POfWz6scS1IMk7W767IkqdGQl
ku05yJcVXm2uBfzZ0X6+jl7FSD75/MGrQA980jD5WYuKtlw+cycV6J/Pjj+9
C/IpW/IJxay+VOpq8G22WnRUPSZ2HPgd2ut016RSUD+b8hvz1RqkrlbV/WM9
zPXrvXT0Aa+eT+vZ/y5j9Cunb9sRmPeZZ5IMvcD+elvnBk1BzsCrjZdfICYu
qkyXlIS6iRU5M1n3VUV4lzWxZzJx64LjBOscivbbBry3V2qQ9aYEvsqfg/jc
zZMbwqH+fcou0dgD/Ntu4R8dsN/G9HEF5x8wV/97fHUr+OVClPzmUC4mZnO9
/kNIYADl/6xsrwe8K8Y1lYyA/fM+fe2xDiSg6vlDEa9hvty4/Ee6GOiuSu8p
Bl4kdGiXu5sZWzcS8blOvg92YLO0ucwEf3R4X9h9hKMd8afq/7RdHMIPEmbw
L3YC0lTMVnOG/HFWvirhj+wwTookrZbBenYkpdyDIL9/VXfthbFhTNl7Vfvh
vy7k8Ph9W4Z3D9rzI0r0H+cIvvgxwMYT6suex8F8E/C913dcfY2AznXev4I9
sA0RnxToqIJ8E47shB+RI7hi18A5Y6hf7VsY1V4c3Yh7Rkv49QITH1IuCV8H
9fcCV41IJ1s7UlzP3H24exDvODyfLwG4LeHdUhKU0IU2fy7JmAH5CX+K659B
3OWZfalwBv7ZNxcdF4F+xWAupzuuC133XWnfDvoQyp2Z1qD/X0eREHuoL+mO
vsy0TW2oxr6KuZlrCDuS9hqy7qmr9QwXHQpqQ1+m+RwPgxyl+sh1RwCfx6u0
tp9ka0Fe5mN9fFwjWGPVJVbxbg9y9LatNoF9rI9Sy5CEOG3j18LWgHNxW5G6
WODXv7+4YhE8hK0IjobCrN+T7ghYFCR0I6GJI6pUwGHvYX+Ns5An3wusoQbd
JSF3teQ1rOfOHQqSX5aCnh3jVwYPchKQ2zbPG9bgL2n6brYrsM8w2eieH1CX
Pm66f5MP1g1zTAiWgHr9nfOXC+t5VJsou3HW31u+6qEc0zQmukwgXnNbyUPb
QzedquOg4XVB+/mkaUz0pPjTqAHwczUvFSjpUDH7uRvOs9BHtvpfVmxazkO2
3581FIRR8efLnkwizL9isdqerOcWJAmps6zfkXf0Jlzmgbpb/WLM9gfgdsD3
ZeIZLio+f+z7q58XhxC7ITQ/KxhxHNizUgX8Zc0j4hrOw2jM/qCtKay7M8Tm
pDonFf/8crR7g+IQQmXm5uYg5/g53RMnBQfw34GmsE8wR3z98z3QMLIBpWiH
ys2D/uPnCqcPw5xSKv25h/UeU60sM82Pi4bLnmrUrktnoDUyC3tegP03H1oR
dIzvx98e7zbuYf29w6FA2RHW5a+rXPuxhoZvDKdeZQf5hCn79b3Ab0Su2ucP
+pQ45J9z3TOIDvcWW0pDftBIbHq9wk7FhxvOjlhUDaLdIvMlmZAHnDTeHHAC
O19L/rHptwET3SgIy693r0L/dV43jeCgYrEtp2vkwZ6Z967z7Af+RPVTP95w
kPGFV+5P3/MPo6W7WwZV2GuR5LSol18GBQ86xZ0Jhb5h9X6k6C7W+0R07QNh
nGS8vijdQBbm+h/HNRrGQM+s8vdrXbvImOtO6r004P8tpW/4AfJMZeMhgQoz
Gu5b+fCtEeYsBwmb++7g91d8XeOLHHQ8IuXIZFNgIO/d66PNgJ7pGmu2so2B
S4V9+TuhT+iWs1T2+YdRkO7zjPgBOqZu4N/xFObkP09w9TVYV7HGvWAWcBsp
6H5yvo2MFGhnHt4E+v1LsvojOoP4sfa4/BaoX4YTm2e7IhpQ2e/Jcl7Ib8fP
8gfkQR2Jmb9gcAb0dKhIq45jZ+I8tel6H1MaCnn7W88C5HgK0sVigf9+UmKW
REw/evrNaVNPcxNyzWVKdoP+AZL+4fWgZ9NxkzcdwH9XtYAuzEXHE5YXpFcb
B9B/z+OilThqkdnDaNfNN+lY1i1g9wLr/KMn14+x7HmWs9inPZOB546JR+yF
+WFwZ+NfdeD/6/4vbQM3Hb+UMdHf6EZHImezYqLBDsfKuwvesdNxrLpZWhyV
jjY/mU/uZtnB8bzLhpYBTLS+eWwdyFeP+6G6A+oOoXuD0qGHI7jgwKdCT8i3
Wo5S6UtQx7kuCV13/jqC907MHHsP+cHHMUJcE+Rj+sipEMdR3PRtT3MV9ANa
NnaGHat5iHSw9MBqwii+ffr87UjIX9m9tgeqgR6x05lcAvlnNvVW5L7MPjRS
vznuOMQXz9jVZB+OEVzFsSmmcoCIBI5KR/4DnJ8ovFq1YesYltfU8quBPH4k
Oah9GvRJ3kRpcrEawxeXldYWQL+USjpAKwD+zSGb7yWVjGEho5qWDshr/vZG
kevY81Hx5cMuZ4fH8CNmQxzredZ5++iZ9YCfvRybZB04x/CDMcfTWzo70Mfq
MN11YIeiTP+fR4Cu1Hi1f+FrO0rj+5Dm1fwLPdn/c14Z6JzyQ21noW+nOSi5
supyJDcHw4lrDD916vv+Iv03SpK9/oYM/vrKvuUG36lR3B/LHfEc8p5O8rav
c/9qUNeeQJnjTaO4pX6pMgX0L6lR8g0HvZTkjd+h8VHsq9MX7AHy151pOZcO
eDO/aBCkcnUMiydXiB1cbEbSalf8xIB+WHsjuqE4gqNtTbpTwS9h/z0q8wO6
bPbk0UGBUVx10qpnI9S795Ma24tZ91E5C9e3Qv2a6cmTfwZ+qdUkNRirV6EA
HcVEV9D/TG284heoRxWXzIqMwL9O7Yl971jvr40U8hYv1KA1xX3eOtBf3fm8
MJd7cRxzf3lk8RTmtdjuwaPN4MeQ6EE1tYfj+NlCRdeGGYwcPmhuNAc744Sb
D6vzxnHstM1kOtAPWdyzHQQ9Taunc8NADrWdcVuEmYeSAvniTrP6H9u0vC/A
H3O2cN/ewTw0wNC1fg5y7KiXRnjI49hJ993RYKBPXqWoeYLd1OTj7u8Av6ic
Y2sxafiFMpzYZ6xWmtFXLg4tWbDbkT0eZdKgZ0hvpsRuiJfFdKNb33vGcILJ
tYov4I9XvNoxI2AfofCwjCeAn5fTS9mhcxjpBbW5qYCe9uz2ZjFgh+4KRsut
KYxmx59H/mRn1dMybjXAldUx0UnyCOt32IjUq9BnqipLB+cBnr9Mfp39COt+
V8O6q3QiSvEMv3ES6Prvz0XbTWO0wrf32VqIs1sH/ztkAX78khRV8xjs7MY9
4NAIdfVOp1PAFohH9mcaaoZgN2rnxWAE/ae1oO18INR302+/boUfq0cFEy/b
c6HOv+NsFGgFv7uoNokOsuRc3Ltw6UMfSnUqm3oCcdf/sr3j6VAeonm9Ezz+
j4Q0L1UPkVOH8cN1dEc7eh7abMIMPwlylFzsNzpAXIdu7Yk4Cvt9mmCwi3Xv
fcdYqp0W5IEimTVcZcBvLd7dIwR90QJnsVAtxDshsqktFuSvd1deYT2X4dd/
N9AJ+Cutg+O+AM6NmDYVDtC/lRrNIk6IC/nl+wRWPO5Ty+1xB/7na8/27oW4
xiZS9G8gX/7G5/A1FvWoiG/6eTLst0r7oGc32EviBRvnQahrdyOSAurAnh/4
KqbWQT/Jo2ldWN7VgfzPBjfuBDxE+2sHtwGuorvDa1nPw38ePMw7JjeGt1i6
jYvNY0Tr9F3jlfkbnT6c2W0N+C9rUamhL9WgjIiwbR6gT7gDW5kuxOksFg6/
Dvas2NRm8Yh1j9r0kylL4L+jK9birVKFcnucvxQVtSPV15s5FGHdfplH+Qrg
r73Ma+7GkLeiNtS+TuRowbzLWVLKp0bRzrEsxSXA29mlwoW9XC34wNmODp2x
UURXa99DBP4PK8eSr8O83C80PMEBc6mQGq9iJOC5gXCCXgRz/df7ybt4QE7r
kqcg+7M2tLk103YbdzeWlhutYd0Hh175fkpj3dMaWmrMOi9jy24/gj7M2x23
FYMKQL4jrzMhILsLS0XotbGegxEr4T/UnNGF1L3Ez5+Fdaknd66jAP27SWdQ
N/S3vjS54wIwp28V2WnpD3JinPGbRMgfzd9VORRetWGrk5Li74D/3OsDV/+B
no2cXzdfed6DKzV3bLMD+qVnqq05IOfSs16fINDH3kT3o5DMMDImxmTbgT3P
HbY+cwHm9ISEqrd5I8Oo09SCZAm4kt2or1DOTcDLet+jXaG/Kpfa1TMPfhE4
3uDdBvN4ZHvJQuHiEJJ8knDkHev+r/Hl9Wu52vFGkf5tHSBHSIa2S/kZAcmO
6gnXg3yV+DrpVdb5I+u7fmKYG0Qf1yELsJu8pvenGJC/O7DJ5zbE3a2pnw32
2d1YTINf2m11EOlOvhjaXkJCnZv/btgG+lRee7WQA/2Y7PrvvyWAH4U2Fu/n
JOCTNuGXROUHkeJV16SCoB7U8V989jT4nXtBXvI72GH1bevuFOA/Otr0hgn0
3fVUvkzoP9llKkWWANcMIzLlG/i36E7OM86lITQV79dyIaMbSaZ7y3iDfJ++
P+fMQB+7wexy1u+xBgZJXKphBJxFnK1knYNDN2i+0g1zaOfDkj5L6LuKDoXw
ukF/2HTxAccziOu14Ym+x6GPtbn6odVxkYls7N7JsObfGnufxWvfSPjQqMGp
YNjXTM8tTm6onwOyRmOPOSvwkZji/KiSMeT2KKHwHNQ7pTC57lOs85ey2uQk
1cbRZn02hfuA5/+aBz1919TiW49jo884jqFkV7z3JuTPM89jnp7kqsVvrdcz
knvGkCq2Lxkb/4XeiAhL6HK24KFqU/UzbGMo9ERf/kOQz/fQXJf1HhNHMX1B
B+RYPN6SNgd5IlvL5c/52V+4cQbHnwf+V7x83w2g/1Tf5HjLdV0+7mJIxh26
OI4qVx0+GLBXoMLIrDVrePOxAqmp/B608h97xZYo0CfILNjbbV9Tga3b/2ZU
PhhHDwP1dXqhb9/6M2dRHfgjvAv/+0MaR1uiHGNTge7v7X2Z9fvgw383XB1B
jtKFSd5VqFPz0uOKSrDfwwK3vVZUx9G7FH19fZi79cg8XO/YW7Aqr8CzM2A3
39dfFweU2lB+nuMnA+ifQyRbzw6DH7XUXuxpg3hxGCGYsc6/k7z69KMu4CHs
UZSNDcTF1m+LV2Xvk/CpBWbTA/Av7yJlTzDksXmdm4PPwL8WblreHJ2DSPuC
PFsPyDlg1SM5zpOPA0p4Aq2Hx5B1KzXRAHCl4nSt2xD8buSwLdZiiIFCxLVf
7C/uQ1WfzWafrAX7jKQ4GrONoINLXzKtB4kogyZeFwf+TTDXUDeFfPJp1XrU
D+IoqZW8p4X19yuCx5XHQL8h6ujPx0FAHd17TwiAfYrdch/uYN3jSZCNEAdc
nZTSykrjrsU6z5yjlBRGUGv6rWungJ6yiy4QA+uKWXanuEJ+c92txJ4DfUrE
kFAXYU0+rjXffv1k4iiKkmqytQKci77WvysH+uR7HViMcxhFIaY1fU0gp91A
MeCZVz3eVkX52gv6j3eZ4iDgVzVptZEHPTcrCEY28Y+itef0OawCqIi7ODx3
COZl/92nEk8P5yGjoHqpo+xUdNHjGXXWbggby9zeeBLo5yTjBpOKfyPR6Z50
b5BjmmfSeox9DEmoajjygl+0qU1shbCvEf77N60aR9HmuIvX4yAvTWaZ6bVA
vDQ6clxW3jqGzCIHjg1CvtW47nRNLbYKS81ZCysBbovHHXv1fEjoGb1jkz7k
K4Hs8YhRNtZ5RiaYxOhAydnk3jNgH8ze0bQR+Bs3L3q01bSjjDDLK02s35Xu
vurmAjp2L1M2BX32f6c35wE/j8mbkvLTY6j0feuovg0RPam/J/ORk44Lsnov
6sNc82QB270FPHxx8uXLh7ngStcGt1chVORq0+Y9CX68bIYddsDcYf8s8rUd
6/4uk+B9ipAnxx2cTrKea73sN67pl0NDhfwPWlnnOWQc+OpWCPRu11Nbx2gD
6Ei4/nkR4C/2u//+Vh4NF/BtPHKRjYY6Z359VAB+Pg/VRx2MAfzixH+ysUB3
9FjTsY9JRMfqJV6Ww1ysJ769GMOcJV6adHIB6gvXRv8R1nNHd43V3nk6U1Bk
GZt5I+QxjdCjpd9jGXj9eqpL0goFddMz+Qp1O9GDmI3yfDD/apd6pWZAHpOU
Hjc8BHLko911GDD/fnHTiZKJZqBNl/X+sHAy23xHvM6NgmNcmHqOwC8W7Ln2
N6uuvRz4/A7mtQzLE499+vvRszuN31LBniPKX9lcQL508K5142x0pEHUMvEG
e2qE76a5g3w/dWb6k1t01DzWzjYP9HYrDlptGBXbL1oW0WEOFbZYR18F+fS+
V9HJ9H688UmILoZ5cFtqbRof+JGqV5wiCvOjQoB82Lv3VLRiruFMBFzFqmQ4
v4V5dnUHxTZkpR91agmV707sQjz7XFdGwb/3CTsmM8CesSUisoZgB472q0f3
g5z+KU4G6++H0xPxBQuAQ/aPdbx8D5nYbiSam3VuMt9524hLICd874UjDeBH
5T8MnbUwDxrGhuwUBv66bErvN3YaFhMuGKiD+dF6g5a8HeSfrec76zXnafiB
0efHJ4Cfmq24chzoxkNqmiYwzya63PywaYaG5F9FnXOFfXVZ6L2YTKficsXK
t25g5++UbiFljyq057rbMjvg37L3hs0C4Pl4/fquFOjrdv9N2XUD+pA3SzsW
hCG+2hV3tQ8DvZ13kw4/1PER/tUSR4jrb+c412+HPNxQff3RD85u3OGW3rUR
8sOc9j2p9zCPeJEMV7c3tGO1L81Nr1dH0UKgpeGiez1KPXjoigcXAQcZqShZ
Q95wv6XsZMo6v6X5SvwnyMMBYvtGE+RH0N2DFl2se3V/0uw1xljnzbb7tYpA
Hghp8An8BHm+/Ns5Qxp7OxZiO+zbKDeGEv6phLkD/8N+wRJxqMtSztwPRkF+
NXUixgnqDrVb/k8o9A+hOa8LHt4fQZ8v35mrA/0FFlOKe0aImLRWn8J6HtR7
jGm2DPPy+kGt4jnIP5Iv7T4IQ12L8ChUI7PuxZPKYzyC/kGjSM6QC/J8LFvU
sj3MZU0J4ZMfS/swe/CNbdeh36h2wLaZQN85f5W9Avalzt31LLdgBL3due2n
O/jl7kH2YCoHFa8K8P3yu8dENJ35VSbUOwMl+kQc9GmOgQ/NI+NHkfwByT13
Qc6Ga23bdw134G5fakwY2FO66k0Y637niZd2/s/AX0NDj7qOQv6xJeqfiMzv
we8iy0R2dg+ib29m7IM/9uAeRtd+j/29eF2tVIRy6CCSmLY9YYt6scZ59+XM
xV7s0Xbi4kbHQUTWi9bJEe3Fu9/wViSEE/Dnt3E7npoOohNn5zb59PXgi4+1
dBzfEPAM27oI7v2DyJ+HrK873oNLMpjfPPJ6sIT8tseVsO4NS3/Gtdwe/FGa
U0Xici9WDMFZCwWD6AnvQ9ebQT14evP2JNH1JMxMNhwJP8JA3IeM04v5SLid
3W6wkJ+ES65dLfU2YaDZPuX153hJ+ILM0nz5OhJ2zoiX3H6UgQJ6LXqNgf/P
4lmB+a092GCQaC8jO4SSBC4zFmV7cOfiIFXpKxHv73hAfJHJRDyKUospU734
1Neoqq1/evEL2fdRpL2DyDf63yGurl4s5eYk7v+HiCtdKOu7oploeE5nqV0U
+l+pTTv/wv9HfX+kGqw3iIK7qmp+d/Ti6XiPwNMpBFyn5a3TtWEQOWR4phen
9+JEq6RAmf1EnCNNGj9SyETWrwj66oYEbCdYfWrL2j78Z2Hlp9wzJrrsmnA7
YR0Bpz4/qp5cTMAer2yqsvQHkdkxmu6TwR6cmXSqePUWAZf57B/26WciW+9b
AR0eBMxLNa1OONCLu7/y3wh9Dv1xvtG3AKNefGLL4KW0IxTctX2X0PfUflRX
ZtO+y5WK37e7vEgdJmOdYukXEmY0lPO1QUaEj4r3JQwO/zYmYynV5zdUE2mo
mLZ/Kd+cimV0rOIdxKj4LcOU/8zefrTd85v2EXEq5h+Nritko+DSwITD+41p
iBZQK38a8OsuY7/Z6SwFP7RVO2kd24+sZ8zte2Dd9qSY9TFWFEwcGbQJjqKh
Gs/jlw+cpuCDm15FTXyl4Ds58fb1w/0o+bBaZPwXCs4K+0A1PUXBdB7flvAY
GqqbejkjD/wOOmFmTvD/9r607LCRfiRvvlfuEHw/2X65YOUD7CtHrLhsgIZy
P6dcfpBAwb+4BcZ+w/cOs6ukNUXT0AHeuyceg9yrV9uaCwop+Ou9jwfch/ph
7g8pPwdyquxJ5tkzZGx6ximRQ30Aef43Omo3TcZdhNbBEfh0304z0tIYQLzb
bOPfTZGxSlnWs6vwKfYrMO8v0CVvKw3rAV/h5d6kMbDT0eTqK1G6/SjU6Yli
ONhxrxRNp2ATxHnZ4EFZnX50UCv200ngkylnbHD0pWJzuuPraB8qyln1kfzn
TcWyWTvreuDzGp/Hz7O+VMQ3ZqhX6UPF6l9qNm0tJmK/xZvOqVuZ6I+NxnYS
4PvzVz2f8Et9uH1YcyWyhIGExdUb9tn24fuJmqrZpiRMoBIaZZ8yEOlDbXSU
eB/mHXjtSrPrw8cv6GwtLGagCnpEWszFPqx62vd0BvTHYZXGUQwBBqr/YBN6
qKwPx8aM0SjMPmxSsln/6xQDTdx/7LtdlIhFLYnRAxuJWHtTkn9XABPt3ZS+
NU+IiMvafCyOKZBw8tk9fKebGUjkYzFlvRkRU/ZrFrwVJuJFl8u34wOZyNj4
zTlnQSIWiU7292cS8b+3Kxa/rZkoyj7vYHMXAX98pXBB+WUfbon3vlo8zkD9
3ZSM4TtE/OBMcwWHJwn/V3/w6voyBjrS8MT5zB4iPmzUa6H+nISnkXrZtggG
uvJqa39fLhG3VGsv7GohYb05mwfGVxio+9s3z/oxIn5CELsjLUHGfzn2D984
xkAPd9oFHWoBe3pKWhwXJ2ODttMtwtsYKCUvKyDlSB82JDwK3GpExuou15v4
Jujo8tQaobsxfXjW5cKWjkIi5jv3zvqmPBOFZkodjvpCxFyXEpgf75Gx9wb5
7wK/6WhNfxDV16UPHyRrDW+RI+KrnBMHDi0x0cVopqzVtV688x6f07REHxbp
/Re35j8m+isjbchr0ouVysa0N1wkYsbfoTe7BiCfcN/qzbzbiz/9uChdrkfE
+pzTFYqjTCTw3THi5qNenJVqfFPvDgHvKGoXrqYyUXaK+zZByCN8cuHnd7X0
4RMHrr3XOsdEi78LU+baerGxUR95arAPWzk3KPxzZqL/eNVVb3v34ov8IiPB
mjCXsu95EH4A9nWiNXSyuBdTvP9Rq6JJuCip5UKTMhPp++k/akruxSnbeFrX
ve3Dw7a58gZEOvro8TMg5zQZp4gxtc21+zD/sfGJlO0M9PlDzI4fm8n4LSV8
6YwuGe/s632MTtARj8OFPfJ7yZjf43JybF4f/mh56cUnwKGlncjZdevI+MyP
AOV71iTMZsTzuiOSjvr/jpe1XyPj5NwC7/gBIl6239t90o6BpNd88vSikPD7
vH83rwYTsTOPRLzJawYqXLt6VuwBCWvyiQgocxDxrpInweyAH7J6wObLqST8
94iW2J5YIr74hmMxHPBwf03JeaHdZJylMGEZA/gPEEj7/eIDHZ2tj3Bp9SXj
3v5/Si8wCfdH2uzO+kVHUxV5+dtgjhejfFuvXE7CQU8urUltpqNF0arPuJSE
FdMr/6rA5xqrl4lnWqDPS9/8tKSMhM2yXm6TdSDh3+F18dLmdPTf6ekv+WVk
/LDgsdIW1T68RfyeyzTgZ7b/atZgAhlr/8jN/o+/D+vEVzNOPWGg0J+cf/3O
kLCDX2fbH7BfksybuSCQ8zc77Vsy2DfpxP6SR9O9eMmzp0YR4ldM5hIzbIKE
1XSl2RKSCPhEeUZV+kMG8ii9etLsLBm3OrcqzI33YtcHfxJypxlo8vihgbFx
0I87cX+oNwFXjt5c4A5iILnJDnY3WzIuahWdqib04OErsorDgIdDm5wvy0iR
cbBVcYIm1NuApbKANSCngUhTEgQ5HSe3urmIkPG3TWt7LxUOoLer5TPRihR8
0eoPfSkF7OH0X1ugHB3dvOHwRJhAxnmxxscKqvvw/hbSiXBLOlpYT7z4AerQ
rl/XXjAWSfhj/9a/8fx0tOx3hVe2kYxfj0baPAfcWWT9d93n/gCqbBN8m6ZO
waObwm8nqpLxhOz3IGLEADLa1pV1HlGwqcBy1NZCAnbT6r+R7cpAKubvE2hX
yVhYIU6ivo+MvzeNbx28QkOpZ8xOXPpHAfl+5mZzJDxFORn5vZeGtPXupfcc
oOJoZ9mKHlcSpqS+bGs+OYAGmk2KrKah3r3wGiv4S8LHH6XKbNQeQLrFCzby
BAr+yz3j6PQc8F77d2piioa6/n6SuJNKwQl7Ddh+eENcTFkH6G8cQOYHpcRi
Iin42NvJtotbSFhhJZHhHDeAro9E2Z6vpmBZoZ82YQV9+PF/Jn0bRgeQLLLl
YT6jYNuHfo7iF0nYPfn9GoXaAbT4Sdf7kgsFCxLS3+yPJ+PqcKNOr6oBJOQ8
4LYSC/FFb/cOjCPj+wYhfDE/BtAOM0srY6Cn9DercsAnzvqjf+LnAHo59268
Ff5t4h1l/UKPjM8+mVtz34yOGltvaFoB/oajd726E9iHmQNqKT+eDiDjCw8u
hG+hYsWKpidXNYlY77NXQuImOrokEP/Gbhb6FdFZ0ZfzBCzKvyZX24SOipLa
klt/U3DwE4+NbgkE7NP5Vk3mPB2ZlteF/qVQ8H3PYa633BAX3/6VZgrR0UUN
Tp2dGSBnR39+rxgFh0YuDYhWDqDzdoVPjQFn1yIKj9RC/R/MPjB4/+oACjsa
qxVnRsaDv8W3hlXBp21vQzAfHalx92UM8JDx5uHYxfZtFGyFS6+dB/xkv+Hx
Yb9ExndNHs5smSVjdP6Js9rkAPpZXOAxNETCy3kX2t95ULB5SxinrN4A2iRw
UL4M8pK5vP/Wpc8UbBar+Tm+lYZi6hKfbs8gY87fY09Ln1NwXaCLbQv0LSpf
ZG2sisjYble9jJ8sFW+fPafQFk9DB0OkJacAB4KtB1dtDKj44fmL68K+0tBH
18zRC5CX8v00dwg4UTF3zgdd/5s0dNSq7Kn5OahPEQOv1hRQsNal9aGTuwdQ
+lOLP11KZPxu252KhzxUPFYpd6OUZwAN7Z6tdOSGfZWGVu8YpGDF7YeiR/YM
IPef95Mo7VAvN8T+5YB+8rxPxQsM+BG4FZbw4SMJe03dv1lQQMUZrnnBjV8H
kN3GmVj1+wS8Etv9/monFbtN0/vVAwfQX/mT/vyfCfisIedV8TX9mPvmRbLw
9QGU+1eQU/85AWvMbjCQtCfj6DHfY2TI52ffthxwhzyYnyOoYDZDwf/4fzxf
NaKjnh6bGOsSmENORUhEgR1O/zZWU6YMoPmMXdpWKkQcPOD+LvI9FfsvnTHH
qQPow+0A5boeAn5wVWGbM5WCO68cvkC2oaP6FO3Mra8IuOAEx4YkVSomzs2Z
HthFR0+idrrEOxDwbsmLiKcC7DT468UMoiM+Hs1puQAS/nXFgt3lERX7uFh9
9PPsR5dDdD7cuUbBQcKaz4S6qJjDoIVNq5OK+KnCG5ZKKFj6cejM1ktUnKu8
d/I29MMqPpbne50ouERL3Ym9nooTBeaVtxCpqD+Uh3avgoI5nT4sTd6BvvHg
5z1Lz/rRv69e+z7YUvCNnmDVJSIV28kJ6MnXUZGV1clNLH5/SzbV63v78ZaG
7DlRcSqia6jFPoE+866fKtecTj/OiQt50wP0x5V1Oqy+fT/xxuejw/34c8XR
l+1fKej8CyWLg9D3Mkb/lFrF9eOIv/8NGV6kold3PnI3g576fTu6U0f6sXPs
bQsh4Bf2DOZ/DP1394a+VVuvfrxW4PfmoIdUtPKNffAG2KHuw6kJYkg/fqQ8
d1jgDhWxc37TTwH9td8Nzu1G/fhmQ4yUCVs/sjK/+8lekoJb9+99rcHej1WC
se7xff2IJ1xTwRHohpJDNob/qPiwL7+doCYN2SD36zXzJLxzML/wrlA/rhPq
HnUQgjkld3yDswAZ39bcTMvQ6MfLR+tr01b60dv+ZefuZRJ+ojIXNQR516PH
Kqj3AA1Fxs3o2WygYKfjIsucOlT8n/2p15WjNCSxqRft7Sdh6f5CLJZDxQZO
CS+0jtHQo9FPIZn6gEuujrphBSqu82piPydKQyZea9faClPwsrjd7hk/Er6Z
tGV2XpyJ6v7wa2jA/Pwu3MUktpuE72/Bs8YUBnqMFEQeHSdgv71rq9mhL5XZ
bvThKNTBmJgKGu8VAj66KmpUeA/6cB21li+7mUjd5EHW5TwCHk8YC9uuSMaq
U0IkKtRZMzK5Vn6GgNdo/gkzhn7c7kGvRqsiE7VGSJeUJROwpyi7fMZayDfN
C7f3YAa6sa7oHeMBAb9RfrB6dT/kY5OH1VU+DPR3uWOmsp+Ab1yeZP4KJePn
Z45vmYQ+eWPi23m5kV5s9Tkl8ooyGS/1VCSYVzJQR0OCUosSAWe+CHC7TYY8
aRAsKLuTgV4qPzhpfAPm1QZRZZNBMvYoZW6Rlmeg2v3cuXI+BPxfecjdTxFk
HCe37DNhyUAbAmUvV0AesGkQyel/R8YJE4E8h1foaGKtZRbXCyI+U7TBIv0v
GdMav91zi6Mj3acWR1ak+nDSxYMO+c/IeO42aWr3RgZS/5+i8w7n8v3ieHYi
ieyG0reQUYiQbpJQNKisQoWS1dJARIpQKYRkJSNSIUR0slf2/uy9zEIS8nt+
/96d63E/53mf93m/rsslA+Enp7A8x3rZdv7oNAWMXi5lb0tmITWX99cmN5Eg
N5xIX3MR48r+bttAZxZiq537IdpJhIFPMm0ythj30G22DJzgoIvInf48ggCW
TXcsiwKpQGh5Zq71/7/Tn2RUGuZJhH3STr6HzLA9j8rVJcpYKIir7Wyxlggf
uhdazhhj89sjrETB/CfHQq3OUgPL5Vca20+dx/bw7YC899kstNZlTa7wPAHY
U5/e78b22CvnuuqoTSy08W3w/e5gIlDoL/gvq1Ph+l+x+hQsB573q/newiLA
LwPc6Q3zFDiaG6qXgsPqBW1FKIgI7yISVtalUaEleA4vuJ+Ffm1arxT4lggj
wprv7rViOv+xzIu+zEI2om1nmcVYzrespy28///8he1Sy2ShrXvCXudbYP4c
J/qjG+PUW2VX7f5tZKNLtCPHU64RICXICffViQoWGUfivVksJCv7Qt5PiwDb
71i6/cFylJbmF9zl85hu+xn1j4WJIFtxWzoOy6FW6jHGb8TY6K+kh1VOKBH2
IodOHJYr+LS/PxPAdLtpYLZq9TQeBh6s8zYiDsI9UcumbSweajRIahNk44Cx
kGsn6jwEuGNHY87m8lBuhaLFS4xfRrKm6rcvDMGrpmuLyTE8VKRLCJ7zwEN3
nHuN2t0hsCwPEaUn8tBuMpNMy8PD0cRjrYcIQ+B6bO/FeDceotU9OTSgTID8
1zoBVTpDoJ6ws2CkiIeoF+1rLaPwcCzEaPLUsyFIDlodct2XhwbN5vufY+8b
ozAz6eM9CPPuYg8O/uCho2oJFjUFeDDLeZPb5TIAa0KHjFy3jSG/IhPDgyp4
qHvseYXhPACpSSkGI9i5NN+uFdFteJANFRLrVxgE192m46+FxpBAy/zzbkE8
FCf8u39kdBBk/GRzN7J5SImRonOChYMvaht1zQmDkGZrLJaN9ee8lPfrASYO
RiZ6OW9qhsExylgx7jIPoU9rQ3vN8JD8njSg83IINqXYXhxq4aH9d4NJa1pw
4KuqZhWhMQKdtltEZ7bz0LvHcb4naBgPHlWRf+42DJcWa3coW/PQnWpaB3M1
Ab7EaC66BRPgbUWwuZUtB7lptwzsdSPBvr0t5SJkAtjUJKhuk+CggO+Prwe1
kWBPp8+lZSoe3h1X50hEY9za2anqsZsEZSoLVmxfbK/OfM/as4ODSqIq31hg
vHRY98QpFx4O9snuYgtgPOvZdyKN5EcCa9/UvNWXiRBy7FBm1jTG6afjJCtz
SND5+OKBx8fwsD081TbKHePN7+FBkxh//nPo+GTgg4emxSM9PRi3EiNzKzJ2
kWHCdoe4iCEeHOw+Nrv7c1CXp2CgiyIZXs//EvzwAQdm8wPVX5s4SKdQ7tAR
zGefEOSWd2kT4fVpJ9YBHBtt61u3dXozGd7F3ksZdhiAY97S9rYqY2g/ZZdc
GPYdG+nPPgREjcCDa7oTosI8tKgdmXNXGPNhfuGlxbEReOsZyYYuLsrtPTTo
jPnewubJenW/UdhsFB36pIKLnBrf+BS4Yn7ub72frTYKdvfmQ0Xec1Hs1NBV
he8E8DGKigy4NwqqjnXaZ0O4aKdAb/XjLUS4qKQbbTo5CmtWZTHJXlzk39Dg
s4TNndZVz9ntr0bg8sH/wlqJXDTqbbzu52MCpI1EZBi6jYD3TXfVFiUeytaW
OBE9ggd+/99jt7mjkPtNPma2nYu6KgszcrPxEHzrDdf+Mg52lr8aHX3IRXem
orPGVbHvV2yy+/VaPFTYGES+9OAirRdvQg0FCaDb7GdVEYUDzW4d/as3uUhj
a/M2jyMEUBFepzP7Dwfyr9ZmKu3hopV9WCvbCKBUt1XR8iAOMrpuiro94SLC
tU1V+/YQ4FzoCi6hGQcX7x3ccHU/FxEpvjKhQ1hOk9/ocbZmFPbRd7kdwHGR
sWOvas4LPFj4WOpv/j0CUSus3D8rXLSoNrSZUo0H63PWi5dPDcN/jb+mu/N4
6O0DLerHfBy4B3d0SA4PQ8vFztsjF3nIMYWlMb8fDwqa913V742AVPh/id8t
eKjJK6+UvQkPVlWTt5d5w3DvTeX56048pFy2k1xtjwe3IMNNESeGwdi1X2wg
H5sv/oNBotjz72h12oaLjcJ7OvFg+nPsntLH3PoNiGDoZDrv3jAMbrW+sqqC
PHRCf1OG5WcCvIBxl0GFYajwufKkwQTzN2v19ERsTvhf/VA1fjkCM7Y1/KeT
OMh0PdyWuEgBhY2+OdPL2HttO7oytcRB+iN84RsXsTwceq/00ddRaKpvb1Y9
z0GCvoGulqYUWH6/rZlrMQJsPZXelGkOCjpjYXxyDONh52kX8vgoeE/vFZh6
xEEP61jXjVlksPO32Ktgi4Pr8euN9Q9z0NOE67QTWth+rfk6YHZqFNqarThf
v3PQZ+/Bs+uwnH8xIYK2t2sYnD9QsuM2ctEBGT75e1/JcCTTwSv9yjD43ezI
Nj7HRZHdMu+r9cnQK9pwsX1iGJDRd8d/h7Hva/nV/awSGZg13/8l3RyBBuES
NZtALtLn6sXulyPB2HEtPD10BNJmvkWuD+Aiw22DZjwVEtTTLrT/fjoCAi/5
5XR9MV1tGx9/oEyC+Vy93+Fiw+Cr+bLZN5WLaBqZ3JlKEniXf/c0wPz/wqf/
7ndgc1fkFSfOu0MCU0K/9PrpEdBXvFv3TIGLvjpO3rtBJ4HBXicZl5RhSKO/
JVgkc9F7QwXVZ/YkOL9Eaaq2H4LRmKObo0R5KDNLu+ZvPeYXtySuv7cbAr1v
M4Kqa3hoQ9VTjxd1RMB/H13URNj77vj7Q5TORbaasVxSIhHCLtzSkWcNwd37
E2IqN7iIPlNz5ONJMvDk/aMfqg/D14qUQENlLrJ4Orq4DePTl2dcVyv2DcLd
3G/odwYX3TrVzk2PIkNeY9cvJ88h8FuJ+yG1i4uU81/6v7eiQO4sYdfJA0OA
Tl2r/2PBRXy/8huOaGCc69VYTFo9BOQx3EGLY1zkldpn9WoPBRZuSH2qeTEC
uCWXrilMb2uuCucHYnrr0Ym/+c57GFrtrp0ca8F0dUpxsTmSAoKVMkcpXUOg
IS+7BU/hoJZqVUcvjPcf+q07yH49BKXVPw/8V8dFZub+m7UeYn6+LTz/0vEh
uJOgr/kR68+dlxuGNbC+4faWPRW5MIj9e6TLxt085O1+M+jnOBGYZQTjZY1R
qHEfzDglwEUbPy6Ob/1LAkPvwMZNH0bh16Mc9yOfOOjY4UOdAqlk4OuyC1++
gANF/KFZ16cc1Hfoy+lXfmRwFTRqEN8wCifCDj6VkOaijrj3ZtfxJCCcD0k7
ODMKmiqfH9RwOehENvNdSgEJ8ifU0pInh2G/mB5+uJGLouPTqs5dJ8IeoSOO
7+6PAnnxrLGgKRdp0zasUcXu6Xa//7Pd9hHQ8K7jXPzKRc+ltT3jLxGh9ldW
XmTfKOS9lH/ddYSLeIt2AXCfCKPX1nbnSePgd2SfqeZ2LuqNXXtAvYMIk5od
h7sf4MC26Ma2vVg/a34Ymxw/SoLPBg/uefrhwPHDgFWPFBeZZMh9f1lBBF++
SVlf71Hoc+sz9P/Hxubiq33PFAX6xLoMCgZHocPMuKGgmI2i6hsTZwyoMB/5
p6DrHg7EnKfNdLE87zQ059i5lQo7clJTrbA8devgXMFVXzZa4Ayq245R4PqF
mIL0VDzwtUgYf3RioxtHH9BofymQUXK6IkR3FM6vYsR2YHxhMCXUS+ygwOGV
cFXqZhysnG+wC19koxK9Rr8bHyiwufgJK/swDqb9N/35eoaNPk1TC9ADKqgv
egksqI+CRMm6vbkdbFTXKdJaZ0uFmN7R71eTR2Bn2RWh0EQOcjQ72k3AdCjF
R1z3rgQHLIUu58FVWD4fMJ3W8qVgeTdw0+9pHBiE3l1lOIDt64j0Z8oJFGgY
9izIt8FDSALRJh3jlHWmd7ZTH2FzsfWu9wvAg+4om2Znx0a7lMnp0XMUENa7
Kf7fVQIQ2HJH5Rgc5N521OUxlnsPawbViRgPgx2b5XzjBQcFFgy/F2Vgvpp2
/6QllhtVrug42C9w0Et2+r/yXAroyf8wTj9Lgg1NQcvG1WxEUBl7q+BKgsir
XiJjZUSQt2obkdvOQXO6NC23ciKcKpenxVNHIMtDNlgO47vWZeqT7kEKXIt2
TOS9GYbLHrnxRd7Y88ln1mxYpEDJHWNq1T0iEHUfNYsSWeh6x+0P3BEKTIXu
zU85QoTj7Bs+P/ixftrcMf78lQKUxgBPnX8EcGtYDE6VYqP3h+u+7WmhwMjX
Bae5IyRIvuv//YgpC63YvGzaeYwK1skpavzLRGi2n3DrD2Eh7q0EoSxMJ03f
7oZfw/QrmHyONoDxl5596Y+AvVSoMAo+wH+GAPcNGsK2t7PQ1eHF8f//vkZb
2s19nMMEmMvw8x4bZKFH9S+CwzypwPtrUXsOy9EfjeLuVmL80vE5XHSnNxWI
r1RuBvbgwPrdg+/TGHfMD/40f4XxjPTrywKSdSNQSXJp+OzBQ6QvKtEvPHGQ
MkmL5f8+AlMXYpuNPXnoiJSk9g0PHFB4gkof3+PgrNu/o3ajXORn7nFyuRgH
Aw/jnkYHjMJgxldCszkP7doXbr6C5Y9imW5f/blRCF+3dEH+Hxdl+XvO/ezH
QYtQ7DHVLTjYu/6Auv5WHprcXZIcoIwDDctIka92oyASbqR1W5GHJC75S3NW
4WGZ2BI4ZTUKZ6teXnq8hYfNS+jGW79xIHghTzbvAB6cPhD7v8Vx0eebuGuL
CA8aMdZr9cNwsN1+yLe3jIuetL/IyffGw+/A0jHd2hE4P637oB57L5eSL+wF
7L2YlkJujkOj8HO2zlNnkIvyWD36Zk/wEF0bm7d5EA86Zup/lY256JDoGrfg
ITzUftcT8bLHckU1/bkdlk/K7NQFo/Nw4D10W7bMaBSQ/m+a6TaMj34P/TRf
wMGpsqA87dUjsI7MF7IlCstF+Yu0048w33HQU7qbhYeor4HSQpJcFH8rVqMm
hwB+I3+bZ1XxcPj2NeGf8pi/ebysO/2bABdfn1GFdVgOjXp5yTCKg+7vpBze
tZ4IZ0ZM0qexfFeovX/brwoOep7g8+6LNRF2n45LC+/G8toVofha7Hw2dMPo
VD4R4o0dki1e4eHt8+rl2CEOuitX8GBXABG0n1nN1HUSQGKzI/3WGQ6qnRrY
enaGCE92gq2tEQFqw3efrwzEzi9NVfcqkIC7dYgqfxwPQhARyWZykEgiPHEN
x7jC9vw94LAgTSigT/kMFfGORXiXaxPAvXlp+/QmNnTs8ILyGQoyvXyobAfm
A5qpd1c99GZBcoBe9YUWKrLPPK70DONoK6cby0RnFvzVOeZ5nEpFm/SCfbtf
ESDxskqYewYLMnbLqpgUU5H0JYnkcEus/piqLMGODe8rZRrSnlKQj1XSdfNS
Agg2dRut284GA4Hal1ocCqo++aLxwx1sbku2S8f1soC3NZx1Qo2KhB2oXq4s
AuAc1PKXzVjQLiZkrTNLRc51eceFqwgw5CCQ+OYNC7JOBHqbuFPRqEjO1bfY
dzlCPvN1bwMbYl3WiNioUZDbSmefxU4CTI8G7d1JYwNRZsHfd4iMTmZdXjN1
lACKuUM4SW02HJz9HONEpqCSaxM7ur0JYCi356fCdzbcitG4mSBCQX+3XLR3
/v//K5Qte4Mcz4YbDV71pbEUpH6az+vNGB64j8mhP6PYkKllF/HtJQXNJ2wN
iZnCeDwEn1IYxIaJTat/nTKloFemZa4mdALUQHgRmcaEPoFjcciIhkr2iOD4
NYjwar2XafhmFgyO30jd2EtFJ9Zs1A4NJsJlircW/2cWnL1dbaJlSkXxnYRA
sjgR6peivqgEsOCPoK1j8k0qCprTmd7qSYQ3Z9cezHPggODSjqjbLCLyzP+7
dfswAUxaBqc9ojgQ+IK37Y0kEYndvHymHNNxYpjZ3Wd0DvR+6O/Yd52AbL9M
ip7E9FBM7NFb3M+Ck07ZTcupVLT4+Yv9prdEuD5Z1hGFZ4H6zSg5vt8UJJcW
WXANEeHFaUn/ExfYoFF0aoJlT0G1+9q5whivfWT0dath7ytTqTYYZExDZOsb
NyV3ESEzwd73sgsLnBeEi/+ep6Kkfva9oh9E+Cz/UDdOnA1Wj0M5IckUFPTd
yVA9lAiFxZmnd6+wwONcFmUgm4LW9PHteBKPvW97fIj6HBscKqjzhGgyuhmy
vSzwAgGWVqYH1rlw4GL89V2ru0jo8TofYYd+PGyV+ZM//5gDyPdTB58wCYXp
HI2dWE2AcbOw9Th5DvwW2rC9/S4ZXfqyz/TVAuZ7j3sz5So5UPuv8pQkIiJL
dM08eD8ByFsNrM0ZHCj9fW/dv6sEJGGY7iCL7dc06l/LJ3s5oHSn8npWEAlF
7QvR+/aBAOvDpG4UneSAE+3N2pUjJLRTbSJ4LJwAdc1BwUWJHNjHJ3/BZ5iI
lP9tKtspQwCbuPy8t0ZcyBQR79gyjEd7shv/7B/6/+8nXfR7I8kFcozBb/PX
BKRg5zbyNxcPeFKFga0xFy705OtODuLR222KPmKYb04YJ5zxfMeBqMorORJl
RGRzqCtt6hceVreX9fiZc8Ak7rD12d1kVJjXIufwBQ9T1hGCCxocIDw6ouUY
R0YZYbNHPmbggaCW7+vjw4ErBdf0jvFIyOXHxxzpIDxIXvv+pyWaDTNnrKly
2ynIK/ysfNosprei8dUTNWyIYFqdH79ORvkvv+5o0CPCe6rems0b2MAf3MjM
jqYgirJc/2gUEdpW49KLdnCgXf6wgno1CVVIirzcmE6AyyIxavGzbJAa+XGz
i0VC7zr8pmM3EIH2z+m/dSksWHhvU4amKIgqe48ZsYkEfAI7cmb6WDCv5XCm
IJiCovrN9/D7Yhw0aHvQ+yUL7v1xqjz2k4IyjVwV+rH63z7Xqfk7WbA4eNje
7CAVle6Sba0oJoGQ5doNLsks6PoskfBqmoJUXtNoLzZiOWclJLxZgg3vpm9W
5fFREOMC/z74SoKOYKfxuucsyNZSyNt4noL2i6ytn79IhkuH5QtPWLOh9uUD
wYY1ZNRSe2tjsyiW2533JW64xQKF9dsjtVIpyOJeuspdEzKoreTdcq1kgVL0
4miHNwWVKp5qsGaQYPtoIsXLig1nFCXrt4qT0Y+S0a7tYmQ4nTBoNDnNggdu
z4c3IwryFHVPmE8gQcTrcxdeirAgtkRox8Y6KnqzMJK8zCTC1Ocggz1UJjwV
mKvbvZ+G1ohzwnQx/1kZcneNe8EEW6Z9x1NzGuKaOlL5+Uigtqk1Y88FJvCp
Cr3WSKah6OXDs3W1RLiRsrYiZj0TFj4HhK/qpqFNHxr3SWE8q/AHr9kSzARX
Bd31Ox/SUODGP5oTWdj8PpU8c72fCeU3M59Vd1NRjNZVh8MuJPDiJJnFfWNC
ZLdUZ+gcFfU5C+zde4AED0wG1ArbmFj++REkcJiKJs2IkScxHt9s/4qPlcSE
C65VfocKqCjQ/9gvMazP9pzcbwR9JmRM1Sqrc6hIudSxNmuADCXM0eoaKRZI
3aT/DXemots2Qq62ZRjnXhvWazNjwpjlA8NcMxpqlF9fU8shQahxiM2hfUzY
MPFvJMaOhljHQ21YOExXhVXzWa+YcJB7/FO7BA117jyb03WZhPmy6DoNexbc
f6rSG0KiIPFx8b4xcTL8uG2fkK3Igr39rFMJR6lIO19prdU3EgQ380Twpiwo
fv3n7WqgoL2k8K2VkWToem1w5mUpE1yYtrcSE6mox/uG4lpTMlQNtTrb2rDh
v6QEJxl5Clo8IGP9rZsIpS+IaHcPG7QPCNgbbiOjHbvxVrdsiHCpVoNfCNtT
SzGNMlsfk5H6o6/OtsVEMNtOvbn0gA2bK57L5FqRkUH8pU//ZEkQPtwmruLB
hi/by5q2dZGRhvCBQZNJIjxfIS7O7GCDsEadgaUsBV2NnumXtyTBzm/Ld+Kn
2fBKf4uqcgoJbV789eXoTSI0SWl9PLidA1mxjNCRz0QEIRF3WBgPuL+TXJP7
iAM3HqWtZq0nIv7Y9j0LkkTw+Xe+I1CFA6HjiuH/VRCRYNOWq7oYL3QEPDpz
aDeWN4SllUN30VDoqAvFxoMABuyNi5uuMOGH46OQRUE6Wv38oZ1ELAGMcx7Y
GEYx4Wb1mYKjgzTUcX1OEVdCADzRZzPnMxPy1ehKqz7TkHO9w6UtYQS4Ti7p
b8xlguGOh/W33mDP7xgviscR4IR62KhnNRvSjLy/JJ0joYUSC/sMjHOiFLYK
xlaxYZD3oHzMlYQElEMtZs9hvnHY5jQhswOOLU4mbZBjIaUK9W8qCiyY3Jvw
U9y6GfRbrC9stGQh1uZKwd3WmP6Mm0gpN35AcKFav5gDE5X2l5RG1rOA9n1F
u8yyGS4NGHXGWrHQZJCA2ZAlC1Yvf7MqTugAr8G4uSl5FiI+158wlmeBvWg4
KdOjFbanqBpEhzDRiROX4sN4LFgWPD+hn9EBNYdjCh5h9XzjT3L65FjQrFcy
/dG5C56E2cbYedNR9EPhV+pW2D5b6zsYKdYNAmIkraEsGqpozAzOHORA+o+L
V5gKbZDptumP2gANWVyWHBdX5ILMSE2m1PlW0LCo/vK2m47mhR7+23eeA/X0
Hc4LxZ2QejvM7Uo2HR13PhlxWpUDJVdjZ16H9YBZZmPm7Sc0tMFjZeLHVw4I
t2dtarTtBCZ1jJvwgIEa2k9Nr7nGhmM/P0S/fNUDVc3O31ScGUisTAr3yQzL
qZOD+S8PYvfnSel5HGIihcT9DpkfWDDQOFR6+EIvRJpGFYpYMdDnb1t3rGiw
YYvLh8Rceg9EFN5TS9nIRD6iZYGakSy4um9OLpPVDrYtq765vmKgaSflO7Kx
bEhflUmLvNwDEt1jQstEJio/WYkXpmDzP1endeNCD2inOb0bJzORbXjENSMy
Ex6dOjbfuVgPcwJ6e9EyDdlmMmX6TnBBv374aY1fPVDMofjiHzq65aNy41wC
B4x1XJZcmd8hqZUXkbKajjST1tjNuHGhte1A6I3T32C2utqvVxS7j6HH1p4C
DvR5xDn3rW0D1Q/PXz/C+i/kwPSLxvo/nXRwlpjYDMb8HmNaRDr6LhHxmHaN
A7MeBpeDqHXw2Vskdo7IQLciqcl2I2zgVuUNEs83wu61sk5CXQz0iJyluLGZ
DeUjO6kOhS3gsdMtcLScgXQsHZTvFbLhRZ/+Q+7vZhge4XXbRjNRbNC/d2vn
WZAkNXOcsb8ZPH5JadEwfabjlDI1rFhg5WhJv1HVC0+3TJnXvKcjoa5OokE2
G3gyd0ef7+oCmv67oPzXdJTprffo7jZMbx24+HpaL5xsbyxxdaejm2NbGqyx
e675etl2UHMA5G1rN/I30NHS9VQ+ErZfJU06Ph1LHICg3+TEESVMb+9e7/+N
+Vc1XmRncOIgiKg7dhau0FCAXiTF6jwbzk1KiO7z6IM+bUtvCw8a2p+TqEKN
xHJe+dDyF+MB8JJ99uWeAQ0tPNHV07LmQFX08iHekT5w63hsW3KGjgLMD0uc
/8GGhx3bmKve9MOOlMI6kGCgyPjayJgxjDe27pF5O9YHvxVZ4iWvmajEP/DH
5wwmPGbvOqx9qx8aQpo9yaMMJNBqay5owoIiU4e0Z5d6ICWLse46pp/1brN4
IDGB1OqSksXsg1ALc4eyDCZyXurREcCeczU+QXp+vBe6Lgtd+MWP6c1tx3Df
ZWxPiE52PeP1wX8mnsZqWL22qqPS3XQmEDTqss8JDsBDfYd7OoIMdCH7LAST
WdB5P+4o6eEQWMoU74MqOgqveBZyOYYFKQ2ubfvTB8DpvLdA2hcGUtByPPgY
8yuF6dEHXTFDkLZt6s02rD6TJfu0/DELcshh7apTg+D0PvwP6RkDlW34eFlu
kgkaj37+VHEYBPa2o4sbTzGRTsnob4UzTJBPDTbXPzkIw3Hu0rvPMJGqU7lJ
xGnsnq31dw4n58GKmfw2+WQW2mf6LwOPceOh8UN8gkfyQed+zzMfbO5Ejv/+
b/AkG3Dh/Yemgzcgx81LZvvoTGR2RS5L0JENw/r8nz7hpNGGJaGEv1ks5B9k
r38wiwXKodwujmce3AouJvinsdCnT2rFFa9YgJ9XChNPyAPVy38vO2Lnmo81
jbKw87NF/ie/fuaC9qobwavd8EhIrjDg7SMcsI0vNo56cuGom5Ruyh88qk45
YMragAcF9sOHoaNcsK2hafkV41CcueBQwnscnO7KRL1mXMgZ/LnVOoOA7hSZ
awVN4iB4zsju2FEuNNiXPguJI6DVPUIa1UQcLK6z2cYb4cLytqcQ9wGHKrui
z5UV42A8zbl/SJkHGRaR8nPKOCRaumGfsjIO1ger5/KECuC2uaQNT5yJfhXc
wP9dywEFXNQoJakINj0KvCAkxkRXd1Nre8Q4QLf3Ff07XgDjzoyABAITXfjH
fTt5gg0DYpenxn5Xwt9LlnXqiwwUcdyCWbrAhhi+w9z8/ZXQSXKkyf5gorAA
VWsnxAbjCRnT51tlkJBZuAteionwW/DLjRs4sEox5feL6Ao4cELlo8xjFrqo
NHdbO5YFlY2qsZ1XK4BxjIwrjmGhYkG87m9MP5lkE+YqFgdObmPv/uVCRAlm
SiGzt/AAjX+ZcxMcGP7G75Czj4gk3+QGfA3Dw3fO048bljjwrEmawr+FiDar
xL5Nv4QH2h8WOd+EC3fH8r23lBBQzqK65hoeDs7fJJGJ1RxY8n3S3yFHQpGp
AkfcLPEwbTInbBvHBTNrwd1JpnikFGesWonwoI7/u20MO5f+varIF+FR4eqC
908P4KHdwsliXfkX8FknXiIvy0AhnVKHxjHe6/V0Hohy/wBGreGsjf8x0IHi
E/+82jHfuOb64Xn0OzDalLYqVJOOTlN3v1d5zoVZIzAabiqAXUURn9VUGeiE
hT1hZxcH41v+f6G3ZJFlPepM06Ujg/tHtx1N5cIbPreZ5nYZ5Le186O+FgNZ
tSpLvML2b/nqK0a4wCooNHzbsx/zvb1H6uM773BBJW56atjjK0yxiXepMwx0
6Zusj9tPNpSyvceHxUogcvXx2VJVOsLt1+mDGC4oEdK1hvu+Q/3yKSc7Pxa6
pJAR6x2AcY5kkfu0Qx0k2S12x35kIvPK8rUcZTaMrEow1IyqgIBIaYNw7DuK
jgU9b8O+YygnntrS/B3aigJf8wWwULsta+iIPwvivx/PD2j8AuYRL05PtTJR
VzSeb8mYDeFXthZ09X4HfG5JHPizUFfY/rbVWH3nyW8up2/UQ7tuofDnAiaa
2WNSmabAhksKzt6+4iwYUjHTSqinoL9r9BZKRCiQ2lMdGtrDAqGyfzL7a8ho
VeDqaMOvZCCxLCqlZ5iQOWrWtXWOgkx8h8ejeWTgb1EriexmwZsSvf05tWTU
fb7nTVYNGYwFuCc9jrNAW4RxjrWPghRbrHQv7KOAQJVZqLU5FQJzlm5X7WCh
PBktxoYPJDhhf2em8woFFIVJxKAKFhpvOfK8HuMvl59EyTQbKngan/5XqsBC
8n3aqW+xPP/x60bF+2QK1P3ujTS3w3IaLVPg9FoynLGSqtZ6RYGmiGdE7UAW
Oq699zAP4zudhAl/0l4mVH69/lSslIpqhWf3lO+kgPS52QOQwoATDAn9h1to
6Oxbz1DcHQoo2YjPelxiwsVE+Y4eOyr6hV9h+dli9z9ZWX3jOgPMD0VtlPGi
ofzIZU0jZwpYiU3+DalgQKwM5aCbMQ1tDj/pcUiPApY1zvIixkzoCLxNfx9A
RebhnbEvL1NgonEhuWg1E5IYMSPhwjREWU5WsxKiAC/xs7ppKBOeKE/akP+j
IuCfjhpypYCuLe9QOYsBedX5Te0xVOR1W65ft5ICdx/phl5rYoLRvUnl5CQK
+l2yU0AyiQKsjefvh/YxYOPK9PRq7H3H1d1OieZT4OB7/SOnGjEOjUw9afeS
gnBviZodWD1lrYWH0zEWaAWZc9INKSiJ2lOpYIjdx1j12VI9E8y6kpSoMlTk
F/87X2YDBT4Y4oSG19HgloxqbkEqtmdflHRKeZPgQJ+ae4I9DaLXvww4asBE
bZ8X/TfjSZA0b7iTVk2DsqWeqVnMD2nA7OqNJMGm/1TPrOuhAZ8KzvuxJBNZ
uhnEmGA8q/iiMtByjgbvL4nFxmL7XaaIXtxkR4LGqNLguN9UmC3pNk2sZaKj
lPraexi3nvth3ZFxiAZPb5LF458z0bmJcxsPYhwd9JMl3NJDhW36RN+QPiZa
JRvnnIDxr/XoN4vigzTo9R7f32vKREHJyux5jEMrLGWsY1yo0GZGPNm5noXK
/7zaVYBx66plgaKG9zT4dJLiW/OJgaTCH9VaXSPDxPTVtXMlNHjtMh9ZWcBA
gUbSq0SCyNie08j2/0KDnL9/LvLlMlBU6biL200yuIvmsZ670iBjh8MO4Z1M
5H0nUSd7ggQtjqKu6Xp0OCW0dsT+LANZ/NS9lSNEhkfbhZ9ZvqMC8c1/2r8T
maiDmRzgiHF3jaJV7KNWKij0V6nsjGSi97u367OOkIGiN+Hr/IsC3FnHvJAk
FjqpfeT8gc0kmJ0/kp6SRIUZE4XyvBImGlQUlDmHce5///FCNeqpUGh6ZX+m
MAtlFen9PsYiwpa95mLzz2mQXJwj82oXA/3QeVt19T4FLqqK5RW30MDxSc6v
3l46Urbu+rzrEwU67FsPLmylgyNf2IxIJh2Znd64fOkhBcJT5Wn2HBoI2+Q9
mkulI42e2BmtTgpc1kk2klKjQ4T/pradmH/eyRbdUSlMhWtdfgdpr+hAlfTP
9WDTUIN4w/ROrB59vHdz/TMa3JmZDJ2YpiNarb7ouXYK4HK2Ml2P0SHXVUmI
h+XhsOFI50+mFNAh7LIfukYHueQDwtSrdFRFeNIWi83Rg8/5ZyjFdPhupz7t
ZUtHcjV7ct9j9Z9pFz4sZNLhZFXKM6GtdHQg+dL6i9j9o2/EpEIfHaRMJORq
mmko+2Xtga3Y+/48LTkercGAwdQXXXzPaWi3bXCFO9aflmbPJ2DOAI6o4ZmV
GSpaatmzYLaOCrROvpOFiQy4swVfPGFPRXo6zuHu9lQ4b+6tR9nNxCz7Rs33
WQqKzTqXrD9LARuH97Um7VRgNzmFy7xnIGV31n9itRRYzc77d1uaBiLyx3On
dDAdutnb/+SjQtF0vziSZUBqcmP+qu00xIcsr1pLUeHR13x+zwQGnM/4Nvrh
FBWFUeXyt56igubj/PmMFTpcZ5+hFe6mo9vN2lGtS2T4du75y7NSDDiXIeoe
LElH9z2MVM6vxXzZfNB1tS4DflrkpqElGjq3ozTy4x8ypMZnESR1mLB5zzFb
fuz+DX6WWndmKBDsoCs1iNXPhhRXx0rRUN1IHQeP3TOzN1B26T0Dsihl4zZt
VLT1yhqLyRpMD+VvPHbYMOD1qdbujUU01O0o4p1iTIGj1Vv1yycZoGv96ZWg
PsZlY8wmAToZLqUNvxj5SQdRjX1Xtj6loTz8zKbjmB4ufguUG8B8b4OOC7c9
go4+Znz74fKbAKNRardbdzPgxqE8fLgQAxlsLnje7EKEiJxd/EwhJuRsyugg
Y33gH/ypd8GECCKdE+LblBnQnSh+Zf0WBnKXDaiMNydC/bTjS0cfBiR58t4d
nKAj8f16HsqLBDhzB++7/hcDMiS0yl4coCNdURkfMzsiKFEWLk6/w3xbcucE
pZ6OWJfdR0JqCXBK7AD/GnsmNGrJ6U1+oqHL294IfCggQpfY12wVKSbU9QhJ
cTfS0Zmgb4vex4hgvhB+LgHL+8cLAj/p/qGhvX+Yh0XZBCAe6Vs53cWArf3P
RIfe0VHpreOr16cSoJq3PU4ykAEVnE6rq6/oqJnwfXgdEOFHzPljL4QZ4N/o
rViljc21usDnNqwP8S9bUsPSMD34KKcI32Sgzc+OKyhj9eKKpTq5VQxQuTvf
JruLjtLzeDdat5GgzqfytfQ9Bngf4f+R/YSOXu8+u7+inQhRTh+70pUYUEep
M0GdWO6KV1XP2UUCub7KLydfMOA4VWndcTbWn4k5wpvXBFDu0e207qJDGr14
fZIiAx0SgMUCrL6aOTb96SkdbqXsPLEmhIHiJU+sa8Wef0Uf77Rdgw777RsX
sjCeKqtytGNh97Es326n8pgB32giMRkPsft0t9DufyPCuTkNiZWdTBCtfygY
c46GkruS1vlgfqsbkJcp/5AJNUFjpyJaqCgZ98E/HfPPLg9hNLPEgEfxRr+H
qmhI4BBXNQ/bUzHu/9Tsz2FztPVNQzKWJ69uuk2Iw/z5VMUHzb4jDAiqv3Lo
hh0dCeSemDjLJQFDxjbk8BsGqIbwjb5VoKOukBFS8FMSdH4W5cbhsDld0Fgw
mqUhNlFJORvba3q3ZyL+5jJgdPu7Lz6VNOTI/Z5giO0L5hR7r0MZHUJUeqvc
PmE/V7NFqjmCDNcrBwxSSulw0794JaWEjrK+aSclhpNh/pzyPf9dWJ+XVEtu
eGHfSzsp/awo9l6bCk58wnQY7lNm+wvTW8lNAX/KXTIIZ5uYlpcw4Cxjz8vv
2NyZuJA0t2J7bXXn/QnXEjoYkw6JO5bSkcyF24b//7nvXuZdu3OJDrFXw+h+
6gyUWpIf54M9P+GWXMeBFBqEbNxVtvs8E1lrknfO1xKh52zbkqUJDS4vpDzf
Q2Gip71pKnc0iGD6JUeauQHzw/umCx8L6ShlF93VIJkEgy5f/O/a0yGwZ+VU
rzUDCfZ9rg3A+kmZNQyvLKKDn2MYmyzNQB/E504jrN5FuLzTY5wO0bjY+2fH
sNzubqTz0IkEsZLL9A+KdIgX7Na1yGagg88fhaRi/c+4UnzE6BEN9sq8ud4c
hN1zh0n4f9lECBfjqEwV0uHesOmvQ50MNGNcdG4HNkd3HY6m2CzQoNWo8GHM
aSb69Ly3cS82d05OTkf/NNBhpsrRhozt/eymh9VPsLnOumISRX1AB3Gtx17N
vQw0evx08E3MfwQWDbXzER1+WVZIrf7JQBvvvcg4j/lDX8Yh9bk9dPikbViJ
F2SiAK2IoUjMf5odn8v+20QHkcgtPkrrsRz1C7/6GeYDuzLk+RwmsX23kJVk
eQV7zoD3azXMf7JdOxu8OHTY4FpYceA5A910PXb8IzZfCee0V1aV0kDs0J5i
ETsmcv3rvYmC+YwQ2njgwyM6XClUWFKIZiBDXvOeRGxeLPL8KeamrTCTJizi
8ZOHlAUs1zqrU2BcW/7qXtFW8NP6MOS0ZgxFpm+j5GF5tTzp8H/K1R3w7MA+
A+c0Hjp2uCFIyY0CFxRXClvF22FkA3u30SwPHbR5vl72JxmG7wVotFq0QZI6
83hhJQ/lICW7qKsUmBW/f2Mi7QcsT9WnhMfz0JyB+D9/RwpcSSUHALEDUlwj
Qj6QeIgaEP/5yTAZfvtMj1x+2gH9b/i8/f/xUKFf0TFmCBn+fLrtbfaqHVi5
trtiNMeQUXwTIUYCy2kJN0fc77dCmEBklr3FGCrhu+pXpUaGcqjnXTr+A7Y+
2c/TGuWhYRP1ItFeMhy1alJuO9sG/+25lH/Ch4f6J+/c4OdgezlZwMr3YysU
7j6+VvQbDz05KV1z/SbGEQ1VkqfdW0FeUENjJJCHQukr7jBJAVLNTnXOaDNw
6y5ETvTwkMNyVJEUlhPqdizb64u2g7S0fSR7PQ+ZOp6vr3XH9vjCuHSOVQvI
3/sW/0GLhxSrSmLGb1Bh5Xb3aWloAr2DF/f0POMhpnhX2rkVCuQ0tprOyXaB
y7787NB7PMQ2NjhSY0OBTKJ8o/Z4Iwzw7gvGNPIQ5eqasx+xPSvUcv2m1KdG
mDqeRLVk8lBq1P2ilDgKPHm7PvC0QyNMHJNAThweEj+3lRf8lAI3TG+67Vdp
hCCczvKs9hjyecPSmlLCeKTbKM1nSwMsT0xrZu8bQwQZ/1KprRTwTSg9Zn2z
CR6qLpgIbR9DledMkggYL3y2fLjF6XUDjPdYp1FujiErPaPmde5k2PriV2ab
ZiNIHBpe4gSMoe1wrfCCMxnwnmffJDa0gNqTkyE6a8eQp15q+hmMT0sPXE8R
tmsGl+s/hSku2M+1nPxwz5wMvPis5xTvFtjZIO45cgLT5624tXR9MogvaWZM
9HcB+WJVCt88D6leOXPRr48EXfFWZokZ3XCuW5//WDEPnevMV12TToYhG5to
xY4usIn5/moWq590uBV8vJcEkUKiCmtCumD736dukzU8FLR8pPnpRzLITax9
pFL7A2aGlPTNpMeQ73T6o/BpbH/Nxq5r29sDH1PNc8PP8VDAi3URazGe4utV
7D+4swPyugJt53eMISX/5m4RETLsWGXI8zPqAe+vqp7+Z3mItCMuLwer79ap
F0wy7AH+Q/GGMthz2j6+7WjHOFrRX8MWKfVC9ilSl1cBF2Xi/eSuKFLBV6yW
uaegB5YC0xzshXnI7P2C9QWM+5BPx/nDcr1gyG5SJGD1R8vyLb9g9cGZiZFO
q3vglIhMhpI8D51seOTVUEqByhSu7bm+Lig7cetJPNaHn77PdhB7SFAm8dP0
iGUnmEoknQ2z5KF8TWHqmWoKXBfPlJa+0AnLFDc7gjEPvRzYc/VtGwXS+bcs
hSy0g9HbT1LqTjy0/1blsgeBAoZmV11i17eDyr+kw7GY/i8M11ncx/R/UTs9
o6znB9i5yH0P+MlFvqvOmCgcpcL1/m6Lq7u7wNrryW9FChdlTT/9GouosErj
vzjXJ91Qwe6XX9/FRcXZ9g8f6mL1fJ3ZA4874SLt6TWqIQ8tVchLu7dS4Nfn
/otJ2c3AexURTs8dQ3+43EMELG8I/Rde+/1AM3hx65t9u8ZQ9+HP0oqYT0as
Sb6msqENVnMCBtl3xxA7z2zq7QkSPGhLuhf0vgVE70usrYQx9N9L/ybvFCK4
bjo4cVm6Baalqqe8no0h/mHL9LOXScBXy5jb0dsM/U8YkWIvxlDmGqaCpQ8J
xjZNHlCVaILmgUSyQc4YuoKX/WgYSoLu6FdNMUmtoF3+uyZOdhyln5GFO3IE
eBy+Uiqs3QbhqizNO9QxNFLQn4NrJoCXovnb5CetsIaokoPkxlGwsavaFVkC
yDxX1Q3QagXdJnvJ9+Nj6IetY8mVPgLUN7ScpuCa4fnV/44+VxtHp0dUD39V
JQAfmWtjNd8Gy7HGtZ4jY+gYOfvZPWyvxS7siRnWaAKtVoI0n9E4+oRl2Ukj
AvwnweR072qClwWVtp7YucKVkdanhgTo4xrzus83g1oveS51ZQxVs1vsZ5kE
cH+ssO3X9iY4ekdfKx+rd0m5kN+D1a8v1XBXVWoA2aIS2vPPY+jaPqe3rs9J
IBVb7+ydWQ8p1crXIqbGEOXok9MXO4iw3e8H9dxIA2jvKjMRZI6hPiR/Uec7
EV6qK4T92tsAllst3sbmjyFZuvucUQ0JtgkbHGieq4cN7ZqMH+Vj6JHCuz3V
L0ig8/x8a95cHQi6d2feixhDN9zdtDMCsLw0IHoggPMdiqVThqSax9DRXefi
P7wlQZ7ZgJhXaRNEnTFp9BYeR4m14ppL4wRQCl/aNsypg/Xp+N8n5rCf+32+
KbGXCOtO/Hq2axzAkzf9fpXgOJpT2lV4gEqEtHjdZcfGJmhvc9qh0j+GNGY/
VCkXE6Gm/dctzTvt4HHGAdG8x9Ds7J6E+QMkQJlXHvNLdkDViktf84Ux1PZn
WF3ZgASqAzmSYqva4QmxmXTz5RjyCr9vU1JOhDCZlzK6PW3QnsDM52B96NVW
HxYK+/+51tp/Gzph85Vftmesx1CV6kSLhBIJ7lmP2Ite7YBKK/NYr8QxtCk3
6bLBFSLEXE5PN5LogrCfaqoX9mP+ljDM3yhOguPWcRHH7Tuh/8Gp7O/BY0gk
5S4f7SQRHEUDbUgnO+HRfZ1PxiFjqEXuLPHqCSKcmtJsGjvSCacoFvPJ2Hmy
oJtVP3a+6gVfqUtiK8jBPuYMpnNGRanfZky3T16Rs7bUdMCFwUsaPfVjaEf4
miv6+QRYG6ZCoO9vh9bD85VVAuPI/cCzPgY/ATzNOz/ejm8DHv70n7bCMfTy
V46BfAQRMoJm259Od8D1RwVky8kx1J/i+0xnCg8Ku3p//Hn9A8RSfxTGVI6h
J3vOaSSmEaB9x+DaBE4HRCt99RXB9JbqmrZddxIPqe01Z23HyuDa9oOsVi4H
bWF8PPZ6gg7PFK/Zj9mXQb75gWzieS5y+2tVrXqGDpO48z4rEx+hTF4bVU9z
UFymh4D6DB02e8X9JNwpBu62IlKBNxe9XW9WLX+WDumuuVUd9aVwnnppVVY3
F/U3yRz/00gD3SDKSoFiBfzX0NygfJaL1nzdXN12kg6D5yz/Cl/9DMx2P/6j
P7hovWCIcFw9DTr+4FDsrxzwWV0UbfeHg9qr9pqZLGD3dPjFsHLOAX214MGu
AC7SvG7e0eJOBz1xwimNgCLY45erPj7MRYriWX9WddCAbq1/1q65FqLz+y83
9HLQt8Cw4544Ony49VWrkFkD+2yHqD1HuKgtaSUw9RAdCtk67r/wlaCYEdB0
mspB5zdnCuBYdPCv2i119yPAwejXvssdHPTV+ptkyyAd5tirP7UfqoXiTWKr
aqy56I+2XVSzOR2UxLyNczNrYHxUZY0Ldk/ld3/DuDJ0ONtW+rvo4Fd48OnW
v8avXFRm1S8YXUGDJeu3Gj0GpSBbcGtKUg/bXw/xeeOGNDgh6vOf7UopkA09
+RN0eEjNf+wfbR8NUoR2P6I7VYEf1SV63XYeunSJnNmuRYM82YCVvrISuN5G
Nb6M5auPDzialHIqSD8Q6egqLYHctK4weSyXBnk64fGfqTB4ZFD35GPM+bPd
l6IfYPv9zbOAkPdU8GuK5TePWY9O1d1maC5zUG7pgb4ty3RY9Vd4TktwPfKy
6ft16yYXzRl6/bb3oINA15eKZ+JZUOcdoyL6l4P2aL6Vf/2XDryB8Aw++3Qg
N9Fb2q9xkeNOzbojF+jAWezeUvlAEg11JddfpXLRg/CK/vFeGrgRlA1oVmmY
X3rFy5K5aOmx1ph+Dw3a1Fo+uLe+gZySLqlFAhfdbyKlfeiiAc2p5O3TpDpQ
8Ti5StGNh9pr3p0sTKJCzS8xm2rZeiApv5/K5OOh3UdONg7J0iA1/q7FJVo9
sG45ijxa5KLuui3OKVI0uEGZfROfUQ9n13du/fOKixJPCP0szqCBDjy2bLBu
BNu93eSPT7jIi1FgJ5REg+kVh2GZigawSK8xIX/iINsXOcsy3+nw+wvu7DWz
eni/mk9ldA8XxXw88l8ixkVXUVB9NTRAFmlCLBGrr2fmD48CHYa9wk/qaTTA
96nCul/qXNTzOTTUToMO1v1RnoaUZgg0d8hjZHDRPO0BfLLB+PNStNsTlRaY
6Gnda431/1ZHd3FcBA2sV3dsM+Q0AetYtx8d66dh9NrXDatoMDY8+Cg3pBlM
wo2OP8L6ZqgQG7F6mQq1ER8HnyXWwZfprPtdWN9WcLLhRYlUaLW6MmHv3wjF
1t8UBKwxjlhfX3r3IRWm5A9ceEpogjCDDXtM9/PQjScPBf+EUIH6g34d5lrh
OLf4jGAjFyVXuEctjVGh/sPsT1WJGrD9srsouoqLBLcID7I/00CGSBzJQ1/h
po91PHczD5U+aKDt3UUD30s170jT3yHpVe/vnflc5Fl+JycmnwYG5eUbqiMB
zryqSZ/B8pXdC3FhnW2Y/pVE7vLuVsO7Qi0lXDCWM7mZZ87lUwHPPjs1GVsH
mqf8d0q481DYvlVTg9h7rSsRPNtzqRa0CjYXWd/AeK1MgJ6fTYUF9aLlRx29
8DWHXJ3hwkP3PljcXswig2vCncowhT6YvRZosRubL1NWY2erDAUidzYfvOzf
C+/fjb6xxDhFb8q64f9/d8bx6I8Xhhd74fb8qNZLIx5a/Zv9K16FAkezjI5o
OvZANnt+UCiDh+jveGsnY8jgX2DqMPy2F1bLBxal3cLy5HzUt31nybB+gXI3
R68X8i6qbFqp5yGX1hqhjkQSJP15ezHiag8o/tN9sQfHQ770LaK2H0ngMd3w
LOp+H6jyJP+2OfNQwqKYvpkxxgvTX9dO3O6Fynaht83VPBQZpL7HK5YEVZn/
PPrD+kCxjz2f2MlFEruvRkg9oEDB3hfZ3w73gvSTRwHzM1wUGu/++U0aBUba
OrZ2efeBjNYnfp37XEQ0fr4mHeO1cbkdeeGRfZCUpvAoSZaHhBMa+73XUmBP
TX6USHY/xP05tqdumos+ac5TLcbJIGGlcf/jnR4weRc7bYPxxanzbmpXyUQo
zVPrTdfqBv1Yo+35WB4I2EF9prqXCFcuXr6yThg7DzolKIHxmq/t11Pr/hFB
rkgtoiakE17xFpZni8bQAWBoZz4jwIvb0hJSgr1Qu245Yy+dh24ZXWPcxvLG
3KsgfMn+N6Dv4ew/aspDW9TVWT0HacAzrDotWZkNBz/+Jdm9xjjRUvgRfy0V
DmxRPWBm8A4CrwtVzWI6v30iIUPJlAaF1rFu9oX5sOHh0vvNqTz0ujyvnVxN
hd82qwW/rZZE1xktY5sseCg3W7Oz1YIGP9IOf85zSoUO1aNWEuY8JHu0v93p
EA2qv2je3rdjHcqLzf10KYuH6meylqqBCs9qDsWOPUiG+7uORaZhOslVqDaJ
/kaFl9vF8zSzS+DihjPz+zDf3jBdHvYT8+0v5TNStS/6wCvZ/9euDi5iWaS/
iwqnQOwOBbxjWT/U7vE3kcnlolHLhl87vSnQumoNn8+2AQj0te6xqOOi9xek
B18oUmDOuzG6PGAAZA8cxNFiuGj1+/2uHo4U+BH61d00uw8kk358svyOzeOa
2ut+GEe/zorFF0r2A1rj1T11hYv0NAvPXPtJgfDb0WrU8n54FZ3nL3uai9Qf
4QgUGgWyWec95agDkC6ZOpcahOktKCH5jy0FmqXjfgbND8Cfk6wwE1Uu0poV
6l1spEBZ1W73mpkBCFNaqGrBzr8KTs86NFHg/g8ThjQhA0I/ikYU8Y2jlmsi
sQEsEpRrH9zLJ5kBSYnBLscMx5HcMdxZeUUS3Ak/ZnVF4TlM2bIjJ7B89TRv
x+EJDgm+LFfNdGnHQ8MlneZI43GUlO5x5+ZGEvgeHFkTvJIFrw7uPbmwahzp
ceV/FjJJQGs0MG2SzYKP3Xhl3L5xZPzXyuu1AqarrIonueIfQH2V797f2uPI
kslcvVWSBFa7Re8IHimGPyVazkMXx9E1t82e3rZEeGzlJ/xP8BOUJz71MtMa
R/BNSu24BAlkbW6UTp34AEILmReWLoyjqzssfKNtiKAxtKtI/j9ViNQYjJzA
8nbU0t4qER4JFN8aN1o/3Ambz1+d8dmP5cxdpSI+m0jQaOWRVOb/Dt51MBuk
ljAer9jddJBCglFrhdVZUgWQtr8/wk9vHP2Tsr7C2ECCby6tEjIjH8BitC+Y
NT+GJpbtNxXgSaC0sP7wRI0Y0vwvdGgNlucvPm0xN32N+ZuczNQJghj6spPt
iGsdQ1PLG74JfSdDfMZlkVqJFzB2n6gHLWPIeZ62u/4bGSizE6n3SjIhROP5
v2tN2Jy+u0lTriFDi5yImonuGwiXI8e6NGLP6VtXSqsmg55TnGSXTTps8lFS
bPEdR8fuXyzLOUMEMzfHwrXXM6CpXe9gDHY+GMxheWDnS+EslZsJr0GzmLNL
6fU4ctY2jhdLJ8DPE19yhV+8Bh+Hh0K3sXOTDLfkdCwPO56YbfgfBdcdTmUb
h0ulCJEtUioUDSoznlJW0Q5REZkpEaJBIfkqZCaZWSnZIyM/e+8t5xxnn+Oc
EzJKEt/r3/u6r/cZv3Xf1/Vc74BFAsQkujgEYDjj9uTvjxge9N+Pmz4fwuD+
uqX0n3c5aMkhV5BogYfoO+su3uPIg8Exftk6Nw56OTavU3YVD96dT7LITZlg
fGaLcqgTB8nROCsGF/Fwe/GInXJEDrj8FWt5FcVBsw8fUx9F48C8ED28cyED
SDmP43/FcdCuU7MGMnGY/y0ZfnT8fg6YOWZuX8H4Uolj03uicCCcQZpqsysB
vsCZXrPnWHy/LHgbBONgV9Av/krbEkjCyWQWY7hM+A/qWBAO/NZxx0zbV8Bg
yxePWSMM5w81zlbBw9/EYIsw/FfYahI9/PkxBzns5LPqf4SDwy2mbpc+lYKn
h2K80iUOesjD9/zoMTyY/OkvN/eogq1Nrk9j3DnIWcHLP8gDB92DwWfSFL/B
gHX5yM3jHMRqETrUq4gH7pZAKtm2CirPP5nZ6cFBl2o3Nxm74+CyoFd8lV8p
NJxR2ei9g4PUG892xq3gwXpc7lHajxLA328tXXOFg/4paJZI6uLh1+GOR3kz
ZfDjJud2uTQH1fTavUz4i4flSXbIm8slIB1/I24IO6/yJeWhf9h5jWiZj66K
lcHdOKmRQgYb1bJe/WxuJUCcp9+OG8dKYNvkScIRDhv5Bl8/XNuF1YWkNC7/
XxF86qvQuSrPQY0Hls8SNxDAzvpXynnncqD0fXj3lMRGEjNnu3/WEUDpLOid
olQC6y8DOQpx0Ei7R9B/U3j4KvcrY9PmAvB19y9Yh/nicJ39yz4jBGi9pr/e
nfkNVsSD1Tm8HBS6v0AshYkHHmWyVUtOHhTkvvLRqmSja2WZgp754xDouv/N
ju2FIOB003c95td+MUPV0j+Pgwt/Bg7Cc+CnUIcNE8uHZqncw1uwfNCKyO66
se0zlMfzvCNWs1GB5qPA5OJxcBwI+/CbVQhnUqe/fLfioNM6eF5lfTy0xjzM
dmkpgNNRwUpJoRzEtDp6oPE1Dkz8CP0NcmRk+6s6U1lfG820vDhldp0FOXwX
8tlHKAh9EPtm46uFOi1xP87GTUBNzIHJVX6Dn+7jMApHl/t4i8sq3943um2V
L/jRvS17M0fXfz1O8BzGrziYaf36NxFVadx20RM8huYfw7MvO9mQtvOr7yq+
Zchdo7Dih+7bLLfPq7jectbLRwep6J2ykSMrVxPda5btjxhgwpbUSSkRERo6
9LE65TZDA/lknRIoEsZw5Q/pq/zM7ztmDxxl657UEpld5Z9ddDuyyhcO3Vk7
cpOle33IQWmVT1sX9ebDaSmUnKw4F+k7hKpfLsLJXz8gNEVAP75cEkm/vtbR
mzWKMg0r9y6d/wEO3PJS6wz0EN3btXKV/+Knuecq/4k5X8VR0gm0qcYqbJU/
EEMi/8X4LlFxH3Z1SiFtaYOkLPF+NOrBoCy9nITtStl+ZSl66Doccl3FMyJb
olbxMn79IKFb40hAmltoz8gxdOF8zCCHzAYefc2yVVzJ4q+GR9ikrrvhKNcP
DC/aqB16Q0YS3Xg57vInGYfIJ+tGppM44Gz4yz7Z8wRSn51SXMUVBAZjV/GG
JVJn4wcckmt8OUx9p4Oet0t76mC458rg8io+VOa5rdBqSjdagCdjFb8Xp3og
QhOh/f347NV3ZSt9srOn301ATJbVKP60Lpp70Pl69V2ZDVuA8m6QCWnR57PM
domjZ8Omj27vJKPnty4tnbzBggPhIntZIseR+ukx81V8e2tjyypu/fqcwW3f
Y0hawGPH6jvMZImLj1ffYT7Ofzan/04brf3s4bH6DrNWtVZ09R3mcu8X5yxr
HZS0frfm6rtBEZfYodV3g1w7+XRuUWno2evZNIXdGqho54gM24wBcX0d3pIf
6ChfwuTJFgd1FKW4yLcrmQ6aT6evrPK1hAOT/kVO6E533tRY5R8Z/RO2yl/6
/Jie0MrUFduwe88qv976V0REtzh688P4q9IvIrrc2Hf0pRwbCuretCa9Po6E
o5ViVnHC7vR//2F4UMctR2FfCbROpeGg4c1xlKa3l6eUwoacbmH2Xa4T6FHs
TrYBhh8W39tRguFJ19MiTtbyoFMNjXtW58h0Lu3U6hwpno46MyfNg8wDPfQv
JGPz4lRy7YMkHLzovqejYikPfxfXoVXc98ehylVcfov1v3+uvEhh0ntxde4v
Ohzasjr3+wJS+FLW5CPqwR0uxaKuKOXepluTU1MQ2KFb3N8GKOfwVOdnMQvU
K5pFjKyZAsVaS7VMjP9UL+2xvf9PXbGbvfmLGP+7wae5QYyv5G85dMf+py47
22JHDMa/ljzV7ikijeQOdfsqh2D42ZGllZUp6BGVtvXglkZby1u3SM3moboH
pdRN01PwdsSyS3/kFkpB4WeEMVzZSG4nF4YfuEz7J7H4GraOWzyLScLmUajE
utX/bq1k89H/27EZbZrY/3pV5wjyXqhd1TlmC2ouJ6X60Wef9k173iJUet7/
RDRWR5sb9qoYPx5CV/rabI7+00XfJY2Na+d/gKmhU/gqX4+fZRpbOa1btunX
41X+ucTTVqv8LQ8rmHwu07pv/ro8W+UHhnkPfRDqRieFG/RW+I+jXZqci+s3
T8HfA/MiaRhOL051nFv7U1f6v+sRq/iR2bFrtTrbEMGa176UrxspkOLtLmF4
XoGaxL9JPeQnSRNcxQnXfLes4ic00hhvP42il2Y1N+Qv6iJBLYEQG6xvpEXm
iMZhOFl6E7hvmda94v2hahW/i9pr7ic0I7UTqhZyOHO0Y2Rm1Pn+FGRdbL/l
heHqlw0+Kmj/1J1WdeRxxfAnqSK32bhtyNe3d2tOHaDCXOX2Eixeth8u6XW8
uYraK7eHZmO4/0CqfhGGF9v1mhm/24bKnzrJs942I0pxWMwH7DudtzpF3h84
iRTTm6kTGC72W0h3FX+cuaRj5VgDnhUvL2lVslD/Zq6ePdtI4Fls3r3NvhK2
66alPO1gIecEmZrD8iQ4H/FKkiFeCyMfP2peLGUh/i+whkuCBFrCiT/DU2rg
neufo7QNbGT4Y0n6UwoRxF5sz9xZVw0bWh80PRBgow+EEM/pDCJwiR5ifKkq
h6Cbdsf29bLQBu6WiIN7STCNsxT48bMEDNKC8ssx/xvdtqfW9CAJ/l0dMjM7
UAPHpMiLB86x0R1ety63A0SIFn+hPECohbPsZ4wvSywsbsaOy/FEqBdWcXjR
WAO5MuF3fp1mI0eYCZ1SIsL3uWxGUSDA/UMRJ09FspFS+/VntMBxWJ/YLLgp
AIAThuSbMLxM+HuWZsA4fF+as2qO+gqLBrF0pfNsZFZcJ6phRwTZkf57XpZf
YXZ/d1OdI3beiu3DK8eI4BWvQb/eVQW7RmU//rJkI6PFNZ9cjhJBjrdkwjmh
HL51cwlwbWejPKsvZk/ziFCdmXsywAPg7UuB2L/YugoXxL56Y+v+ZrXOughV
wr+ifoW/KWyUusYIvCLHoTbesfHDxnLgcugSiZFlI7UK60s++UToU3sUM8fz
FS7bb1eJcWKjmN17gh7rEEF5e8LbkfBisBpVEvXZx0aJCy8OK5Vh/qt9vQg/
KgLamseyzffZ6OjI7Yztp4iQHZnXNKZYBwzYWCSL6aiCUNaaMn48GLkYrdWu
rgOb2Tql0zs5SNdZqLh8Ex5MW0O5ZL/WQp17kqeLBabfQvenWFzFQUhr46vj
ZbXQz/Dc0YHhzlqvi+fMcdDuEvHMJL8WkrJCStZd5aDI6D+GyhY42KAgsqaN
UQMVP/1zlzCfdT/NRI4mjoeVgEs+6jJY/tScPaauw0F3Jn2CX+/BQwPfrsGP
EQ3AvdaoXB7Tb3wx5Q+FFnAwLxJvt861HrxkNxx5eJqDvkdMHUkzxkHJYgD3
I7F6MPN/lLaQyULPQ+5dPyhAAna3+Dqpk40gHElQOBnNQtXt9l5qXCTItv+Z
uoWKxUXLL0jHgYOK6lwL7e1x8MZNU3L6XhXU99RsnMf0c8+7dJw0poeb6DcM
rxmlQF+9eYJiEBvdCDC27cf87xfVVzL+glGgKLvF/2kwG7lc8x5QO0eEvad6
5HKOpoHUlgVqXQAbRUU03VkxIULu2Ttp9fnVUPvCfbNqLxtt8JP7OZtPgKlS
HnVI4UPDHR+PlL/A+AsC26ex7zTkFAQP4HMgYjbQPvAxG3H6/ss/Y0yEq0SN
rPf6+SAx10zw8WUj/hxxez9DIgjwnjuod5cfcdH+NnKdYKNnc2KLPJjvrpGR
q4rMiIbRn3U5bxGWh+9Hw/ZhPv3D2laVHd9S4OsW8xVDHTZS5ac8qa4jggZj
JUEjJB1OB/twO2iz0X7+/B8xtdj+/5WIWeZ9A+XdicEvB9goRYKblV5MgL3H
X5XDy1KI9VtzQ/MLGz3Zn2J0P2Uc1oiNPeguLoMDhv8dO/2JjbTN/s5IJI6D
x4mPpWsf5EPx67bUIRoLDafcNHVRI4GTjWzgE04GJHx/Wdr+g4Vo5nqkZ9ok
aHM1To85XADnw5/lvaCykJPG8V9RR0mgoli3VW4xF8CxvkrrCBsp6ptlKX8j
wtZqRbcf5fngH4FMpVTZqPs5PQtfSQSjE3vWG+oLoMCXFwmycywU1iTzMQyR
QLg4rMO0KQYO4x94v5lhoXey2kLhuiR4apWhYKSeCh2a+GWNaRbKy9vtuUWH
BEql3T4MIQIYbOeO/m1BQ0Gqsw9I/mQwuzRfY52L+aFd9PnePBrq7rrCytAj
w8ih0Ayr9XiY+29DtE0vDfHVndVh3CDD9ct7WK2OBBj20Ov4vZmG6n+dpZcV
k+G2JdJW4RqHyQv0a84cKkoVy575HEcGL3xj1G4RHNzRFHqvPkhDf/dZBAyX
kmGXVaOP3MgYqP/KPXiBl450nje0jISR4fJeq+JxWzzQCxwsHiMaSnfcmPSM
TAaZTedo5n8IYHurPp0UREXlJUmSpwQoMG0lnqGP1b2ZUAHP4gwV4WpKL4Ze
pUC5id1e493j4GVaNUawoqIITq95niIFTPy1vbgwXxLy9G66rhMNFWoHOldy
U+DViQ6/0EI8PGveV/4+nYoE3r8tkrtDgVvBWr1LD8YhPchGrfk0FTW9iYh7
J0EBv0PCrmWiRLCw2Ndy7QsV6fm/ef7BBrtPW7nMyyfxEKF+d19KORX9VR7a
wHpKgT4+mlPgn++QZNzHq2RHQ77Z5+/8TKBAF3fA8b9vv8PY2qQ271pMPz4a
N9xoRoEPOiEx0axROC7451UigYZ+qZhvnHajQLLFkOGV/DFQPO5Ps39DQ2Q/
L6fb+yigVpKw/it+DNRenQqLWqSi19zpDjzVFNjOMTkauXcMLJWeh71JpiNF
oSyHp1JkcCGIhaspjsEu8ZaThZgerhrfWBgnSQbhmVMHn+4egzpuUUmbVDqy
z6uv3oXxqe+1pzZ6jIF1QLzpBhk6+pt3/VZcEhleum6P9fiHB42LD17G/aOg
j7iTOfNLFKifZCe/+oOHs/5hg5eWKUhgu/3P/H8U6L29/fKWPBI0PG5WFsSR
EY/+g+feY2SYUTJat2xCgrenZmby4ilIbectY4oHtu4ATUVrqh0O016ZFE6y
UZzQLDfhxxgEya2N4wwR4dCZU07LOhTkqy+edlOHAk/HzwgNexFhgmvWb/kv
Bf1JTUr06iKDosIV5u0vJFCtb28ZwNY9Vq65TRtHBrFnRRcKw4kQErt+bdY0
BfXv3X2itZ4Mo30xqp/O9MDuy4SnixZs1FJ9rLH4Fw6+I5ER7ps9cF1x9Frh
GTbi4vasyJHGgwH3bYMJjW6QJiJ1QhTml82nNeq8cdDp6tefvNgN+vcU7zBC
2MjGwUnL/TY2X6SVU73edMJ/mS//HRplI/xFa6vrWD1scntWe/1YN3hw1i97
1LKRxnHxo9fqxsDB+HeOpk8PjGW7qsc+ZKN1/iWan67hIEb9k+ONI92AJrh+
69axkclu9XWutWPQfFDqLpczEXYsSpw/KUJF4n5+nR1AhloXY1nf8XHwvHXj
2JNkCopSJV7DJ2H53GAbsZcyDjF+EQ7fkijopOaBUBkM5wll7Dw4iPX1vSIm
tboUpH+56OluXQpwuXesw70agX9OobtGxehIoG/PK1YqBZ5P4vMiGMNwd1z+
yc9iOtocnf41cDsFjC+yBWekR4BxQdEjN4eOtDbcGg0Tp0CB4+X8rAMDsEmj
XSyygI7Mcl/vztlPhfaoXH46DMCHEdZg4GY6er6c7EappoJKVQH3le5BON4i
rfmZSUMhM4PvJJKoEJ0zfK9LaAQErXUTo/bSUc/k5ubwQgpMPlQmZ1kOQcGJ
oU1tU3S0+4SNtOB5CjSGqQQuNg/D3GvGm5t9dHRRW+sJ2kABO/1t68U+DkMB
pfdeMTcN5d8tk+PhpoHQBYb0ae5heMnzj/tSNQ09j3C7iLypEHM+89OrtGEQ
MT+IM99IQ38ekEJyMH6/6dkMz7FR0Hz7WmFnERXNXLIM8CmkQv3njffPTA+D
8MXItLIEGuLtiFmXbIbhp1R2xb8agm2DF/zd9OiIJ/KuhDoPFZpsH5KC9w9A
cgT3375COjphXGf3SpkKyspCRx3lh2DGsmGp8B4dXbeJ2dH0kwKazmaec1cG
QV4HZxF3hYb2HdkQwrpMg8dLFSe1k/uhVH9r7RcTBtJpeFlkgMWXj/jPUfK/
AWijmnrKHmSgxIf8Y3bPKWD4kHHG/uEgZDPWKMFlBmINrq93EaNA+vWleXOx
fqAPTy5uH2WgTVcmt7iIUuDQmxjxlc5B6HYpRW/WMVDWzbsBpTYUEDPa+8xI
tB9wi8uuB74zkNT7ix8tRSjgeGu/7++uAQio5fVPSGUgl4C5QCkGGSLohgMp
j79DXcCbw2rKDCS/aSnkWBYJ6tixWtuchuCXaHR/tCMdfb19NfLzBAX0T+bK
ntYYBKaKCO58FAO9KuPf+xnrJ6WTnqzJB0NgkmF6admegS7FPjnhUobV+wuT
DbLsUXj5rbgl/iYdZRAFhs1HyPDs3qUrnnqjcIx79tjIPB31n534VXydDHt5
JsOfdY9C9hTTRd+BjtYNRpXrY33jmbxrxhaRESD7PLJQUmCgENXCO3ufk6H9
T5/rygcs7t3PTgbQ6IjK3teWdp4M83dp91IMh4Hdm/pk3oCBdD8dUnyL9c/Y
rlBhv6VR8Ahjr6VfoKMYZwW9P1QynPSMN2wdH4Ww0IPz9wupaPza0yvtBVT4
JicXtO3IKOTv3xubf5uGEr5rlj1SpAJZIzfWo2sEFgLsdxkM0NC18b/JysMU
iBT7s05zZhR6uXOkAk2xebr4N0KUjwpyunsszZfGwDYswKTlKhXlR+n6y12l
QtQL+84YozFMf/bgnopg9ZXFfuY2RIGJUKN7mgtjIPCo7vYTSypaHKuIG8b4
G5L7LETthuGFyqQ5ToSFMsJCC0qacOD+oXdHEnkITpio4T7tYyFvPv7lBgIO
7JT/yseUDEJk4A3aWDgLWS1p+ppdxkHLnnoeKpY/+VqXprvMWchdPYMnShAP
OalKxQ7rhyDEy2dY+hwLxdZt+bnIjYcdYW8GLNIHYe/9qeDXbix0oFjdR3UU
B1V2KuM1poOg9GT2x+EUFlLeqcJpwHTy1RM6wjH1w8Ar2DDdjZ9AJEfSsrsO
HlyNPmaHm/WDw5tlhf7T2Lr2P635pwjAX2LcmHm3H3hpgdNrtFnoP8E6j1jR
cXCU21f7xbMPaOvtbPPjWWgMvxRR6UCAyBNTEe/kBsEz5dn1QA/Mh0pndfAc
wMOrs8wBI50BaFb9cb8L0/Myb3umxi/hYSfPoTQNuQHo2l6c65bIQqr7GD4H
DfGwNkDdka+4HzR83MhmeBb6MmFx+U8mDsJ9vvD9VeiH4S8iMRt/YnrvYLDH
n0ocXPrkGdBLGACH47q2RgUsBHtiLy89wMHW0KBHP9YPAGlhpisf87PBJ9J7
X8fjoCag+t2+vwMQz/2rP6qThXbw9b/L/T0Gn/72bJPrGwBidb9aLYWFym7e
NliqGYO5Qi3OrvhB8OkNDvxRNIHq2MP6w87jsFfL5NWi0iCY12i/YC9OoGse
lkYZrQQodtltmJ8wCOLnuyvLJybQDy+VuVMlBKDzm2QfHh2ALw6TicMHWEg4
/9Ow/gUCrBk5vcjzaQBcsxMuUs+w0KlfAY/z+Qhw+JDnvu63A/Dw/NavbEEW
+jM/m1dGIYB/UepEceEgaL9XiWtPm0ATF0eS3oSOg6wRra6d0w9+pkLu+vQJ
9Op4too1NucYlnZO5dgckRV2/rOvZQLpIMKdSxXjMEYtSd873weygW7zaf+x
UDHxqs7xSwRYfvVnf45nP1SW/gzT9GEh2cj451cRAWbodOmbYf3gJW6TmKbG
Qkv5f6+7CI7DjS1pzrPOA+DdGNt14QqWbwZX7nqLE2Ai+8imzJt98Gzk+4Gy
ISw/X1vPvE3AwwipiXDMvhegScD+tDIb/epdV7//Lw7IfevtNDx6YXlsnarh
PAutV2+4fL4aDwIHP25L9u8BZc3zS9uM2Ohg/FOdUQk8+K9xkKppwfSJwrt0
Ag8bNQ3jbm8axMODzkz7p3F98CkFL1Fez0KkqQGxjYCH0BPpXIef9sH2RVdi
fh8LaW55e0ghDg/yNsk3krb0wfIid1GSGBvxHOxnClJxQNqmXUXT6gYe7oFF
IqZDePz6eAQwXbFvPCEr5kIv1GXo5SjYsNF1pT512xM4UDevuiLk0gPnt+fs
18J805cZx2nH7DEIQSMHOrR7YfuV0eRLb9jIYU5JSztiDDTxBxX003rhh6re
5OgVNmquO1QMajjYOxIm06neC+EaliVKEWw0WfxUzfLNGNw7fO/gLKUXbrYI
FlgeYiNTF9JNtSRMx3PtPChg1Ac9bS800BY2stRwGTyMw8H7VCEvD8U+cNNu
Ck48xUauZef85ndjfaZJ7FQXFl85K7LSrrVsFK72lrr2DA6MxffVlqN+mHo9
8LVgOxvdP44r7P03Bof2P5S50dUPn3yP6drxYr7yZrg8jjkGz7UNoyqX+uDe
Wv5pLkU28p0XjXTbiPn6cq92o8QBWJlqnWhls9DTV2+2GraOwQ63lMbAnj5w
VfuNDlux0dpo2jbJa2NwYUGyJqu7D7aCq2A2hv8e0VQctRwD8hZC0ouOPoja
v0lQ/BrGvxqx29BqDB7qnX1zK6ofBvVUFncdx/z7zZ2Uy2gM2rR+zAya9kOn
2kPqWCnmTykhAh6+ePge9ORbo/IADCD7k2pvWWiS96L1CzM8GJUufz23rg92
CEaNSD9go+ysGlkT7zEolc6OXtHqhag5F9dGLF4TNfHTs+Fj4PVNlG/NhjaQ
Msz6dvI2A4kbyxT79FDBfvv7uEN6rbCef7gKrTDQaPvomg9HqGDZr4J/r90M
8057Ox2eM9BSwqeYIgYVpIe3NTy51QhyOe4Vl+WY6N7h5g3KFzFdVz45dSO/
HeKk9Yk7LBloMYhZrVNLBULq/tJdwa3gRPbyTlpiIP2JBKnbqlR4K5x3/Kd0
K/BUnCrNkGKiMuas6pAYFdbOmXq7LTTAye6PFOs4Bvq6NvPBmwUq3Pm+WWnv
1QYY01pKbd7HRKPPS1SMsfn18bltFu5qF+zBCxAc4hlo/eWNE6e1qSCS3C4+
/bMLDNeMZvgeZaCtyznbP6VQoaX2z/TPyE74DA27WD0MdN9E9VkSPxWSuiX3
qwl0weWZvq+n2hko8JyvF34TFf48ixY4HdwCb3le22QHM9GgnJPFRUx36bqf
cfR+1wz2ubGtAeFM5GF43tMhgwK/5P8Maat2gs1C2JeXl5lIaJPURm1vCmxz
fPTv4NV26Li1dZOXMxPVXBdYng+mQLhwXAOjph42ndbfF53HRNsfJY9x12L6
6lnR7p+HakHQVP5zwQkmkq/86BztSgVG15ddMedqoFeetmOHDAONKAVaWNfQ
4Pphmy7JwmpIFJSU+CqH3QPNfeJDIw0IVzODps0agIdPr35+LQO9uShJ6Mqk
wXwuKticXwckVPHFP5uBuiqlClo20uDbxsG9tomNEPrmgKTYAh0NOrQeCEqk
wbYJbRVRfDcEH4iqmI+go6DL/9U46dDg8u9rJ9ttsH5i/kU0+Q6mY8XmHNS2
0cCcet/s+oYeqHUOZyooMtDktdcJ/dFUSN31qlbatg+mTtXGWl2kI9s9dw3C
1tLgBvOJwxl8L/zWy79S+ZuOhnObWlqdMf38YOXJUakuyO19duleJh3te3zZ
Mvc8Dezkjb02feiHuIT7gbIH6OjPXNgPz3EqzBY+frS0tQ1KLIMUe7C5s/dT
2iXvm5gvXd+kyu5sg/SNhnJc+RPIWO1MrhCBBENNWxPspPrgoZo9a/NPOnqo
+rJkxI4KDg8PVGSV90LZM+67Idh9EkoKbwmeoALTV+hP7IVWkGFWn6UM09GH
JG4NdX8a4KJ/t+5q6AGJ/Xc6E5MZyCdYfY80lQLMLfcHHLi7QWXs4f3bukyU
pPx6OeQWBb4d9bJ82NUGj7/pGD9opSPPqcrOdHca+PhpCq4T24ped4hu8nmI
5TlBzM42AcvD6MjTS4dS4YxA28MpbybaYuld4/SOCg1fxb9rRKRD1O+a/c5e
TPRuhmf7jjgqPB6UEJve1gFsYWVnvwUmWlGNGvxaRYauqfJj+29g+NNLEi59
TBT1/YgekUkGWYp6xdraDhAlu9uyOpmoyuo7wYNGBsbL8+2mahmQXjDTO0pj
oGsmEj6uWNwJQofGKK2FsCmmTiMO8wVaa3Ou3T5MA+XCoydC9Arg0W3j5qOu
TNR3SQZv84YKDxx23VnzXzH4nuAONnBgokK72Iybr6iQNT1Cri3/AJLcDrNc
DAY69+h1qKcuDTqrw7xcs7aiSfaHT9vYDDQ+5poqoUcD9Xy3y/sHGyEo9VPl
gsgEOhQuFBS9jQI6D6oDnHqbof5ZhV8W1wTyq3FRSeGnwMtT1PCl583AI5iR
G3dvAnnmzA7g/clwde1I/OYWLE/uvO1pPzuB2m6bvDV2JMMVA6vTyVatUN6s
KXhulolkZ256T62lgOpp4eRPpAyoOXhm/zkjBpoYsu7hmqCBjHlmultEMcyO
f9b31WKg40c5n/6N0eDCU0/+3cMlsNlq1oVLg4HsX44vfx6lwanJdK5l5RLY
72XXIzvEQOmO2sc8DtLg/iDXlVu6wohEePayzpSB7rZGT+2apMGg3fCH83np
kGPGn0/B1v3ocTEyDFv3evuODeppAKPcHdpKVQzEJ3v4k40EDdpXbuxy2FUF
Vs/e8nM1MVDnzE1z2Z000M+ONFHJrwaBvK4BQ1MmOu8qPnkF87+1uWTLO/hy
MDaWEHS0ZCL6VIyz7TMqvDhgfCd8YQD+Pvpz/57CBMrvSJodaSSCgLFX776g
QZhrfTrx+RsTpZZ7dT47SoJjU8eH0jYMwkxRX9lCNxNVmPU6HdMjQfyC8VaS
1ACsz0RveCKZaN5RxoIbq7st6359vo7NwZt0ilwXFq/DBq93x9mT4Hwnr2vd
8gAorwyx2jyYyKFpcdi0mQSE3N2dW7P6oVD+wq3DaybQcXkNmxY7EuQm6arv
HxsEvTJxyfu+TFRwdo+S5CMSwI78+FbRIeAf5mh7n8bWfUkm/ckmgdTXmC0u
t4Zh/2eqaNd9Jnq/PaBkBxcJYoXCit9eHoL59p0aD5OYKHKT8eFuWRIkdn89
zuU2BNF5Od+FdZhot0rGKd0UEijgc+lHsgZgwfzU0wFxJsoymOustCTDfZdP
98k3+qF77PJSrx5WR4/Vfjx6RIa7lbItcxyMf1bM2FQAq+tHG6J9L5EheMc7
nyrfAWA3X6nhP85EJu0aCxdVydAfY++zXrAPeAQKQy/0Y/PFiGG+awvmQz3O
3N6I6T3Xb6dj1QewfW6TNZcXIIPQ2EuaYWg/9KXKKRWmM9E3XFLfWzYJNm4s
Nvge3gfs7rvzN64xkdZhJmcmjAzi4U2248/7oS3AcEc9/wT6GdpxMf4qCfqz
SEdrMT1W/dfhS7/yBJojEmv7AkjgKXpmdq90Lxje/GmYljWBrCdkCy9vI0GA
aXLNJ5kRsMin826lM9CNPlZvXwgJWjT4Hp5LGoG7Mi8WhPwZSDtTa9qKToLD
vG5jQl3D8FjN5JMwNxOxYhytkA8JIngDJQ7+GQafrV5HN2BzvDJCh0BZxO5Z
zuMda3kY5NtTlmSXGciQ/wnvAw8SlO/KY6pvGoV3LGacCebfK9lmStcPk0FO
Y09tTscQrLyztTxVyEAdmsm+x4+RwaCzMexszhA8X7k0PtjJQJyWn1uuy5FB
u5nrhcHdURCpmZn6YcVAt9d7p8e2kyBnroaZ4TME8UaZN6MHGSifI3r9pCIZ
ej+tiA1FYvdwUt4gSW8CPSurEPgbQQL5L+aXx3n7gHy8SbQUi4tICedSABaX
fYX7ciXHeoDh7WiQaz6BDtgZR6Ri+bNZpDpGLLIdNk9mfWDrT6DW895nBm3I
EJNq3j6i0A2U92kKm+9MoHZbdILeQYJ/7xyHtTd2gxvfv73/PZ5Ad7mSD56q
IMHgNw+TR/guUHCd+vbZbwKpdzrfqKkkQQZn/137kB7I2HP1XjhWL9c/uuja
HyDDo/ClZ6HxPdDa+rJ8hz0T2f1nOriyQIZSI+Pi6vEemK/44dqP6bEIjtcJ
QSMKPE/7yfdLuAdsQ85ufpyG9cP8/R2yjWR4kVrz0NKxB26kct9uiWeiZhWT
er9qMsxkHP8uwe4EJQvXvay9E2hbTUHtAxMyRHm0dyXTu2Fj3o0iG8EJVHZV
oJumSYYNpq/3nq3uBf6XodMbsPnF1xpTWpFKhuVImZfSjHbI3cbSt8V84tPl
7ELjQRKYuKbbTgli+l8CdpRic8eyq+5IswgFyBZ497+KA9Aw9PGaXREdbbr7
vHTzfiosBX7mdrvWC2otHsVPwxnoFJ9258shbF501XowPvaBAz7M+qgLA+14
sMDeVUYBKV4/0bhzveCirb6xHKvTnxc8h27qUuCO8T6v53YcEG0PV9GWykV4
tZlmszN4YAzetDxwiwP6QkL+A6Zf0JLjFcENJniwC3/4604kB361xNyMiM9B
e/7r3dAZh4MLF8zcLdZy4HGW5sLxDano0zffC/pUAly0kMB9a2BD7u+ntpKa
H5DWFm/BJ+XjoLjPpZuXiwM8Sgtxa5lJKMekT4iXRoC7r25GDTSygafe97/m
b8molt71uBLzxRY6ZO+EAxyYcci0HebOR2/oob0TmB/HJ/bRbs6zQbnG2pvI
V4B88EuywsME4LL678yFQxyY2jyw9a1gLgpa3pRQKUCAB5MpX08tsMHquPCu
fbhcxDndL6H3nQA5lcQOkjYH7GpFJCV13iAT+0xbwW0EUDwR22y6ngOLBrSX
6xUi0F85ndIQBgEixgWetR3jwN+4Y883+BN1PSVR0CZpAhy5seb2uQ0cMJLk
PSc7RdQt8nzKSGcSoP9UgtsnTQ489Kk793ZbEjrwQ8GpSIIAbiKzYmoYvvtm
LJebdAq6WkqyUMfwf7s/1sq1sGEnfSjms3QkGjn0Fq5/Gwe81r9k1MqG6cFI
nuu3SLrKT60Pp1WPQ6BQiPKiExsCjvN0qW/+isr42962HSOC9tobnQoY3v5E
fWOe1Vck8tdvwRTDHbZKS3udY4P1LbHS0rdf0V/LCuELt4iQfV6S7/0XNshO
Gdnyvy5F57Muewkkj8NmzjuCfRkbRF6bmv6WLURpv5GL7qdxKHr+qUrJkw0K
81/PUI4XoYatu3a4niTCB947KddT2XCi279MeWslOn7u9YetEePQee9H6DUr
Ngjn37u8pbsK/VP+UF1+hAiLTJutOZ/Y0HqSKPGnpAxZMmr8it+PwyyxnDW+
jw1av5OXP0UUo4ckxQe+pURQbaky/ifLBts+7rgfm8qRsddT1eY8IriOnza1
jmKDHfWc7jcPQLsaTOdEn42Dms038l4M51qeO3AiANAxqfc/Rp6Ow6vo4S3p
EWzo+jbqpP8CEPPL7knc83F4vjma+b6SDXom7ZrrCvLQK5G7PAJ54xC+/jEr
Bru3IHzEhM+BGjR2vogO+4kQNfh8D0mADW9N9HShrhr1NxukHc8ggkGK9+Vz
3GwYFKXtK0+pQfza3/j/JhNBvyMEf+YdB1z2dMpxm2WgBrk4t4pYHLjLuJzj
deZAOzxr/fsmE8XKni3adAEPtocS6v+6cuACtW16cmMSWsAFW0pdwUNp9jpS
RwIHcC8vn1tMSED3PIPltONxMEIL/GUUz4Hyr5kJK5kJqLY3xhel4yDz72GZ
y9FY3pbrP5vzzkGbzbx31kfgAF/0qrflCAfEJDYpnhX/iG7z1//0EybA3BmX
M1EcNsRVJnYV6pSgTx3me651EoDN5xsgxGTDJ5P1lzzFy9Br5UB3uxYClDdx
6Y9g+8lVYkV22yWgF1/9nxtg+5m4IKYuKoOdV/XteNhsGdoe2imiuYiH7XjZ
/HESGyL/hP2WcylHptfIymG1BBjQV4ro3cGB/HuNFa3+pegba3bwyDIeetYU
HnFfYoOn1tHf7vezUUqidAmOQIDKq4Ybd9zhgIgdjilokYhqxy42Iex+8uNp
R/SADZy/FfoKOz4jj6rIe5pF41B47nnV7yQObMht48088BoV8B7tsE/Awd/Q
2WFzNw6opjXiqntD0ZrDX4r+M8dDgF22ZXYy1k84D9PcLMd1N212sBRPxMHw
f6pOMvc4IP7u5edOYaJuuZBKxBULPMTwcQ2uPc6Ga3PaFQrF0eh+nUeQbz0R
JKq3sv7NsIAkfnKz/mAMqjj+1HBchwQd2rq/7p7A6sgLbC5Zk3VfLS/IWTYQ
IVbzn1/4HAvW92e8j6aRdUvpoUeIuiSwpeGOFuhgfZJePfWxPgVZZ5vN8tUR
gefEVv+MaRY8/Jg5zq2biqYP8++2PkYCq+T1u/iSWXB0pFtAK+otErRlqHz/
RgJr/e9531MwXOtg7iYPim7xXICXAJBA+cdKdF0CC+Sr+v9srE5F3Ut+c5eq
SPCiipg8eoQNUcb/rPSrcpH1+wMeCVVE0CkKrz9BZwFSVQjx8s1HKzrdj8ox
/TzQKaQSoMoG33XhV49U5aO2+875SpVEiLPZWD9DZYEkcZ3Z7NECpJ3nr0A5
gumfW5L3FQOxc+1B2z9qp6FRQ715ExMiHP2m3N6lzYZoH9HnZ8PSkXAwfj+1
hgjyokbPwoLY0HCSp7/gbAoS2SwstNOUCIFmX7PUJ1kweaXrSt5MBtIR6TjT
q0WCSqfhPVlvWNB9P/VjRloB0pnyt9QrJoFizXJO6DsWWGj9kXifn4Vmsjvx
hzAdUmy/mBOM8WfWutedKilAV+PcSpUxfsPGXGqEDgcCk8PJR2Sq0YfDw+f2
78ZDVFa/YtVxDujoPOmpVvyGvmk/cnVXwEO812TafncOVOx5sUbbqwr5zayk
zN/HgY5zS/HuMRZ4aKkbVM2WIGu0VS/xAAmuCAlt+x3IgtRKMkfyVRmqPfNf
aednEpxqt4/xbGIDTbWVz4xZg7KS7qSeSyMAr6+aBCWADcZbhcb952uR1x9C
4PG745D4/HFcZC8b6lTvkn7mVyM3vPqfyDwC/FctsrEZm2tqwtmfMrsAXdIp
sz1LxEPnU3KS8WYOHJgWvRPD/IbC2gsfIAYeihanQ/C+bPCftznQaZiPGI+l
StsNiPBfuYqFy3YsvlXvZdMSy5GEL+l8dy4RKq6HyWdVsuDHefKlFMcalHHr
XNwDKRKsictR43Sw4JW5RpyhQyU6PMC7I2gPCZakUqJiellg5rnVcnN1ORJI
W0nyVyTBm76Lj40es+BYxKkt1x5VIMnsFqG8TBLMX2ly8LNhgfNScLLi61qk
iFvg7I3GfFaXv//X+1j+a48bsZ2+IZ0vMtqLmC49a1vnA6UssJxg54hL1KJj
a39pXRYnQYymdaMu9h3JkriQluha9M1iKWgligQLTsE3GMFs2M8Iv920PQoV
2F5Z9/wsEQIyEyd3hrDhh3/wSa5xkm7frIsVOkcE4cNih5mP2eB+bJ3nR3IO
cmzZsxRnhNUjf7bX2hsssItUvf7nSA9ycBDLcNcggqB0mmTMdRacO9HOatDo
QQ9BZOkAhht/VjaZvMaCdVHDvYmaPcj/rMnYRk0i8H54esfpGwuy84IsQh52
IbGu+uBzuePwKSoh9uZ37FwOe7rWog4k4qWgk9YzDhsDDPB/nmDn4m3cFyva
ha7LGPpLY3X00N/COUGCBczBA6bvN/YgOe6XjQqFWH3xC0fZZk/AoQBxDV+x
XjSpeb55Jxav4LLqlCFuFhS5O/XYZvWgG8UmlJZMIpz8dtT8x8cJWMxNqnCX
6kVvkgQz+yVJ8DtFcnJxPxtcuUtdJN61ob5CjRLEPw7ZGkc3OCuwodwycZBH
vh3JNlw+WL1hHGi24mbwjwVScUeH+N60o3R7o08kv3F4GLLN7M4CC868+Rjt
29qF7ONFFgV7CFD1ZsWcB8OP8O8Nq+zpQs/n5L4ldRMgKfqOy8PfLNjs5Ec4
09eFQszWrxzoJUBPTMqNti8s+B11kTqT0I0cLduLujBdMeznOVQizIaV+TR8
VWUH2t3lFXxsigCBvulqqfxsmH1yQXSgrhm5q1PDv3AToVkqiNt9Nxuc1wXI
dt5vRF+ublynIkKEsLgPQdexvDW9t8fVYrQJlbvnCjn7E2Fevd3rUTULpghF
W7JyW9C6nxb67feJMG0Uys7E+jNrUQYnqNeCiowm5pyViGASaCs+co8NhQYP
8kW3N6Cly4cepF0dhxsNknmGXmzo2eq/eU1CPXK9Jj9cfGMcPkr/O299iA1f
67MCGXINaI2kmYXeNiLIdFt7NDFZ0Oo+X7XFvAHFSE03dYdi8WXvdiuhscBn
ScG7Lq8BfdolPcZ5RYQL0q2UhQYWZKoYLZPYDagkgVtyPdbP/Q5tnWnhxfow
eYDquqkFTZgn7V5ej92DwpFzp6+x4WFt0B+rC00oTMNCUFFvHLi2sPadusCG
2NmVG6LOzejg6Ht8+NFxWHtvxI9Xkw0L72PVj8rWI4Vxg9+3dmD9QSdnLB/T
7Y1BW6+GMmtRYLiMkkYPHr58qYo8VMoGFUfqvzvzdUjy7g2P1f9F9JnGC1Gm
2PDuVEUAT3IdopXcI25sw8Mrs9iv88VsmNj9J6tdqh5lnGvcve4NAaLe2txS
TGdDP3riXrHcgBqaFx8/fEKAm5yQ+fuRbOg0Olp8tacJfTHsY844Yzr8QYni
dBYbjl3hehp7tB7dtP4UPF5BgOkvfw0/7uTA+avNZk3f6tCd2+carTfioSP3
P6Un8hxIfzt1ylexDiUvispc48P0jN6I/VoLDhjv6/F4UF6L9iTWc5oscbDI
MaNZYH5E7EXhpzBGDdpyQtU8RAwPvElPEl/0s4H7RltFXH0jUndi7Wn/jAfu
Z0jXgcaGmDJD25HhejT68r3AaDUevOii5NOZbHD0T4htTmlCb5xiqS/2EaBr
zGyit4sNxXyvZ3/qNCFtv8qAxkw8LCZuv7i9hg0bdD2Cn35uRkbCdk4Sb/Ew
0vay8tJDNvDTjMq2CreiyeRUGbNzBFDNMofucDbof52hR21tRuJZyWt4HAnw
undsaGmFDeZleEm2TRMa4T5vl0rFweQ2jYx2bg4Ep4Ueii1oRAcddrRmsXEQ
QaxcrtFng5rz2F0v/xZkb7rY56SI6Wc5wTZrLQ7sJZzYuFG5Eb07xhsQr4mD
KIsemokxB3Zybztt51CBKHf/SRkdwvTbaaPDQZcwfySC7h77XIpmzCMG+rTw
8K8wcG2DEAfSMpRYWZRKRJk/0qEwiYf214ePzYZy4Ido2Pu+1gKECxLrt32F
g0qz6VbVaxy4k4EvMOcUoqv3/c+3rP73b+3CDR1MD5elnz5/LyoHfdyvb5+D
6WEO12Yh5WAOyGt9xQdfKUFm8xWWCYE4GH0+fvDqFWyf2bTxtMkSpJjY11R6
DA9zpRavp4M4UGdv0jXuUIK235T0qXiBg2Qam/fDVRaE80ZMhS60oZWLy/a1
Y0RIMpt8wfk5Ab9vxEd/6u5A9WeqU3xPk8BlJcS46TYLljYKLW281ooMjILL
rjGIILJn39r1W1mgdrx3Z7dgG/p77m4rzhqbU+Wi/FxPODAqzl0iTPiK2ghu
e+8/xAHZWnwnL7b/nC2PE/PsStCET/+dh9j+X2df1vD1wPzpMb3tC7ZVaEfo
qAHbDQc8B19VswbYsK/BKSAr7xviHZ2/drKIAH5BPx4UY3luf/svg2+lCL3N
TUl7tJ4A3swHl6zmWXB3r/FXr6VW5LJnlvvd9DiURxIMet+zQMNQIGpdeTsS
+2Io6nODCBtmCRm7xlkQbBzb/QLXjgxqnlgbDI3Dn+g8xUVMX/VeotPL4juQ
yuk7tA5zIkg68YbJfGVB7A2l2Z+nWlEct+9bohsREuvwj028WZDbRtfOt25B
ch9l7khMEqEwecnpBPadfcGVjRXVjYjBSoaiZWxOaUUftsHubdAiesOjTW1o
NFFOW8qGhN1DwOCugyzQTd8mo2bUjPrkrfL075PgYZVk7HUtFvAO5WUkhnQi
E0HtUzXNRAim7VW1OIbNnYkcJ6JNJ2ovM7Rb30qEP6SwzkVDFhBG9BXEDTrR
FRL3i9JyIpCvioVEdk3AqXU+r3hfdyOtikpTliqmG4/zr40nTkBICNPuxMEu
RP7ZpjeJ6Xlp//0KTxkMSLvy+0xc3QekXG05Pq5Dg+IvoQk2xgxAX/bcvvI1
HeUJ25xeO0EDn4RvAwlsBniXyg6/OM3QvWnJbfLiBA3qR9r6T55lgN0d506R
jUzdlPBTr+N/0CDVbyjBjM4Akhw7lqSbgZhbLvgOH6NBdq0mo92IAe4HVn6H
szLQ3twz1l5MGpz/xrJlvafDOX+NJQW3THRNOG9OJZ4OkWWx3Q9T6ZBSymGd
bmPqOuJ+zdUm00F6rIrRj/EzYs7tMkzIRLk71R9tw/iPXPq2H/7JBHU/5T1f
5vLQfWK6SsgMBeoIy0t5rkwwLmUx2foFKDbn98WGcCpYhfxH6lhgQlv0GuMX
i2nIUd/tbMICBQpvu0jTvJhA3f+W7PcuHd0zsc4IekuF+MbaX7cfMKEwdPhB
kmYqShsJy+2Mo0JzzYk9Cw+ZYP9q0ZoTTdddw0XTbHtPhTu61zNmtRgw8+bL
CCW6GCl//5dwd4wGpu/PZsq/osOO181Txp6lyO1Qlp/bf3SwJczHPdZgQDVu
+YH39xIkYhOLlx6lQXio5Mqfl3Roqs8wz3pZikb+DX/Xw/i6qS9Wto4xYIdq
1rkLnYXopH4O/6AqDZbsezTjhxig8lKeuO9QCVpMoLeNHaDBcvDmaq8OJpg5
/3wsXgBojxj3aflBCix5uDxW0mNCGHmtTJlKLdJmvDn75zYVhn8v/afdxwTu
/Fot+ZZvKETMTL5hlALVT3L1a02ZIOpwZ0CusBp92dbMXeFFBQV68y2iJRNe
HNw6QBkvR7cjFccbn1IhxBm3+KiJAc/ePb02tKcKbe9ckv9vBw18x58cq3Fg
Qnj9ApHndTG68+DaVMNLKnw1sslV2cWAdWJ/4GlxNXpnxScv0kiD99E/dTKq
GHAa5/LYKANQqKnV7zZxGsxnStS/k2HAIeua9Xnna9Ah3wBCD9Cgpfji6cVs
BvgrG8w15dchQ4lXF49spMGWGOGGThITTny9stGVUIZ4wr1lNOgUaBr2PHCC
xYSr7tZPjk4WIfXfzWcWORSQkF4Zib02AdR7p6rlZErRo4XTNrsuUODA7lTW
JdsJkPVt31VsVoTWmBw5G3CFAprkYFnDM1g9DoqG2TKqUBptdmL2JAUSBvsM
VE9PQNBWJ38fg2/o0MGd/DsxXNb7qK/A3QlYsGvyqkivQsLbysWCxSnQp8ob
QtjNAqoyvTpZvRxFpW2Nsz5AhguH/oqsP8yCtN/uCk1ri9AHu1NSahpkOG6r
rZBcNQG2XwcINrKVSHhD0I69pWRYdKJBdccE+N3rnn7mUYzEZDfzkGvJkKn3
RzDgCAucas6ss9EqRAWBetVIkwxeR0/FeYWxIMc9WPvi1wL05oLuimYZ1sd+
EvDCPRNgldGy+0FjISr3EzU620CG5yG2MkGLTJgijfMsiKQgZ+nR6L9/KLB9
j6t2zj8mcMr58HZ0mm7U4ZeEZ0sU4EvctPlqARN21PJe9C2tR3dmG/wfAAUe
eT/5oqfEhK2+16vjrjagY7ahW/MtqNAY5V7On8uEPczYtvT6etSYpddbV0eB
IHdrAj/2nd9X2CoyNfUo8sqMjTb2nRqp4lP3uBjAzu8rTMZ0qbms1C29TBrI
Sdk+sjKmg48zWgzEdMsVK6cr2YZ0OKRpsi1igQ7c3jX1U4mYLpqLf7+QQIMo
keHtGzD+7ezM+gtGTcgj123lIsZfwpnYj8UxoCjlmtOPhQb0Tm0k6d9vKnhf
eSI178wEE0fp9fUW7YhZucnJOpgCbegQy7WXATungqddIjtRRtGLpC38VEgz
xbH4rmB9IyswN1GlEy3qJG3I8qKAUtqIYEs7A8yTr2d+4O9CvzdbGZ/bRIXi
e5PM/DdMqLDj5NwPbkbC54SDr2ZQoPHqhmT5F0yofhNpsje4Bbn4V57/mkiB
XZuQ6W8JJlyUtDbrk21FvI/siSkSVFjpOx71Hts/xeKp7fC1LuS14yn/Nh0q
HE29LiHzjwEmlMXIjcGtSLHlB2tIhQrXe74UyYdNQIP83Olx4wYUbxa/ZB1N
BpfajkAP0QnYZ31JR3OwEVV/iG6blaLAv6/v8HfeTwCvzBlVXFIdkmjwN9mY
hOUJca7ORWkCJkQONr1Urkd+331e5ylRYFDTTqBjlgneC0qfja1aUfPuw4EX
12LfEb/wW27dBEwZfj6t09uM4kl3Hq7lx+L+2dHmdhcTAn79ZZyr6UDtYlbu
36lksFTnE5nWZcKTxyoJcRu6kWm+avtvOwqIGSfFsrA+5jZDbX9+vQN9/L3G
wJBJBoomaC9j/d9ZizStv60DNT/ydt1eRQbDvXkyqZYMuC5y9LxSfjs69bQf
CmqocHhb4q7qFQaoaSq83qbXiuT+ux/If4QKRTFzgXW3GaBnUsKzsL4NedAt
vrC6qZASRAilPGeAsqW7J167GV0z+Jopx6BCzozbLblROuQ4r+CldFrRmo8m
L+z9adCx3vH+fCsdhH3mm592tSEg8Wpud6fByVpFx5+ZdDjl/XaUIdmFLlk6
bVI+j83Zte+M/h1lgC5xLs3pZxf6b21RoVwKFcR9R9N9IukgT5e68h7XjQ4I
8vNPYPPXmSgZeYdIA3lt44u6tj3IoX6/Uz2BBtw+p9fNjtPgt8BaPUvHHqTa
W0A2wnDB0j3mPXJMCLSc/dFzqxFFv31XEXWBCmvE4wO9jFng+aD1qubdBqRa
zPrTHUSC9abFflfJE9D3SIDFx2xEFz7yqsusIcMl/kdLgUsTwKf8PJ3SU4cq
Z4L8z20lg6yW1OKOGywwoK653fi2FrXqaOsvxZKAm2tmpgjTP+VqD61O4xqR
jde1j+cekyBBVnhyCTcBSq+kG5weN6Fvu6DIdokET+N3utV5TkDFmb5Ri13N
aFprjSDrGRlmavDKXxMn4Ng+Lo0UchOyZjSc3nOWDGRnkwJfNzrgP73Rmm+u
QRO/GtMb7mDzdavE/xRddzSX/xePVEIoo29ZkYQQEZXxpqSUSqjQMiIykkKR
ZKRIQkRWQxGJVEbWTTbZ22dPn2GUTcbv+f3lnHvuc5/38773vsY5HO/0sLjs
5iHKYvdPNByYkhqGxfOSZYTNz7AhY59Xy63GFuQfZXX+kysV6mI/Hdtyiw08
s2omVY8aUf49obf6IVRQl7gcolXPhn8FL5+u0JrQDJmU2M+lAH+yrogYLwf2
G87O/pP8hSbyvimoS1IhvclVSJKHDf0am9bUPe5E98pmOjrVqSDsU2LLEGWD
9/7zWUGMDtS+5uSFMxg+F4jKxz3zYkNF5KbwQqUOdHjSMMjiNwWynpl4kLLY
YLl/qOIYsxWFaO9NyOulwN4ii28eqmw4ZCz5VoXThj5m8AsRT1LhmtqW2uAv
bPiur9Sr09aCAu1c198iUGATN5zqbsYG26ddUtfjW5Hz1SqZAw7YvtzZYny4
jwVGz6ZGJAW60ekS39dTm6jQJqp3LR7TS+T4bSijqgsNvPzzS/0tFaITVnzG
LrFAalayRfx5NyqZv2LiHkuF+8802gg9LChTPvdRX6QbNW4wq0oUpoLd27bO
2l4WHFk6kGQk3I1a/1p8S8bqS0udFNhvywZH3mssh+FOlJG7e17wDQVCy5Cy
YDAb+kxkazav70A/9m6l5f6gwO8g1a7dRzBexp9OFEjoQgpiFzXc4inw8+wz
f/UQNhTObUk/h29HA5+mfu+qoICyiAz7+GYO7DHJsDDe0oJ6h6/iuzHdnjVp
YGSG6SulvGuuGqI9iDT8+9ARcRrknNwscESEBQZnW8t5z3QhKeEfpH5DGjiG
3rY8k8YCodnu+VbXTpSj1DA0WkWFegun0E/OLCDYq1hQ0jrRWt3bRkmLVHhx
5vcXqbcjcD2cGe1e3olumNG/OdFpELClW/CSFAt81zrf1iF1oonO9C/hx2hg
9fK5g0DcCCTb2v9iX+xCC5s6bvL10yB2w5vU6uERSLCkbn8s3oM+8dT+7Bej
gfTGk3sKh7D8ubyUlxI9aK19tQ4TO//ztzxsnvdY/T+LG33EOtHBqMGaGIzH
R08gu+s5HNgcNB3pI1mLwr84iIVvokBadxjxWyIHTA0dUjsO1yO+7h2yMTwU
IN/JYv+3zIF3t5u2DRJrkKK/oK5lKhlqRl80XD7JhW+OOoIp9T+ReIbZRuM9
ZFgRiO9X+cgG7szJa5ekulDrP9Nj1dspMCtQNRZ6hAPFlK/pZ91fIYFRmS0F
R6jAvbJ+3TMSG74oWc+M26ahGr0V9dgOKkStV9GzMOGA4PHTTxhH3iFvM51c
xcNUCJO6XOZDYMNp/468no53aI8Z49K6diqsaN1RTjzKgen3NYITfHSj9NyR
NtmjVHi/cC7X1ZAD+yq7juca5qKIPbf+eCMqXNgezc+hsCFe4ltcaCbdKFa5
UdCsiwqBVf0fLfexIcT+Xh7F5Beamgx9/keTBv/uPkxKHGRDFPWha5HqJ3Q2
daH3fgsVVAKtKo/4suFzXdWkn3MGeoR3rvzgSIMLmmtnJzG8CsswefzXiGHE
TPitWoTxVHaClMAxHzbcbL2TueKYhR5a+xxXcKDBs3NdfXI3sHxx+H075DOa
c6wJ971Ig3Mh5vHT35hQd/qu+FHlXnTRcw85SY0OkWzWg5d/mUD7qWNO3NaN
DkQFXLZ3poO7OujlazBBxdNjne/bHjSc8bWel0SHXrE/MuJCTDDIwY/sh15E
kxZS8q+mw6tnF+13fmWCSJz/zB/1XpTzyNpXV50OO8ENXcPeu4aBtneq9aLp
j9FvJbD3Dr3Zt1J1ngFbV8vFYi37UMKpm6dlzzGgO7/USgmLtx0KxZ0814cG
uQ8KIm0YQMeTNWtvjGAav0bu8MduNBgvkvKuBJtzYUuu0akR2Je+5ueDzB7U
rlx0oxnTMw2vSmy3YL7gLE9EgtKPLrQp8sL258Z0+BmnkLT0gw3miUb4RpFK
5Hmz9IvRdyosCf995oL58ahc2991jwDp08unI+UxPuI51Zuew4YVXxFz+78/
kdiHIwxqNhVevffusZfjQKKzqa6GSQUSPvYRH6VKBS2c2nPZo1w4OsmJ1d3d
jaT/e6jWthMP1VFH/rM9z4Xd5aH2W991oVzh/y6/2I+H+jCvNe1xXGAKndz4
5lAXsl4IsdsUh4OtPOHJjTMckKvXuaJ4qwuV3RYs2FFFAFtuVpheGgc8RGa5
Ube7Uf/sUv4LFyIc2bnTa3clB4qCn8x23exCqicNBnWeEiHZK6f+ogAXiHYb
91Q3diIl8yv9PT0EyL8IiilUDjiEVjj85OtCUTXbK44aEyFoYtb3lwgXnsi7
bB0y60aafYsugjg8MGqSfuzYyoWyyjSNmxjeRr7XKWdS8bC+NM8Fv5cLySeZ
BQH0LlSvbupT+xoPNyqMqp//5YDlgTu4AqUeZNHapTZYjofP5D8vmsS4oCDt
pV0S0In+XJWyPkgkQGtUaDjJmQvH6JNNAnIdCL/yZn2lDgHcTzBq91hwodlZ
p3qdQyeS/E+Y11+KAKvT0rcNBjhQ0Ppx4q5DNyqTrci6mUaAZyH3qtWjObA+
GPdlfqob9SzkhUlbESHtsF0PqsP6dSd59kxyN8LrTt0iY/cZEDBDa1LjAunK
4+9y17qQg9SV2ysLeBi93TmXdJwL23/8zE990Ik2SRpfztpKAML5fyINdzH8
uV7q4H27B6nH9QodMiJC0s7Hr2xecuBU7blNVvt7kZsun+GANQE8HvJv/67J
gR38oz9fOfShwxkZGTQuAd7RxfLrkzF+F9trcGNPL2I4vrXzPkeAy613qwMs
OPDyYEv154+96P4z1aE0QSKENIuWWQhywDaxqZV2qh8dPx8oplxDAPN/bpfq
a9iQOlT83S2tH4lZE9erRxBh7pOzmlcpGy4V71T7NtyP2GprQ7kBRHj7QK9B
UYADX3/yZuha9SNydpriLFbnY+jn9/VY/F8o0Vz5bD/a01ZZ8+wnAS4w7ZBr
KQeetM59ibPoQb/5Zm6cvUuAwezdzbo9HLjqFFfDG9KN3o4MDq2+JIDSf2XV
KxkcYElu1CPs6EVloe+kJc0IYE048It2jgNnssRdMtx60Wz1q+CrkkTI3bBh
+UM8F9YclLB5q9uFHnn26Ks9x8HEcuGBL3lceG4nv2bJrRN5zBH0dD7iwKui
Ve69Axfus2KTfSy7kEDG0j1tYzxsMvk19+UXF/DFFmzHfR1ovFO5Y99PHBjG
2whaY3HaUlkY60AHumqkyu0FHJR7VUswariwLCIe5nCoA7ndrdi6swYHfxvO
mgsHcUH7iri6Gjaf9onK5/0u4uHDizfjw0UcUKxkfrYj9CL1OUcljj8eHoK4
hFE3Bw7ipzc+XduLEuqEF3xf4eFicU3mf7c58FM5RFtJvg/9TZ5KXlAjQPMu
Y283Ww401ewJdPjdh5oh7FCUCAH6Xl0rVPThgAqD9rzvXR/qGprX2D2Ih4AC
08NUAge6U64IfP2K8bWTww/8BzxsTjJQuBzFhYGxq4TX8x1oi6jJuoM38HAv
O1Tuth0XLC/cOZN7ohM1918sDJ7Bwx7vBZXXQ1xYNBaK+hjbhh79QZOyAzhY
o/hH1iqRC4qPp9tXdDuQOH0l8LEfHu6/3TB3LZ8Lb75pj60NakMWle0jV2Lx
oBMsMio9gd3bDdJI+lgrYqScbEgdxcGnKOHIr+NcoCq03f873ooivMZOT4zh
YMSzoJqwgw1HC3doS6gMIIrMWka2GBnS87MC0l+y4M1aPweD+EFUcFgjh9eZ
DDaVA1vjm1hwMXRA5bDbAPpo+SnuVAQZRlOz3idjOvNB9P7eGYN+dFmpitSM
6YTnq6p/FDG9ynOtHG/g2o805j8vtJmTQefDhFrCazZI1DVyyzv70G52z9qX
kSTovxPb7vqeDbeEJr7aFvWha2GzoY9jSBgu4aMGfnOgY5Zjhb/eh3ic+ZcL
c3AQfN7mohWdA/IynyTfdvYilndbFAebnx0NZsZcBS7U7VW4fca+Fx0Hq1fq
CjjwpL+/GUxhQURbxv3Itn609zdPCTuRDCX3ZNt+NrGhqNSX7051L9Jxr1Ux
+UGCTbtWp6in2cCXfFfjyYZ+lNPDf/4/LTIcHo2zeLXMgpRLbnLeSwPINOvM
YfVFEpyVO1jDg91bdnjW8/LEQRSSU/Q0zYkM59MnTbWC2GAttNkKT+pFb0Tl
//mcIsNq23k0ucCCJ7/d7vzT7EfyHaL7dD+QofjX27Z+JhvertcvT+X2oHje
9AtHiSSY1eoqHMTwJJMao3NIvhepdj5X37CdDMf0h0va+ThAnrq8/0vNAJL4
U1t09hse9hazLz+U4EDXj8A1Xo4DqHxYubuiHg9lNfqH9DG9tHhi16bj2weQ
npJZjYY3Hlb71e6e3MOBThWODg+lH+0auDRZT8CDf1tycekZDjxF1zcTeTF8
kxXWnVpHAIPnprc+09jAv/HZy0TDAZTs0ltJe0GAlqlEqYeYbypwLZkcHx1A
qtO7Ot1vESBduJDtT2TDwqmV26PYOb+Yc/fcN8DwdszL+FQCG55OarX83DiE
ju84+4Wri+F5bX3Kpko2ZJFy/D4oDCKkVA6ZrhgOa1/F347jQIAyfyf/d2xP
Oc/VLKzxsMamDTX///dSknkdjCz6kFIbt77kGh5oBhevKrVzoOHXB4HchV5U
est9OWMWBwWNO4IlvTlwetDN58njfvQ2MCE+RwMPpWbM6hDMR1QVbut++LIX
uavOEd5RiWB42Y8Z9o8NpxzUhDNV+5B8cgEnqYkIUbTkEM+9HKh2Y5gNDPQi
pogpv7YlESy8NpVac9hA+GKtY57WhyqUjg4e/E4EKJ8UfPKdDUEOcpmNKX2I
bPp95rcbCSQXORscTnJAv8zy9pVzPaitJ1p1bIwInRWrjSKpbChW5Q4sbxxA
6z6/fTdXQoSzKr9WLf+yYYe7/BjhdQ9quJXhrMIlQdJNkV9WFzF9sln5gjeG
/1F1LSLbD5Eg0iU/NlafA/aTctF+Xj1I4hdJI0CcBPnqpQwtPQ7cv6lervas
B5urW3stREjwvnabV/1trF9XRuXf0PvRcMWQw1dLEnDrpep1ZNhQL97O/vp7
AF0/l/Tf03IS2H1l61EuY75ec/rrNvcB1CVFPli7H/suq5SAWnMOhH3fSSBc
HkBumleERzfgIX0hU8QPm4fEUU2OY8ogOvbYW4UvCg9dDtvkNB048KHwlVkG
xo+Tr31O9snh4VjkQ4n0XRwIfDFqWKU6iE7nHBK7SsHBu8Nijd4d2P7mb1be
xxlEgfItt2/dxYNT7bai4vUcePT3k0L2Iyz/vcHamHV4cLvdYi+C+c3tBwd/
fwgaQj9tOeI5sgT4vOPCobJ8NmiWKDjKKA+hzgCZgX2Ah44fBxv0nnLAj/tN
yGcOw7EAT7t5Zxzs32UwO/eBA9el5mSdbftRR2bMYkIIDu6YEB+GJHHgvECG
enhAPxp7UvKc/AEHzkaCoz+YHNgWuMJKwvWhbx/r2MuMYTjj+yT7ljQHeoqN
TX0uDyK//lHxVxj+976Y69kaywY457TqaDyMrDapPLyiiYe2HKaIMaYfVNW7
PM97DKEvV+Q+113Gw90tpHw1QzZEx68t+FI3jEItur3z+vBQtLyOOKTFhief
UJ/Q8jASGvf6UN6E8WB/16Y9fmyI/bJ6of3RMJImWis+M8cDz+TXuheRbLgS
8pfm4TqMkvPlFMSV8aC7p8LpnAsbHoUcrssRxKFDZ76mua3Fw1uVgQQynQW4
uqnEnd541BtSsLHFBw8scZHtTaJsCH2zTiAyE4eyTmi2T77DQ2CvdcWdFjZo
HHRV7mIPId4RKcm9WTiQGt4Q6GHGATe/083WQYNohYIOL0rj4Fy1/5apYTY0
dKi4+5cPob5q0p9f8TjQ4z8YkrOGA5W3v5ocnx5E69/pms/9wIE/6VzUg2sc
oL5Gt473DSBpfmDyGuDgrESZ1DZ7DozMxkzosDHcFj5l0WiF1QHb9FuYXx6d
OCL+zmoAxXy8YFOaPQxiCsFnQ56xQX1p+Ns7Axy65SJRoIZwwH7K5o3B9rdE
037cOHgYnfedkel0w3wBUWaCoc+Grh04olQPDi3EzZK+9eFA8LkIeaSPDRk/
Zc/79A6hImF/RacYLC7ESmtfYcOMwud9JlNDyMX/vwzxnmE4klB79dAOTJ/E
1a1sODaEojWHzeNnhuGeQO8hRxcOXAlVfqsC2JyvPPn58dowmI8ir78KHFiw
5Gn6fWAI7XvPF35lHovLsQKUpTiQWfk9tMdyCFW9qXu7dg0OLv9KLvg2wgH6
7UCL7IE+1LNGTtMcm8N9/v4DGuu5cCt5l6LJf30osuhEes1aHBxzF+S7nc+B
mdRFoqRWP3JSYE0djsSBm3meu5Y7B75/eYrDlw+gV6djd+GNcWBiWKfjspML
r48x9V3sepH/kIj9zA6sTvENlQPYe4dHhkoyh/sQurmxpI0+DN/Ornvl95ED
GsfvBlWcHkADaleaRLH737hrMcu3iQOe2p5CwYn9qOb0wpRAwzDgqYV2qZe4
IHv9PluzFfPFs/SLu+xxsE2nxlMNixO/pZdatncjedR3t9QOB/evHHxfchHT
sV46P9Q6utH7ugs+c1g+vt+jHmH6VvNRkW/PwS6UsMZ1U0MsDvzae3nyjbnA
x3/JYyG+B8VMyUQeNMKB6caQH3ajHEg+dOrP77RehPwhQLsJB3WNq/NjmI/z
LP/cNvu7Bz3SvOpRM4KDlqA7BsPYPZxd96DU9nwvqm03vHBDHgcdFV5SbEUW
bLi+JXm8iICoZrWHvn0ngNTjK7dNLrAgPcrkQG8rHl0q3eHzfpIAFVpKtaIV
I3DVwzbnvT0ROdkqrrt3mQgG16lHJaJZcKRPNYtnGIcKdmfHq2sRwXLvm9Jg
fxaMbrgV6H4Aj6rxL/O2bCNCpMZq+B0LFsTs5PgL38ejlL172vQciaCnd9rb
++8I6AaE88m5ElDbGu+cjVlEODGwbnrVfARWa18ZtW4goYPFvj8LBUiwS9N+
y0E5LlxVZjMcjHoQfyyP/tclHMjZmlc+UeaC+H6nl+7/utGH0cixU+vxkFr0
9Go+DxdelZ3Nv4P5MpsI+kcahjOcnIKnaQFcyM5x2ynMi+XrSckr+uHg+pZY
ry/b2PBjJbB0024cWoM3morEdHJxrH6R/Ak2fEj/mS3RM4Ri/gtwig8jQOSZ
yfb1T1iw+nu4ETYRUP6fhzJ+ogR4uHh9tqyUBQeM925Yo4lHWzum780dJ8A8
b7zJy+vY/gZFM7xGh5DK6+Z+2fUE0DzMcDk9wIIrL1+kXk3BIfPY1kknbwJM
dhXV5DBZkNRif+LAKRzamj/mkPCQAD2I53WVOBtk4FSWh8swWvU1N1UrJUB3
9Jezodh7X5pamaS34dBS5zV71RwC+Ox94hwVwYC7sxqCpAgietGVE3hGhgqj
EriSV9YM2H/ebFHPk4RwG7XUZKYpgDzTU6LxdKg4dTikaIaEnn3k3Z97mApr
BnIavLcw4VEpR3QNHxF9Ms0jjmRTwIOnPm32OBP8rdT+E5jDoxl+G/WIbqzO
x11rdJMZoPLhi2GZFAlZmRd0yjZQIP2/1QK7bUzYzNPUPqhJQO38G9kSsxQY
UvM40LGPAUoDKitBk2RkIHTCQ3SaDKULWpZnHjCgYXG79kdrMmrOsp27pUkB
mDt7wyOJDqRe268uVhTksWotutaGAjmr18Qmmxhw5Hyhl9MlEnpT6hSq4EkB
delDkUVxDPhnxX+6bA8Z/a42rNyFKHDvorq6iDgD+puOf2IGkFFaM+GDSxwF
0jbxjQ+NMSA1e0qQWkREJTpnHLOjKDBb6HhH3IQJSTms0qPmRKTppm9GOUWB
6rs3OrRLGVBu5rErWoyMgH60/OIuCtRGu8ziLzIx3+rpQX+JR4LN9968pVCg
yrtyhqTLgBvtq+sF/pBQaerLoHEcBTa1n2PPvqJD/7NJfr4jZKT4N5wTcZoK
upHkI9xTdPglo57dxiGjoqujX/4KUMEtK2RXxTU6GMhmeU4SyGjdOXKw/jIF
7sgy3Oum6fA3I2PT02gy8nLwenbsPQVWvj5LiGfSwVZribUjl4yuPLyYYp1C
gcXL10XdxmhgHrZz+5NvFGTOlovUKKbAwT3HqGKmdLjJFBsnrpJRtN70+D5e
KqwXsX3Gfj4C1OmWtGP3h9FlvsO/3eUpYPzdoMYPx4Q6yVfrmtUwXp7RXO10
owA++O6WHJkRmD18MGqhfRhl55yO0U+jwKvZ7doXC0bg1YjvpDrGU/wygsIx
ehSoa08dvnlhBNYveGeqHh1Gs2/U8vBhFLhba6DnaT8Ce1aDZniwfRk8anQ4
cpEMQmmjh/P6mcCenOo9exSPzqxvFVV1we5fMPQerYUJG9xfXPK0waM6fpKK
nzcFlryONYlaj8D3+WKB6SocOrA9Z0Jthgwe4zFn1L1GYMMlP+38Bzj0jUF5
MsEhw4akk0uyqyMw1ttvNXF9CG0+lfT92gQZ1vzo2ZGWzIS3sSNJDQ8IaIx2
PFRhPwU26LSkpwczYX8MLeLMPwKKkyzjP4/dT06loupVsRHYLTQW9GAJj3DZ
0urEBjIkFmmtSVw7AkU/X3eSjhPQ2lqjHKcKMjxsfMDuIjCBf2d7Ke99AuJV
Lj6QOkiGza2jdy5ZMeHn8p4v03VEJC4r0XttDQVarI+ftldgwm67FwZaGSRk
ZC001oMjQ/gG/mKvTUwwcL2//r8FEqLbe62nt5Lh4lvLkr+nmeD9e0HY2gnb
987A0JuV2He9MSis6WFCV/33c+dViaixJlU4M4UMjv/CBW55jwCrJPKsy3c8
+mq1S+6ZKxl+j5WFW97gQm6lQdWUfwu6c33BNd+QCPWJvVd0PnGhPIi65+jz
ZhRkkxHWiuGYckNd4GgSFxzzaNc8eFrQo91ulVcwHHvhfnO3rjMX1mkU3C4V
bkXHfna+6d9PhHCnDKfeRC4Y9MuEv/ZuRUtOQ40TbgRwvGwY1mzOhbwtqXfu
irWhgeR7u1sx3ikuCX1g/ZELx/duV19ob0aWVfJNP4IJoKuXEr0xmAtGXg3L
J83bkP4SXSH+DAECHstYfb7PxfDvWaWhZRvKjTncpoHFuQ8vndiHxTvmz/4p
ONuGrAq+Tr22JIDI7dq09kEupK1ztZibaUYOZAk97Uo8LD7d/O7/fyeiKx2z
tU29GX3iDTSLxfxv+6nnlwYMuBDgd0fllVA7KmUbeIULEoH0U0Pk8eZRuFyE
3v+Lq0Pe1qt95bN4+LJxWOSK3Sg8NSW+YhXWoECPsKvd5zG/aRGn9tJ1FA56
NVYV0wB1lZ632Ij5zXV8oVYWvqMgmXs1ce2tSpS7Vtil+iYeqtvvxfafGAW6
87f97h61aN8eBTWL43gQWdEIU8LqC4gmNONKalD4zd7+VKy+6ZNzvev0R+FU
e4KvgmI9clsXS7h/AA8VCnfr1A/RQHK8ZvWpBBWF5tfF6m+lAkGQcnLXSxrg
XqzUJF2goOmO2761XlRgbZ9TUg2iwrKfusvGu1T0ajlK4dc9KgTYpi3XHhqF
l/94XVZV69GG81VC+lj9Y9aMlucfaDBjPbO714yCRrKX0rdidVJUKY8mVUaB
bHN5GTfUgDwM3m712I2H7NEPLZvHuCBTKlFjrd6EAiLScVJdeCAnZJdlbR2F
Kb6m2KsxTai+5/CEjAQe6A94GX8kR6Hz/RnK2cQmZFD0OlFNEg9Hvh1fuTXB
hbd+55/MMluRrhalc2IUBx82+3F38I2CTenVDff0W5BrexI1nQfzKQ43/Q1q
uRBmduBgankr2mdDHP3zAQ+Ceop186VcMGFoZNul/UbxHe1GZ1Px8Gx70Xpb
7Dy+itEdCi+aEPvmNtNucTyMTW7znFdigXLqF3FhDzxae/ON99MRIpgWnpIb
FWbBnwRplhIBj+gRmWsbML+fLlLiJ4AbgR+5klMW6gSUyeetYSJLgpWgpt6f
5SzQGP7k8Zw1jGaEHQ6IeBGhXa4pIe4iCzyZqTd93HHoSrLOrwFVEqyHg+sC
GljQ3JcUw8wfRheER4XuBhHh+0TYCbmbLAiQuxtqoodDUwMfy+O3Yb7e6uzW
1soREFpd13RuDQFtJL2NLcoiwc1nk80Sb0agniD5KiqSgAJ2LIJXMAm6v8cn
0hXZUJyTMkzYPIwePuCYn2khwLbnZkVbn7MgxRx+mjsOo9yV72UNniQQo/AN
3ZwZgf+Cy6z3j+PQQNNVf60JEjSVdZhk72FBhrAv/j/cMDoyHTj6Q4oMFzT8
vFe+sIA2krAYkD+E9Mn/GnankDBdeODu+8csmOGPuH2IO4QcXAcuOTNIoKVz
8fIEGdOfseLWG8KGUdjjN5GBJ4jQ3Mx6c2sS071r1VOfGg6iLSMuh0a4JIjL
jVLLOcaGzT8CXfVHB5DFPqb/je0k4Auyz/eqYYHFgw/KWVZDSHxYyHDvZxJc
PnP925gZCzK/vaf4nRxG+29Wr2Gpk2FeuikT78gC+DqZNP5jCJVtYkjgEBk6
XzPLFcNHIG0m7VOfABFpje0/OXyeBAz/wBNmWH4yO2NTnQUO2Rxa2qG0jwQO
jgW4pukRuGcjE+vzF4fetulTrcZJkP1M4/BoMhtOfbO0bHiJ+ZcGFdsUKyJc
iGPRqm6ywfbxjXv6wYNI8O57tKxAhEkGGc1jvntBtiJhzHcQ/dJy4zsjSQT9
ImJ4qTEbEuKeT3AfDCE/vVtuZlwCpPwro5I82fBge/HmU88GkaqUdEayHBFe
2rdV+HJYsFap+WbU3yH002rye1UOETx3eymh7WxYY/X9mec4lp+a1xlDJcJi
vim1WowN2ZuMLV22DKF3oQYaz4aJIBxOerGOjw3uJy7ynN8zhG4a+5oYLRBh
szW9UcqSCUfjOlOu6ZGRsZpu0sgBMvh+uxCVF8+Ecjs/9fc2JFQlrGoY70aG
w2KcVLUGBjbP/CNbEsnonp/y48wkMrRE4pjOeUxgXK2594tJRFHuB9jRgVh8
klQVITwCER6aqSWfiWhidglXzU8Gn1ZJqrfKCCjrxtv46xBRVcErD39s3nZe
EEuWdxwB4qtHe6poBFRwIbaul0yCxAieT/YWI7BOPEL0+gsCytidYAfaZBhc
8l3j+XAEpjKvbBpOxaP/YmRJ0xfIELjzhe8mIhOUM794739NRBIzfwSdbchg
EZpt3vIY0xuHJ8s6/fGIMGWUJX6ZDK+zU4Xsa0cgyXKWh+ckNjn/thx7GEkG
+afa96d6R2CB7+aO8xPDyKyo3a8qgQyiBv9VxfKwoEd6tnDDl2Hkd/zJ02YP
MuZfUr7rLo1A1bLWiKXMMCoyyDktWEAGb1vclSAMf/zDnftXtIbQj3tORj6Y
HsCV32lRTWKBk6il2p+kQbQm79iYuzMZTNZ6uNfrsEAprD5pG3kQeatO73Do
I8M2/gpbqxssuHPfrvjZ2wHkFaP9LgPTYynjhZ3Wv0eg5GCoTIzKEOoPMjh7
HtPJog1iiqwpTOfQSMXVkzj0GRTLO7F9Z918vfVSPAvWhPs5CRgMoKBo+VEz
Bhmub9u9rNXFhE8SofJGP0goy2FeXbuSBPwH99kSGylgntmNzhwjoqtZfrh6
MgOoPq8Uz7VTIJtkosknT0RusyqLP1gMuBzluFuMRgGXQ+JnDm4molsnmySN
CAwgrV2VkI2jwhtFqsGu00R05494u99+BiQ9+HCOU0oF47gjvevcCcjbY5vB
uBMDRs3DBoxvUWBfc6Dy3m1kxL0X2bvPnwEOKimaP6sowNBp5p3CfJO8+dTb
0VMMsPxYv1/xLhkMmzc+GLhDRmhCWXvTNOYrPil+8eshw7iRpcXSABFJhT3h
a/RiQtsjBaMbAWR455Uvj/cno6ct7NMSUwzYwk97/tQe409N5XBPPxJalxMf
ZDxPBx+Kgui4Bg3mHn6ZZ6wjoLQCnodD2xnAnL3nTPhLBvfxQjGqNBGd2iWc
cPolE46J7DqZpkyF/9bcaynB8FZy4Pf9tguYXjz6s094hgIGe2tvbBbHo+v+
kc8L/JhgPk74S1mgwp385l1RgzhEXT3KtShggJVbBkV3Cw2Yp9NnnhviUC7u
5NdtLQxAlmuFdN/QwLbmSoowkYS0PGfKSzNpMFm3/WobiwoXbVJ4XsuSUcaH
NWi9Kh2S9/S+PL5CA299Ic7OJQJqjNaTqV2iQVPI6eWHvVQYXHFibz1LRtpD
E4KO4nSo/KtuNZ5Bg2zxusdGNBKqI5pK0bH6FSXKrr+w5/4chcepywSUs+TQ
U7lMgx96hcf8X9PgTKvdQDWFhGTWHFw3jz1f4h7xLQzRwKhw6Zh3LxntzNWr
FjSiQdWZObkrD6nAa5t6eWYbBe1tPjz6sZwGvTfbzl2/jekdpQuKLXoUNFBq
w+rLp8GhAKt3uoY0uJnmHTveT0byTemFu7E6u6hlxppvqXCT77bvHTcyCnOW
qt2hhfk6YkOIix8ZglJu7X6J+c3odZdO/38eHhvvNSP6kmEAgg3TtpNQXljL
woFMJri+iiUDVs8k7GjuHqy+qpjE4nHsfaGREkJJUiRw1FU3vORLRj4GEtkm
WP7xgwHLi4NEeJ2RWz7eTUYr+2K/9GJzdS5OPbpPhgg7fd8P2/4lo2l+mwEH
bB5OX08ast5EhzanZeuSvCGUE5Dxb8aRAaGyvRXHL9MgRS3zU93hIbSoFVlL
lGNC+jN9oroxHXb6zd4TtRhEximqA3tTGFA4vLf+7g0a2HEzynbODaO/efKC
9fEM6Ez3tnNLpsFa10lU2TGI3c8/TV3Mh+i9nCot5tDgV6FD6IFnw6jMd7lJ
0JABy56ec+J6mG4Mt7E+9RyHDJZfb8lwZ0K1bEDe2AYGHG/WeVf0bgDN2vMt
Wq9nwFarWn3563RItZqnzGsMIFmvanJZDQMo2ZndresY4Or18XHYxwEkviv2
QA+WX7pbYCLPBrtv613uQef70Omr6lol5xhwsiX6zAms/quo0Az9HKz+ochP
X7Dn627Ve8I3OhxXND7pPTyEOu/uVVT7SocNU77suCI6HDPbIixDHkIK4oKa
iVhc8eGTzQWnaHD/+q5+c3Ui+v5J9lVKEh2eaq77txxHg5bQv2svFeHR8qeO
+asEOqxvuXYne5QK+NC+e3VzRJRySJod/J4ONh72++a0aaC35TrueBkRWbBg
RC2QDiHK9l1PC2mQcIK0eG8Jh0QytQanl+nweI9qsOJFOtzrJlsJzeGQ7f53
k8l2dPgu9PPkFuz8wbciU38Rh1Dz5/OiIdi583iP+3Ft6WCsImWUiNVRZWm7
cLB8WY+imzft6dBu82ta5R8O1bj/maRieRE6sp1rV2kgRJLXMpwnoJfXDx9/
gO2XfgrroKkiFa53Gbnam5NRTU3MC4NyOpw69eLN6iIFEpYGDsYWkdEE4eBu
yad0YIRO/8mJx/xxxKDcBIGMPpna8nyroYP5xr8srRIs/77mdRrmI2x0awn3
DOggb3BLNZdOgrW4qMD9GTR00FQ+ZiO2zx7Bi8qNZ8lAsLjf0NZDRZd4LT4H
YviQsOOEZcF2DJ+TSPisECrSugHGpdj+EnJdfQoHML/74LaOnwENNdzda2KM
7VWbn4xHxAEKvFaK5Mv3pSK73BuPqdhe72OFyLJXCOCz7Oa0ZYmG7rb8PjmB
fe/WutWMk3KYD57TYUmxqMhY4leOAoZjmpePCQXaUGCI8S/wpSuG20YOgS1W
DPhmlBKZSCTD+yyz8jXxFHT00JR0Ofa9t3V6neXnSGA696BOoYqCyhOOnFrB
+OKSp0+X2RYK/JtWOP5hMwX5Kb3mP8/DgHvBWlVZ/iQ4+W5xasSOir4nEybs
Mfz/9lwals0xvrDjiKXvpKJJ9UaHM9j973f8kLb3OnY/bzqyCNYU9GWo73cP
dh6fq1YKCu6Y7jAUKn7whorc/6W66WG4NHtcfkD3Kxk2K+ZJ2yxS0L5dn/V3
Yv2ipZv/eGFLganVtumHxRS0845pWjDWly93SvfVbcP0OCGnLNuHgnKmKs2M
MR5UlnhYZv4fFYhJQgWdPFSU/Pnq3fyTNIhrUxB23EyFwnKHjZmi2PnfMHxO
m9IgVtB79wteKrwX9Tv0eCsVRdQmXfiM5S+n3XTPJFDhW6EavM2noAyn/0Y0
8FTYcfnH4BkcFY6pi5duLKSgxFuOUgZY3HZrF7WnkALp0+HakcNUxKepJncc
i+cOeBCGsJ/yvqHbjxZQ0D23jTduYM9rbdi7RdCGCs61qOoE5jf3x78671aF
8VBo2A2JVAo4fA057fSKgtzucTIvStPBeyL039pjFDh6ZXu/pTUV2R/tl72N
5e9I/xBdpIiD+vTP7lE2vSjbZr3B1Z1c0Ivry/sSjwN1FP587FAXCrYp3mQX
xwXJ74ONu/IGgZT1okw6swsxPd5f5ts7CqvHI7tvHxkErW9RG0R/96LX5+8/
+PSDC+t7jXfqyuKgVS5z+7OLveh79Dqfz1h90Xv2Nxp3Yj61rnv4nX0v0j0m
v9tPgQtTl9eeJ3YNgsabdfmBOp3obdib0uuXMD/ffJ2zmXcIdjpMv/6V+Btl
+o4PBL0YhYCJjPVTbBwMWq4Mdf9pRZn856+9wPzwxMP7PoZ+ffBKaY2e0oYe
dHJ0m8bttFF4Ltw76q7TB3cEG6xSdPrQhvS2O+uPjoJk/y2v2oZ+yGxmnsob
6EKXUnROST4dBWKHQMUa+0Kw+pP7JjGmEe1fkciOvDYB0mXqXm6TBVD0YGlM
faUdFeNKElqXxgGXvcF9SRvg2cPdTyg3GpHL+22yqXoTIKfs7cjbXg1cPb2v
093t6FPRzqOJXePgy7GxqFAYhtcRubFEqWH06xQ5xk+eA1e9i5Pfyw/Djls8
7pbywyjwcTfjyg4OOPj72u+THoZvwW37risMo9GeZx/+n0+bP7GcOoGDvcfE
dB5MtKKF5rdtRuNckD51WO7wyW7Qz+I59+NkNxrZVG/+03QMnpd73DVd6AIr
T+bpdQl9SJ6cy0moGQUBN4PFE8Vt0CXvqqiZ0I2Opu6uvFc8Bo5Zlbl6am0w
93fWU4nah3yH2S9c1MbgyW6qU2d8H3yy9uv+vtCFnBWKjj/F6ri8VHzbur4H
YvfXhvr49aGgkCd5d7H793i/R20bdQCSI8ZDrzgMIJOrFF6vE1zI5N75afZx
GDSXJDcvWg2gMzpRDxezOTB/3Om4ZecA1KTqNxzqHEB8uKWo7bpcuLDP0n6M
0gdXG6UnstXbUOn0Gms77Dw8VVlnvsd3g2Uu32RTSRt6tYZH1w87v0RK6rDh
nnb4/X3/hQa1diR4SuW8155xaD06O/JhqR0oLheCO1cLEJ/N9s/9WB+39Zd9
c+1qh5NP/hQ/6KlGv1ZbdZKxfqm069V7RjeCj8+bkpfXC9EfUZk/Cdg8DO+g
eZe4NUIHb0/x04OAXgk2MzOwvm8RfSrbmtQInzvyHljr/zVa2rUoVHl7AtK2
192QrQK4/2Oe9dTlr5FIjAbf758TYHpXvjvyM0A+Xh8MvxeitKD59H1FE6Cj
1MNxZBSCitSr5jshf40+7tXLlPwzAfgFNuFxXyHmt1wZZrRCpJl2EOmRJ6Cv
Hr5ahADQDgynMCIANeaqKEyFTcDHq0OjVT+7YeHLYdfq+UZ0PWAytWTNOISe
ufcXWrrh+z7B5c/PGpCKc0/iD9FxYK96yGyn9oBN28TZjV4NyD0lJmY/Ywy8
ZkClWKEfuK5aR5V2NqBb4Z23SsLGQOWjl8UhwQ5w0ApJV+P9a3R3W4Syh+AE
hNNPHBVXa4e/EGEcKduOnm/e8+uI2jjYnWG9J0W3g/uXP/tvsxuQb9ViicjT
cTDNuEOt1WoEZ0P4PqrdiGZZRVcvjI+DWXhF39mRBtjtbf7ZK6YdjSQluYpi
+c6vaSlL0u3wVFG1O129HR0Pimr8f/2Np4WsorMLQeGRI5L7Bshx08cxFew+
74pxz7u8+A1qvc4rwrxDKG883jIBw5PGg886dsg3wE4U/WJCoR9Jd+tALfZd
e+pwisl59cAXIFQiaD6EdvrrS32hY7i0taY+aqIVQr5vJ1SwcWhqOqyqGMOf
1+IOJ/aPt8IzoQ2+zhM45CkqYOyI7aOt+cNAJrkV4uJM3m76g0OPMuXcBbH8
qcdf/yNUV2H7+uNkqlU/Yuodizvzawwe2SyZjUpXQRvPR0Hd4CEk3Gu4eHLH
GGwIu7/7SkktaOrW5E7o9KMit7tjv1LHoHyXzCXniJ9A3if0nOUzhB7N1Ega
bhmD3/ZO2v6W1ZCkd1bKdKYbzarfjl6wHod/KWplY74FkLc4uYZHpAdJz7LE
lILHQVBQuXD+RgPEG1i9CaX2oCU3QVlDrO/d/HYfUp42gNTbjVWGrd1o+6G8
0WpsTrqE+tXVSJ9BmRU1V3+zHx15c+/vPvYY2OsUzjz2rYT88vsCYY54ZJ9K
Z/f4jYKr38OF8UOfQTwzI1oqYwglry1Lr8ZwaVhPOHg+Kh+28VymJSbi0Tqz
mPIYrC/OXoMUXatKmJ9QQyu+WJ0v7RZzt0bhtGmAjJV3JXRP0MPfY3EnobrE
DCwuLHc68YNqPTi5TFpL6uNRRaaF6+ZDozBYpXSyu68LYhh5tud7+lFDt4g8
4cko1D0MXv6e0QWCUtbLsnmDKM3iq4gkxmtSP/I3zGh3wrknNdFDXYMo5gt9
OAjjI6UfDzZwWnvh6obuXNcjg0iYXRNSjPHdh5KUJp+LveCztL1rWgaHlvgr
RGsxvksqSyp/fqgL4lME7f3icYg9cSDGH+NTo7bqAk+bXpiaT2HcVMShEF/P
DX5Y/vGTthmR9r1wKcGs5NFOHKqMjiX///8DzgbUpXo4DECJwQrPOirmF4JP
ZHpj+HmaPXdlm/UASL8xfLGUM4y6kqy01+dw4NX6eeHG2UZ4UzT/XL+mG32h
3Nheie071TzrnHR7P+z4l/R24SwBqY3NtIqIcGAt1eojaesAOFms3y5hSkBG
gxtJJbwcEL9/8dNzRjfwPBA7EmxFQSoZV6sstdiwel3Ku9ahG2pWWjl/LlOQ
gOGu6/MmbGAz0rb8q+iHcs7jmxK5BJTvKGJru8iGt1suLDhieFKhZKVe2kNA
27ir9CthHJgQ3GP78V4fsM2LWcJhFKRa/XuQP5oFm6/uCDhU3AfWS7G4o8IU
ZOTk1bC9nQUlQ4sUsTv94FvEVXBdJKMnwdNe2kUsKLt8vGuwYQA+4FTtaF0U
xDoYdPdL/QhMuzwUtXQaBNmVgHUXasmo4ASf0g5HFgjedr3Gs6sPJoqP1CfK
UVEvTmP1lAoLZE6smw/+OQBwhtf/WS8FvaVUvjiG1WGwW3bUivZAacxYzx3M
hzY/Gxpn3WBDM+nSIaeETjiTFZ0r2EBCiQ9IWi7hHChGuOh/1zpBZ1XrnbkL
Gb3ruyv46xAHpqKPXkoL7oBqB2H7Eh8ymnsqNcd/igPtyzX8lV2d8LcsN45l
RkRFQRkSP1kcuMHc5WxA6ILLdy/dX5Inot6EDueJRg5YrO57E+DSA5UGUarT
KmS0US5ApR/HhsStBgf0Y3vh4cf1Y9KiZNTXvUU75CsbfK0yl8ioFXwOqRyX
zyWifXIskqAxF8yu9N68/LQFbL6NvWpIJqNyOV69x085EOB6+NuGGKyPe010
nUtpKJaFCsajmSC+rBu0unsADKSbpbU7qYg/4giRqDQCAyNf398rxPSb3ony
25lUtG2iMjabzQRtgb+tMulD0JrTLhz/gIreNwcFuf9igui/vjba1CCEVAT3
jV7H/NF0TAtLjQmpMRHbIzsHQed1zUHcSxoy9ItpDMR8d97XSy++7R2Aicm8
Qy9c6UjudYyF0C8GECi13glHhiBXiSpQeYmG7um8UZbbwYS1rZtEHi0Mgcqx
A+LyMxTE/Fvj7CExAkK3PZLsTIfh35w3+RE2b494c+u4F0agOc5bWUEMB59N
2VnirtgcpjeWrNk3AgkSNkdnxfFw0CBBMnKaguSPmlzs9WOC8sdqC8M3eND4
4BgcrEZBxuqlFQcZTJAN5CppxOHAb2rS5qkuFd25KNXe6M4Es5hSvsz6AWg1
ui78p4eCriwaVvjVjUBlWH/twyP9cFXQVvBvGwnVsiQyP/uwISypR+/+0iCs
5ZWbV9YnoSXVxlbTfyww5xMw0pwbhKgphXQ7AxKKmm6/d2CJBdsa8zvzlwfB
g2rn5qpLQs6Tref8sHhEZlOFecIQpEyfO7q3Do+8Tr7jE4xng2F433SFXjl8
9PhHXruRiloHttfWY/PZKmt6u5v+C+aX9LtfjFPQHIU3w0qcA29bzY68rKyF
UcpmQ1wEBT2ra9nBOsuB802jr3z+qwOnECtZ659kJLM7s8PlNwdQRPqzn/Pl
ILOkP7uGiM3nC41y8j8OfCQ3GYLIJ7BS0p3d9oeMejesedL7Hxd2y2WLPbbI
g+yAuaUTUlSUiPMcsD/HgVr/F59Fs4qhL8wbvWOSkeWMnHThRi701HSYUZe+
Qr7olbR34lT0te7p5vyTHLDKttC2lWqGUOmPL6S7MV/cZ1waIsWGytPGGx5F
14K2s4/rWi4FSd5wfbsTw72A1rnrD67UQ0TtRLL+DzLa6xt6aVMNB4gzCb7m
Pc0ge05lZq6GgtYn8//n28OGmhKrv0U2TdDtfF6ms52Izv8d/BjliOH2oS1k
R8nfcPeh8WaLLxQUrsD3q/oHG6L5A6t6surAxa+SrDRPRNcfV5kei+TC4+n4
19XcDgj2eHG3IZaC8sqkJFaesOGR5tjz6JIKeNO3HLt5Hwmp3eKp+InxS2s2
PmpLahl4+69v/g/r+9WCIJe8X1zwoAf+6Ov4BKdM3UZunCOhPTKbgvcMceE5
v3buTsoQEF8Jp05+oSMT86Gr5K90+HxJ7Ov+2GGYvCjTL8WhIfJ7378Whgwo
8apejlvGwb+CStvRAhpKjHjlqL5CB7/cgz+2zw/Dp9rOIKo7DXl8L5FejWfA
g5y6/DAjHMyFX76WtZmG4gP62adbGHB0+OcaqgWGt9l6u9IRHfkHWz8NTmFA
ph+l492nIaC922JaJURHshsl9QycGJC6uCauBnsvXPprZ2pLR44LATgVezps
W9utEPIVD1ckqTkX42iIsfHS1kQCHT7M7DtiScWB3lrzRcYcFQXur5Bi5DOg
QDqbh28DASyVKlNPa9DQo+BBCX4pBqzbcjlH5gYBPj5LaT1dSkXfjtcqSToz
4IanruHJM0TYcXpqc8hzKgqXW/yTvJ8BrbXLIu5xdKgth7wn431IbMeNmaox
BtRs5f+X/YMGbhs9a/Si+xH/eyWv61FMOMXjG3bXjQaSB+A/6alBVGV7rDwb
w7FP/go3pjOpmI+u9WkvGESbHHslPTE8/OrWEl3Yifl+91cjvrsHkELcVmY6
hp+3ehoejpTSQCv9Bt+tp/3oYH/f+zcY3vKsjgSLh1BBtySvziFtCEnFqA1q
Y/hpgw8kXModgG2PHyzuX8dAIQYKaXs2MCBwtK5DRIEIJ3rfvPvVRkFRAs/X
97EYsPz1jPbl40RYJ+RrcbKRgmxrN0yRyAwYT5RZa7aFCMSdDg0hVAqqzN9k
ak9gQNYnS8VMzFeaPtb1EFWmIsty4Y2zF5jgI7fn79oFIjy0+a9zmUtFxbEy
BW/e00Hiiol1zA8i/Pz68LKFNg1NybfWWQfSISj24JpHGkTQ+EiOXXcKiy+x
ttYm0SFyPNF1VZgM/RHr5hdKCSinPzNsl/0IvFWIVE2RJUNRWP8ngdME1LKv
4EePzwj0RQiZFywQQLxY0Wd0noAIXduywhdGgHRr1WroNAGCHhw4qyRLRtoX
MzwoWH5CzoRFRxkBzMXjz8UIk1Huxl81mlj9J8qxeSeekWCurcLZLoaE1o1k
8U38YUKs1q3+f2oECM5e/nrHhoxsjwX5tp4bgVOTvbcvqeNh8O0mcrsaHtml
vFELFWAD3xfcgZZYHOi67VnekElEae3xCknBLIgaUXhygYL5cddjJnNGeBTS
su7h++1s2Ox5qMHEgAiBygOR8hsI6PodK+NaDRZoOuF0qjKJ4PPRKEszFoe+
BUZ+fYzVoWjny/Ri8yzpv4nnkT4RxVnZf2zC8n2vBj9g25Bh5dO1r6pqBBQt
PCZWgZ1T48CC4bIaBZbMowWdXuOR2+PN3rIYHyU8C26NVcB4LbU3dacYGQ2U
Fya6yLCgIMi/byd3GOI0iRIsXzIiOOV92DU6AqmilVuvGQ6D5WxCq0MUGYX+
Wy/XK8SCJuFX+1qiyHCEWVDYYjCMqqf33y/G4sP7Xm516qXAn06xs9L1A2j9
NftMY4zXFvaLvFgJo0CI6shUzpFhFN7Xo1WL8ewMH98R69tkkI6Ikn7AGUYL
tYrxAth7fzQOnzjXTQF52wXtCw0D6EUkxS8I011CCkafn7tSoJGvZsBxCw7R
LA9H4bVGQPeofHyUGBmucDYqjsnjUH2KqcQZ7LvSCBHUzBkKPJC9b9Y+P4Tu
qHuPG2C8PzHBeycc4aGMzSvQQcahqzf2zrzD+mJ+TEqzW58EI8NTYZuXBtGs
yq6XqhjPptX324rokeD8CVHtw8uDyDXARP8ixqfK+1+6FdVhda4SnnLih9Dh
KRHdlTg2tNfFkytqyXDCxrdqyHEQfXiw3mnegQXHTPZXnssagWLud+eU+l60
/sWFe5EjVBAYXMP7fe8I9Hhx7I896UWFNLdsTgQNdLf49avwjcBj5oFZkbY+
JC+aY3fEgQb6J4Iv2WJ9jpHZYXb7Xh8yXTOcMCVBA/qRsRj2ixEQlIxbPKfX
hyYNG8c1cVR4ok18mO6K7cHh53eJ/v3oa+Ul49kSKrzeQuC4YPO+88uz+/l2
/ajxoMD312dooDw/uC+xmAnMBWi/wxxAEUffPZSSpUHaLEuLr4cJ+/DbwvBY
X9Qm7lT08dGgUVMr6uQtJgiaBuSG78LwMJj6we4vDeJv5jtpuDHhjKrWxn3X
+5HoYq6DMZsGAjt4jc1IDEj4aN3jxB5CYgYm0ik3aTBoXvZZAdNxaoaliZUv
h1GEsaT3t3M0eIcf0OjHcHodz3pJ8/lhVKiminuXTgPCUJ7kVox/NMeOxfIW
4tD6EJGLsqo0SDaQOptgxYSttariB/8NIZP9vN4ZdCpECD+8a/yPDuFmc2sD
8DgU7to38quKBknmZgXW5XT4pFRA+2dCQL+OlcfmP6RBmMmIzLQbA97UGdW+
icajpI454u31NNh+xf5cwRQd9vzNZrDXExA1fizKwo4GTjf4NumoMsGpw66q
RnQQPZ87YKP+lQY69nLZQVuZEG9mElIfPYiOdOZVRL+lgemrgH7jbga4iM9/
XukYRNQSkwb2IA2O+box+Y8wYemluudXjF9unH/W18ZPh/GIvcnWGQzgV+79
e25iABVpv4gwOU8H+XTb0rOeDIi2rr0mpD2ExqkuB3Yp00GgwO698xEWSP3+
zbPxSg862VxcMBNIBXfKxace/7FgZ8BymkF2Lwq4bHFJ354KZbNijxnCLPDa
p71lltuLfBXdPRetqGDkcFnhvTELrpw5ur72bi+yYf763qlFBd6aPXIO6pj/
E2N50o51I74F49LD2J7f4+tm7mUyoemJnU3+2yG09JhkZ2JJhe+Py8bCZ5nw
L8D7p7LJEGrZnXr6fxRddzjV/xcvtMio7FUpUb5CQ0sOSUQqymqISimkhKQo
RSWSnaQko0hGyebYZe99t7vvJe0k9fv8/vR6zvO+5/P+nPMaz31w8DgDD/Tu
JP/UIvbSe04wf/4IyNFGuN83MPBCQX3E7iwu9i+9WeMc1Qdsdf5VaQEdqYwk
vc9n2Ch2/cJc484R+NXv684l5ly0alTO4iQbn5uMHRsh5kp67kmtmSEG+iUs
V+8hzm8uUztKWjoMCn/8xGvCGPhRNl/V7g0bezc49HSrDEMd3fiDlsI4Nt8Y
9HpkwcFTlz4ahOwZgvIdH85pEfp9aEnK8XI1Nr7Y4JOSdXEMfk91ypkT+P4P
068mBliYsHAmsXopCUK+X62JIParaDq8Se4FG8+vrjwoQ+T3VZ7twa1KDIyW
uSPmkc5GlQ2aXs1rxqA8yuEeELjr2rm2e56zceWyRHUN7THImBHs01JmoJtH
msMCCcJHqG74WzY4Boa3t4jei2bgPrvATJ0JJqp7C669mkMFo791Ev7JDNy8
vOegZj4Tt1Z78PiyNKgMkB677MpA1USpmEVyTJT8uSBruwfB57vLbF8iA2dO
/1A2NGGhX9XGBRfdyFD9Le0pMBgYuTqcVrKYhU8Gy3StzlBgZdT67uvFDKyv
Rcm0cCY+UqeVUX9SIMBH97eM1DjKZbx6LmLDxBcy0GHmQwX50x1vepTGMa3g
lXXjn3Hk23VLyPjTYFt9RJJtJwOPG3MXxBWy8Igqf99QHhk2VEaC2y7iHt7E
iqgRe+Grmi9KESFDyvCE2jMXBpbnHNld6szC6pV9sadkKKCWF0ZOJ/yQcv+2
p0+OMTH64TuHPg0qZIe+ygzRJnigU3rYm+ChF+czF/CjaVB9rOxtdgMxt1/K
/EOejKNO9vzVuvvoYH5DJ7/Nl4Ej5w472mYxcZ+BYYluERl00h6vICYbV6ld
9xLUED5xoX/v2XlDUDwTOY/sz8TmGPZZrf0sfKV+x0Pl8wgI3mW4NEgw8UFq
nbKOHAsL1i3fcsKC4KXzsic0B8fx2IW5WsBjoUfwTbUHnQMw9mfXrsKnTNy4
xTeH/x8Hs+quqOlcGyV426N9LJuOynYM/bZgPnaJKLl6evdAhVew3OeTVLQ5
/Tww7Bkfc9SSKTaO3bA2Ys7hkggqekGCnMoOPmqd0VK3OtkDOq2vvac1aNj5
6+SVstV81Bc18A1W7IUwF3/5TXI0XB/wO3z1MT4udGgLDGvtgUnFbdTONCqu
i0jeseIKH88npzb1Z/SAe5V5ifhRKua/XF+xXIGP0ZHWQX63eyFdtbZncDEN
H0V7Tt9o4KPfP9NF6Rt74KSL9P7H8RR8N1NhHa4nwKZXN27aiXXBnSgxVs8f
MkodY47kj/IxZHUBI8GnG+YH5hbJ5RM+UvOuV3YWD4XTTg3b3/aBnJw/J8WD
hnfCaNmlbTzMM8tLrIztheXOgXXfb9Jwmne2+0okD/9cou0Iv9APq4WP80Yd
aTjfdOTQik4eXrk21tkX0gtyUQXWN2/RkPRUzDb4Gw8vF1rMp5r3AGPdlmcS
T2g48sV9jutaHh72elj/4Es/HNtOn9PbSMMdB3JHBrR5+JW88bf1j36Qs+dO
+hP45diEW6/sebi1N2Cou7gP8r+TtO0ZRJ+2H9r6annYdjlfFJ73wsO5i7lj
D2jocebLlidrOdjt8O9a248uuHmytXIl4Xs3JVwyNP/FxsJjtpw2Ug+8Jpvd
szpH4KOi5l5KbNxrLpveGN8Go23djdWEfuQ/fftPhMDLF3btsHnWBi/Nbt09
TODNy3+kMQm960woHM1w64UQt22KCnNZ6BiUoln4jIWRC88dUef3gp/NwT/i
hH6IJ17x0bzARrNFg1nnXXvg3G7+rUplFi5vOb5pexoLXQ5ZPtJj9cLWzXFz
Eol629OpoZf9uPjBtejO0lNDsGl/x/SruXR8Y3B0XCmN8EHWkp8cDw3CkXwK
2XY5HbeO766qmM9F65/ZwXXtQ2BfsHRd+xU6bro4Xv9uJxfDVymqd3sPgvd8
69qGNDoqXtx1zKKGi8xtTaOztwZg3dja43M209F3Zdt2mSAuFg4Pdc4dHQD1
eeGVKUF0dN11+LSsNRevHclxS5MdhBNrVBOCc+j4n2KY/Me/HBw20tRMmh0C
eWUXjpgvHU/pHG3aOMjBZbe9qv//e4UP5zow27QYuFTSRYX1loNBrolTd9oG
weDG/dNtOxiYZVRiFNDJQYjyZmi9HoSxyOcZ7JUMPLLAtH8hMQ/hT3dddf3Z
DwfnoNKhJhp+9ZGLSD3GQd/CiCCW1wiMqSdF67XRcb37zs1VN4jzV4/O/E0d
hsijjNVTLDruVs6WzUvh4JKGK6uEP4dgVaizr99vOnZZxj+pYHPQ4p/iHEfV
YchQCye53aPjcOa8wthuLk48kbl7S2wAgkfvPSwzpeMX2nO5mps8DGz8FEXx
6IVKFXK9xD8aVp4VDoZ48vC+vWFRrnQfBP9V62RM0VBfZ2ygaQ4Ps6vkc5dm
94ExV2a98f///5H16/ZTl7m4NnboVtFsPzzcMrumvZmOfc1e211Fedg7UOlz
Iq4PxA3aUyTd6fikROb4szguWrkZXmQp9UOYbNy1m2Q6agSwBIeleJiU0iGk
hfXBBp9AZ2lnOlLWuoZbudBxz00jg1bXXrDs+RFdbsrD76yA1CE7Oh75vUYm
kpi3fJ35QcsMeOim+Nik9TMNX+6MM6mX6YP3Nx+vKTzPw0nSZWKfGHg319ms
7EY3GDsUawZXcvFPYf+pvNMMnDKfuK19uhdmm8bak8K4uDDi9yfOFgaWXFeb
vrmjH0TuxhrwLblo0KvVOWcFA5W+PR18v3oAjt1Wuy65louMJFLtZcK/lCSJ
bDlF+OrWcHex7ggu/lt8yfcfkWtqF8fn/sEhuKvywWUpkUdar7j/+HudhddK
xar+c/8IZX60ofl8Nq4xz3PoSWHi0i/9E8s4rVDD1xvIuc9B1+jGmYZ7LJST
VXZP+dkM9X0f2+MJPzRyU6PcqoSJrDmK9qqvP8C8k25lkrkc5KpoFiRasFFx
fdir13ubIdJ7tD/Pko1fVy1z2JbOwFXq5ee5El0gIvnEzmaAi63LmTerz42j
aFJ8tcjRTpCvUHvWacHFmzGbqYOE3wydWX3mUH4HtESPev7Q4qJ5js6sVPc4
VswvGxC4fYQ7e4elBoicsoB0uu1+P6Hzt9ac6ldugVSblUfeK/GQbVO685wM
DS0iU7esje4H2bYFiofe8lD2/KdzDzupaHe1/6612SBwaz403L3Iwxurcivi
csgYNdEc21U5CLZ21YrGv3m4duRIU/NvGooEfl3QeJnYX/fVGqJFXLzAVKoW
2UnoDPnpRNOPYci890RHnchZH2bCRbKk6Dh4Nu3rdPEALDVq8ud0cFFTX4T0
YDcZjVvXCAsUiD2Ksb2RJsLHK9kPbVaWM9Fc9GxaeWo/vAzaJlxL8OamXc23
zCrGMWDD1JRF+CBwloftVr7Pxnv+L7JPjjKxcLHt8mb/PvjX5Gzw3Ijg07t3
TArFmHjY+NHTWdF+cKqMKtSgsvHcynQxX1EWHtAxvlck7AHddVky54ics0Tq
cpqRNBO97fuCctL7oOSGxnc9ARsr1lpnyqmxUCPULyVwvBsO/QjfUXubjbkh
c2g3LJlollBM0iD0WvBpa24q4QMUPv/4GkxhoUq18eMDHt3QeHTq20MiLxX4
n/28heDjJXcuFG4Q9EL8h6jaPQS/J/+7PKjhOI7uc+fM/2DVC0lbNsVItHNw
ga9byX7VcTxc8y/+V3w/8KduLMu5zcGk+W9vdxE5clp5Q+IrRg98XGv49csQ
B+uDp97pvSH8mteKNw7lPTBvTsxW8nMOapnsMF41ZxxT8jbckE4YANtz+kP/
XDlosmgFJ7iBmJ+zn5YG6vbDp2BVm3tSHIzW+8/aUKEPT1VuMxypnDJWFjFL
lYqcxN69Ka73pPrwoq2crdLNfJArCWrQCZ7ETSvOj5y9Ooj3VgW8czo/ZZy8
X37Y+scEJuhf9I/zGcSQVGcZaeEbGNpEKtPjTaCjYpjdh2+9KHU0Z/eQfQ3U
7S+68/PQJJ6Rks93sxtE5Wuvp1Qaq2HLEfeN5vUTWMTZaMp6OYJHt1HjGqWn
jE8fruf/PDiB9TnfKjWfjuC41QGXGxZvIDzkS2/B7glUDrLYYPachJq7S81O
HvtkHKvc7UF5JsRge3JzfwIJj38rXaKXlAeJUrTIi/FCfLV+7vntwSM4RfM7
JapRDbIVr3MMV0xg8pXa0S2XSbhZYJC82rEKapKLdw1cEuIXuCBP8SVh2uOY
izsvV0H05rpb1wjca524f4UbCd/9zHfyu1IFYVLbtN/6C/HsmoYSyb0jqNDd
URCR1wTOg377kplCfHbws5b51Bi6nFt6V5/RBqVb/33i/v/75bseujY7SLi7
2vPvrf+awJNptX9imxA75gwFv980iIIQ9RWPyhpgZ/oyrZKUCRTlUqYEF0fw
yT3+p8Y7tVAVcPjtmqUTOFfswia1hwSvOx0w2CrsgiMF7p/L7vGwapd9b4w7
DdVa7t0xc++GEUaW9f3tfJTJW/HReB0NF/v+0Q5x7wN5Z3nr7DEenrmgOvvn
Ig2THV9ttQzpgkZvD2rXPj4WnzzSLJFMQ4q6GV6NaoVbGpyNVpGEr439ywnP
oaCI493ZZaZt4K5m6kYCAeLUlfm2FhTcGFmtKd3bDbHqZiWJXD6uTfpgENlM
+F+xhOH8uG74Ey8Q2Xibj3rJGe88iuio4OUZWPy3DdQOaXx5VMHDEZajbXAv
A0/5eDtZqLZAI2PQWFuFh6Zz2+7tq6djmPcL3v7+FtBs/vJIq4+Hka5jG9b0
kzE59GbCZUYfXKruP2Z0i+AZmZtnLtmRUTZYxuZLxyBMnt1n81OKj7W1pG/a
qykYcOpqgXpPD2TZDR5zbOFjRO4j3bU5LDzbeIMW6FcPE+k9+5crcXDvpt4x
/04ir2XtHvx6shE4ikuqcwl96bpcx55D5CO87rBa37kOjAytzD1XcHDozX39
T+fZKHJeWl5usBZo0pH2WZfYOHrrwWL3FhaeMrCPEn4og6Hdc2tDdnCQUifs
i2pnocUV5qC1SSkcXhG0kmTMwdq3ZQ9L7rBxh9lk40h0CUx3187zf8BGpXqF
cXcKE/fsFB3rZNRBgdvOgzSCHz5ccByO0GTirVhvqYPn80H1WWmASCuhsyFR
XvJrx7GoZ/hVm0wRfP4i8vvsfR5q9LyIfKTNxJb8PNk13a+grNTBupHgbYHs
bBtDdxxVUpRYpvE5kLJo0rUjhofP1ty2t/vGRLGC3dJ2HpXwMo5RIZzi4Nrf
n+qTyeN46HdoGyOxGbwrdAOCL3HxxDGyF4fQqTAt70v1Ui2Qr9fbp6/Mw4Rr
dvodv8bxv6UmVWt86iHwhF/FD8KvVDWcu5A2y8DJrlbcP1sP6iwO+cpBwifR
A0jzNhH9q/r0nVksNJZaaJM4k8xDA65Cegvh+4zz4qjWTKHxMv3XpqIufOxn
Nw9mqDBwZZePeIpjLvyokHmz1J6Pj4ajbHeIM3F10l9vjlMNNBSekzv3iouc
0YOqqTNEzguofl35uxReFjMvmUxzcOZw37Hb8kwcEfuYsri8DEqttNLCS7m4
R/Xx118LxzE4MLhkCacWhHnn6ckneHhKovXwM5Vx7LM59Hx+UDmc8h0quxzI
wxerz8++H2fhMfqh1sJ4nnGX/L6qaEfCjxapn2SSWRiVGRDx6NBLcDt0yvKI
LQcfHCtrZMayscTcrHptdja0fTDSmM0gfvaJfJ+znol8StIEb7PAmNT6L8mI
8BVVN207Dy9j4RNRT4eYk3xj8VDFkiOyXGS9ci9wkWRheqrF6VHpV/BufrZM
pCQXp/z3XyiQYOGa4E2LHsJrUHOIcnwmwcUoTZtZCaKfpNO5bqd/vALNbY/u
Xj7IwezpioWbuiho8/Gw4hqHj3B+60O6k5sA20pfj93/RcHrOpuSUrIaoWb4
Va/cHQHacItJYY4sjGEFh9ZeboeFvVxlmXo2ZtRKcGOIPFR79Wvjl7Q26Hih
VpylSOQoLSX7m+U0pO2EDzKuTTDjvdems5bIn/kxwke1NPwcHrV8hXIjLNl4
JG5NOx9F5vG2WFBoOKWledFmtgIeRsxLfTFD5Oc3ShcCN1Bxes1TD4vKSng4
KjscUy7Azx0sU9mn4/i84oA5TacTFgr1/ylrcFF2yzbqgjAmnha0B/+16YDs
M9XM5xc5uNj7b3zKESZWbtReEJ7SDSXiT6atTTn4dV5qLGU3kbcWUbtjd3WC
60ztHN18Nh4nH/lZ40ZFzw2fEtc+nDS+c33lkYRxAQan+7kN21Pxl4TX1Tdj
r2Fn49yxOSMCXP+y8HHQDxrmGfmNeVdOGB84pMtz0hDgv+GlCaeIHHB0WnTj
ZpXXcPZjotQTRQFWlDSm8tg0XJFoYSv/6j1M910477tIgB7PTftuGlExxJRq
L5tWBub/PTlxrV6ADfyT5dOyDHRWn5Bnz30HMktpr92s+XhMWfyk8yIGNso0
nlc0qgD39NV3rhK6UFMbcctRQMfoq9/E1aIa4ECW2OtBgiez9Hyc14XTcV+d
6D3DmgbQWeb/Lc2Wj8x8iz+cSSKX+CQ+ucquB+V08/h5sny0Hun9GOZWBi//
6RoUnhWARaha/zcjGqalx74oqCyFoOFU/625AtBRi3gh9pSKSy5sihFbUgZ7
NrQM3fIQwE8FSualnTS84Tsi+yK2BISnqb7abwSQ/Nnx64nnVFx9QblSc887
OEGWPVl2WQA5/Ec8ud00JI1rGItrvgUjxXWDP0oEUH1TOj3hNRW3LtnySzOz
FpQtAh+1zRPA0fkBzinPaTiRP3G/36AW1NKH/OUPCGBO4moLt/U0rCAnRxxu
qYH9T6bFXKUE8PdD2CA9i4Y6nzKOnxqoglLFjDraEQGUL1hYeHwzDQcfK+vt
VqyElKF4Hvu5AJRunn3qEkfF1IxvIpyUMoi6dHyR0kEBtM3b2/jfKRq2SXsd
G5cqB9UETnbocgGssaK6eBXSsDhb+dPKR8Xw6u3HJR7rBKD/aYXzylIadnOX
f05UqYPwo7/9t5TwwVDOgDalQMffM6Vqiz1r4cuqipQVlXxQe7btiJwKHdV0
7HfmZJRDiPm/9ZNqAjC7Ga/qV0BDP6Pi4MCJRih4HOD2uokP5x3e1TRX0PDi
7Eh/xZ4m2Pkta4NGAh+2i25xWSlC5P21ZXdXKTdAmc+C8dFsPvzwuX5IlfD3
60Tx3hlCbzh3Ui/F/eETe1QcOpFCw/nFsE7MsxFSzB9ty+Pw4V9m3+Ul0TSM
lq2ZEW2phYRCFwmylQAGt6bdpunQ0GWejf3b+iYIW3bkbv5DPgjk+TKWRC5O
MTKYunUfwXkeo+W/OAEsM5TIa71NRanAMhy8h6Cuk5afT+Dr1NsH1W9RcRdv
i7LtVYS4yvS1TALP3Dzw9SiBR10KGrSgNUHu6852NSM+DFoUK9Cv01GuwLbB
Yd8HuDu3Re7+ej78+eu/rf8yHU86+4c5JdfB0oSSqLcn+OD9QoKanEDHAFWl
/qW+jeDHkx9kWPKhgzqtf5rYh+hrhi/YSZmwWOTgn+M7BLBW32Impo6GqYWp
td/MMiCP6X2z8pYAsuadXTyzj3guw6objQsLoOSZb8b6TQIoCAjfrFlNw/zQ
ix7LhHngcVb0YOB1Afj1miw330tDB02HZS8dnkPGdjVHjTABfJ9d87rLhoY1
pcwXBzrSoDlHeo5XE1GfN7VQuYqKd3tC7q82fQFGZe65hxsFwNuoNzBaQUUK
u+rrzrWvod+D6jJYIwBWdWZffDEVM94tnTSqK4SxBUXGkhsEkOaklzZQScOh
+tiKsn2F8OnPxEmvqwIYXh30L8CChtXcYbOetudAMp71Md0pAEfmQ7+KehoO
97w98ac+AbYsNE2LBwHoRvrLaDcSe+H+aoGqbjwoTDzouX5HAGpnHmdvOkDg
Rx0Lov02QfTdC4UipgJolOwXLmqi4buSN/ZlrI0weU56Rfld4nyX0SVTRD1Y
Jv5LXBcHcaHkj5UfBHDQi2RRU0PFvQ8UywyObwTZW4bmox8FcGYi4eW8Wioq
HHBmrmwsh9Flw0K5Hj70Xr8Sp7GWjjIlhgvPTb8H5/lg92qUD7+aKRm79Oh4
tnY6ytenGsTEXLQ2XOaDWYqdYXI6HRPP+fIivSrhihx5kWc7HyaWnPmkuYaO
1c6R5aUP6+D88DuTL8ScXLRF+wZiTka7bRe8qCgAx9H6e+srBZC7tcrrTCEV
19inKCSEVsDHYCl64zViroQ2+gde0vHmy+Sbc2NLIf/FoaUBt/kgrsTr88mj
o9l59St5T/MAotuaQ+OF8OYPiXGJyDMB4nc4/Q5voKXfntN2SggDKftTXWzI
uKm99lp5XzaM7qpcGO4hBJtHmY+NCb9bExKS8PV4FlD+27TiU7IQCh+Nt8sl
k3AgREW69kYePL6hof2dOP+bZ8ZvlXgSuqbFd9/PSwWpi3Vr5FOF0NXAuz//
KQm/oMhS1depcN69c44vgZ/p6oxLfkJCq2qhdnPkMzj/X0RXmJcQPL3OW5xw
IGP+uoTfNcfzQa2lJO7zSSFInz5rFryPjJanGNGtSvnw7/JcK4GeELaOXjkl
J0NBUTkr+4cShSB8kdaweb0QFqvzcZcUBVVqEzbdPfMUugOqxuqI83VP0/Y+
I86/bVbg92MgGnDXe9bkBSF4RXVsJzuRcXvKI8phiyiwarD1ffZMCKkhHV8b
if7bTbft519KBck1pZ7BRP8X21xnM4j+3/gMlf1Y9Rxe/Dhs1r9VSPiWodVJ
ShSsnDWyblv+CpR3aNae3iQE5aMnlo7JUvCP+eLV/3zKoeX7Cr43XQCUwDgD
cj0FE9yuWv97Xw33q50++PUL4EBflCCqmILqB5v9FquVglKLzWA6h5jnNXzd
9y0UrJ7jabE7vARyOIvr3FcIoa1p6tLdf2T85xIUvWm6FHRZfmqvVIVA+qsi
d3+GjKrLC3zPlNbAmyH5RJUeAYQeeqU9VkjBdO3ECt5kNQRQT5UMigvhVf8O
rQguGfHY+it1vErIkjNYe2iJEBbdvaPg94mMQsUGZ1mz92D44ugmTaEAfmlq
Cwo6KdimYW/UtKQI+Ikj8j+/CaD5kJa85zAFF2UfyDQSKwZd23l1VmuEIOl6
Y6x7HvG+zkqz726KBecjBx34okL49c+9gcelYF3/zdPbrGJAe4NaT+gOIcx/
OnnwkioFiwOvTq37+QxEFKjNWXOFsOrlnq3n2BRcnDI/ep5kOoTPD537dY4Q
RN/6/85gUXDDz6Xe7uuewSLyYZrlNiH8VbMPW6pMQckizfV0jQYYXbvwdNhW
Adh8SsqYu5KG98TVVRZO10GEnPi/kwTfXioqrLvhQ8U50t884lj58KTm2pKx
nwIQeSsZ/mSMgplncmcMr+cAZ/tCx0V/BLDw4oITW2nEvC377GB3tR+GK6Od
0ZQLJh23m9brM5BmkPBIJKcfps8k0BMVuFCkFasUdYSB81XL7T796Id9VVvd
JxZzYa/7t5vedgw84bdfa2hJLzTsil2g3McFkojw628pBjpuk583KtMLlut3
yM7p54Ln38bpWUkGHsnNIZe79sGBu+EXknZxge9RF73/GgP9TSpVZB72geXc
zJ8BmVzo2tHQ5EX4Myeh1jeOWg/ErzrY5vOSB25Xth7fQOj+UP/Wnc8SesDE
836bxy4eBMb8GBuIpeP0OqeGMKteeHBz/bnU/3ggW911MO8WHetqHJL1FfqA
o25F/zLCgX96A/N1ZMdR4sfte6WxvXAuItRT8xgXtJv8FD5EM1Bvldzy3u5+
yDkn33gsnQMnJeIiOGwGFq2UUhz4ToUvoUG/JClMOLfnwATFhIEvDeJ2BMrT
IFjn6/TCN0z4de76IidXBpqXJx76YUGDW8OZ6PSICR3/fTq0xIaBnjyF8yu3
D0CatK6uTDwHunPueV4ZY6BdTWNu5dVBkBZ9Rapw50Duz0yrTaUMbFKSbvXs
HISfL650znnLgRT/2pDFRgw86Pb0gv2CEWhxnZTUW8uBAcHsEnMDBh74It8v
kT8IVplTjXEdHNDdu+3zWg0GrlP5m6+1ewToZ/I3P/zOhopHoVFBxxlY4le7
uFNuGFrjONHMNRzYvli/cyqMgQJrb2X67yFo6ir2x8ccOPYlpDL/Nx0VqEpL
zuwdgsiZwIOFezjwJTK+98QzBn7PVQ8LURiEqM1RZputuLBaTTqjNYeOMX3u
zsUXiX64Eat7jbiQdqH/mtRzOh7aW6NVkDkCNoW3orey2ODNa+v3OMjAuJu7
6KeDBiG4u6vYdoAD2qd6Y2W0GfgwT4d5Y84AqPk6OUf5cqGsaK/Tig90fHho
OWSp9gMvUGdxRywXsrxvOIyS6RhWssLwQwEd3rbwPpePMWBU2clmBXHPe77d
sHlvQ4dvd9q1jqSMQ8Hmmqg4X2I+g7toq/LpMOPJig4hMUB8fAmT+f/3Mu+D
/uUYGjxR+bzIbmoczF7J7LvawECj12tYBUM0SNV8PfFq5zgcum+os3jnOJ7S
M9r+OIAGFWl2eTkz4/AIhls1O4l8LqLh1XiOBglZqk8mlzFhXV5HcTAysKLt
QMXdqwyYW1m5XySIAYukrJo9rzLQYH5Rl5ozHVQD3ILnJI6D4ZWE1AhvBrLC
je58GaCBGUb1eRqPg5MZU7yL+FxVU8Wj8VepEJQy9+llKyaIyiUJrRTHkfze
NvXzbwrEqes+jQ5jwlMv9uwPyXE8WixSMa5JhRsvliZGHmVCRs3raVftcRzZ
qtteK0qFo8css+SFTOikGVw4mczATbEVia7nKJC8XKoyS4IF1kb4/UIxA1ck
rNS6dZoM8uGqoTrAgptfrzRuYzBwy/f7268vo8CdPP112U4sMJXM4qfcYOAS
32S9LwVkSOLWu4YWsOCxdqTMyV0MnOkqvDd7lwL34qiSl2+zoKJoS8FeNQaW
zd59vNKADMFVeCJDmQ3SbHbMyW90pKy8822Dzhj80ArbuzuNDZeSfVzMlBmY
98aB+3FkDNgTFGVRcTZM5KwUf0TsdaJsg+f3eWR4tLpvSKaHBa8t1itnuhDv
XezFrqG1YzDVkCRy5jkbzu76+faoEgPbw3sqtdJJcMC609LTmU3k2Tu0BBod
lc99fTOwhw7TlpXCvS/H4WSX+yNjTwb+t0WJMB4kqJ6f+pXbzwLt2mUKCSUM
5BUcP5n/gATUtNcTk2dZ8HnO6Ri/+eMYJy0S/MR8FHyn7atCnDiQ+URNe28o
HYsemjzeETIKDP16vkCHA705lZ9FCR9lXaAte2BkFLK1d6QfVOGAw/Ylu46n
EDkl8LBZanM6vFh3ocg6lQ98nVXVs1V09E5+sfH0nnToT1iosWGKD7QUjrTE
TjpqkD54SWQ8gqbJvpqkZ3xgHwuVDq8h6o8yWh8wEwFfJ6lFfeGDW/DSvVHG
dLxU+s7LKXszWO6Wfnz2OR+28jjCCqTjgYXzs+eIb4Y2ueYPy78RfnKo4HE0
0PGv5NOnD+cMQ4hShvrYLAfeHjf8sduXjssihL0LzgyB5lD4ycjLXFj36ezB
L3Pp2OX0ujL+vxHoU+7WdmnjwB79drVoGzqSIn7b38kcgqQ/gpMe57jQmLvy
IOs3DTPn2m+DoSEYjjmTlSTGhRSKzN51V+iYw9We3ekwCBlWOXnbnnHh0u4l
+18sp6Mdaf+9DKMhiDhjZmIQx4UDA7uNSONETlz8vnvj735gLbjQulGLB5I/
fG8WEv7cqtrz7FD4AKyxcFD2rubC71N71Rw20zF5/t3dy6f7IZf2enSONg/u
pimd7iP8P92lKpyxcRDWVWxfKjvNhcFCQU8kkaOfDFwPTJzJAo3zRTP1E3zY
PLXc+voOOmYU98y5G1IIh6atoltYfHjlZvTJzZCOzyRPLb5fUQSJYde3isfw
oUq23qG3mI4fG20GlHYUwYN57xcEMfnwzHzTtkiin9E7H0R5r4pgWFWhZh1R
b+t5U4xL1P9w188fKX8JvKMpSnKP+VD2JcljpIKOrPIr90dUh+Hjie99VRwO
9IQuovTfoaP74X1WAp8RsG8xD8g6yoGrOxdcONFGxxOVr9/NpA3Duvo3M60h
HOCb8Mc02XRMb071VUzsg4v00Kp4ER7Mvxce7uNO9PMudFHHqz6I/+94169/
XJAktT9PO0XHiy32C1euGQOD+CrysnQ2vPFybWQT+3V0eMWawwsG4M2zuf8q
urhwM8g0aMkuOjqv8z0cXdoHi55cTCMd5oF7MONQBYOGN17s7HT93g9Jz36p
RhL3nxN844He/7/vNpzsoJAGQCwj98+Gq1yoPR3rKgii45Td3C2P7/ZB3+Ph
qXuSPDi7OHKBrzMdK9J6t82q9kBO/1aHja94YPtQ/KOFMh0NxRP4tz17YUdM
s+XMDR78W1b1MJDI6V/Fh12PLe2Desm5YaXnedAVv7nb+jMNZd0UrtxK/gjx
V2yue8oLYbLIPthRgYRBD0pMDz36CNaGe1/2EvjmDtSflSNh3+Lf1g9jPoKJ
zEtvdQUhPO4gf7OUJ2HSMfNt/MMdMLopx2AZkYtnzoq8MT9IRgVs/fQ1rR1G
1QubT5US+dfGcqEX4efNnhR0/7TpgHMvd4f6EPX8KvWVr4h685J7HurYBncO
aB7NrRdADznTTfolCctuJbVe/doGn8yvhmpMCmDpcVF9yU9j6E8WOg5AK8RW
R3slEf42eWLDvToREp69rLEwRNAGf/88UGIQ9f7siF7JyTEMvcyV3/+7BV4L
NdR3DQsg3uRKm1M1CUftztwd1WuCOGrHGibhYx920G17tpPQXK60vnd9E3yF
pacstxO5o06KemkbCa/020UyTjeDSZkLP+ifAAy4Y5b9LBJ2+CamXjP4CFbL
zr27T/j28ZApU8teEpoq93eRyc0wIKu4zXetEKyeLNicqk1Caonjc5u+Fthd
pfuw8aUAfitGOVJDyGgf4u0rvaEFrrsL79sT+WWlHmO8pJmEJduDbNUut8E3
efNTJgkCEGg9KZE6T8YhN38y70UvJFo67VhSywOPA+BjFU3wwLBjqHtCL5Tc
bK/43soDf4N3P0+H0tD0QfvMdHEf7BejnyZl8uDK/h1xoudoeLbO2+p6aC9c
undiwqWDByORJyc+3aLh1fSBnctVekH0Hkf+zyo+7GTKv30lR0OlN7OW5NM9
oPUmrfTUdj7kZ0SxLq2i4bvlSwptL/XDk9LoI6/u8+D8IuGksRMNdfYl/75g
2QMMrHdt/ErgrcsW3npCw3U//gyycroBv0YOrZxP5H1ad+qulzR8YXF5k6JR
N5wXTe0wPsYHCf6To3e20TBAr3UH7OiG7IDOLBaB33pnFf5mK1Gff3Pw1ro2
4PllyHevEcB7tfVzxuZT8c+zWK8j11rh6et/aVXnBMBKRZlOYwqO82gtt5+2
wvps3zendAXgU32f5iJFxd/SG/7YK7TAgQPW8xuvCqDG8ZdX8EEKnp2uFQS9
b4JvnINPrecLIWCelBRZSMJPD/WCjtW2g5fE1c8KywTA9lrrYjdFwRdFxgt0
l7XB2pJNPs9PCuDW6JHu74YUPBpyvnlvZyd80ltc9fEnwYfzaM5qPRT87C9d
u1yxAw5n6R7R3SsAW5hJphN5yqZy/gedyjr4jxMoYeckhPvs7YYmziT8G3lZ
x6aiDjrWupa/I/DpSf39JEcSfq7V3+j8rg42nXjpKCDw3sAe/jInErpk99tx
TZvhBGnVYZtOAVxTco349ZKMS0Zu6N760AQryy0dxPoEsH2snPQvj4wtNwJN
6xIa4d2tWElxIp+efLdi/OtPEv4nF7vsacEH2L//a1kiCmCJccK2PclkPLJj
wUenunqYKLee0FspBEOxgqfPFpLxgvbGMxI+DXB4bVT0CSshnFIxjbm3l4Q1
SiJLvms1weFj5/fdJ/brwvSl5nfEfgVvuBp71KEDivLClidfE4CGVG1riS0Z
14c/Izku6YTWS69ntxgJoNV2SXDiYgoa7P+6IT6+BYbEdhtk5wrgTYWy9JdQ
MnY8riSvE22F/FK6w8EkAVxeZv494j0ZJZcmekQNdMIB58Ks08T9B65O/Z3b
TcELN0KMXEvpMGjFTFHij0NCrGKi1HtCd3gef1NL6MCgOFX5CcZB0in2ojWh
U7PV6zqWvadDmUPY/K3CcSg3PyUyTeBZXz2PPVFkQEZvxyqjreNQsVr420ie
gfqbn3ouUWDA49CG9jnbxmEeN3bxDwJ3Lajc4TWXDg2izpuEu5hgIF1yd6EI
A7f9nT+j9ZsET2Jvt3Es2FC1cjosrpeODW8/WTn7UEHl+zP7YDsWRK5nmMoQ
fvLKW+bPE0oM+PZTRazVcBx+tb26PleBgSEi5wVLrjHg+pci7Z2ET99x/U52
diADlc3See9udMB9RQuJjtfEXljf/eb/kIQaBbGLjwppkJY5mdi4jwk8pa3J
H8UZ+FE1a2pMnQrai59KKiexIHepzy+FZjouSmgsok0TfvuRbYP5JhZseevD
eDZKR6lsU/+bVCJHdFfuTTjFhHd7Dl+WnaXjn1kXimoUDUiFPMWnX5nA/nU6
RDeTjtVh+6re5tKA2X+m2IPFhGEX+cwtyYTv6qz8Ag50eKw/9WxjHBPSg4Vz
Zw7RsZHnP/zjEB3+u8VX3J7AhP+cnz0nEfjQWR+Tq1dpEEB5w+csZcF7zxMe
+2Po6LhgNnDhewrIL/SbqBGyoNyv2PJlBB3fukzJRZ6gwuCT8XO9H1jQpyah
r+5FxyX5S5+sWkCB4rrQKKclbKDOiCybzKZjrc7D9ys6euDhlTVUz6N8iI7n
+9Q8p6L2cAi0OXdD5O17rYNP+eDwlGlTcp+Kv0IuWMy5SNTbTnyWC+ZD08pz
NNYpKp7IUiGrDnVCbvHZNwM/+LCJjXo7eimY8mVv3UB6F5xwObFvxRs+1CT5
zPalUtEp4U+m+p1eaLd/fsRVng8bqgJU90oSvD1B1rqQ3QM1n8oCzwXw4eBU
j+nsUSrKCnICfq3sh3tP8n2u1PPg+OqW4g5FGp4buZMwnNMHu8ozdSM/8UDw
cvmJj3wq6vpuDypkEDl0171glyAerM04FNFrQ0PJP3VZqfN64OL51Xrzx/mg
cCH93i6CP5dE3GkxMOwBsVLloc56PgxUCsfiEyioH1M8efVqD2gwHTCxgg/D
T6Tt1kdS8HAc1sv6dkOm+xYN0VE+ZCn7/lIooKBO0Q9F7UVdUH687RVjvQA2
rz0TQp0lo5yrsvqWoG5wHXPZvZzg1VOuOk07qWTc/4dulm7QBZuPXjh1neDV
5b9bfvzeRMb5MYEnlW71gtcAuzHxCB+ET0ocRXdQsYN5oZ8X0wUR6SOydELX
7o1n3XbfSMyJhJ7g4IMOGPcopxRvI3hgbP4Ds4805DAczogp9UDQ2p15rwh/
5bhI5F8i4a/+GYn8kBHvhtfUklKBApEjFO9j5lsairu4iIhu6oRHzUpNQioP
VHRJU15EjhiY3qgV494BWsU93wp28CFCYeviey00vN2ccLPRqgNkN28zOmTB
h/sDHq3bK2hoM9AWZk/4pZWvvs91JPxw0xKvlsOEbn6qf3c6qroNYvwrOvWf
8OG7hNYckRM0rAnc0TlvthXC/F/+meNM+ORDv95akWgIe4LdYW8LvPcQNQ0r
5YNnnAHH5yINt8Ta7XF2bYEj9UHdaz35IClZl8zj0HBE58If1tuPcHZaomu8
mg8jh+/2HPWj4Q9FehDv1Ee4Tv9c/tafD8eN759/OUlDsmDS9BzhZ+7cvzbS
2s0H8pa3DrM3aBjX9ODBk3eN0G3K3q9N5IIDS1Yah0fR8LGDX7RNfzvMFb3v
bfaZB19KyUUzVnTcvfh95Qa5VtBv+NBycgkfri59b+nuSkdLs9LM/DWNcBBT
cFBPAEdX9puRVWhYfeG1z/u0BvhT2pHZ4CeA85/D30yeoKKY/22J0itNMGVc
qMFaJYCGT8sftsjSsCTGWW21QSPoKHpub/MRwJTy21cmR6hY+0MQ9HjxR0h9
mahhKC6AqLWeZbHzaBj5UrZUz/sDmFMHdUoOCsCZwf1caUjFKqXrON38ASyn
1mtLSwrg+bPqfNMFNNS+O7fe2b4ZVi+y2odHBeD+3tfSyYyKCye0VAvMPsJB
B/1u+MyHEBbDbvc6Gi4oj57voNwJ6W1t8nYED1B92PTn+2jouNgvd+7593Aa
jrEtwoWEz2fd33KHhIsct7ye++09LF4puerzYSF02B9OX2RMxs7y6ZOFhSXg
8znylsohIZguFuetNiJjbu2qy0c+vwW/94OGHUeFoNz1e7W6ORnHBHN2Z3cW
Aad9W3XsAyEclbSoLYsi4f2AHokPR97DS15n6Qfic3uKJH9MhpFQaJuQ+nV9
NZzb+sfExkQIJ/S5k5XaZHzes+7lHq8KgMvB9TRLIeiGP/mXaEDG9wsW20Fq
HryJPOFKiReCR9KDjfPiSZj81TwuNLAKqKHjjaGXhCAiv6fhoi8Jf0cIcsJX
1UDYxoI/K3cKIeTtguQATTI+OUVpNhhA4PPiFezEhKC+r/xGIp2MarZSY+TF
rQCeDsuQmJOmk5s7XhBzkrs8N+izx3tobOmpzCL6dxpYOtNO9K9YL0atGS+D
tTaHI1OuC4GVdEC6/hoJtXF+XpWgFhQvFqz73SSAEnO2Y3wmBQPUN0QvPlcF
0lard0n5CuHtEUt5w0uErwt8qNCa2Qz+ZsGrG7IEILW59muZDgX3dpG/u/U3
w8UJWgk/VgAi0xu5Gp4UTJoO2nduSRN0zBP1U8og9LSUp64YQsG3Q47rH4w1
AKm3aC6XKQATgfoe2Voy8jJKul7f/ggXPe5N6pkLQO+OSUbMWioK+7z/vZD/
ABAx9NH8oQD+QMSirR4U3GORKGu8rQG6/KhZPkReSP/6bFilioIxicrxPuoN
YNOvphlQLAAlV/FFJrEUdCwQMU19UQ9Z680pZz8JwFRB7O+eNjJ6zBWjS07X
w1TnuSNF7wWQfSes60kcBZ92XV24WFgHmWFtx7d8J3yg4Ujg1R4yUva8y1K6
UgX9OlwbOvEelchuqxYR9wNJu/KE/FrC7yKPqScEWuXfx+0KZCwdOB5vwEew
m30WqHVGCJ+kN7884E5C200r187o1INEBcto/hohxMTalKdKknHNXQOx4tg2
YM9z3rXnLx9MyW2BJdepKMV4vGYZvQ1y67KfhlP44M9INj8+RMVgramkcrt2
2D9U4j9vhA83ygfvD3dTMcch6NxqmVY4FOtds+wbHw5f/xjKnaKiy7vlRy9v
6YYWXVUVu+N8EN31zHSKyAtqv93sbW90Quz0pFJ9FR/6LLwPHCmg4t68hZ1J
D0tgHbJHhyPZUD3js+rgPTbuTZhz7BXtPZi1OJ37tIUDr/okVFNGWJiwmzfz
I6UY5kn7Hz27nQNuuWJdwjEW9jz7dHXsWxZ89D6TbG7JgZ85ku3TXBa2nmxn
cC2zYKkPJ76bxQGNDxtNT+9kYWNAk9nqvregvZomuDvKgbztLOqxjSw0ORkp
NRtTAo993RK977Mht9Vj6n0EG78XbJ09+rIEOp0K35oQuNpJTekIAi/iX96y
zfA9qBdUB0oOcuBA7MCkmx4L60/I+T55kQ36y895RKWxwW+Lcc3RJDYufHvF
bjg7G266it/a/4QNO9ZHH0pKYePj3yomM33ZsKOhvmMLgXPu/0u7QeAmF59N
3KrPhHOX0p6PEs/lcuSxxB0eC60tyotOtL8Av5U+Lb/ZHLhbvGCftzELZVKP
rBWp3Q7HxmfP19twYPaQsGfVJAu/qTrLa01ugzfMnVEqAg4EGp27o7iLhcVi
k317DtfCIslVc8XUOHCCq0zfXcvCp2+qdQ/nIfjW0JfIVHHAivo23FKRhRnX
zctjjzaChOptsb65HNir+kQnP5uFp1VLIh8W18Mfzd6WEzkc8BLoOectYOFK
x7MiYZU1wG52TniqwYGS9obvEU0s1Br6+TL6vyq4tG5/N6+JA2Z+0L5oJQt9
80PTzDIyQeT8+r2u/lwwidVOV0xmop3dvUviZulwiW8nzg3ggjCHdf3kYyZm
zWx3nrd6G+jrDPOvBHGB8+WK1clUJjYnr2l+MlALUpZWgdIX2dAm0qcS6cXG
uVUH7mQO1sKthGt3XlxggxT7S4PAm40bF9yszaXXQqDK/e2uBA4P1YJyCHyd
27ZoeetmSGXKLhrYy4aAnpRchz1sHMuUC724rxlGdJoo7pbEnIzVHyq0YKP4
5CFTwzHC9+SuLvpVPgLKLpxtRrFjKNq+7FrOHj4sUbq+nRQ0DNZSaSP+qmM4
3uTkq0/kfMN5SRy7rSOwU4OsR/o5ihZjkht1BnnQePHUwS99IzATblY1FjmG
9d2rRs+q8IFt8Ge988ER4Nck6YT+G8Vjz1ufNT7gwTrxgPcrjMbgjHVcRq7x
GN6sNvLTJ3CTMP0svvEYDPJ+5y4m8HdXpdzioniwP9RKY5nJGDx2zFLfDGNo
8TE7Zc49Pky1npjHmjcMhbo/U5hhoxid4umv+4oPu2qqknVth0DC+2yhZNYo
Kt9rYea+5EOYfkuovt0QiPvHR23OHkXtvIjAqyv4ILfw65cHe0bA4pvVcunv
o7hhf/0pPRYXjL7LPH7sTYIPo5NzTC6S8KC0xH/P3HngxHhEWSUxBqPcplmq
CIEP/OzRM+LBKtE+VmIv0afDpVHdgTFUH1ujHsfkwl9a7GK/iySwjpJzjvIh
obqG6KPJ7Ty4NNlY/3iQeN7wum8lRH3DrpjwyTYeeDms37eEMwIn3S+7mzwf
Q86Chbu6i3lgpTI6W3t9FMSuVFdae4xhkmqM+qMdPLDEExs9BsZga6ecT3j/
GLoEBO8+MMoDe8G2Qt3cUdgp5SmamzeKMaUl8TjCA/m9jvKf8kZBR/N6nRyB
b/xavFWHwFXEt6ZJ5Y+ClpWh6eY3o6gxZJEp9Y8HkmPiWk1fRmDB+chTCb2j
qLctrr14Nx8sj22/q+I9Ag9chQXPTUdRizPhtuoMH37Xd4tlVw9DDM34iMSp
UXR65eaT6s6HxT4zl97VDEOsvnvxutOjKGkU9nCdBpEHGLxjr1VHYStV84by
8lHcms77smwlHwyaTvYHrRiFVruhn1kEftros1gucX7OQvecoYph0GkPmogl
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
DSllgdcNjlb7KSqS/zqQcb2MAQqlUdpBRSz4MdwkkhxNRbWd24j/qhkgoGdK
vMZcfeKkQyDtDBVFvV2xQ/g4E4LF+h6v28ICVfs1ISOiVCSlFdfwbZ4BrMhp
p/rtLFjQm3K3nKai8WPvf9ibMODej93mkyMsmLj0yOwCjYqK//M6aMujAz32
bVqfIRumA+5XfOymoqJZmwLDHUy4THPPd8I8fHlmxWenOSreX06HeW+Z4FQn
bilSxoRPp/Zqm1+hosj2pfc2vGNCl0WOgRX+vdjF7puSCVRUNnCnIc6FDdwS
vS0PS3F9T1mFaReREfHOg81ZuH9cTQ5pZikyYYX4pdGxA2S0N5ivnHeDBasD
rTrsE5nwpd/ITaSBjNRrSVJJP1mQYeNRYmHGBFkN2+mPTmSULiKy+PY5FsRv
SUlQzmHC74uWjfdwvtOG70KpcSzIo8Gs4x0m1IcT/jNuJyNXZa/lh74yoWKT
+8RNRRZIpLY++KFBQfs3qEzuTGVC55qGuOpYFlz4dUbKCedDi6vcMWUWLMtq
9znXwYRi8lAyH+c/4p8WFs5lwqWtNl3lZ1iwgd2t8QJ/bumX9UtXbWPC0SLD
/KFKFqz9/SjPQYWCGvpjSS+qWfC4wI2ko43PI1YUq47jUjn3Lu/FdTKqyovX
XcKCl+rX9zp6kZFKRUKJ1DIWdBTsbQjexoLSzRr+LjjeLFVnkKfCgp5Hn7Y2
4nOV6sekrdtDRkxnur1tLwuKJBvNYq4wIS8jT5L1i4ScdYuKPZayYc6gejRF
lwmp7y/Mc0zJKJPlJSrijn3XlFkc8w8DDssukk/lkND14rhFx4pZsGi1bnTa
B1znpB0Dy96TEPHzjE53KAs8X2zt/THKhM0ivj3FsyS0syp+//YkJlTLPzFt
S2LBDQ67WQnfQ05eavIWcyY0ZpWJVX1nwaOBmi3fcb0S41pVbuI+/9AR+7jS
iQ35wTG+EbgfgGwaeEWZCSK1sgntWG+X+aEoZQcyWnxz/YENIWzomV3sMbuU
CT4WVjfLkkko8i7hTmESG7LSlnD/9jGg5X32ff+3JHRT4yjt8zd8nw2VfYkv
mJCiMRaQm0VCkwrLZT9nMaBd07GA6s8Gh9d3gq5jPYxozXq14zkbcnQn/mx+
woADV+PWyxNIaKHt0r2W6wzYcMg6/1wMG/a+PyNSiXUvcvu53T27GTBYSG6h
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
0r3fe62XicKKTv+qFGuC9GcJl3j7sPn+pmTqlhALHU7/zatytxH0nEzNvdsp
sHnrA6NNN5io9QCeoSXbBBIV5vZJ3WRYLfhMsBRmofhIyYym5XoYDbpBkAmi
gRfrlCT1Dx09l0yXfOPXCB3TLwcSn9AgNnDbZAjGWwqe9z66mtMAvyogJ6+Q
Ck9DRLIupDMQ0zzNao98D9Tj6Hy1NRS4/i3KJZKXgb5d1cyJf98D3Jn8R6JF
KbB7KeK/1GcYr5sSXax63wtvePl23Vsjw9aifWvzNgxkJR/r8OV2J+BfH/na
rkeFyOk2CSTHQFqV05QLhl1Qu+/5u0eXKdBnqsMp0sJARtliZL2kbmi5g8c/
xfK0dHSp5cwoHS3ct9z8hasHEodZKbMcVMAvnZg+QaCjhH3MMnH1Htg1yWeu
cZIMPokTNiNnmYjSVFJx7UAv3NG5cM5MggyBnqVWiweZiJDPOGqxvgS4d7bs
FFimQg+nuXYMxgesSnb6/NQtBrWx7pwNLTTo2vblxxnAeMgLaGenZ8Dta522
i9w08Nf6sK12KxNxqf06e2t9GthuPB0UNILx/dFnHBRjBvrbePD8kkgqfFqY
HyLwYPURRhib2MZE/lO7EpyufwNz7WvXb+Bo8KeXpvvLhIEC8LF8nK41cJJ3
Q5r2AgVOe8jpnXzHRLPa1VYx9Gpo3ly6qR9HBdddbaXHsHzWr9Y/I27zAyxV
50qKt1ChLYjDLzcV4w+3pExVnMohXGiO0TRLhWON2721pxnoZta+v9s/1UNa
XLzJFhwFjD3Gznx3YaLfsnt3zN6tA4E/3+vJrVQYH5KPnvvJQJruKTdHraoh
rSZ36X4ODYITz6k27mWgzvjQvqC2EiCrbOsdbKTBhkWRnbTTDPSE8f6bwWPM
/nCl65GpNIg8/G7WU5iBkhoLBuQlmiBnc+e59T1Ynm+Qyu3D8vOX3xX1d8dG
YOdHmUhduRHIiB/ZspmbhTSWrOLeUobhF2u8yEl9BGw79LbIibCQOQkWkiIH
4f04p2l27QiY3OZx+BjOQqcMeEraVgfg2Kv6C19VCNC16QZ5cImJBI+nKpqo
48HvoyhnOBcOqAvnN+ljvEtWsMK+/TMeuo98XEh8jc333+NNWzCetk5cdHZK
cggunt2npCczBJebGIRWcTYyvnZpuUwTs6O52U8P4yerEeWMg5g9vILq8hP1
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
odeJ6z7FjM+TRVgQ9e6F9RAdUe/ehWgodELf5F/gBHkRbs8eqQun0MHjPcvL
+tWB7C7BqX1zRbju7SSrzKajcsXoDfq3dmR4Xg3t3yJCW4fCnQuqDNR7ju06
f60LPwzMzr5mCQmv796XsJUO49aJFo+bOrH4j7pfKdGtRR6z/rUF0sCs7cj9
IN+FKTs1Sxdoi9CQfUN9Yw0NCiFTIvzcuzBQPCO/TE6ERRdWeqXl0VAnLZl6
zLsDkXmyDokXRPBxzfkRrEDHVH2jwaErHWgJHjs8xVOEijnGIxO16VgxbUb3
9IgOmG7+LlrkJkL1it74uAV0KJRF+P6pacccz8Y1U+aL8NdbXz7oPQPhD3vW
Zp5ux/dmltjgCHmv9BK1VhMGPGinzv2z6ED4iwlzwvuEWNvef8aN4GR2VaLO
lH/t4M45b8MeFSJZV71r5QgD+/k6e5Zad8FcqX6JzhaCx4rX/I8aEB44Uys4
7kMn3k4+06p8XAiP0YmL9hPe8XG4qVUlugPHlT7pqT0U4jxzh/VORyaEWTMe
fH3cgTUbtnmlPBDCPOTx0Vxi//xFlJCj14Gjiy5z1hSKoC6bXHP8JA2B557/
Kg7sRKRiKWXITIQ9/60x3dBDw9lfVnujpTvR7345/f59EfRutRaKV9Lg3dw1
LeV7OxIMr16vLRfhdf7z5z7eNBRneUuZm7WDanP48T+2CF5nJ+oMPaDh8Hnh
nUm2bYiWo3yJnibGz19Lb8uW0OA870WqR0w7vMrWsVc/EmFFmveBN3vpMGft
+PHRpg15BgoT1KaLcW3DPdkU4q9/LP2eFbUNB9wLUpAnQjPd9fGkS3TSf68f
jpZuxywsenPssQgvlv0ulXlPx7OPkfa0nmao82Y6r+aLcLpc9tBlBgM/Z/yI
eKzXjuS87QP/LRDh/sE3bEOC/5kfDCyH49owdlr3onKJCFnU5dWEMeNCglmA
smMrapJkQ2cbkvm//xk5/RsND57GPHJ3bsO3G/MMp/wnApc3nFe4lYm4O3Ee
P762YU1E+sdaphAMn+zR86QvHI7vlRiQasMGPYuhlTtFMO6I9X+zjIm6DfZ2
ux92YP2n31ZbooVo+nYtZt4Jsr435yc6rW/DbO8Mt24LEWSK/EUHlzBxctLJ
oWLXdhgmvGumVglRMPT5XGswE4UXbQv/47eheZWt55xzInTnLppQvYcBpm54
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
CP6qTZmmoQd2n+wcuz/CL1Nn2+P7ZqHi+C8PhXEa0t1RdlVF4zPMd7wpMdOY
BQPVya7dHnSEn7+iLni8HLor/D7pxczA+3VS1fIpGuqsORXb+ukNhPldtHen
z4JEAVXWCYsbrvJz/JrLB441qxg8bRakmy3OdLJZ6OXpYE+1I58h5oDb4cIe
ApyzIjjMKbMRKMvHJ/xXATz8SnsGNhLgqUYb7SSdhd69M6wmiVfBpew06fJ2
ApiUpq1uVGCjDfmYB/KvBMZooET4f3hYGeFJHi1mIeaymtSD8ErQKTnSZJ1J
hIW30cFZVZje6+GQ8d7+EW7rUewCC4mwltYkkfyDhe7KX4i9w1cON18c57w8
huE5cShxVZiNZicdhbkoNSDLsaXVfx4PNdXKaX6n2OhA9TAMuH6FgHo+Zr4m
HpK0HxY+5WOjTxy8P+fm6uBpDo9S8hwevtI8nrIN2UiT8m1JTqUOdspT5AeU
8cAbmpPWq8FG7uqZvx9wl4E1S9DCgB/TXZlGmTtHMX2o4KS6WFwH3Bv/nkr4
SAC84/ArCQoLCQrbvgm8UQ3dOc+TcQ0E+FcUzzopx0aqS8p8HMtV8OC7S1v0
Gh5ynqR87hpkoRqpQ5oHsH4QTgk1oZYQwCxpHDf3noV0r1NNL3yqAi95Oc3f
qUTYnUxSS8lhoYjEjuOPttZA47Jt4MVYIuyPmfvh7MBGgn6f2GzmR+ju8vir
aIwHQt+F72Hn2cizSH1Jdf4zLDw6eUz0CB7yqo3kKqzZyOfPi/i6wkoAqmeI
5mE8cD64L7IthI0GAodkPa99hhC5PR/kwnDg8/F8gF0oG+mU8FVL2nwG/Y+n
P64H4uCxneq6XDQbZW66cti7oxy2cI+ZtIbjYOjky+mAq1g9rdGtZcsSmN2T
SPE/jYfgS9tVCu6zUWdFYKDrlVqYDaIVnLuLw3TIwEGNp2wUIs+5Kx73BTj7
cx6PP8LBgcdnCy/dY6PGAcPBgge18PvDccKlBzjoNNNKPIDhMQi4q2Ho8hlo
avKdeAxP4a/21ePfmeh0zULAhoFXUBnPQb5nQMb8vZKSsSHmOyTZW4VKE0Es
PYS1tZkEh//93DSP+Zpol+ZnBvo5UBDuK7OsT4Y7o685vmP+8ZlzmfSPhmww
T679+KaRBCZ3i2pmdVgouZJ7bfFPCXxIsrUXrSVBD0jObD3CQpaX858FRbwB
yxBHFb8GEgwudE3swvxgh3avdD2xCEhjz8QPmpJArlDX5BrmN/W4zpxY1cuD
NIbYA4YZCQRfnvZs3cdCPBILs2+/lkHFf7axLV9JwB7WDZHF/BFHQamGhUkZ
uPpXCbubkMDlRk3is29MbH89rutYyIeOJ4kxrofJoNh2uSR8jolajDXCSD5l
cPFDWYzFATI8v2nroxjGQvQQrs+T0gmQ//sih8IZEtxak1e51MFCSyWQNysZ
D39odgGZtUSo4rkl3R3MQsEnZV+JmGeDzn6Ra3XmJBDlxHvzt7EQfn+re9mX
LAiPz6H+rSZCvTU3KS0Bw18w93fJE8Dmgk2Q03MiGAqceHQdi2/Aq6Y+fA6Q
30UJVMDiJqdKNz4BFjITz4m9KPcBFBSu7/D7SITo0LX5Hy0sdPDC9Nyzg7lQ
4X6ssv4LEURLbHeM1rBQ5ET3ZtmSUrhRk2plWUKECd3a5KC7bDS45Q7i64yC
A0XZ5yi2eDj3u8N8QwYbBbyaNzC5nA6U7q7RAsx/KRy+aLYji43OdT37ra0c
CbqrVYmtaTiIPf/P2NwD83Gi5KRr1hnQLtW48toGD8f3bd9zP5WNbhu4mz3I
TYd9lWU3s/JwkFg8LSJ8hI1Kg67qpunFQuWx7odXZAjwwbuT+SOdjVL39NXf
fZ0O5K4dD9Ow794QJSjpumM8MHh/4+PoAti7Mp3hgvn9KdssHlXsu+v7C5rQ
xkwoiAqKfYB9N0p9+tbDFDb6sfeyYap1Plh7Gl+WTcLB395nWlOH2GhN0uBj
p0QmTATybuWWIoDl7i+sa1j8wUdbVU6ZbNihnij9UpIA299rHxacYkC0i17j
h/dTqHZFbYdq8RScjumcvnOdCfvpGh0WNRPoxcvlX0KuUxDxKNutLYwJWadu
zl3gmUDNtlahriFTsHr9js7KWybUS4YrZlmOI7H6a3dj8qcg3Ce62Pc4E5y2
DTUmeEwi56Me49uOTQE3Y16Hfo0JEffM1bfVT6BjxhpOL69OAeX0rSfzCkzo
l2+M2yU3hUzvXIFE+Sk4aCaUnf+Xhdzjxd3AsxB2vtcMUCEQoPO9YcajXyz0
ZZLv44XJEpD4dCo6apIAh2Itwd6VjWI4TwbsNSsG9T+o4rIZHtYGzD5ZJrAR
oR9npfiqCNg76OY2r3BwoVnQZE2HjSa05f5UiL0DvyXp54MiBHBnfjoWqMVG
+astF6cFSuDfD+tJQUEC5I2qaEZuYKNlUycJ4MwBmomxTgwV4/kcJ+SfyEYi
0rlzV7yKwHVTY7tSHA7iEyOD3LD4cAlJFh9bBFJ8KYKCWHyT/yfmcy42qgrG
BV7dGQd38naODs4R4IXM1rtHObH+VIsV2UrNhOzJK73WMwQI9EvQgWFsvzzg
N8lqaoXLm/F2qh/wUAGTN79i+86/mstJILYFLIQXNm//iYNDq/faNvdjc/pv
w4GfR9rAfoGlpFiAhzQB75x1HqwOlcsRuWWtQNm9sszHwgHH6uWQm5UsNCq3
leS30gSBu66XlscSQO9lgE8xNtc24w+f3qU1wODvFeWcXAJ0BLjaz2H7957b
VmYBrRF2DOUJx/fj4YLoj5A/2L1+tG21+tYDcCVxvb6AiAfly68ND+qzUc9r
VslBxVb4pZ6FaLo4eN/XyM9jxkZBnW7JITeb4cSVa9qfT+JAenrOMPYwG/Wj
i2Kye1rhVvIzPNchHHBt+d6cPstCr294mdLHmgFf6ROtU4+Ho5ZnCqcwXaFj
9vAbqbYJ7H2v+jfy4EHPscDr6hsWuvRvx3b4rwWivvPH9PsR4G6KDmh+ZqFV
E6+eSelmiI+0C7SNIYBqt9Gi1CILsY8O+8lnNsHytueXXDrxUHf39bY971jo
2G7R5VydZrjh1nJR+ysBWjS57MKxPok/etb141wDOH3Q/UAXx0PjjF9h5EU2
iriZ5ShQ2ggDkZYyh21x4OUfwGq+zkZFD//4baUA1OaO9N+9igPVVXdUiuko
l/On65JUmqB+XMmljg8Ph4XwEloX2GhsMYaZ9qURjC9lhmpcwoHOusL9JgNM
R33wl4mRrYeem9HnIxXxoKppyr3xFROpatnPfDVqBebBmI3KG8jgNfbw+CNs
z3ZoGZTfvVsL/woDOhWxPWtqYCl/HsOJ17W7xVHZCMq675I4MZyqLoJ6J+dZ
SLiY+7WNegf4KmYeCxzAQZKamcyYJBtdO081dI3ogECTD0cjxHBQ+WqArrib
jfjKPlnTJ9pAsZqXPqaMg8tZBu/FMf2jRtzl3qneCcJxE9k/WnBwV+OtpSKW
5yrt4DXbhA7gzfEkpIjjwHd04KA2Bxsp8wgarFxug1QNujLPDA5m9r3zWMH6
4cH5EwGiu1shhXjN6/9/F8vNvnw7HMvzTy3jqko85u+SM1MQhicxS1u4LB7b
j1w5z8/3t8HtgxurT7kT4GgvKymkgIW26b/c2ZbVBs2+O9kkNQKcSF7ewB/L
QsONSg+jhdtBy8VGxPk6Acobf3qWbmchj3X+SkpaNTw/MFrvXoLtO1s1o2M7
WCgk6GawFm81KLYkBl0pJYHRi+LoyrMstLDLWmRj0hcIKHQy+HaVBBbmZQ9U
hDC9Okr5TG6ohx0fRXbi3pBgd63m/gx7FnIyLa4+2VsLZyxIxhd1SPDl3Nwd
txss9HNJ4BrHpS/w6C/hDVufBPTCB7WH3LH8KGklfPMXGJctPeB+hAQllXe+
3plmoubd6248y5+hu6Pu9D4NMtS+72Qr7sH2Zt1bPG/sJzgr8XRVpJIE/j4S
d0iDTPRgbXk/qq2Gtps118VVyaD8sO32OIbfycryQsTeBvhrRVJ13kuCRw3h
TaQ4FmIVVfg+CgFQv7fFZlcIEXZ8STRK4mGh7Yw9fs1ZDSBiPCqbnEXCfJWN
+U0vFnrczf3dElXABTeZhc3GmG7pVRjSn2WiexYaxIs65XBNQu6Sjw4Zgqdq
Hzv/x0QsjZHsaXwjqG5bnmSnkIB6j56YZcZCh/qemrxtaYDqSZMo0m4SyN8w
N/v8lonkWlLvuok3A1rGtcsKkIGYOeLIX8VEh7/LhEtLNkLPzwMslgQZ6hmk
8u81mB8cn95ScL0BpJN+LgvKkMHS5PF93V4mSiVTRu651gAtd8RQZhcZXDR8
BCITWciXRyWKfKAfNodIyv/wwoHxpjOvkl+ykGMCPePZaj+Yu64HvXXHgUbZ
lYGyiyzEqNYOEj89APlxX1toKzjodeq8fuoJC43oj2uleg/AjV3vFmaw+eVc
jG2QbWIhgWF37VOH+oHoab2S1DAN34jTSTQsbnEK33xaux/SnK+UFsA0RLpt
Kx+ZZKFBzcj55KhecLDtlo4bmwaU4vFnmysLvb+gWE6T6wfDa1K/durgQcXp
TU1GEQvZp+ZXzj/qhVqp5DddUTggeCs53DRnoc6n40uelwfg5QaJGYIMHogZ
Vz1Jziy0aXLg5vTZQdjV0iOej3DQ/PLsCg3zHWg4wMLjxgC0HpzAFb6dhuXW
8ZKXGE698irjQd1+cC5xGjLFcM4TeCcJWJ80jIi+FTo4CA8el5XlRU+D8jY5
QqItC32Va9wYkDMIlRun6rkP4KA/8h6dBztvOZp6UvDwIPj5ve8OjsHqUL/w
dcSUhbJsyTe4/QdgYWfaS35JPGx395zftJeFcDfucoddHYRnzMhJ9zUcpC02
Hdi2TEXjgWY/vaNJcL/386xVMwXGXu9P3ZtORZtUM2u/mpGBbxtfh999CnCm
kLI7SmbQ+ylLrkdiJNCT2FMt70yBb3u/WlWKzyCPtwcL291IsJJeTbQCCqy8
fR5+/z8qMioJZ6V7keDi03T5/3opICwMrpYLLBRT474xgd0NFyxaTPnY0/D6
p6LT0BITadwSZgopD0PQ49m9pl9xcG6bQ9vGrSzU1HpZw8BkCORko0QfTeHA
U9VQwuEE5vuU5xwylYeg2MtxzFARB8ImOnWyWpjvu3fdnUAdhNuq+q/2ZeHg
s5eMm/AjrG+/vnjcfn8YWH9skjMMCPCjbO28bzgTPU89G2r9fQi2jwzG+1sS
YGaH+r3QFiaKLL43WpI0BK26JQsmdXgQK9f7ekWShR7J3BEaERiCrVO1I9YU
HFzDbYzRssXODxme++42Ahv2RC63ihPgW9oDvmJsvtxbZ4bmzYah8d12mxof
PEyfYc23mDORU3IJnvPdCMg37BDfyEeALuuhLoHXTNRQs/KkZfcIDBq6t01h
OvZF7IP29CQmWqca7y3SGYF1zak2Y2vMb7Jw900yMfx7eOZ0d4yAs47x78AT
eGDvk3bxG2YiBeX4Mhf/IWiLLAl0S8JDLV3nKJ8YC53Tet0p5zMAz1zCXqfh
8SCUKkTO3MJC1fu+hyi1D4BMjQjj4DAeFkkBHAQK5gd58mYUuQZBKIzplo8I
8EsoOp/vJxMtVqTtfeE5CMI7tvuF1OKh9Q+JEDDORP8pS5tPXh6Cj20uv8ZS
8bDzCq99QBr2vnWboufuD0GZc43JiisBbIejOu/WMtHu4ErXfXcH4bmRenx8
OAFswpXeZufOIX/elqGDO6eh17ns/B1pCixpEpnLOXMorN2Gzt41DXufydyk
SlHgagOn2WD2HGo+dC7OVGUaHqTz7unGzue5b/9tsX0OBctWSnbcnYbrfkoq
cxkUYLhuvZnON4e+eDWyp0anIT07d9/uaArU3t1/LnRsFoluZYoShHFwcVbA
Y08lBWaiFtUq42bRglHcdYWSafDgIOTUqlHh896DYonus+hckXxc/UscVPx1
KhLjoYKvpjNp0mUOpddaPvxHn4SzygE8r8ex/GWh+5Wt59CnA5vKHX9Pwtz1
YNnDMxRoHPg79mVuDl1LfhY3mj0JC4eiDclnKWDeeKif+WcGIfdLH+Knp8GS
WezuVEcFvTOrR9e/ziDDvGo5CSM8CFCqncyfUwHuU0Vv76UhikO0r+3jKZg9
rZIVUECGlNRIdypxFp3tV38VjOHJLLKz0L5LhWg/u1cNTbPIbH6bLP7VFDDd
NkecOU8F/qtLSY9dsfNlO0+6rU5BS/i0ikE6FTQC38rYrsyg/LzX+7kxvfi1
vSeTfYEKL2uNjBTcaGiu72mRkPcYXInitIjG6hanfNpIzpSGzkTxiRefGIed
j4vcG7H6lxjsux4/PIdK1i8q87aNg0n1UJ0HFxVK1vImgtzmkKmT4rmrvZPg
M/1vLXiaAoV5c6WU4jn0NOre/JrMBPxVtiGABBVEbN9uuKBKQx4tVbs2i0yA
vJ4rx6VgCiw7i833n5lFMd9PiR9enITLAheULvLNgNOW37QR8Vm0QyHq3ROT
abh4JlgORqlAZeZf5l+dQ7b8OR1WhpPwhKfeYMGBAs2tr4//lz+DJFrSck6W
4UHwUpP5y9tU6PG3fG/qOIO0T8lXsRWIEDKw3U1JlQpLL6VmSy1m0JHQYVXH
O0QgBqhc95WmgmuKov+p0BnE8u2uXvtJAENb+YlKASq8Y76ljRnOonWlPwJR
znh4+1tqnkKmQG7IEMtkYQZ1KOcK///3tgbcKw7cTqHA91l8/gWBWeRy2jLp
+jWMv3476yp+okC05LNbFUOzSGvkSvq/DXjIPvAn19iJAprMzepq5bNIzNz/
wirmf+Lmp0s3HaPAr45Ln5rsZlFFdrDADcy/Rfy1iRUOoMC2TXNuX2OZaHIP
89uVilFwFSt1abbCgaAHh5pQDhMtjz0ofG02CklDmT3qrhgPfxw94ITpgeK4
P8rLv0egNJziU/BrGtaGjKgJM0w0YuSqzzEwAvs841WvYftOJaXntEwTA4n+
t9/pU+oYLNyk4BKCCJA5l+LfVMVAm8VH1f5NjsHx5f37rX0I8C/wpAh3CgP9
+cEV/JRvHHyuKcyeqyaAmUr/cPIeJqqT3hhjTRqDqLI97w/jcWCt7BXaK85E
nXBUrN55HM5ck1Le14oDyt9nJf+oDET5wrKiHBmH8EzLS9YJePjb5FLOeY6J
gCTTso9zDLhtavZd48YD12Gm51ArA+0tCvt3mD0OikEiTdOeeOD4KWcYhGeg
FaHo8VvN4+Cv+n089yge0gstxCouMFGpoGj75+5RwERT9G9BPJDHg9s8PJmo
LGTnI/XcUXi62smTOo6DUYdfN8X5mChuRtbP99wYFLIbzX8DHkoEbm4M3c1A
nT9Yds+vjUF6qH+P7ykSvDz77oXLTgZK/8XddElhHP6Nih8UwvawwWY8/DRh
IPuTv2cOHxmDVzJDjx7uIYFIsFCd0VkGcs3cjevlGYOH++cimrVIECuTfDr6
CQMxD2gl7SKOgMWxXGEZCxIobwjfwMpioGXjYSHugVFgrBpu+Y7pVf5dEffh
DQOFbWTo5JWNwnyEkfRMBBHWo/c/SsfwW/yS4tWxGAOFf60JiQ14yBQau86p
zUTzxyIL2ZdHobmLLmfBwsO+QPVkry1M9ElmoSXUcgxGC/7muzTiQYfayzjy
kIFCvtyji+DHwPKrBP6eJRFkA/9s+/MfHblfPeJf8mccfsvt14lYI0L4t7X7
iXIMtPpVZn2lexwGTiikMKuJ0OvhHX7EiYF8d3W5Xb4xDqsgxqd8gAhnG0zr
j71moO3q/teFksYhcikvh9OKAPlFwv3ingz0rlHqZqDfBIRljrff3EkAvlxa
01lvBmqjDRJ17k8A90sFXC22x/d1ahx3rmWgqrv/cS4pTMDTtbCbwtcx/sur
HRtepiNFlcP23UcmYHD7YQ0TFhG+kZ7t2fERm4u2PMPPuBEIyt8x7+SNg9fD
fIupbGw/fn5ZoZ42AqywiNDi9mlIrJn4vpcP040ZmaIXe4ah8AT57CEatmde
aZ2lG7LQ2rpaxeW4YVj4x86rNJgGb3FWkpsDC9VH6j+t7h0CKXrRx30Xp+F2
MO/YEuaPtpBTHr7qG4LFvobs+5emQcGa65DLA2z/3tD3frpjFPNpkaQb6njg
JVt93kVgoi+6RSeFPw7DjdVsvTP5mN523LYxcIiJTjydMmJwjkDfb+sLs69x
EBV1xa9dlYWaT8SE9/0eApEwzrJmbhz8yjF4NorhWb0TVv3/v5sw+C0XnY3h
sX13KGLUh4UcfCg5jzZgeD5t8szwmoaAP/cO+sqzUKraxj8tBsOA0zv2XvXv
NIRxcD+c38BCyhaN4WOYTtPv2ThmdwoHBWI/8n0x3VthJfrV6NAghNKTXxpg
Olm83f/FoDATVemxgoZejYD4JiEGJ4UAtSggcfQPA509gNjzaqNQfYAPv9qO
6QqGf+fjCgZSVos5pZM6CmLdvA+NbxEh+56c2FsmAylMc9YmY3EXJRPjjAoC
KO53Yz/WYCLPFb9WzUmMx37blr/A+sci59wfyU4Gwv2t92usG4Hs97/vp34h
gqDD5Rp1GgPxPR1bZDKHQfbowlgangglK50HtDHeG7f/ovoC02nT3bM65dIk
yO+/+aRgiYGGqhrVNLOG4Y+cCc2fSYTyhSTXHHsm6orJM27H9FuGgWfYg0NE
CPV2SyToM9FXU8KO7tvD8J3jdPCwKBEc5UgrJWZMpBUpLPrZZhhucg1mn54n
QLbYMdlAXSb6q9xHCYgcBnnaI/o7QSJsVStcNr9FQ/MleX/93g6B4F33V3sr
qdBJbOVtFKIjpy7iZ5Mzg6Bgeyb1qgEVWJOzL+NjaejL1w1/1ewHgSgVmhuJ
7c0gzvgnk7J09LblgNVjwgD4fheOEjpJhQs+lc/apmlojeuJwS2hYVDbU5M8
LEoF8y26xE4LGuK9Ikz/nDEMD3fbxdhmUGEnPz1Uc4qGejflWw+LDQNF83ii
txgVgl32SOTl0JBEol9wUfUAHBMlJjOoVCB9/k3LVaShDUY7m12+DIL84z1t
YoYzUHfSSemMJrbH73NE5WYPg63QkmcYYQb0p0qlIz7Noc+WJ6a9VUagdmXj
L3n1GaBvVsnZvTyHuEa6/pOUHgJAQe+ILjPwcXXdoIp/DvVWHvNyqR+B5HDX
7P/qZqBbGXF8/TiHxK3P5ezcOwIt5x/ENGB5PFIVen9XzKGBqPqBDf//3f6r
ji1Ze2aAJtZGPorV4SzvQXKz6DA4Jf1VdsPq8EG/opXHm46ihTbxUWsHYeoV
7ypkUyBkMt03YAMDPZMqzxYJG4CrVyYdr+3FdJTd44WmNDoqMLMLlbyO+TtT
3yC/OgqoUS3Xzwoz0MB4odD2mX4IGD5MouhR4Mxs/lVFVzp69KrLcnfaAOzw
Ttiv+JsCoX4W2x6+oaP4Ak2BOpEBEBv/MCTbgunhhgXmVUc66i27dsIueggC
DleI/hdFgYr+0Oywdxiv0n9Pl8oMgqFV0xcHGTKEL/yrKh2lo45963svbx6C
xA0GC+ECFLgke++MNhb/Fe7XFYr5o6Nk+hZNLG5zktvBbISOLD+pDQUJDsEF
lQ4BdUEKHCdQT3hg/dy9MaYm78ogHDaB7OydJLjxfoexlD8TnXf0duy4PQje
epaXT7oQQTief70f8zsuZZ6HSm0HQONSYOjml0Qo7LIr5duF7d/zpqYjkkNw
aEe2Cw7bj+Mp3qYa2BzZ/nwYX9I9CPpfxP7a5xKBHRqR7uHDRD+7Hixo5Q3C
pgebsq5cIsLi4cKOH1OYT2zxNV67MwCJ43ofPYsJcFFNcr29mYkKv5x15tw/
CGx66pWf8QTY8Xhi0+gKA2V4RD45cGIQXH2UkktSSVA+5tn3qI+B1P5c8d6F
ze+ZWjejXYEkeNc4Fv1Akom072XVdAZiPujqy7Zn/CS407Ujp02ThVy07z1U
29gPph7Jrdp/8VCxJYWtvpuG0itlrlv+6AfRnnf3chNnIPyJ+s3ogzSkzzK1
+r7QBwsubxxys2bgiciVn0opNLRxY5+6u30f4Bb+0844MgM5nr+EJ3/NoQuO
7Nc8uEGoL3I/3X9jBjjEOT0temgoL+yjtR5/H5x+nDcwxIvl+SV9P/rtHDLp
vCTvKdUHa7xBJwrOzoKEOX+6RMIc2ubYai473Q9553qUrx2ZBfdV8kLLnTk0
/tl435vLg7Al9OfgYZlZ+FpmqBOC+R3j+fRDk85DYN7qVfeaYxY+DTxeqZ2c
Q8lPRntq9Duh7bjn+pT/LMSYf+uJ7ZpDRw6u+0v3dmH63mLPK89Z4BTwSnJ/
zkDZa+7vznb1gaOIS5BNDRm+lPJlejxloNzxC5eAqx+8RBzPGlWTwVBgv/aS
BwOVfv7obb+rH+xPrVpTu8mwxp96NuUCA324ZNNXPjkAQne6s/OzyGD0gyI0
iuku9eYf6qP0XqD3F9HumlHgNz2seRDTV/Qq2V9ysd2QltMg3nGZAm4HbcWi
jBlIl+fG4wtxg9Cd7SGxMY4MsRkK5jnYPjr35vVlfuEuKLqlpXTLmQymwa+e
48sY6G65js/P7i7IbjumzY0nw9vbKZMI01fDqd3/Ns52wwel91FohAzesprP
tznSEPfiyVmR25OQ2rWzaaiLDHplDvz6z2noZmLMQY30CZh3k7ocN0sGqcch
k36YDzqf9dpKgmcSjn0Oy361D8P5adeRfTQacpi4Hh4uOwGXLMWFuF+QQVxj
06aj6zQkmH2vvuvvOLQMfUl+d48MPuLKBhN5WL/l623obxmBvIDC1zI0Crga
ZL+5nUhDDbsspCMOjoK7s5xw2xQFWh/7vs6zpqEbEtsX/jwehRKpf/OpklSI
Eiy/NnNvDpX+axouURqDLU91P9IXqZClf03GUIuG5Kv5Dz4JG4H7+5Voj4Kp
IHCyPqL9xhx6mRfr4XAdO1/IJzFAp8K6Zn5oFRcN2c8cT0E9o8Ar35I7epkK
zGYdnt1pNBQz+mFp2+o4xAs67xT7TYZ91znvqxylo49iSv9t8hgDsWKrtavY
+8b+inRa7qOh20u0Qw7vxyCN0mQepECBR6TO+DAzOrI4NmU2KToGudMX+eUK
yXDva7Le1QoaeqZ/afvXrjF4zn3usZs+BW7Mibpp8dLRrJVZwk9Mf1aLCN6+
60MG612OPKFZdAT/8H8SrcZg82Nb2o/tZPAvXNQje9GRTxIkm7uMQ2LlssHZ
DWSgyqwr9O+eQ6qhc4k0oQkQUc/yaCynQsd9UxNJqTmk2WqjyXw5AUX6h3bs
yMH8o0KbKxnzdz/VtO4q9E9AdL3UFf8JKnh6dVYey5pFRIcX/NWzmI/2mijh
scN8rtL3Z2u3ZxGNYyVKfd8kSGVNjX5RmYG3jdydb4zn0KHlig/TL8dASit2
g+OmGehJbwxSqpxDg7lv72VieQIzQKBCjgrQnmm2sjiH2vdN3pm6MAasy9dt
95+lAm6PszuVMYv8A6z2VfaOApEc4X84YwaO/qtZjYVZlCe5ySqKaxzy+faF
3Hw4A9smXGQ/5dNRW8ycZnrEMDSEfvhUyCTDiJojV5MGA60/e5ypiIYgQtME
FxVIhhOCHw5OG9PR3YVqJ1PHYfBFYcoRjylgt99B65AaA4l/DNgZ92MEIpwf
HJNtIUGpcPnukQgGUv0i+LPfYwTWx1dXA+1I4E+p1b+M6ZkS9yszmqwRkOFs
0UywosDPhmrijBQdfeC6be+TPwKXr7e8GL5IgU2t2gEyRnR0+tf75HWfEaBc
WyS7a1NAUEbYQLiHgdZiE37wxw3BpqelY6nPSbCRfGu3RiMD8T6urovJGgJK
nWT68yhM110QK5ILYKALZ4OH1G8MgQW/1/2ifyTwStv9d7Mt5tcq352W+TQM
7je4VH6RSfCC2etEvMVAKvNq/j8Fh2HTJ8G84EUSMJz9LZux+/ZclFodWhoB
4hdrCx/svh+nooo2FDCQ30F17hflw/DJb5BmdAPL32qYVTpGQ/hrqkVfvMdg
w/ECyRsqFBBPj705+oCOIi/um/32dwR0zJbPubeRQTchvVIwgY4M5PPJu6RH
YOsi75AsxkuO6cGHbqsy0N9Sh6T8nyOg6m3v9gv7Lq2bw+xjPaYPG3NdDQJH
oas7uzZXB5sXk5LwUl86ujO6JSZ0ehQKXhT+J+hHBm3pPfwamJ5xf3kx7EL+
MPTsJcziXMiQqWxp07ER4+37MYn5mK+Rit29t8iVDAeOGR+qFcT2Zqtbvkrw
MLxK9zYsuUDG9mbhzJ8BOjJ7S3jXvHEUuDw8li4akcFd6cUnBbkq9CrgSGMK
jQU3c6eeDHYSgC2UMdFaU4U8bLI/a75nQVrnS72dGUQ4eVeWrWL8GXWJnlaW
Y7PAJn/MpKePAPdU7ulVxVUii3sPq+SLWdB+oi3+aTYRlN5Xpl8IqUS0StWT
TjvYcKEyLix3HQ/mESN7T69VodN2/RnZ29iwf3pBPv8PHu7UOflJeFaj2199
uq+RWRAk+fb2WhMB2lN8HjlK1aClIAVZQjYLLMMjxf3iiSAhr8a17XsZmvdV
c1f9wYKCUmJ32wQBGh2XTGV3fUTWsVt3f6tkwVUGt/PHD0TQTzQJDKyqR4HP
rR1FB1nwxfrEvtUyAlx1rti68gLQ9C+Drvx4FsxIvVA4EkgEb5kYZndyHfpP
Szytf4QFzSv2RhKfCbCmfdDxziNAu2riT0xj56l5+ugRdp5MmI2ZYtQgqFV/
bSbMht7qig0xC3gI779Zf4brE9pkqHfOWJkNvIf2cLK5CaATpEDK4CtD9pKi
lzU02OAxGPKfoyABkmv/FnicjES69ew9rzPZQNb5zkvIwEF6s+bvo6wo5Dhb
Ebhyhw03N9IPcl3EQ0Dem3xoSEcUsqkuVzIbuPrqPbXKsfMR4vdyrmeg7KZA
0ZrbbIhP0/D9YosHr+HDehvvpyO7esGdPulseCn/ja8uDQfXDpdNPt+dicZi
1yONDrFhRl+WsleGACuHJ3hy82JQsF7XWJg+GyrF5udTtxHg24xX0CuJTFRv
xapOwvLXOjt8j8fyd5GHOewKitBJu9iiM3FsIO4Uy5HG8L97H8K9YFuMWnGm
wq1X2fDgO7nc1wIPxqKXfk48K0I9oXcGvyWwYTanZ1knAQcfL/aZ8DjlIz9n
mUH6azaMecgMaWA+2tV4wNcwpQDlrr/VzrvBBslzRjP+VnhYitykceBDOmI+
E6u6hd1LVOloTjl2L3/n/fvI8u8QIWrfNUcdDE/O/JWfYgQYzh915VbKRgWs
Uws9emzobzkdUC5NgKliw6lZ6RJkFyBLp2qyIfHDpgKtrQSoi9tsdSG9CKUM
vNg8geHcL/Fkz3YMZ1kQLeyecyeCVmeu7beYMDKR2bhGI0HA/gYuc/Eu9J+l
4+/zwky4uC6p4I3pGYOUKW/5/7qQ6pK4xI8LTJBRSf16CUcCir7rEff/UXTe
4Vi/XxxPRikroW9UdiqyIoTukhGhMiqiVCShEBWKkiJSVgmhIkn2zjr23ptn
DzyDrFRC/T6/v1zXuY7zuT/nPuP1fq7nYqgL5dVu9zq8wAQZARNzvlMUCAyT
2KcbVI1eGf15snZ7Boh4gtT++3iwv2x8jl+lBg1z12kYH5uBuwck04f3EcDP
aGSvvFs1YrTtqdjkMwN5oeullt54aHC0CxyiVaC/TSrb4h/MwO4ndzomAvGg
nHvy9v3TlejQmdPjyqYz4OpYmbJJnQC1E6P/bG+VosMzNnHtT2agnPM0ZTUS
Dzc+XtzN5VaKmKX2p9OezsCcUlf3ZCgeGpvsP47blyKBC5Gn6jG7cbNk+6an
eMi5Oov76tKN5tx20dN1WUARjSMmtJPhmLoxTlKjB109uC+fRGJC37VtNx8i
CnRWLilyW3aj6YSkWywjFmhc4jwlVk2GsycU6z2iupHojFpnlg4LJpK7Llq3
kWFYsufoelEb4i+8832shgWfhi+fcfclg+Wy+IHzpu1oRprnvH85C6h3f9sH
e5Gh4EMXS3JLHxI+GOdL2sGCUd5nZ0uKyED/5OwnsrMfWUj/NU3OYsLP9XDB
TEyvZcpfKSA86kWXLDzK83qYcHWRp2ITNrc1G5OlRX+UIhmjw4dZNjOgIbn1
pexRAuTfTyw+NVSEtmmKveV0mIEGFR+ne0YEeLelLxHiypCaR0u/o/UM6F+O
uBmhRwC80GgC11wNWnHyl+jdMgPvI5v+pjMI8Omd39It2TyUpXVsUgLrl9B7
+qId5gTwSg/vKu0pROp7Oxwio2aAQ6v0c/8LPJCypTjeXalAT7d+K8l0ZUOW
jOQpLn0yhIRQvwUNV6OicRO1UXs2piuvbfPUJMOPeq2HEtsqkEH6Owf/G2z4
ddVw92PM3zfWY6+2cTHKxd3+nXeHDZT/OPzkDbG9Ketv6/S+An02jvs7ZMEG
Xy5F4YHrZDjxbe7jqsA3xNt9w/6eJBva8KPPHxSQoen6xwXNhBI0m352xPEA
G877pSWolZNBsjFAfCUKkH1B9bhkDBs4+sN3HgsjgeosU6SLXYcOzbApC81s
ePacgfIziBDe21L930o9Go6p4LAPYUMgNXns3W0S6BwtwtHU6lD5d9NBvtNs
iBj8FO+lTIYtOu2/NTPq0K4oddl6bjbwuKWdy35PBjndPVo+7bVIXIOVYivA
BubYLHXhExl4i1oNdZu+oSexjyq39GN1taLuf2g/BY4oim1rSP+GhI7wkWm7
2VBWVmkYmk8Gd6cAaqZHFVrTMu273MUCz4HT3Yf3UuCJXJfyLvc6JM0TYixa
xYJkx9gdeyUosMFwT0re40pUvRBfUBGI1aGd3oTTZwosLFfPvrpdg/FkGVP+
Dgt6eCV7v3ygwParAtVBK6UoVr9bOWWCBYTJb++sVShwkdkjszOmHLVIVs26
PWHBc4NjUY9zKLDxMo9C+6t6FJdTNDl5GZs/u/TahuIp8MWmLytToh7t0tIX
VypjQWTF2XiO/yhg/Ffxj9vbesQ9YKOWifm3bNxyNhvzz78Ut5A3mYdCuDJF
B3+x4aGWP1cFjgipakEEqMxHRf5GNPkqNmTrmeqEFpDAWmg20vLBF8QdVXWF
Y40NOs/02DZkIpRFb3h6fv9XlPlJErpr2RB8eO1rYQkJOq57nxfl/4Cq66e2
szfMgKJr2eu6SSI4xVxNMfmVio6ccpxI4ZgBZZOvw0+niHCs/dZogkYM6hG8
5EnlnIHgylpXHiYR8usDAro5PiK9S82m7k1YfNULN3dVkcD+sfEpy2FAD+Zr
fcy4ZiCk4qVhAYUANP8jT4g8tej6Y5QfqD8DbO1a2R/yBBDPrXrv2Z2GLEdy
b17D6u3l8IufWv//3mmokdznA7FIM0Raq7iVDc4Bi3r4WhK88CkKXWXVofHV
liYCtheu5DyTntpBgIZEF9UHhHokgms+koFxiHoR01NogADnLWSFtio1oI03
5Xj/yc+AmD//3jJ+ApwTGBvP+diA8N3DO53m2LA8Jhx2pZMAxzT9r6+pNaPF
+KKPItj+bWM9+JSlj4dno151UaXN6KrikyOGPDNg4aUh/3MGD8Nx5d+XnVvQ
A6uXD+/8Y0NoWoXF7CQeZuYklNzqG9A7cauifdIz8PKL7Xr5ZgLk/kvqS8U1
ohvRoQfJdDZEnbQoVK4jQBPuxv7B+CZUdDilciPGLXyFB3fw/8ZDfvi4++vW
ZsQq9nddG8Dq/4KGqHguAWpeZv9cPd6C/knaXzLqwc7vH14inEUAmVTL+7+r
6xG/Rkl/2PkZMGOsNkk54MHi5wH3G8X1KCFvVxb9wgys0+6bKl3Aw8mS5N0W
LECLpq14qeszkFYksO+GCx7myw+Zqd+rRlcOpDVOeM+ApOnHBmlsf2mXPJp6
tKcRDXR11HuWsCHN6Er1xRgimMw8/5WxsRlZS1e9SE5nQ0xZzbOuICI8094m
IrnSgJLaF39nlbJBdnvUs/JYIqBNYi6Wuo1IPXZq1jMT4zflzNAbQITY+0HP
WtMa0UarrthKXzb4nz+duNWJBAKfiENKn1sQd01Wd3MGVifi1aVTykSo6/lH
K8xvRbuyAnOjgA1/lYx0nd4SgNST6XN3qAW9U8RLUrH5ttPVU+OoO8ZR2/LF
jDxbkUZ/Oy3nDBsIAXYeY4exvghuUb9l24KCrHNEyi6yoTvFb9L3BAk2CVmz
z9t1o1oOGZvEADZsL0n5WmSDcc7bhRBO227016u7acsDNggu5y5eOoPVue1m
0W3Y3mxuZou4YvZfC22u9Zj9SAJuu7x6O9rRrLtogXE1Z7vh294WPLjCAUXn
wXZUWffLqfozGyppQWIrWKu7itfYOv9pRz0JjvePjLFhwbDe1bsGD7wSgfKa
dzpR+PLUf9rxbKBGqaN9NwnwFhem5rOtB9les2Ep67FBIae3O58P4/BdLwY/
D/eg3ju78fa/WCCnqnelpY8IMitrVjr/dSPJIhM7OVNsDsdfFFzDOPOtcoWi
S08PKl/hWarF/K+pFtZr9xPhrgC1n67cjHpFbjw7fmQGpHs3zT3XwQMhHWkt
EFrQ1wOsE+77Z+Be6Vbxkn14MOm44xOt1oZ4yn4ceILpFPvjB0SuDOBhdx/H
j+WkNjTrfW/qtSgWx85AQU4cD3t/HODNiG5DR9c5L+3YMQP4ELuvTmJ4CNjV
HfElrh3R7PQ2pWI6KDBYfGRrCAH2HLBhewd2oBPe/7qL3dhAzDWfYhwlQt6P
CuvkA53oh6tATMteNqAY+98/eUiQt4A2GG3vRB90J2MTrrLh3d+tMUJaRDA/
9RXdretCIYmupwW2s+GIWczOW/NEkLdVcnOorEcZP0J4c7F+CWOezPlxHnsv
+7Atu243IuPM4PYLZjPwsOde+3tTPNC6M8U37WtGjq+kvJ5g+fFN2D7aieWH
l2amhefuQHd/qOVav2ZD+vh945QKAhy9r2DnsaMd6a7mnKryZ4OWU7H32zNE
eNGdNpic0oFySbfU7A9i9SkqOBsgQAK9cLvcL/GdiHZyynfnOgvuTE/07HhE
Aim31BwlSifqceCyDiSywOXiIY+AURIoB6kfLjjRhdYlC/kqxlmwKOYYPNxP
gsNNsq35fG1IqX9lh9IWNnwlGsW95ybDTPCb4BrfNlRZvKbTbsSGj6z84esH
SKDpP3OcvaEDXYXSxoofLNgkfTlyeIEE5AqXUHvjNrQ9Ulx08zzGbx0mKVuV
yLD64VQLb14nSqZu96Ams+DFZf5LTy+Tof9U5G6vNOw8/T+Ip6JZ8NL23cq1
C2TQKR8Oq9/bhCLwjrNdKhiHSPI6zkiQ4cy7IqP84ia0GjKbtXuSBSvr7zle
vyADvNDavyTTiKzEl1MDtLG9wG3cKSRNBkEFZaUl+ybE990mUoXBgkO6ifH3
X5Khu5nPkS3dhL79TCk09WLDBvFbt3/bk+DrI/x/nfea0dD6raM4WTY4ON2L
HxMhw1KD1VJceSvSErP5L5OfDZvvvfmev4kMMrhsRhBW5+b1iyJ1fRg/8AT9
5HtEhri0FsIG5zbk6Gi9nunHgpvVTZnl37FzplXs+sXXgRRjvQ2LMN3Rqnsq
sxjTHctX6i62NjQj3cdWCx9fsWDbzn0PL/wjw8Xh2UhP81Ykvnfe66EyCwzn
3plN3qHATFfgqLd4D2IGxYwZP2SBjuXLhXxzMnBYBctJLzYhIUrp912NLOjr
vKjwqJYMH/Q739pN9CDPXwG5ucssCL5jcOPeMBEW7xUVl4u1ItEb0wf1X7Hh
xFeGhfUNIsjKdpgvfuhFBi9UqkRzWRCyyz10/h0JCKsbVz2Ce9AnXUJqeTUL
7g7mbL6XT4LxsqxTy1/60LW73wJFeTDOt9siaPWZDLoem835d/ej/nf2S/IY
tyvKlY6ex7idgOrFLHX70Ee1cZ0JBxZo9k07VmuTIevGjkMhWn3oz93afGNH
FgilLor/w+wRhge1x/X70Dc+L8dJexYEup34z0SXDMvP/zN3Ta5H9St9xuGY
f/Rb5r/MBApsvVP3X4F4Azp6J/uUHwcLfmm75Q2JUaFD1XEk/wWgDwLfi7uw
/Mf5Kieqy1DByVNeIsOkCsU6N+xs2cOCSeJmlrYiFfZcevoHr/8NJZ9J+HRK
jgVLeK59QipUOJ7+u/yKWDVqvZXHee0bEx7V8ZxglVDhUQKXEkW+Cj0ObPfm
qWbCMNfQ7eEyKrQH/S3+pjqEthJ8avQKpwAv6xobdpAO1190d79VGUK+R5ey
HhZNQVLW/Ph1JTq0P6x/xK84hExtTogJFE+B5x5B7WnMftH9z5uWqn7kuwBm
R2SmgRa3c2zxGB04CKa3Qi/1I7simX2ar6bBwyeu8/YIDTpstt/4kT2ACP3O
elNu07DHJCebu5wGlhu574TuGkD1TWTp6vkpsP96+cm3a3SoP8idztkwhPBS
OMqBrVMg0a8aUllLh8GglWHljEFkbRbs0X5wCtauHF62JNGha4vU28vWw4gZ
cSxu0HYSfk8EBdtgP3uixo5kGDUgvb+TpGw1JrQfN1uMVqPBQNsnQ5fKRvRv
qLgxp4ABHoXeekJ1NOA8Syk7ZlGD5q+sFsaZYvlUCltrPUGDf70uckoVgD6n
nrXt72QAJfNoTMswDXipUSXOqo2IR+P3hsYDTJBc55CyVML81wuFtzQ1IqlF
hZArWHy7GD/eIaDB35lqu9r6QnRjtaB0fyQLulROn+WqpoCo55fEUVSEulrS
x38cYsGRzWemfuhQwXEwtuNPViFSkdXN3YPNJXPuy6MrJRToldd9v/DtM1J+
myvGm8gCs3VPC3YlBfqffZ21MfmC4mz9jxP0WHA/a2i3wjHs3kPr6cmVhYg0
6qnwF+vrh1qX99OxOFJL3ieXf9ShJ1cqotYzmVCMcdHzz1To7m1STsf4c4m4
uLEziQn5zdnd2alUmPdWzPD8Wo00D1/46O3JhHtprqD8Hw0Off/zM4jVi975
3jWXFGLCGz23U4PY+SXvNN8459aHQGp/3ZMkBgy73a91q6XCiZNf+zjmupGL
7Fra1/1MaD7H4+1qToXGDr/aJdE+lBbpcFo7nQEjEbfDtzZTYXlXTnB7zAAa
7LlzVsSBAbMLTVvHX1LhTcGkyokdg2hm30Zz8vg0bGvySdYXoUFbwws3g7p+
VK6082mNLwNeB8x8+viBCtZqT5VZwoNozsR8642JaejQw6tlY/75CQs/zkb0
oah/PVfNNzAh6ftOv7PKVAiWely9LNmFhMrdDI7/ZkD/keCGL9VUyLkseWjL
m04kOnQgrsCICQ9kPD62OlHhcnXYIYHmLnTQ0eXT124G6FKupF2dpMK/YZq7
qEovsl3tENznzoSDB/UvdPdgeurcqbmm/g4kSNTb1JHPBK4PcnRuIgV+GZRU
LbA6EZur4fm+dCbcLlmr0BumQE+L50PGtgE0lnjDaMsgVrdj5iZ8glTY9jfq
YiPfAPrqdZ50a4gBJvrXz7oLUKG0siF6Y1cH0jwosxBjyQQzrvRhPVcs//fm
7dhCA4g/M8tmHoszs0g+JYj5W3e2VVn9N4iuZJMH+sam4V+U/Zq5KA3eTKLw
4x8G0YGfewQczKfhoKvSrr2pNDg9wr019Ww/on7Xq7ktgJ1n9tLiyaM0OFZw
8XgrpQ/xeLdcihRnAPvP6s3fJjSwkOjbE7alFx1QarZVOMoArptfHvk606Bh
+5LG7+o+NBG7W9Ls/TQ8GX+x2E+ngS+PTujt1D60a5NWMuEq9l4xDRkCq1Sw
ZZicdSQ3oxI8r942rM4l1e6eWHyA6XGuqYWXj1rQViuhJhs8Ex5u2nGfY50C
zkr0P3t9mrB7t78wcpIFvHMTfn5PKRDisdFFbqYZMda/tBVRmPBl9KRWzQYq
6OmrTkt9r0Y+HGXULDMmuN4s35dsSINE/q/3eXtr0MqGk6y3/QyImRCUvD5B
g/g75c+dGG3I7ZwY35MmJoyn7l27PUMB7130DV+HGhCKbkuirzJhE42avyxM
hXRzxc1CnUXodQKFN6SXCVnOEbc2YHV+7bac1G2HYvRO5nlGzRUmpvdcMlTP
0WBH5KYh0/slqHZoIlOxiwlRtrf2xDVQoW2qOq5zrRQJP983a+XABMeH59SF
rGjwgneDxfYfxSiTPF6VyWTAQ5UHzPRZGjzfHPi2mF6Orjg/MFClMABXcX2S
OEWDXOJp3ViFVnRMUfa7iC+WB9e+faEhVCi0vVz/fLgVPd+saOO1EeuLvsGV
1/w0eGLG8ijUbUIB2kXhYi+ZsD3SJMHzNRVOF1nF2o43o1ulQSVNIkzYwznY
+kKCBksb5pLDI9pQu/nNg7efMUDBPEjZGKsfevR6elVEK9qYFzO9+ooBz/S8
WpmfaDDLxxeie7UL4VQi5hQHGHDu2w3/PgYVOn9OCm/A/Hddb+m+5sWErZLH
8UPBVLjJQY+pvNyOZDwdgkWXGLDBzOQ8jYMGOXxdxwemWtDwuetFfClYf/1e
NKm3xN5L9+/zZvOPSO1q9WjTMWz/OsrfJBpQ4akvp9/c2Ed067TIPB2rn3dx
vwOre6jwHZVtq9H4inpeJ1vzjDGhu6x1Qa2TCp5h0NDhn4hs7qutrxqwwMav
j3nDkAqKb9YU1t2SkV/Fw/iNJCZIKZ28ZNxHBaEsjg02m4pR+OOGk3fVWRDA
M97B0sbOr+ykndfyAZ0LicQunwVauveyBGsoILup4KxsegIKdotsikhlwUzb
vX9vaikQuoegfsE9HfU+mt5YfhubPxm3/w070eDp39FI1vNc9Le6EJuATPBn
xX6UdaDBXNrQmT1+Kej2n9DFEm8m7AvqDrS/SoOW2rlUKa4MxH6TTdLG5tsJ
G4XaUys0iEs2CYv5l4+qA575Js8zYPA43l5jiQbUdxdfRbxLQ7RNG0yE/jCg
YNOzoaY/NODaHz+yvb0OnfxpdXXQjA0riZs65hTJ2H5Pzb9HrUff7DTmwtYw
3ssKvbX+/+9vpGZHp9Nfo7uvv0o+XsTyQLxyO+UoBVjX4ZKf8Qfkb35dSgHj
9qzNlWq79LE+JVtOHdAtRBaP3y/domN780KJ4TtNCuxUdbP4uvoJPWvV+lk+
i/H8qMWNKF0KmDu9Qhb1BWhFQFeQU50NtXU32JNVZDgrE8Y48rMTPX7xSsF4
lg1La+eJ3Qs4KD+vpMP3vgvd89yyeLGcDb9b+y1Ck/EQdXAe1xXcjS7nmO5t
/sqGAMevEi9f4WF+/ebNXuNmlFVtmi4Wz4LwGxUDahspIKh1WukEby967fUu
ZFyZDe0yMVkr6wTo3rf9/rpsL4qK98k9fI0NHTxn22maBMhLanQyCuhDQbpX
foli+s7w6YO08yQCnAbirsPijagqbep2bybGn6J4lpIABWoMVRrLzr1HZ8et
Nu0MZcPa7xArkgUZHmv/099kmI5M//NQLgphw+3CS4VbMPsGQzlf5YNxqF/+
4dM7z9hQsLJy1vA0GQ5Yn88RaoxHPjZ7nz5HbFhf2uqn3UQGWo1ULqXzPXoZ
rGmlpc+GMr2fQx0NZOAPaN2tMpODPKMlf9x6wIY/o5HfbEzJcNy01KbNvABt
Mzu68RqmE03CX8c/MyHD+9DXKvIteagmV/fuRQ02uLOyHc7XkOHJ1/CaP28y
0A/vSJy1LhtOtxtd+FBPhrJrGRcSggrQju1GD2oxPdUfe2Td5zAFku4cL+2W
7EchZYOzE5+Y8KnlVv+O3RQoD2peuuY9hBy1P9snRzBBW9/2uQWm13KdOg6p
rwyhIQ1m36ICE/Z25IZRsfeyVh7e648bQhveTgQ7BTIhN5cS8tISs6dkGf88
NIJwXeM93CsMyL7p8iHpExk+3bhp835nBxovi1SXE2SBb7hn0IVrFFj7ZpzB
zhhA3NqJRS9rmUD0vjchHE2GjS98f3hiXNHLYd/75SYTJFweeF5cwPTX74X9
UY8HUCD/S0OrbiZse+Wy+jeEDK7S5eygk/1oW04Vu3yJCUHlBXYxyWQ4fI68
4bX7API321owG8wEXL6NTTimv7QOaJuLyA2hnwVmUhvqmSAmrmH9UJwMnIFO
5D/5g6h4+8szI7ZM2FBV4eVPI0PK2Av6xq29KLOpi272gAl82/ZNHsL4sNrh
tMdPfB8a3UzR9zjPBMbVL49fvqfA9eLJubx4jOeHNE/aGzBBtf9v5FQMBTiP
NuyI6utBeYyWChPsPKKWq5MmGK864biebejtR1faKzdKYDpIwonxXTiDBOZ7
dIceZvaj2D8ZyZfuYnqw9qv4TgcS9EwYdwp69aPnFX92b8V04lOGXQ+HMwmU
twvhjx3G8rD5QFNTAwt+0u6l58UT4U29A+89n34UcVnywc0qLE5l8VeTF0T4
TnLN3x+Cccsj6YYI7LmVu7eP79ElQfFq0ULex0FE5Lzn/3CeCV7a9Qm7Z0gQ
vW/0qMozjButFV7aiLEgddfB4PP8ZJh/UhuuIjGAzDRrHeZlWXDxlINiuSgZ
1P8Q58bt+tD+J9OyXSks6KDMpw9EkOB5evOWWed+5Bc2J3HhCAuG7PaHPpIl
w7n6aANZnz7U4nRNZWWcBd8VadyH8olw7nyzisOmfpTY0vKFRMF0dMKrfMfj
RKgYnbt1N34A1fxqEmB2MOHQ0SAO38dkqKzzrNpaOoi4ZWqf9WYwISCxyU7Y
jQyOeXOVd5aHUPQ96vaH+5ggd4q/6GgzGSpkbqj1fxpGCv3NDNPbLHgpbWDI
N44Hi4qjCZd6h5Fwo7935HkWXFspKXEXIsDTcvcvJuQhJJib+GxzIQuciXJB
4/fwsN5lonGDZwix9TyGffpZwLmhW94jCQ+1m/I5/5MbRsRI4bPHfViQ8mGT
Bv0gAR44sq9kyg+hzW4HVwWwPZXnKTU9bEqA9Ndvm8Kx81dwfEzbSWAB5QHT
fzwTDwGL86oB+wcRs+NKXCc2z5X6JTbhqvBQLaZCO2gzgv70JZZSeFkgIGNm
6VpPAJ6hv0rMMyPoSmYH/cYWFrBSH7RzNBDgh0OQpLr2EPrPvuJX6GsWcJ+Y
auqyIcCkeuDTHfcH0e/Lrnep/1iwnMx/NcwCD2aWWmy1vwNI0/ZYV5sCG3xx
ywbWm/AQbnuoaGb/ABIIS7Z0MWSDxlMuc5wcHqxnfw4qHx9ETmaP1u7uYUNz
mkdVyToOfoerpGqcHkYjD8pkltJYcLueteGDCx4cN7i69/UOoih1/+MKW9gw
lJbXVcPAQZKnqaqRQS/6vD+O83odG7yv9ftMNeGg306qK3O9F1WuSfmUhLPB
r2BHnYM7HiYYhxVttXrRhEi5jkADG2493VNgV48DmWiWlU9cN7IZGzTdOM4G
9bCFAxZjOHAI3Ki2pNuLsgd7DubEscFOo7Up7y4e7ttLtClM96P5JOvLsips
0DGZ2z70Hg+LBfd6ZDC9IG6708hFjA2/BJbcl2l4yH/n+3G7dT+6c53TZ+Ey
GzTJ64fMjuMhu9BFt8q/Dwl3zvJdDWBDdr2vX7wDHtzjVe2brvcjxf5PscJK
bDD3EfxPZBUPGlnhLnqLnSihakPW0+9suJyhvt47i4OiVGdXvH4vitEK1iyo
Z8MhWbO81Toc3BL8++3ltWFUMZ0sMqbCgoj6I7NtMwRIWheurs/oR0rO1fMf
bdnY/bVOZB7Gw9LcjpyJo/0oYOfP3bqv2BB25FZccRwOvAW8dxjo9KOh00bb
fkWz4eTh5ZYT0ThI+SWf8Ny9D83ou/ttymbDgPiOcOsvOPjyt1Do0TcC0i0S
tLWQYYCzXB/Pu1ICxNSx9807EdEi3p9D69s0pPZc0fjpQITwC8LbTEsJqMNO
qKtOlgHzWtTduzD/fbtNKxV68aiz772I9DkG3EtuYYsvEaDlrRfPP0ciUjhy
g4uKxTEeXd3e70gEPKUjyzEYj2L+aXqdO8WAzZcSvQuuEGGHcs1MuS4eDfMm
e1z1Y8BTJ5XmmJ1EkJaXTjIn4NCHS3d11sMZsE69pVCkRoTB28lyxleJaMOd
NEmHimm4zGXJaX6JCL4burbdcSOgguPnpkzmp8HNcC3AK50IVf5hLtcHcYi7
b7Mtu4QBOdtNM+yzCTCe8W3f4zM4dF5wbu31JAN4WjqQ3GOMQ667nsy+MYEW
LTUWirczYVijS7KznADHcsSivibjkKrg+b86IwzolRSNnr9FAF21BP5DFQR0
646QsTiWn1gNc5XTJQTgLuEbOnsIj2IH3XTSyjDd7fja6wE2H6ZTiNlP/w6h
b1et75l2sWC1RUJm1x8cdF85MluWOoSuzW5ReMFmwcaxq3V723Ew0YLkXw0O
Ic5DxzY+obFA8cRlPxxWPztGcySyBwfQL/0WPkF7NkirKVGDLuGA52/bu+Vu
bC+vuTYSL7LBlug+oHQRByYVVsb1XAOIYqJ/YeouGy46+5YfuouD06+kHvvq
9aMXO1rqorH6sfQW9Ce8wsGykJP0LgES8tTM6ZY4OQ16cltDtm4hgd7EEwu5
rSSUuvmkaidm//NVxHYZsxv6PMkX7R9A+JPV1V7Yc71aIntq7XHAF7SX2BM/
iCbLYxaYGF9RHN3KtBH2vkZxMpqOQ8hX3yVQRoYNEvhdmnKyOKi6373jqN0Q
2lLKnbZNlg3lHfclr8jgIFDUKdVx9yjiO8yStsF07u9yY76Nt/GwxcBc+Znz
KPqmcfzNaxEWaAdq3YxowcPRIE2u1xEjqJxPJ1XTkwUVy0XUEBU87LsplshT
PoxoSa/1k16x4H2A/Us1Gzzs+Y+9R5g+gqSJ5btcDrAgXjV7PomIB6tNX6/2
No0iJYEzCWROFnwaD7wtUYIHFb6MdRL3CNpMJdLHLFlwk9ArNMiDzX/OgAhT
5SEU96Hw4s83LJh4IGbrfI4AGvbb7F5/xezqhp8/nGLBwPqF2ed8RKh9EZUk
kDSA9sgXvnjQyII9Obe5GbUEWP7QFQQYL/2c/Er1HWDBwgGV1s1vCVDpLHX5
0ulBdOA337+UMha8ejrnctafAFbLeZqP3IeQsKVJqaAtCyw1I+LO7CDCEULB
VafbmL+N7q7Z+5j/EYl482NEaG0Xax6+OYyu/vecnxOrwyzTcf6kLBzEyFQ5
1P4cQGszDSYuz1lwUpr/zR5rIrwwxBnq2Y6gQ9WH2o9he2rtvy2pvdg+2jAv
Hfnl2ChS2NgaW09lwqrTtZuF8QQoPU/8JWY/iMjb863PmLKgtdLq3OoCEUZM
I/iN7g6gp3tuzPgksWAvzdA1+ToRGHMinUAYQV5u5BMhZUwIeWMxVHmfCL0M
PiPv1BHE2X09HF/HhGdcCfH/QonQYfHl3AnBUfRG+uK5ugQm9N2jni6rJILX
yI5Deq2jyN6vNtMA060zmRcsfyECvMpKzBCYH0U3jjQZvGxiguQsZ7CyDwE+
xF8rnecbRxdUeyLPxmBcfdLm9gctAsQmF9i0yY+he3N3p3dWMaHu4dFPTq4E
+PLU/nWM6QCqes9lyC3IhtIvPbADj3GCznvxQ9cGkDVnUkDgCAt+5N0i+b8j
wEiMiKmGRR9qch0pbL7ABp9LS3dSf+IhR3imIvZqHwpXceZ/eIoN8U3O9Ne7
CCC3RVr2MqaDcrpfcxefZEPw1VLbdzuxeRvmkWLT0YdkNg+SM3nZMEcbX/4+
RAB3YxXilEc/WkoKdGQss+Dvl2e79wIBlBIfruieG0cWJk71AjtZwJ5OkRLi
xPp6w5ffx83GEXk5NdhAkgW7Ta+4n/o5Ad2BZj+59cZRbFTD9j/SmK5s83Pc
uTIB/3blpTo2jCG7IV0XL2cWBN6XFnV3mYDZ/VUBoT/Hkfl4q23fOhOOx8R/
bx6cgFBv8fdLCIcsO0l/fF4wYVpF2qUD6/cDq8Gs8EcTyHF8tOlZMXa/ZeN8
991wYFvm15c/Oo4uFbBGGUNM8Cv88FM4CgfG4rs3hASNITRkIhZoxAIpb3p6
7W5sPiyfCyupGUczdn3rP8aZEH/k0h6/WBxsZ564M144gaINpAfpo0xQM4qf
t8+bAOcDKuPfCibQoScVhv5jWP3Uyj3QzZ0AqT4z09+5E8jnzuJ2XixO0hl1
di9mr39stPtM/Rhiz3p7/sLedyT9TMMp5wkI/nilo99rHAnrXbR5fIIFxqm4
kBGDCbjzulMTbEeRzaO5gy8xfWpnP3I28vMEdF5rOFxtM4o8BCmDQp9ZEHJ7
NOBa5gR4yn5//5h3DAWV7/LEP8N41S98UuXZBMgJKJTXGOCQXlpnITES01NT
lvpKWN50d8a/fFw7ho6M86kEubAgQyL40QB2Hu9JqQjfCRw6FvZ4NVqHCeTV
EI3eERzoc3Z/tvXFo328N+P20RjAlYE7+M4LD5qLK/5eIzjE4G30GDjChMFk
y4vGmP8B0QPDSwI4JHvYTMnUmQmcrV828XDhofFEnHCgNx71Ljv/asbivOG0
4j3jjQcRpQMzBuM4VH17IkkHixMtH1WbMoyDAdugH2+Jw4huPEuhYbpV77Pb
ZdrUBJzyDS36QBhG5cUDSlensDnG/KVVPDkB6uEDJlEJI8j2rYnwm1YWJPRU
Tk63YPk/k6fzr2YUTSju5zh5gwVLcsqbs4/jYG7Lxrynf0ZQwdUie9sIFkS2
KRT1OuPgiEaO0JcJjPM3FHURsPhO+4uHlLHnln+3CPAYG0Wq4bNK8ddYwBEp
E9SrhwM5mUrHsbOjKG7qlHUsdi/feH7/pGP3MpV01HDqBA7FVrmEHcPyf9X+
dbrNMRyMZs5f3zY7jtakXnz0bWcCKVfyFjEdB4+yLj6vvtEKhW9/vPDSAjjv
5rklU2sO4+JS0u2IVkjkzfnP8lo+/GO9257gPAcn0Hlpfvt8iNn1uS4ishVy
yJFCcZh9IcRhMDYzHz7Ji8qtFWBxhAe91QvnoFB7Wsg2GKDCsyqkOQTAysH0
8WrIHAzbVW2PzAWIMJSvZ+Vj8T4KkQ5j/jr+xybMHIZQltS/B++wfZq5xWPD
jDQOtML3nn/N7kTuHl/6JjAuNbtbKCv/HQf/dkd16slNoKWXdblj2ByIT5Ac
6JOaAEL1sKin1ATKe/AqaE6KBVd+TkUZYXYHg1S1F8P5wOFS/XyWmA+uBVfi
dclzcE83aYAjcgw1XbhrGMuF7a/LcZe7NuOhb/loxdXZMTR/uETrbg8Tjt6q
/6Hoj9lR2+aXt8bRXcGPkwbYnJe5k+N2/xIeQuTefN7+fAI1Rozbyvpic2Mh
VV7NDA8oje+a7QYcUtfhDO1SZcIpXPdp23Y8GO3oDhj+gEOXMsp+lQgyQes6
42FoOh5c3Uu2vD44jn4vp/r5ZjNhXY4m/6gBD9/COptxQeNI1V32i+ADJjiQ
j8I5SWwvVK0vJzDHUb8L6WaNK6aXtwBj92YCKB7gL/nZOoEUyjNtpfWY0M5p
pXlyBA8ev/KPF7hNoBib7FdRT5nwldwfXLkPD1cNagaSnMYQ472H1iMJFhwa
Oa7miOmUpyNrLwN/jaGzVsIfCv5h/aIrW15ciYO99jckWvUn0H/pxp+OvGRC
puDeXRbqeKiUTkhFogTkYSFz9slTBjykJop4byPAZi3BEzu3EVCI9bj+5DMG
fLt06uQspmcrfzJKV7cT0GToB6MTmF058uy5g5i9eHDbyfMHcKj8QbvMh/+Y
EGnxQuX/f3+sPmkywHJkHD122T2y25QJ+r7qokeeYPtljNMt2g+Pjuk5lfpS
GaDuTGoewfpdcda34VXACHpT8YrrQzwLmmWNymsycXBCPdwnH9vX1uuFjuaX
WfBx6XZCjhQecEt0/B6NERSRZxyX8BXLgyVvsWwYDggaDKLnxREUnjYpL/GJ
hekKRYr3Ixwo/NDA0e1HUa7LLgsGxgknItBmPC/GaTzsBvrBMVQSOHU3Rw6b
/xStWnkqDkz/2+fj+30U6Wu9mtl+gQUz5vUtK7Y4cOqOTNOUGEbD96JSLnOz
Ia1TlpTPhQNhInMsKnkMfd/+/HowgQmPihOZDc/xEPSq9ATtMQ6xNMe+iXhM
wx2yaKQ8mww64nsP6mCc/1QyvsfKbhpuFa9XVf4hg/eZsWilehwaGu7T+nl2
GkxYpsedlsnwx3vq2VvPcUTJ3nFcb20aBHyIF/7/edfzw14+1theq5Cw9j+d
Ow3se+o7erQo4KuMpu3uTyCbI2f/7I2ehl8XrlATZShA2y/UbhxMQOfVHg58
wU+Br/BN5doxMnz+E6opZ05Ax3ZyXPPcOA1x8487nleRYdTNd05kBY8Wsz2+
JW6fhhKrkAGeNjIk89Ztzi7Ho761iztPe05DZ94PqZrrZFjNfyzw/iARcT5K
V4sfmAIRE2XZ2rdkUDrjZiISgEfv6mrOZz+bBtcsPS0TRzKk2esdPmKJQ5nK
hVEnGqYh+3IRo+oZGZYX7HoiFyeQOEmSSBqcBuXct4OrsWSgn9hg9nznBCpZ
/23mheVBmKtD5FA+GWqfGG6X1hxHU8cCU/3kMf3YEZZZ1UnG9ulTLYHEMTR8
se6SYjym78b7P9VcI4OrZjY+/TweBVi1PWxqn4KCe4dKU25RoNz2SvKxP3j0
xI83Z9BkCorHgrI/DFCAsza9958KHuXL46fOT0yB10uPU6s3KPC0Me6m3MAE
ajruFBC3axoOv7mX5JVMAU2BiRv/JeHRlhyLmmr7KfhXma/QQKHArMonx+cn
8WiAbyE/cngK3BuHEq1dKOCys0PRbgMR/fV2JxcKT8GdJ6bHpbMowKW9+YvT
aSL6Hj1ela0/BTBy0/HtaQrE9FJqpEuJyAkv8Dx7ZhJ2kwzLS59ToNVnYzRP
CKajW/Dn7ryZAvJMvpaBJgXcRbnNYv8SkKDX3AHvB1Nw3fhSj7c0BSL+7vh2
9uQEsruQc9np3DRI2W+u3PEEO89/NJzlJyKaboxBeOx9jea5qv/akuHM2d7K
Pal49Gx6H9sseBpu5pPs9l4gw/0Gp35BFhG9sAnLU/0yBZK1tVs/BZDhgNW7
6qI3BMS5vlCpdmoaSl9GqjMPkeGNoshIsxYRaeSu4o7tmwaOza+NkyXIULbf
0XjpPAmtG5at3YmeAtfMPNrnG2TIDKKnbS4kohby0Ukr/mlQWbg8R9pMhlkr
4XZ+HTKiGmbW4C2nIC3RVH9Zmwwn3sTnrtSRkIGt5xmzninYNZmd0V9NgtdH
XWJeHSGjmK0JqvKY/0/Bgobb//8/SgEnXsVXk9A3/bzaX73Y+QUvRjhj/rle
Ai9jgYRWf1vuM8TsCdF7S25WYTo0rVyLf5qAiLVmB39enga3mZ0VChQSbD3J
77fxJw75ZUmJdi9OQ+Gh22bG8yTgsTA0K/mBQ9Oe1uO5S9PgN7X/Tdt3EsjZ
IeuPnATE9+j28c9V0zBXqboilkGCdDWiX0/pBFJ76+VV+Hca0kwTpd57kmGz
vA07y3ICaV4/akc2YkBg87KRijIZ2hT8+SUwXvUivpkbdGKAjO9C1N5jZMAZ
Gxb/TiCjrCRu1W2Nk7Dh8/3srtdk+PE2VOLTMhlpGsWTOlQnQURnqNdjiQxf
WX0W316TEZ9LcQqzaRI4zfo132P+f0ZPtl9dIyGTnBbXQ3xT4MwtHjSH9del
GJnuPT/IaEXO+MxztUloND+9l/sH1r/vH8WMJYyhermkqxtfM8C+ZKvN3FUy
+Lopq+eNTqBnb1JVcYoMeF1JmB3ZRYYFfdHdqS4kVNBk4lxlMQVqxWEdj6vJ
8NtkScxEl4zmxPYfEcfs8FBbVUGHDBapa+H62Hs9bZ+5qYydM6Wg4O027JzG
D3STPcspaKMK7xAHiwbGEaKLEqUUuKrNcMguoyDub69+O7BpcC/7TPeFEgrw
OoQpSpdSULrAioHUDA1effnqxIP5n+Z7Gy1EwfJmZfy0z4kOs7eebIS/FLDP
vX7mxgwZ9R5SWs4xp8Nj6qvqkS1UMFLd/8Sfg4LI1lmvhgwwf4PQBLGNVOA+
NTmQ9R8V7T3D3S2jTYNkh4+3zcSoEMfiou7ZQUWJ13fdncbsA0cnQzh3UKHU
eRvnzZMU1BZXLGeVQYP5FsrnWQ8qaLhf+JJqSEbb1qb7697SYfSa+kY/SyqI
VBhYPPMno7MEvz0DwpMQGi5s5RBNwfSH/vL+F2S069OVjWFLdMCFdfvoZlCA
wzdkHLLJ6I/d3TdWk3Q4LaT6wOgtBeZd6xdI0iTEG3D80du4SWDEKVL7Wilw
w6B9653bJCSWp+jnajUJpUJHf+35QYGKob1Yo5JQU/xVrWzNSdhxSXeFjaPA
tbQ7yozfJHSPs0/4PA57roWt73sDKrxI87nKRh1ov/7asVecM3DX0Z5/fCMe
ttla8xyGTsT19+Gbjw1suPdzvEnhM8ZROQe5biS0oe6jOgmdYjOQmRI4JSKG
B9+jwbc8d1KR1q2d2QWHaSCu8WhBAMubrvl9TUU7ChLae+zIdDwNvP8bHk3w
pIJqtr7yQVEyOtBQErRSOgnFeXu7nOQpIFJ4I9H+IBm5aGu63301Ce1PRtwV
EAUciSdrzGyx+SAwzCn8cBLeBiTye6tS4K7D0ZWA9yTE6l3/IiM9BWaa8XZU
HBn2DqWFXPtJRoW2ZepJKpPAa8S5RxGr//tr96MzLpPQskc2u6Z1EnjeKZ5T
8qBAy2CtqW4bEWUOLUsonp0CfqKbcsAGCgxurdjGZUNBTiVbhmTj6bDXv2uc
aU2BPznOW17YUpDMTqnPV+PooEuQVjPB7GWnnilZnKOgXOmBc7tj6aDSvaqz
2YYC189JFgpoEFC8mGOU5n9TcNjQ31zlJwXeJqXHiz0mouLz3of6QychN/X1
QsweKhyjJ/QK3x1Dl/2fjfzDeFhmncuCdwcRrmzyGNFzG0EZQbre2vuZcH5N
VeeQGRm2FKbMRfSNoCt9lkdekBmgqzr2xxTru+C/fUcVnEfRyPzpnJY2BlAL
C229n5Kh+/x/AYOB42hHsuUS9RgTnDsYQ+dm///5xpgvT8QY2lqIv87nyQT/
+qC4HGki8Cs4vfhPdAJ1WHR3EWQxHs6baF7sIMAwU6jxdMkwmpf4wfsknQkN
TBr5ShQJXtJ56EtoBI3/fimWa8QElyUjbjUlMvA/M/yvZHAYPb2o556bygSl
/HPdt8JIEH2KfkdOfhTpWu62EJJmwnXRXK5GEWzO/D121/v7INJpOriRY4oJ
5b/bf2iSSDCZlaFqXz+EKoYlE+itTMAL+b1VqCQB692n/EucI6j/3EcTkdNM
kOO94K+pTobylrpD9vFjyPSYlmYKNvdSPsWGn8N4I5x/NIaYOIp2TynsWn3D
hIptJ5ccrYlgyXaPe70whuTbPHyP7WTCi4cPonRpRLh5m6h6bm4UsYeiNhUa
MyG0IFtJQYIEfu40iSuPsPj++NWmW5jusDMtKpMlgnSnmna06DgaaPi2VivM
BJaowqIOjgi2Z0t+Gj6dQHuEcY9oJAa0plocEzlFhBXZ5xl97Alk7Lq4tfAb
AxaJmjkfPInwY9XEH36Mo0oj6XPuTAbgCivFL2UR4dNed2X5AozHxhoN3ZoZ
4KDOpvM/IIJVUVs9MWUYTcRXhxwrYoJRUatKgwcJpGZck6IODqPK3RErn/4w
4Xjs8nBAOxHwr5dzXRKHEIcJ/cFnIRYIfo2bf4m979ter3Ot+CF0PExkzeog
CwQkzQ4J2BAh1Gck/VjqMJJJbFC7w2RCNtFEb2cpETS5eM6PkEdQ+6UJ8eU7
TOByCd6MtyLBC9npDiWPUaShr+I458AED+O7088Ok4Ar7+DUCa9BBPt8feAI
C7TjOA95i5JgaDFia0cvVg+8DUeP7sLO3zq5YoTtd4Wh3K1h/0bRNeu4t+/X
GFBZJVpF+0OCa9IyL9dfDaL8UtHBK4dZcO29So2hEAnj3z8TAYIkFMj//rea
yTTctq/hv7mVBMvpPKNatDHkxfVdueEQA+pCy6i5w2QY+891z3Y0inREYsSu
RzOgYVdh8IdJMnh9nJDJOjaGYtvKh+4uMOB49iX5pBkSrDYGK/fYjqP91Vpk
tzoGSMzwdQ/kkuA3qe+m+/dxdLXutGAypsvoSi4Vq5Mk2JT9fvH+Ag71uMQs
2PyYBsJQ5sXPcyR4+ktvbvw5Nh+k5OJmU6dh4xBjY+dDElQ++9HIt5mIiCY6
hlZPpgH/vXh07QIJjtY6KRiljKJNBwrEIm8y4EliqWv7Khlu7dzH+qL0f/2b
omHROQ1J3zodUiwo4HDW7trn/HHUd9u74Fc+Aw7/ajvZ8pYELU/flzxWHkf2
nqWRXJxM8MnY1slYIUKgJz70sTOmcx3m17a8ZMBZ7ewFe0+Mly7qVHOfwSHO
+xGNahjPGOtV1uWok8CM028k5AgOeWqpZ269xYAcU+P74uIkMH0pciRFlYC0
lMYCJ8enwUBq6MfnPVge9C0m7pLx6HvEbrUOfgaosF7wamJ1KOo5goo9cMg7
asuOQHsGHDh7uMxBkQQFGhct7G/h0b4rHFYTmI4owI3pcTCIoPTqzOeE9zTk
S2EdT5Siwbb7J7rksPlG3pRywnGQhsJyLBYtW6hQ8USylozpkdZXzVXSB+ko
M0tx++toKsiyHxyWekSG4sbIqj8MKspW5Zd/nkgDw57T7xa6yKBoV/m9Yj8N
fVR/vq9SgQbF+ZzkuzwU2PfBgx2STEMK64oWv6aocPPQdMA05g9PJxSGkujI
ichmntpFBeGHIQWd/mQ45y1RtfkOHdkYtLVkuVCBunFL7YodGdxYeW9xiIam
72iJTfyjgkA02VlanAK3LBw9Jjho6E/Yv3CiPg3G6rh/yWH2bQn366vM6Whu
pm9jYTYVPAOpSXa6ZHjADPBYFKYjpvriXSEhGsTr1FTL8ZOh/2KwR2AeDY34
XPm4ak6DxbrYk14Yf5591xXq60ND1tHJL/y8aNB/VTr49CUy7JPf+zJZhoa+
rgpYvUulwUo3ZUwRy+eJgpgwmzYqqjBR07/eT8P4O6NnDsvnBLGalRJLRfZJ
aREqinRoNdgsr4Xl0zRd4qSDIR2huIC06CUKXJ75YbYmQAFbhRNzJ6fp6PuN
a3scIyhgfRun/72MDDbbRH54a9DR76IMzd3CVNgaPLDyhoMCUQKH5GJz6SiC
nK9MasN+/8TRJ18w/nxk+sdDeJCOOMIuByYXUiDWJfFLUyYZFHoHy5Llqajh
pQzvdxE6dPw8yi8tjO3Z5MPb0/2oiDvnvn/UcxrYzWk/d3OkwN/HzPnkZQo6
3y26yQvjQ5yqttoeQUyP+ysqDV2mIg2VPB2e1zTQfqxZk+xKAaP0ec67i9i9
C490FkdRofI2pzZ/BxlWykPeEMTo6JGv5J8YWYyrvDgecmHP7XdN2HHxHxUZ
apMMkAodPLcIviBg82rQYIu6mDANFcufcVwVosPNRqMGdey+ClVkWg3Vaehv
3R0Dvb80eOvnnOO6RoKUDOqJ4KNU5HWa7tBeRIdX9vkdAZpkcGiKWSl2pSJH
09YscW86VN13qhGzx/gfv6RZmUNFrpce/2w3o8O4wqenXlidzEeoG892UND6
WHvl16904Pp359Agls+9bdHh2cUUxJMQ/0S5nw7xns0xC1g+39vg6jxeUNBC
bPUZV4xLSaGdqXvKyXBzhca6sIeKFJME97Iw7m17V7l/Dqvzenfe5rPeFKQ3
K/ymQmcSAgfur4ZhOnH3ilzRUwUKMrw4t/LjwSS03qlp6sHqLTrgnNHezVRE
275V2WbTJJx/+BWvxk0GActO8ywtKkpKe2V2cZYO2q+St/ZTSXDY7bNCH5OC
HHzWdj/D+LaHNaz6YIgEoUOj2uuWWD1PPtYOzqFBFFdKlB9W55M+0XgFESp6
YEwRCVXH6iFNR7YMq6szj1aUq15R0Zs6zY7H8zSgbP5rLY3dY++pffMaG+ho
OefayWOqNFDFbzU4i+X/XNxXrc6gSfTo1+qGOxinMi+oOcdg52d+VneYd51E
eJfZLGcrCnwfH2zYb0GGQ9c6+V7rTqJ+dzfrY7cpMEE/om2F5eGfkUr0zcOT
qHuvw1gaVrdpTYLKdxTIMDijcdCufhLdmklv/P/fxW72e9moJkoGzkMqZnN8
UyiDo+H+vgYyXCQ+CPHcRIZd2wT4E5YmEUdVo1Y5xrWJaq+lN7JIgG7IGxrM
0VH4s+XMRE0qhJd/y32K5S3cJ9Jam3cS3dMYeCvGQwXK81NbN2N5/o/4nXld
axKR3XRNYJoCo2FXu6WwfFYezzUuLqEj+Y4FDh89Koznp+29gNXb0tpeTeWO
STSwk0M+0QjLQ5X4vh5s340+9BXWj51CD5n65cVOZFB1uRDrdY0ED6faR+2O
T6ELttp8abVkOC8/dkUtlASa3HQplDmJalXrhIU/UqGc8qxCfgIPDZ+5BStU
p5CBakScuCIVeE1Gv1Ou4SEiqmRDSdgkKr7YYTc9RIXoDeUHvQvx8OvIHNfZ
i1PoiLO+H5tMgbOyM3lXkvDwVlTwgVPpJCpXLdV/V0yFb5UpfWVBWBwHBoeP
wRRaO7+2uQebSzZakiZvK/BQ0uzNl3hzEnEXyEYncNHgzLSD+ecIPCRMpWl9
JVLRgW1dd4vbqDDxWOGoVh0FNnG+TKgfpaLXnnSHxmEq7JGkRpV9o0BK9PX9
RR1UFOaiE5qLpwL/niRPbcw/rvQFKT2Eiuiiu/ec9qFBRHXVfIYbBXZ383w3
9qUhiq3xp7RHVJD0jBl4g9nddHq/r76hIaNnWoE9jlQwcW2JeY7Nn/IXYxqh
kTSU4qrOmXoHu0eHF+fssDlm4DqRoaFGR1OGC0o261RYlF81rMbmzOaU7Rmz
xTQkrvk84Gc+DeTyX9BsQkjwJO93pjJmX/j9u1GlkAZxk9O+so8xPiz08lgu
pCGiSGLvd8ye8Klqpy3mr1N1tVepko5oD0wi8w9g539K2GovQ4SCTcsqIjg6
+vKft/7gEhWuE7ZYq1oRQbyCT0pQeBI9E+FSSeyhQn1z69cPYkQQ1jEQt6NN
Iu/YSaUJHSp8eqfZFKdIgBO/TI+nUyfRyI1P90R1qcApL+H+4QABXs1JlGVT
JpFkQuWVTsw+9V7LtwnzT/+DVxW8QUNP5WaleA7Qobr1utoGXhKUSb0/4CtK
RzfXPpidzKbB+E/Q7XhDhMNb7ugL2dAQGtVdczOlQ2S0DZWbSQSFG/Ykp1NY
v6jbZm2xosFZ+qt6NsYVFKTFbZZDQ05BzvX3t9Mh7HrU0WEsjlXIWvtfRTrK
nSqY3XKdBoVKrJvszSSIF9SR/zFDQ9cUm18ts2hQlszNLWFHhAPh5/oP7KIj
Hv6KB2NdNBApE13RVvxfRdcdz+X3xRNSKVJChJKQUUYawpWsihL5FtkkskLJ
TFYRFSpNGREVQkYSJ2RmRPZnr+f5ECKrkvye31/35Tjuc597znmPjz8+VOBz
W7fuQRYb9Z3eoV8hyYJs3EnnfAoV8LC2coYDG51iWY3s1mJB6ydZM0l+Ghzy
2bczbImNyIdvg181E35UVX7VjKNCUXlGWPsBDvq1VYu53YoJjnT/EL8RKqDW
oa03lDjI89rP0W1E/3y4Grh9ZpzQdbxOzgkv2ahMq7qSp4qY68sCZ+uDaNA+
7njkpCEHGZ6wVdA9zIR3PzpUjYl7OM+XNOS+DUP/aqztVboYoP+9fmgyggKj
ZiOrTCI4yM0y8dWnOCbsPB54NDKLAkw5hVHBexxklRGUrniECUY9X/+7u4IK
vpuWuktdifpuWPmrKZ0JTZbAOFVLgQDfTM0gPQzJyho9ePiYAaVZ9yfzX1Bg
780Wc5HVGJJYWX+igpifjdIa925yKLCmFDFpxLwv7+k2uu/CgHfnDnO1Oiiw
fy6tJZfoN4lelejYrSyw3+wSsWxBgepWiWMeqzio+Eu4ZxiB558sDiX90qWA
022Xins/2Uh4YVFZTZ8F3pvgzeApCgibKbNtCF1hmJd+wiOGqOPy2tS5OTLM
q/9L3nCGwNvS6p9dC0wo+rhmTRZGhj1D5s1PI9koqs09/tBtFviJLe8wJ3zx
tJf9ieEuFiqLFijfLckGq9PmvwyIun9cX9v86Aob6QcWyK99woL5f3wnX9ZR
QLn6+XuDuyy0dEHsYF44G8ZSZGLdiX2UR442Cz1jIV7z6oTsIDYsmJXEfyTy
TSsNUgJfs9HrspSliAYWnC/9bL6llgz6a160N3WwkeCPPGk60f/7pzc/qifw
sPHark6KNxup3/juQh1nwVW6/oePf8hwszJ1+2dNNlpN/JK+kg0DTAmeSAcK
PJ2YYL/exkYmu5zbCmXYYNg+vax6hAIK47MnX35lIp9CiUX5DRywOxWmQiHm
OjUu2Zc6x0SqCQ8MFIbZ4CRc+NaVwAGDn+8a36uy0MYszepD79nwS+igWCyB
G/j+Uvdb1hwUP8r6dLOECWN5tryogAI6mTv06raykJr8cYsXz9lgdy6g9TYx
F5X3TjBeJ7LRp8L+0wfiWeBicO+rGHEPpTlMex1hHFWXva5CPHTISzggoVND
hVcH1Y6mBGNoukw6v+kRHYySz2nO6tJgV4243UAVgf/3ZGfcvOjQMRM82kT4
XD5aSp3rNIbk14UNVenTwcdSrPXyPSpcyJwLLP9ER3XcQY17CAOLjsS4FoK/
qje6NH2Zp6NKJWpA2zQHvgZ2YEkE/37UkzZoc6Wjbcl1/lEpGOyw2uso4U6D
k2kKknqf6Whp9wWpnYIY4GtvVFQSPI4+l14qsMZQx9QWMVEqHR7t/vHaax0N
rDwSaRfTOchn82DUSD7h39TnW5JdacAeL3i05R0H6UycGVC+z4CWi1f23UE0
aNJwWpSRwlBJQOiY8nEGXL9w36q9lgp6XSzvrj5ijhr5h66E0EGneMnK0ZcK
TWTz2/JKGCp9/nTj8GEG7CyP23+w6P+fVxT/DT7NQMzFMWNxDw7oR+/WcSP0
zI2ohYxlCQbym3A/dhM4YFU88iCQ0CdPgh/wlBK68cekRnLSXg682HnRLpfQ
MzaNxUeKTBnIgeSkca6VA15Ve7ccK6aBTuF5JUHgIDHz5B3icwzAzggH1OlR
ofvOy97tT4k53Tf10lWICcE/Hyef8aTC2xXSdRnxHJSkM39booUBFfnXn8oe
o0GHlrW8PtH/e1YH6icQ/cO3ZSV+IZTAsVdfsF9vCZz0OXC+t5AJFIeME0oE
vi3tGjHW2YQh+xjJ51vsiOd+M0Nfy6hwef9YWPwjDMX6zM8MTdIhpkyHtEqa
CpswkVe0dAL3/O3m8Ck6aJxokjhDxGnGEr49DzF0535inxYRj21ajYltpcI5
1/qxqW8ctMtjbblVNwN4X9/g77Kjwufe4gVW/hfEjX3Cz92EwfrPzlPFUhjY
asS8/5nzBRWvEN2CJDD4+MMyqkYcg3mOgLnXoy/otIdbcAER729QHZEnVjla
yNU6n69IJKMQGkY4cPWpVuIVJgdS9w7toHp9RSctj1bJ0TjgrFsSkEXlwI+7
wUP17l+R/4o0pwwi/sdWRlyKWA/WCsyvxL4iNz0dfeOtHFDbfP7lmjgMxtx8
Ty9qdCG+dTref4w4sK/lTdrltxg0rOuNS7dsRrUz/z1ZOoKBm4/ulf7jGKgm
mGsmmDcj2Ud4lbkZBrN3JpZbTDFw+VvgfyWkA+1WVYZP/3GgpO5fj1cDBte1
BBpSvVrRSb+UoCOE/n/y36427zEMCi8Im1p7tKLqf4Pu57pZ4HpKKXqbCxcI
lSx/JaYZGS6eeXKPwoI4M3WnrEAufJa7dXn/pja0MWrtGh1CB0bp1RZ7S45C
pKRigHhQA7o6vbJlxy8WrH7SInbqHhfWiO76fpKnER3Rcl9Y/MuEr6JOFxos
RyGzytpV37kOdeMbaOlrCB+kFpvWXsCFf41hL7hjn9Builn62dUsaBOjHOI6
jQJJZstKLrxHVeVuvczNbKAbQc54FReeJLzw4o+uRlHr7rzglWJBprl7w5eQ
UahgxK4K4nmPikyVZX/9YUNk5vNNFb9x2F1dEbuIalB/aOsO8VkCJ2Fv+dA0
DuY2kSsYE71oYmvvK7tnHAgIfNN8+zkHam51Z3aM9yJDoXhabwYHGK2TMlbE
+lTilFxkZh96ZtuwS5/AVSf6DqbtFgzcbQOPhIZ8Q0k5omHxBA5//jtqM6SL
QdLamjsUvBddlXu62oHYN22m04hM7NN2JWaFxY8e9OrdROqzlRw4tqqx9I0n
BoP7xPLLV/UhfK32jn5eNlxpr7M9RsNgxcave8/lfkN5sj1ObkJsMPZeZ2v3
HYPdH+Xf1Vt1ot8U2f+MY9lgYZkw/P0SDm/E4xtff29Hyi6U9k1P2HD0fmvL
4i0cWmpPjZW596B9Izmo1JTgx0sW/gOqOOTXD3itzviK5nrvX++2ZYO3+ftv
tw7jkPkjfomx2IxSIuC0YAIHftX6+v+dx6Dt0pOTl9+2oPnDqkn3KtjgHn8/
yvM1DmlrDPycQhpQM/e/HyEFHDi+T+dt2hbiPH6xr1Zf+Iz4c+LKPneyQTBj
feP6ZhyelLzi/2dfj4ylBlKt3nJArN9fmLENhwSNKz7FWD0yzXP/957Chp/v
aqSPDuFQoJhc8aLrPVrpwBtbR+AbKM/r/TuEQ3HL+V1ijyqRgvQHswOxGGTS
DtV3EDzw+KdADdWkCoVcLnLGv3Bg6XDArD3C4Udkx9Ge4U/IfNRP+PBFDLCD
A+4KgRgc/PA7v3LgE8Ksbt5I9MNAXKFzjJdYNdTfrSj58gltzxst+EL8HHE3
T9CEWM/IKsomOuaj6TFzWRMKB5I8VapZp3BQ/ODvLSpVgH6m+87UryP4upb3
32ohLngVDZd55hagu090ap6TCR8de15dg8hfsxQ2sPn4GzS1RXRARJDAkeed
6lLruCByM+7h5tRKpMqoLTt9C4NI05CArkQMlFdlXas+3IzSsk4rvyBwQLjs
zCUZYl1llzdXQCpAZ/2bTf8pskGoPf+UdhcXAs4/TV6f+Qqp77KzPalG+G5F
D1X11FHINn720ia4GNXqXdn8Q54NRZm/rga0c8G8RdNBnV2CwibeVNYrETp5
Ycs2maRRWLVo9ergkQ9oIPOhS8tqJkxfM3Cu1xkD+0Pfh/xWv0NdjEmmtygT
tpunHy85PgbqBUIDRW6vkZDc/SUJKcJ3RH0R8rAZgxJd+/B+py5k8B9neNmT
BYGHnn3gN+PCWd7AXVLvOpESxVNiSzYLFFcycjSVuGB/0q/YvKERATst514c
4dOO+Gl/OzUGmqcFWGopjcgn+hL+cYzwda8qlTYIjwF2fbPAtbEG9Ef93ckT
kwzQfb8m10B0DASs+WXHanrQucTg226FLPBZbRkrmI3DxsecoBL1LqTQ/SDS
5hkL2u8sV9rIccHU+lqEHqcHHYganORzZoHJ3IqnUkQf7hU7ryeTMIC+vbWe
PFfNgleMlyF7iPpER5xe66/Zh7b2Z8pvBBb4r3+cc0gEh85Q2/Cy9D400xjJ
F0LglcjF7z11sTi0rvK51p/ej7KZ+ZjpMhPOKS7tF3LBIf2j5ZiLRS8aP7M2
5L//WKB+e/tljQ4cTLI8VHzPcVGWX/reY51U2GM8GsPsJUHFgZvw5QgXJW4W
VX6+hwYZWQOS7CoSbFd98LRSnIuWf61/nh1Og42SX9uDFknQo3Qk/vYcjraq
3CRLJtCAnmT4658LGWoSlstuMXG0Mnil8et+GjTk6D8IPU4G3YUO56hPOLov
LFOuQeinOF3rDexIMowr9a/XSMTRmsJPveU76HC44OBJuVkyGLMjvdcrcpGn
J8fMs5oKS0eVr+U8I0OUcevypnAcJZj8ZU8jOhy0OpDSxCTDfYvgJutbXHTZ
VvuYET+hP8jJs1dWkyH5kYSDiTWORNdyPh+4Q4fWjS8cu0qJ505s/fm4EUcX
BuUnx5TocKzjt1evAhlmhE1TboviiPe/D5O6CXToyg00c7pJAcO5CPbpWuL8
wYkOCoE0OHOZXGqylwI2nleZi+twNL1LZV78IR0YW5cPlkRSIPoc80CNK44c
+cMvxVrTYZWM9aM7/BQ4nODYkrWMocjM6Ur/bDp4qW7gbkyhANdLoXXVWS4a
WV5/sJLwS0dL41+8HCDD1eHXMYFVXGQ4tC/YWp8CGZvI+St0yVBd2vZuUpuo
C7OzkRpKhewSSbEjxWSYOnhhv6AVF628v+uZ/jEqGJoMqgREk8Ejpievxpx4
Lyg9VSJOvG9naR7qpkBVkOSLh19xtLGg4ULQdhr4Nh8L+nWcAnoOZ1UvpeDI
zfPrm7NEfZPyv850FlIIvcn4kuKOI042u+ZsJw2aL2A+tRMUkLd7a31eEUe+
LpMyDEJfVlskSD00ocJ8SMpJgQdc5GJRtLJ4gAJvg696vBUlfNknvg32Mzjy
cEvd+Ibwq7yRE0EJYhRIXhsRESaPo+ent9V+welg9fG/Ad0QMpw6L8Fe7MHQ
5tzUhnElBtS++Sz2nUMG0/7HrQtehP4X4Xnzr5kB7dUW7tuKyLBvFeOs6AsM
8QSyp4acGDBwKZmiMU8GrljwjXMyOPqiJjBuNUP4jlBNtYpLZBiSMpx75I8h
R9vV3RqXGVAXrqte5E6B26URWUHlGDI+4/a6DRHxavVS73UUEHWY+d79HEPs
TA+JkUIGsEv9K0VNyeDDyRtVGcVQ26s6wzobBmS7djqb7iED2eXp9fA9OFL4
c4I2T/iFwYObvB28yPAu2/PAmQQcTRnNODqk0+Gyz0ig5A8S7Ja5026UiqMB
LaWqU0l0kPqx7YjmdxIYrqBdP6PGRfuTh2ceJ9HgXoRvrd5zEixIRYb9ImGo
Sf6P5bM5wgfNdOxYJPrlYQyvp7LHKBIRz7FgL5Dg2ckbCQGiJDgV0XlGoGIU
bQ7kF7R1JP6+0gY0b4zA+OsnP+QMR5GWkG7I/QwynP9Pp1xgcgSO9uOF9sdG
0bEtKksKd8iQ9kyaFUMbAZnf1sW/9Yj93a6/uVhCho6VXbMPR0dgbGLTDLzi
oiS8AlmVUeAMJXju6k8SfCquaVbbOIrOsmeUeNPJ4Pd4qWfoJQkKKmQjzSe5
iLVl76mx/RTY1ti/yiSKBJJnBIIu/uWivFfuqcdkKHDs3OlKpQskSOaebI+u
fInMHdR97iURenuw4tT+1xjQLeUlpl++RGnu2aXaTzFoF/om+PYJBpKO1wUr
wyqR9yzmFU3grCT/Q8VFggeddpACOkNfIr9U6YPmRL6NYFtaE5FfyF4R5BWH
o9Bv1YokUxo4kZRY4YRf3lp1f5PZTxxJlOvdfZNKhSr124oXr1AgSaF1RLuG
ixRddbdsFKdC6Oi89IQJCXp/c8rPYFwUbNq+9uA5Ckgv3n8QFUyCyMJ/G1u8
uei/4leDqaNUINM6arNDSdCSHOp7y7AXpZ8PK05UGwW/6Z51PrEMMIl5eHZ5
zTBKFCk0mlbAITCZ+WGvFhPeH/wSrm80jHJY8sXhcxg4O26STXJgguymRuXm
3GEkUB29IM/BoP7oZqNQSyZI3JkOeBLeh4RPSX6rQ1wIspx6ra3JhPLJanmx
V33IREDtSpw4Fzgy01cz7JiwvLLoodzdb6j+w+q/HrlcaHTcVhH5nQFrHAau
dDh/Q5sTDbXjDbkwo9Z2zDmcCaFP3SkiWUNIpxXh76/hwHnzc0EbY8BdOdoY
z6VhZHRCTf/eORzIP/YY+n9hAD4j3H9AgYQGGsirV2RjYCb0PGd+CxMeCNu3
W10bQe/klmOHVXAI+vzi/CbCTz85sUfkxy4SunJbRs0qi/A1Gi13vYn8EyUj
9OtdA+hM4r36yVKCFz0tzknrMuFG287X4UcH0bSk+5YMExwcnxqJBzxnwsm5
GAX25iGksDdlfw9xnzHTER088UwoRfydaeIDyKT8Jkn+GBd2blsaGXnFgMv3
A1q2FQ8gSug1vuhOHJ6tu1SqI8eE/n/xlNZLA+jET6Giel3CV2iueCyTxYDn
7nsY838GkUm6S2TRYxykVA4Kwx8GpP458vmYCgn9Vt4YoJ6JwYvLa3WtJZkQ
pOk0QW4bRGu7kk+s6sXA+qy/ihg/CzaVzH74GjqADjf+aco/j0PSr9Y+4yom
/DsQs7lvsg8tf3+W+nc9F8h7U4rtrJkwaif/TFunHxWcDDJdSsOh4rqHfSKJ
CdJqY8uXWvvQ++Pg45ODg+va9j8MnMi/HfrkEK0fqa3ls7e6yoWoXJmprggG
cASf836P70dZ04mTDrVcMJva/uW8NgO22gnIW/03gDYcuntO+TkXrISZn0pl
GcCUD+Z0dg8i0tq2K3X8XMjzj9WVDmHAvVOCL7d6DCKloTpaeBAX2D1eQTwr
GSB/kiadt2II/XqR7Ny+hIPMZZGHpwMZMDp5rVj5wTcU/9sVi1s5Cg19Zu+j
zjPA5o+M/PutfYjlmvz7YyoXPGavyX6nMGBpbtyaVvAN/SmYmhtd5oJT7/Wu
t24MeERW8r23oh/1GTO3RRD+89VAMkO9hQFDURO33i33IUGOulHTVy4kKtUs
sw0ZIOx8qt7kTx/S/xFVt1NxFPp/SuZBEx1Ac+dXD9kh9DNsqqGGQ8xdqU3F
2wTiHvR8ykLDBpCU2cRf1I8Dhebpul2JCYd5glpWfhtCD2+1tuj1cCBGf7fW
5mEWzC39N9N6ewjVc3OzQ8UwOPktkFND6FOPW8JNsGkI8eh6b9XehcExeyMF
1zIWnJeK0RZJGUCzL9fFRiIM9Pvc63UE2WD3pnyv1MUB9FFeYa3OBUIvOse9
jh4l9lEttvVSGkCVjlc7z17CQKj5Rs+zaRbwpwQIiOwbRhO7eR5aeHPgkvGC
rJkSGxYqhIuTRwfR+ZVG27IIP3k1SffTizNssFnU+SuRRPSJRuWFL7txmGrd
JXU4ngXWCl2Ds939yP2y6aaDvDjokZ0oKYSelcg3Un9sP4BKpRvuBvwg/Ex9
lMHoSRbwdK0fuELsL24UkfCgHIMZ0UdptjIsOKDa49wnM4SeX9kiaFWIQbbq
HhN3cRYk1+/xvTw+jPhaAiwPUTkQcVj/fp0/C7RaHSOdF0eQV894cZMrB25M
7WLXEPr6dInD0pVjJORRNS4gKcqBrN6kvP0DLJCe19uiODuMPKYq3shYcOCE
KZ8Hnbi3uKeO2qdXDyKFlWvzZ2s5YGYpXLEhmA0NSvwzqTQSGnql0qBC+P0+
Zwv/r7WEv3lk2ubV048EBJhvTnI5UFXUNj+ewYa/Hr4PLP8NI1FN/Gn8KQy0
/W6Vt7OZ4KFm7Nj3eAQlcO5bbKrnwHWD23F9Nixodl9pc7pnGGmY0e5xzmPg
78bTJ07+/+fo2Z+niPd11/nxUccFg+9r+2t3DTFh76OjajvKSAhnTsesSOHA
H7fXWfuUWeC64+rnMgkyGjeNsLfq5YD9XhHPmPdMqF5vY9xym4yY+srswQsc
4Blx3hn//++XjJhsag8ioVhDw5icrRj8eq2QcoHAvUNuI2aMYRLaGLbrw8Qa
Ij6maZZ/h+CFxm0331zrR7zakkfVrHD4qGJbaifBgu0S/KeF1lLQ++KTsqk/
2fBh7tADa1vCr4yoi8saU9BvP8bhfdVs2KHy7V7xdRYM8S7ssNxXgV5v7en8
RcwF3+rZbyF7OEBeM7r1E70CkbP9Pw7tx+G3wvH+0mEOKOE3Xhz4VobkNBtM
gkZwmHk/0ROkxQHnqVmn9U/LUeNIVKmlDg793P67fITfDSvbfVClug5Vn4ss
lrTgQjn35xsboo5mmgIywYWAkuWLjBdrcHAJ0d/mJMGBPbyMYi/telTiY+Yd
fZgLcVusQ1N92CB57cjVF+UNhJ/dhh17Rfht2+t1DQIckExZ4FlxNA8tRMYu
/X/evw6RrMP1OHDmmWPgzGweKp5QXN5thsOH37FVIqMckE31kr3ckYPk7dP2
YhgO1e+EXeP0OdCisH+9kHcu2uaXtnmCyC95pvP0M5H/g++0omBaOcofqeCT
8+DCIeWSHs8kNkTcrcq5hFUjkwfLy3p2XLj2q7nwfDQbnFZfmy5U/Yi4+7I3
9DfhoJuxGLNtOwc8b7jsyKupQwOcfV035Ih5FOX4ZjdxINss9/zZ05+Q9for
eye24jB+UdvM/hMHWO4qvvnnPqMD2UkSH3lwoJIiDZpeciD6z9DWtJZGlIF/
NXQp4oLSJx7rc40seHBp6Pr5fZ1IsDnI7OhpLsxGXu1XCibm7nvr1UcOn1Eh
6Y5SmjIXpgpiqg7bsuFXyUDD8t/P6Ilgv43iIxwGFp6tu/mLDXopoQGuDl+Q
ZoVdwD4vLrzc5qmE3WBBhv8w1fZFLhJjLMZZXCH0hk1w3+5HbIh+xbc+/Xgp
EjmMxEV9uPC84HPAxRQ2rJxOE5Y+ko1Cqg3M+oO5IBHiWB7ymA2zt+57iOY0
oZ0Rj2xGFjBIFmmKCyHwbE+zxTWr+S5U5R/qq6GNQ93+Pqm0LDaoOdXCfUY3
KhXWWniVioFwdOdhC6K+f1M22LUtdiP9Wyi3QwkHkdgy6TsP2LC41aObx60H
5R3qkj/pi8FqL613YlJEn4x+GfSl9aDW8pp9PsRz3eTYB954seF4j469uXsv
8nvvPbzaipj3yegabx4OCAomtIWvaUfltaEivN5Efy7VNF74ygaX0eyezd/a
kXuElrZWGwb8G1TmUwI4kD+naieQ/QXR7BV13trhcLSEUcquZ0NPpv0FkOlC
37bxqCu+xGB3Rk74A0viPHwOOTsMWpBRj26qcjwON+8HfH6JsyHqbibzzuE2
lHk9p8FtCANpiehL5CgOgbc1Lm9ufkMmQlYHw9aPwpfRDSoxtgx4DKkDBvJt
qEHO9IiuBBc2OrlcUdrChpqtVTa3TdqQlayLw8plHJCs17N7e9nAW26VNOrZ
hIZJacnSclwQfzgrtMOKDeohUQ8qXbqQb/aFDb0PcQj7pfEvRY8Njnc4vLpx
nehH6oH6mB4cWkbqeI2E2FAxFmIRdasNpcsLFjr/xcGhadVZe0028MfPccM3
diG3A3cWlttxiDq6IrF1NRs2rDrI+PeTjrIe5QlLPyDq/tdrdEyaCtUFjR8m
jzCQoyb35hkFDJ6yyZ01RVSI2beH+WOKjnKiYzY2pmOgeXNizVMif1a3IDg5
jI4C0ss+in7DIEYgcIrfjwq//15uOEbsf5Tf/rsQkf8op4D0eisVVLv2C4V5
05GxBZ+EVCUG6dL2Z/zYVFD8JRVMekJHc45Xc7ouY6CrciAnTY8G/8Iea9vw
0pGF2vSjxPXE/B6/sGuuhgqfVm/l7zKgozzbaw5FBG8arunp33mfCkKOtgbt
DQzULnujR28VBhUeEhoLHAowo1Sji54y0Oqs1JjcQxi8TC+clc2lAM/Gj5Wv
3RhoQlti92Y7DIJBfndFBwV4lTTKqHpMtD8spvYrjQOfpeRfbFclfP35s11K
RPyazaBDG50DfJoR9f+UKVA/oXVr4hATnefXMY9icGDDmqIT0yoUCCGvqe5/
xERH4rQfdzpzYOy0d9aTWgowNJq9DxozkdEaS2G1VA6MOK/Yga2gwq5gIY2e
G0y076FPm1sYB2rm92u0Z1Fgy0+h5wZfGWj0lF9wmgzR5/pDux0jKXC5aNc7
jx4G+mTE934LwWsVjbyWB85RQSHt8a/d9gwUNfJ7nbcIBodDJI6ceEcFrYoT
8coLDPTyidAlDYLHteZFnOX0ifv/3KJ6ZQMTSd00UjF+zIH4PQqvKzypkMcq
X9xFp6O/O0VpDIKv3R/vi/67jgZ1WkKuBhYMpPr1YrvlFkIvSa8ZPlZH9Ind
7ij9dAbabTMWYljKAXcfBu8/RIP48oy0iVcMFD+uczH1PgfUuUucBVcauHjm
OsQm09CNsym6HXdweJ82PPSgiAJFh50043poSPCvMQ13xYFOTVeNmqTAO/LI
h+YtdLS279CY0HFirqtF0n93UyDQnhn/bCcN3Vbq1F3swsFoQ75kmzkFPpGj
RE8F09AS7o0qCF57oZYpLqJNgYs3cl1P36IjrJmtOLQRh2SLDVoCCRRQacw4
cPMFHakWhPdylzCQ/XsopDKFAuMaLXsWxOnIP8y2sGInDgVuzmKWplTomU61
4TOnIb/jxh+bYnB4fUVdx4zwr7lt71x7HlDRPjdGaOkUDif7hXDjYArcPyAo
+W2civb/Dac2ThO+qVzxo4M4BfT3Y+GDoxSU5kDjj/yPC/Lxxbl3B8mg433f
cLqYgQomZc0FMjDA3c4duGtKhnFni2AeFgPtuHdoLNoWg8yli5yeJ2RAh0qs
9qgxkWOqez5rNwYUkShpE3cyPFedW1dUwUSdx9nrrr8jdJHVstDKKDIcZ/RW
zg8w0W82zu2O54DPZ1v5ilIy5MNet7xVLOTO95NT6skBZp+CN+sWGe69oyez
5hhol1rroywDDH73c/P4qsmw+c/jMblcJsqVkrdzzOXAg2sywoEjZFCPCuO9
K8NClzJ/n3i/gQOz/ol9Gico4BZ/tCW9jIks2nLu5J7iQO+ni/6xBRSoTTy1
e78BC3n6zRbmTrFhYoWQH68VBdbVIjn6JAsZWr8cZRE8kS+yX7PtDxmuHXff
E6/JQrzbPTND+Dgw8FL3jqIeUfcjKt2+cSxijrx93XrYwG4OmBabJ0PEmexg
Oh8bBRzvudiizoasmztfRDtQoPXBmvX6N1nIaVOGcMVNNggvCGtp1FHAPsH5
Dfk3E81IZLxXsuHAs8MZqmSMDNLCcsZYIQvlL4jgPe1sYN4zWaAQ979u30hm
9GcWEu7+GRpRwIbrs/XC6rVkCG7livelsVHKuxs3vmOEPjAnDxk8I0N98nnP
SS4L9bnLrCATPG0wuPvxKSJe43ZXVaWNgbhmN4waYjnQaWTnFH+MBg4zcz3h
NUyUsXlV3t1FNljkzcr6x1HBOdjylLoTE0Xw5BZnKXDA2uaZq/4EFWQ+JjRq
nGaihIRwPWwfBy5sDff9OEKFf9ulfc2PMNHzy0wRHwMOvC78xZ/OpULbdfFH
94i67HfuFLYkzn+8om8sI5QGKnInpinFTMS5QFUXLGaD/dH4405BNKBUHKGs
q2YiURGXyce5bHjT9EB3noj3quq/1tZmIfvya0Hj59jw2/tn1UF+Ggx9r7/6
MpiOGj0OJKQssqAlKGlsbxcT0Iq/QddT6Oiu2gTjwBQLzEpFrBIamXB0T3Np
A4EzO+UEMYMnLFhrVfgtK5AJnldV/RxcSYjHo8Pu7btRyDnb+cHw5ggYT92s
XiJwQDFmPD2QeG6p1u6FS0os6N/0GvMLpKEUdlLL4HE2bJ1xiKzfwoIsPf9F
q3IKOkUVPaBBnN/+pF4i5sMC2ymBvB4vOnp7OKO0fxMb1r450J0MTEhKC7aM
F6Oj8PfGcdOFbLj/rPmPhzMTtFnmp93lKOiZpZ7y3B8uVO26qCXjSYLGpxbb
+HUp6Fth5v7+ccLXmxyaOXidBIOQus3GiUL4si9cKpsLtw+t5gm4SgI85Fhi
QTYZbaA0FVUZjILVLUoe348RSFRcHxtVTkbFsW2PbuuOglaw/NN7YyNgmm3p
tVeKir6nek+VV3NBtW2tXI8pCd64WbwKqKQg05L1uqiACze6NQTcZ0hw3d29
N6CHivjaOAdptly4HMxc8eEbCTYcl3X1WENF26vtj3clcOHYdvYu+zVk2J6n
UCb+hIy62lSiajeMAmmvvtJQPgmEH1ClPkxQkZCgtarORUJv330xGxxGgmuu
PuKtWjSkny+Zf9CQS/D62Mny9yRoahZVnF4kIe3H+V7N7qPQ00lqD91M3M/1
/dY6aWTkfPd75k+zUei48KfoOn0Erpy7IxkhRkUZK+e3/iPmbri7QCsomgmU
rMK9YV5U9CpjbcgdQQ44pJOqrpUzIfe7lkj9PzJyfTs75EHw4MSHpd8cJyZ8
+73N/ak7BUl3aDuIIg6ImPguHmUy4a7t9zOCJRSUcEyr1vstB8oFyxIDDJkw
pcyP1fylojzN1LCQCTbIPKzfUf+YCer/FBMEF6nI7Mgwf3Ac4TdeWvxYJcSC
Y4nzGXwqDETNXPfw0FcMXp02Gwol8OG9TN929igdnd0fPtxA+ItveQOfBkPI
MJMk1GNJ9Pnf+IG6B6cIXqhP975aRoYvu09H7XlMR9r/xM8YCxJ+ihFfb3ON
Amu+n7T2nqOjVr72pRzCj3iELhr9/3uaOoJnBDYT+KCp0X1b2RODPRnLXfeL
yPA3ctZqyoWBin23F5/IJnwxGv9XSeCeabqm78AZBrpDLmv1xjHodfehf91D
5Ae7nRBm0NHMRZpQkxoOmz/1Tvz2+j+PfOhoJ87zy6WyQpjQw8kGCzd5fpLA
SKEEf2JDR7NfzAT//3+yyLC5aINVFMjb2z38ZScdDVXfpifcxCHAbsVm8iwZ
eoK6a56upaPS+2JCR2px+L7teunSdTLYNacdXmNIR0/lTt/zCsVhKOLDaBiL
DHNv9sWZBTOQ0LqTs12EX1g3OL6sep4CbMvJTeULdPQ83qZeZwQDlWf1AamI
4M3fE4cYhxno+etrZ0rKMLBUrV05v44CbVV54p1RNFQyl/BdRozwR+3yZ/T/
kuDJ0pZDg8M0tHhS8vI4nfB3QiUyeuZkmAzMDDAhdIhAsXPwzxkc3IslvVtd
ybD0S6DD9QQVRQf9GL1myQVBLfypVQyB/yoGr7pGKOhxFacr9h4Xllkk3seb
yXAxfeSvnyEFhZWFX52r4IKWA9V2TpcM2NzUl6a7NDSeZ5xQr0L4gvI+SYFM
EtTmZMpdvE1HdlPuVx7fxSGuO1qZ8p0Ez1/q/bdShdC3T5Iz5utxcLyVHZSs
SIb1tfM6fNeoyMcpsNNxLxcEnlz4u+0twbOq1Y53a6moZYmHHbaTC8bdEk/D
M8jwP6WB4ZE=
      "]], {}}, {{{}, {}, 
     TagBox[
      {RGBColor[1, 0, 0], AbsoluteThickness[2], Line3DBox[CompressedData["
1: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
+3/vHdD/e+8A/wPpUnBP
        "]]},
      Annotation[#, "Charting`Private`Tag$291043#1"]& ]}, {}}, {
    {GrayLevel[0], Glow[], SphereBox[{0, -1, 0}, 0.066]}, 
    {GrayLevel[1], AbsoluteThickness[3], Opacity[0.3], 
     Line3DBox[{{0, -1, 0}, {-0.5, -1.5, -0.4}}]}, 
    Line3DBox[{{0, -1, 0}, {-0.5, -1.5, -0.4}}], 
    Line3DBox[{{0.45, -0.814371944016776, -0.3664673748075492}, {
     0.8, -1.25, -0.4}}], Text3DBox[
     StyleBox["\<\"(\\!\\(\\*StyleBox[\\\"a\\\",FontSlant->\\\"Italic\\\"]\\),\
 \\!\\(\\*SubscriptBox[\\(b\\), \\(1\\)]\\), \\!\\(\\*SubscriptBox[\\(b\\), \
\\(2\\)]\\))\\n\\!\\(\\*SubscriptBox[\\(g\\), \
\\(1\\)]\\)(\\!\\(\\*StyleBox[\\\"a\\\",FontSlant->\\\"Italic\\\"]\\), \\!\\(\
\\*SubscriptBox[\\(b\\), \\(1\\)]\\), \\!\\(\\*SubscriptBox[\\(b\\), \\(2\\)]\
\\)) = 0\\n\\!\\(\\*SubscriptBox[\\(g\\), \\(2\\)]\\)(\\!\\(\\*StyleBox[\\\"a\
\\\",FontSlant->\\\"Italic\\\"]\\), \\!\\(\\*SubscriptBox[\\(b\\), \
\\(1\\)]\\), \\!\\(\\*SubscriptBox[\\(b\\), \\(2\\)]\\)) = \
0\\ndet(\\!\\(\\*FractionBox[RowBox[{\\\"\[PartialD]\\\", RowBox[{\\\"(\\\", \
RowBox[{SubscriptBox[\\\"g\\\", \\\"1\\\"], \\\",\\\", \\\" \\\", \
SubscriptBox[\\\"g\\\", \\\"2\\\"]}], \\\")\\\"}]}], \
RowBox[{\\\"\[PartialD]\\\", RowBox[{\\\"(\\\", \
RowBox[{SubscriptBox[\\\"y\\\", \\\"1\\\"], \\\",\\\", \\\" \\\", \
SubscriptBox[\\\"y\\\", \\\"2\\\"]}], \
\\\")\\\"}]}],MultilineFunction->None]\\)(a, \\!\\(\\*SubscriptBox[\\(b\\), \
\\(1\\)]\\), \\!\\(\\*SubscriptBox[\\(b\\), \\(2\\)]\\))) \[NotEqual] 0\"\>", 
      "TR",
      StripOnInput->False,
      TextAlignment->Right,
      FontSize->12], {-0.5, -1.5, -0.4}, {0.85, 1.05}], Text3DBox[
     StyleBox["\<\"\\!\\(\\*SubscriptBox[\\(y\\), \\(1\\)]\\) = \
\\!\\(\\*SubscriptBox[\\(\[Phi]\\), \
\\(1\\)]\\)(\\!\\(\\*StyleBox[\\\"x\\\",FontSlant->\\\"Italic\\\"]\\))\\n\\!\\\
(\\*SubscriptBox[\\(y\\), \\(2\\)]\\) = \\!\\(\\*SubscriptBox[\\(\[Phi]\\), \
\\(2\\)]\\)(\\!\\(\\*StyleBox[\\\"x\\\",FontSlant->\\\"Italic\\\"]\\))\"\>", 
      "TR",
      StripOnInput->False,
      FontSize->12], {0.8, -1.25, -0.4}, {-1, 1}]}},
  Axes->True,
  AxesEdge->{{1, 1}, {-1, 1}, {-1, -1}},
  AxesLabel->{
    FormBox["\"x\"", TraditionalForm], 
    FormBox[
    "\"\\!\\(\\*SubscriptBox[\\(y\\), \\(1\\)]\\) \"", TraditionalForm], 
    FormBox[
    "\"\\!\\(\\*SubscriptBox[\\(y\\), \\(2\\)]\\)\"", TraditionalForm]},
  AxesStyle->StrokeForm[
    Opacity[0]],
  BoxRatios->{1, 1, 0.6},
  BoxStyle->GrayLevel[0.85],
  Boxed->{Bottom, Left, Back},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{270., 218.2171841028529},
  Method->{"ShrinkWrap" -> True},
  PlotRange->{{-2, 2}, {-2, 2}, {-1.2, 1.2}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{None, None, None},
  ViewPoint->{0.5621872124082068, -2.69615459981071, 0.5474448941439115},
  ViewVertical->{0.08124077975155113, -0.14812741622910722`, 
   0.9856257932230919}]], "Input",
 CellID->107984828,ImageCache->GraphicsData["CompressedBitmap", "\<\
eJzUvQl4HNWV/l1Ub5JsluxAQoDMjMMSSGIgBLAJ2SAE4QXwvsq2vEiydmux
ZFmLJcuyZO1Lq1tqGWQZsB2wbCAekggygycZO5BxJoth/DEJKATsOMYkmZCx
q/7ve29VdVWruyXZJplPz3Oquqtb3VV1z+++55x7q/rBlPzVqWtT8tcsT7nm
vtyU7NVrluddc29WLja5LlKUi34Iy7hGceOxrigjFv+iKP9XHn9ULN3Hjh8/
/sp7771nmntI13X3UxMnTvSErrzySnfjjTfe6C6fMmWKO3vWrFnupXl5ee4Z
XV1d7ntefvllzxcuv/xy9zXt7e3uy3bv3i0+vlh+/EfE0sN/0o8ePUrjJ/Pj
FLf4ZPEd4tvE977+zjvveP7w61//+lN8r5uPPNzmdu6V+F8PP8bFvfJYe+Xi
XnmsvXJxrzzWXn3JsVf8d342P5pr/oNylTgf/A+POCJxbPw8ebz8DvFt8nvF
ebGOQ+yfxzoO93kcR8yz+579ELz8IH4EX+HnmYexOO5ReMQ3iO8SbTr6UVzl
PAoXXxWt5oriI/L8WEchWsNtHYVojaftR+HjhwuXwB9f5cfxa/jfSp/zUFz8
II+zQcKHIk/lB+FYMRsk034oLn642G3+qXIbP5Lfx49Rfn2B/Uu0jCvW4Yyf
3s/Jw/mw3HVu5hfwjYpbbuOnWYcjsEqQL0xK/47uz3hK51q5wjpOt3Wcotlc
o3tgRLNF88D4zSY+2eU4En41P0KiL7fxrdwWPhKf7A7z0naLI6HlweafW6O5
rIMRjeayDuYiPrqIH3qRYyfNflLCLbfxw/k/fE3upNx7nzzde6wd9Wc+jZ3d
i9P/jK60hz+Q/6yM/C7uJfdKsR03j4a7xtesTlOexwR/mu2rMp4WX+fPHNT9
WYP6pNxn9LZRvlHlyUiU38NTx+/hJuFi4TcniXMf57v8Wfv1vMx9eqvz9EQ5
Qh6d2a0oxjez5ezfrNlcl18KU1R+rcrvVLzyW/dLy3lGz4PxaJvD3241mPPb
LccSRyW/nd9oSiwfn5VvzUt70jhk89sVl3XIMGzD16v8fryQ85yenPtdccqU
xti78SH5koPgic7dMNXif+UZSk7fhd3YZe1KtLMvdwXnBfvCPfHn0Q7oeXnf
xXl5Xt8mv5WOFGOHHCBeHH2H/iochvui+OL5grE3LvveYBv2B9vy/1nskfiG
+lF3y4HeJeHdsqvqX+TmvNVPhs8TzOYvCQ5/yXpGjzxPKneLO/c9PW/d9/RJ
RdjBrc6d47dG7By7FYvVS+VeRArln01P3qn718iG5Cl07J7LvnuKzaHM3VPk
/rm5f/4C2g/05KIhvc7ZdlF2keeJPZ14dplzF8knd/FPYrNHnL81Tl+L7fa2
1s0xW1fupdfcQ2HYy7zCH+CM/lCvHXVvrSCUfwawDpmWp9qTvBq7uMa5u8au
uiOdMbYvJnJ37afUXyR32F/0ou4vflFPLv2hrmyWu0FH416LaNS519wsZIB/
RsDBo7C6mtOSG+ww9sPmocYuJ0XrS0fxUnOX8RHYYZV7ixeK/0X3l/yrONlK
dez9ln7g7IM+FubNkrVTJliPO872ubpvlB3nPvNcc7//hduw9+h4S1/SJ238
sXTaylGPw3xJPPu43OdIyfy9dJxJK3Yah/JkNBxH6d95LI7jsTm6cTwJ9uPh
0fhLDur+DbQf6ck4psoo5955OI4u7xPOwzH18YTYPNG/6vERhxNPJs6DBR6T
bB+VhwPOcED+sh8LS954WC8f9cDYXfIgxLPL5YFFCr980Ze8Gu0U4+AuMDVe
kxphRkv5y36El3Fk+L/yQ7q//CdwyJ/qSpk8EhGEmSmF8yAdHe4V4YO0xxe/
k28VzsiDhMXuHj4Yxtz2I+WBqjxObMaR+it/oudVvqxPqvmpXjrqATv67Cvl
AdsDKh78W2KzN2/lgHXA59ihjAqgOxJA6a4u+7Eq8mC9PFA/DlRY1U9x0D8V
B71+1IN2dPmfdB60GZYMx2xlt4PVeJ3PhWH1YvPAhRn+bB18lTx4f9UR3V99
RM+DTar5ha4UOc+CULKRZ8HKqj8VPgt0CfMsvCnf6l81EHkWEsfSYxmnwT1O
qCfGglqegZFnQeUpUHn8+K7qn+n+zT/X8zb/pzgThTyCi3iwF/EkGOdAxntO
Xfq0PAeRZZ/fyM3S/cPnwUT+g+jbxgO9y34iFHEmsK2a7sAT8TNuw+nAttpf
4qT8Uk/e8qqurIt3VhwR/dXhs2IPO//bxkeqPDP4Itt5GX9XeJ69w4/tvYMv
FiA8K8YZ8fprf67zrPhrf6X762iv6sn1x/S88MlhN+E8Odxi6eC1cpsjyn1d
bhP+4jgzdJYxBy4Xpu9IHEvfoUhyXCY54uSoPDF0mvCpwbb6/8I2niLF/MuK
d654Xiw5/Yzc5qh0HRPbPMkr+nGudljnK2ZvmzHyjIW7mcRIvvz5NOcZs/cz
vnj9jBITr3inyzhV4dOl+huOMSjGcpJ53taKcybKVYyqnOfMocj/EPY565z9
l9En286XnbxLx9Ixx+qR4sQhifFi4xEnzabNRp+UZO+TxHmLQp+//lXd8DKe
N3/D67q/8XV+ROOv6XlNb4Y9Ly3eWaRDcqt49o/hbo1vF9L/qtmrOz1Pjd+1
u+wncrQMIzEylbZTap5FRYI60d6HjSbyPIuiC5Ne54k8g+IESsdzm6eQJ5Cm
+pt/Q3/EmZzUapzN1aOdSStM+Cd51swzaY6S/FJiPGnFduNkRnfNcYnCRPsZ
HUu/Z6SfdpdUZBbgjhMvjAtj59lsNs6m6m95k//U8ls9ufUtnNZ3dGWlOKUM
KC8izMYplSUwK+oQWdZn5SmNrN7+Qp5S/4rHYpzS81cTd+RZjYw9ii9U7OGJ
xrmjf7S7qCJ9NMHf/KbOU8sTK6yN9paeh3Vyxzv6injn2FERvU6eYzOTM8/x
f4rNPqE+Uc6zTYU+qE51HPnOGCKac+4O3I5TjdOr8jy7/B1vs6voOC5OtzhZ
S8PnnPA7z7mj9nG9POeR1fkjcrPoKnjOjfOu8qSP0vmOM672xet+L2yQdA7d
hdvu0TRVnG2vH2fb32naCV2c/e6Tuhh8vojBQZQT7xh2usF54s005j/EZm/e
cvPE77ggwneO3XTiWNI6e7iVYIUNm+OEDWZv0jCiN3FH9iau8En3hE/6CWn+
E/w//0m6v//3aIB3pfvPj9cK5rwB8ezG6K3winyr3f3xRWgH7GBq9ARzZMn5
gnXwoyaXvsgiS5Q0akKsQI4N4q9nFBcZycXrdUSTqGwR7KitTfAM7eHyB06x
UQJ/0JN7jEaZw4UYCXW2h30GhCKH4Eck9y/Lt/pHtocvsj1Gl9tzqXjEkoDE
sQSEo2duF6RT8kR2SoIPW3t4/YF3dX/QtPfQNn/UJwGaR+I0jRVU3hRuGvvY
22G5OTmFTRNuHtk6rg9IpMcsGr54onHueeIF6bnspNhbBs/QNlj2vqfn9chW
UmaKLk30ZrZ2kmPIzkj18852MitB/27r0pbJtsKeR7ZURKH8g1eYcYSsl441
NT2PHg1fbIMI/4TGCreTymZCaxr4WIaGwof2/kk02p/15O1/EaY8GG40IUaO
RnOEvl+U2xwVqh/LbXkpoYgWi11ViNJiMSZzmFBdeAkaJe6NUqv64Hq8mFyx
sUSDqVx6/H1/1lU22f3xWswROE8Ox3RW5f7fIhhbZrWYO24gN7bY4f+CWn3w
HaJqgaay0dRYbSZRY8PR8IxN6O/7CxZoR9GY3ww3pkiFHI3pCMZvCTewNTB/
0Ig5lvVFNOY4A4/EC6tr44nJo2b5SWPtMv+GPabVjKrVjB7RjP7tf2Vb/i/e
N4k9qvl3t2haUU8Y2bQklyIpnt0q5TByroKcA+6WnWuf1cHaGvjDzgYe+wSA
yDYe96DAeYT5/9f7WKtlvWxZiBulsv9/hSlT4jWqI024zdmoZqXoRbHZM2kR
GnNpn6Nho8Q6A+cc6/jixTrnUIh3R/bBf7cu2Mim/f5TOhtXNPD5dMairT1s
a6//sRENfrtocFHMtmYFOxrcmkQqr14YMZPlBdngeUtMiiMb3BYqpY4xVJoY
K1SSDf7PIxo8ruT64knu+Csn0QZc/r5dtAB5QpTGnRy1cWWn7JzB9GXZuJE1
yB+Izd7klB7Q3DuigccWCp9rVDUWJR5H7pIYFuKfx8xd/rY9tYBZZTO7Y/XP
l4lmddublSr8uXDLihn9jpZ1pDV3jGxZIvx9blXZqCpbFCd7ma3OvGJ84yjn
Fl994OIbs4d+PW4PbSvp/6176E9Eb+1JorXFrIGRre1Iie50trZZvHveCLWW
GBwbyqyy0W2qfHG8gDpWvDVeVfbFU2VjHNIbKzMaiyrXhydgXPCeeqyhVswO
22u19VX2tpbVCrb1NfHa2pEx3RVua3uh9oAZgXUbbR1ubyWywc8jDBtPHT2m
MI9aGYyaPnljpU/xhu4ueL8d0eyuWD24bGeX/7G/6NxGwzMuZdvbTAyIyGlm
Yp6Qo+0dM27ldI0RRfrvis0+/5LgiLY/j4qjDMp88YIyq3PPP0/JdsyEcUdK
9ii51YXp3iNqIOOIy1yxmj+JT9HofxaN/mdHo38kXqM75jhNDTe6vaz8rNic
kLwInXuchh9bMO4I1hLtwdrfQtdHLVyOyLz+jn2812zzSLB9bPdPRcHeZ7wq
nEQs8FmevNB7cIQ/WiaqLBPieYVjWvZX5DZH3Xq/3CY0QLhEUI8S7DknFow1
2PPFC/bi68BYpD/eFKSLneH7uIcd/m5VlnAn4GXri34iga2P9/FT8nreRbMb
o7TiAtuLSLa96SdEydq+Go4KrFR9n9yWtyQQr+nHG+fzejNn2DfOqO88QoAL
oQKeaFOkFHWc5fDzlIIxdAlhpxBpoeISI4/mnzueZziyvq+FcwOrmr43olOA
YWfgGbEr7AmjFWBjh4cxk/pzjhB89ghhnDIx1gLdB58KRHOMT0ZxjARnb+Gj
Y7jG6hjimlPTMRwJ4tflNrNsK2b+ytthuPxml7HE7DJwcuxBxLnmDn+Lik+M
+u3/zxQjnB2OwSXCfYUrpkuwU4jiEo5LFL8h32+fqsw375Gbk0V3EfaMaI6x
IppjRMsqHNHlxWOJLs+jiBA9kjj/jLI5HGFGCMqoehKzchRDWTxx3SMplna4
pT9YEcWo/uDILb8p3x9Z6N9lk49FAeET2PdRPCJevjFyyP08QssPLL44x2Ge
sc/QO3cVicg93JaeXDmezkM4i7gDy0Vscukd4jI/0zscSei9Ye9gJYqv0Tue
NMLORf5z845ziT6VKPdmiOUftgvWo1/FNO4S8/+lVDSiixBOcEUsJ4jWY3hG
dQJHznmfdILI4aLHxWavkAw6wpJAWDqWGq4w9jTE/fcMNmPEE5eeSzxhqoYy
rpBiLNMUx1CIDDvE5XEdIhxlCofwhh2CLRvDIayZqd9yOoRZj9wpHcJv6xVi
OITL7hDKOLOPMQeYnhFFKl7dqAp3cEeGEXGjiMSxzIQ8n9qkO9ITzn242BXL
GSbE0oSorS9KDsa9pJzXg387euvvsGuC9ABqQoD77ihU9p7f6IQvXiB5TmHD
hHgTu84x9Rx53dbfpkIZ0fCfsBo+mg54ZeTo77VFjp54fuC499cD0g8iRyUe
kx8zyZSFMcUIUV1h1JziPCLIcUcIoxSrE8Y+ue+CS0K0OQU+ywU+7nSBiPqC
CAVUeoDsANiasuFlb280vOPq/uRww9svTHhUNnzeoo5xNHy81GE8waEv3sQh
/CuTSXf0GfEXj5zfGX04enBZz1Co5F9Ojj2VHJMMjG2O2IXQAjFU8bEo/hDR
JYzuD44Ucprc5hiT6DOCw/lwhgWdIxzi3JKFxLHPUBh7TFA0WkyQFE0Sfjij
PMSjP/hgacdA/nePxbzO9L/0PZlPHVLUoXnb+pXEoXlN/UPzm4UNlP7rMXpE
pC4o5ygMRng4sPnIsYHaI8fC4WHYKQbqfn4MGd7K3n51aGVfv+LaXfnjl50p
Jdqx452TdBQ5YZRLj4wlQ114AY/Es4lcTowbUriiuZGcYZgUJdecLrc5boQR
4iaVHqTSfbCLiwJRClSXRvpQtEQjVlzpnPXgCCwTRitQxY0rLh4trhjIefbY
ztz9r4ZKXjp5cFqZcCQlUk8ML9qdvffl01dNvuvwA8V1h5OL69Sjdy/PUbyD
GU8OCSdqiRlcnNt0h1DzGydfmbGhOuxGInhQ3PSh4dtmzaP9LLmoVD36zcwc
xXVwcUtHxIwH1/Nrn9jT1/7WceFJopLlCnvSwSVtHburfvyyzZNipiZuepK4
828UJ3Lc02KG3Oa4226PEZmafRFMiedOMkdJiJe0xr8q+DxC1DHGJTES1g8x
LKEXHb4vr26g4MCxWAnr7tx9Lw+m7RyyJ6x7cp85JBTqXAOU2FeSHFzY1BF2
JKOcRUdiVyQ6JSFS2Lb1l8csL1KlFx2evbmur31YepEIadzSiwYafnXM8qKk
KF6UME4vshLcmeFw1xpQC8ioZ9KiVsuL/Iui90tmsht7qC1OsuOIcN2REa4c
g/VEG4ONH+UkjBblxMh096Q/cejonUtyYma6O4t+8OpgOl3pfCdZuqL5jyhY
Dt/6yLw9G/71UKh1+KTIddyRLvTLY4oYYVO87HSO3puZI93or/pg0fNDA1t/
dcwl9YwPd9b9/FWzPMLl85n8l6wc8cxnvCIU0PDEpLh+5YnwK1k4S3SmziKP
elj6UOS1MX75Vv8CWwflol858ufgmPJnR9Lks7vU+AKlCfGqaeMbg/FFltzZ
MzF4Gppd349/rRt5l4Lnl3btGUx/YmgMufM5yZvvSHJRmYjfFjZ3HEkuLhtK
7ekfLPju0EDtz+lJwrt2l//oZXY+tuDId/ozd9xFj+IzuhE/46UlHV0MpBRV
uhi30Z1Ev2T0Vacm3f2VwWL832NCCsfrYt54Lua4L90j0sUi75vTKTfLeDzs
ZiN6r0DMYb9lFyhTi+FvCeHAfMgq1sWr1URN1KLeicEzmLp9iI3yi6krCgdX
9Q/ZJg37Iku3R76ZVWYGVWNWwuiOd3Hk5f9DK4L93A+G530tvzl+9Btrc9ib
0fmGb501TyihOzzY83z6E3vobEY8dcme8oOH+P+m0zBS37nl568yxno2d99z
7Nt+uDwYku/5q86ukCJpdHNHppWUWd2c2CYcNppohmsDwvM42myrEYlfC5AX
mTgc0VElkGMHIwYWjR8LmDQHMmo44xgC/HEkifEHEs4lvD+/mCzR3vOZnkgl
fX5h657d2U+/bLsPkc/uifvTdnzv8IPr68zwnt74W0ZApid20N7WD6x6dO/r
dyxMdQ9PnjnPNTz5oXmK++jX0nLkmPO7uiWo6GPghGbPZxYQX5+SkjpQ+zOR
L775pXkLGM5LH3TTB0Ptvzs5fNvseYzAZEDmZp944nPf+rbphlJZfewC6a0/
e3B96W/uXLSEW63oX7qg+0DOnr1/+OxXv26mkcIBLxm964vtgDLyTwyXIKwZ
87OlA0YOWxm/HZE3t208DnghMsyxpAUJI69aPY9obkK0cYuD0zd2mD7Yt/Hf
jz+/uG3PQPEPjjl9UNaud5a8+Oq7V9821dRf6YP2AsXuou+9PLS4o38w52mo
9dDSrn51KMXfr7h/uLgtNLSsu38wf/9QjNqV6YrGoLf3Z8mFpc+nDezhswOZ
u/fyNYpwuIyleLlNZgPS+Rjq0T9dYU90mf0k+z/FuPD1QNaevWa/qIzd7bi7
luv5Yrido4wxx+l2Zlm8xUgfRL8Xdr2/jeeNnkaMtVhqc7zoGhwj5GNRw3Q8
GfIpHhbGBlcPDNHtdufuf3mg9MVjciBd8f54ZnmTaK4LHPh96ED6E3ulBssu
j9pr6jDdgK89XfL9l+h/e8peOiRrqX/RmWLwNQZ9ZmZKQaXvhbNVW5LBN9MR
Ix2QXSIaNZ7v+UzfOxXpe+IybYfvOaofc6P7XrM86XA7NOtoEeC5FkLOI9dI
iH41wcjYL+7dNKLGfpfQ8Q5/K7/uzZsfXGCvgjy/uGPPwPoXjoWqfnry6N3L
cliRPZy8vo5nm6o7eug3UHn4mGWbDh9Ds2965Zg6UP1TBnGm+BruJ0ftLj36
jYwc09uYzJ648b5v2z3vu5l7Bvn4h8v8oWdz9z734/n1TaevveMuph1mVY3y
a3mdy7prA+u620V4KUJGw+sOLm7rMENGJX6P5wv3eJbnJYS9TnZwNq+zqiXz
wl5nHwiUvxfkkUJr9HhjFtzY8wSi57lpo/re+IO9fxl/sPfhyD7vlW9kVzPt
sLteX+VPjh9+oKiOQss+jynHkXuzyg4+XN1h9ncy1nPZXU+Rvuc+8q38stNX
33bX6au/JMx9+pov3aVgeftd9rBPDbvdJUw46HY7a/7jVbrb6Wu/fJd4bLgd
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
olONPDGYcvzC4BJ7qGeEdZ5YQCUQKK8M4Q6uKXucFQgRlCVa+AidcVmPVOLj
xqJ6Ih/xaa1HQDRh+P6brwwPRIcnSOu5c8L0XH3FR7k2cqgrtcVTLndgM/uL
DOSk+iBlksywYm/nxlCelUJ5ErQ1d49QHi3763j+4A1QH3LTpBIc5UoDG1gm
0MlqBTZt+gqik2Ni04kYrktgk7aO1g1mAvpaWKbgJqhnQ4KyS3q1HFiejZt1
khtSozJ4U0kM0qhSwQziNsRuZbCNiN/KEb+VI36rRPxWifitql7GbdWM2ZAe
1cA2i9itthkfBMnBB9UhcKtD4LYVOVI9DcLTANFpQMy2DUbF2dZNC2lNtGBI
b6b1EKDmXgib3hzCczDT0terN/cZ6+3yMdctj/byvVh69LXFBfo/Xn+d6PG+
9dA0vbkf4aDehOVletNjPXykN2K9DeuGx4J6fT8M662wLY8G9ZrtwaNPv/XX
I0+/febI0++cOfz08bMHn6KdOKsOfef3iJkO7DmpDO46dRFt907YE6cuUtSB
/pOcq9H7eyXUe1Ix77xkR8lnjJud4tDzu/qHo6CU6EQpySlPvjgoWXV9A6Xk
yQ+3EiBr+qPMkMIouWTpAssGc1hZJkdeK5aTFXdCdSSz6knWAk2pmlHrtlRK
KBTZYnSXXE2RYoiXXD3Bkq5aJ2U3OC9DQJqk582ZIuG6SsB29+TPCvhg2pKp
l2uzTMjMUqAJmQ2wZSPCOylM6RQmQkbAvpag5QCy3G8gq4JALZagMUvKaFZ8
BmUtEChS1iopE+LE0uCq3E7lH0FZl54G0tIL/HpGAUgrkpRlFffoUCc9B6Tl
lkh1ygdl60BZgUlZuVQlkSFZyiQp21BtUGaQVgHSKkBalUFadb0krWabJK0W
0Z3F2QRtKxkDa/VtkrMGcLaNBtYawVkjOGuidRPQpgD+sTnISn9LsFdr6YH1
9mrNvXLdEkJ419LHSWGt23u0FsOajbVgDAL1j9d/VstcX6C1PIbXhAW1psdY
12jqR2goHzbuAHCErT+Icwjc4LAEru7R4F8a9z6tqCeefuNPivv0U2++d3rv
m++9//Rv3n3/6TfeVfW9vznl0ve+ccqtD755Cv80OHxK3zd86v19v31XUU/v
/917iuf0/rffO7H/nT8NP/P7/xl+9vf/8/ozv39fUY8+e/KviuvIs6fOHHn2
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
PiDYBwL7tE6sO3v6tC5ab5/JIPnC8hItABa7IZP5hkx+9vrrtGlgMNgf0oI7
QlqANoDHAyHBYZC2E/IZ2EkgAwAwAOC6HxdrlQ/IKZ52Gdb5BDZ38jXyOUFy
CWs1rGVnMBqXg00vv6aMFcxEC8yrLDA9YwTTK5aj1qoInwDTgk8dXfiMuXGT
R2SkYtjHY9HmkjI3lFr8qIkcTeieSt5UCzR8JEiDldGURC4v5SZ0fREzF8IX
SimeaJPoKH+f9yLMiTUstPrrV5jap0j4LtHrM6frDVkz9OrldzuhA3AiLSV0
94ahy5uJEDW9QUWMuk25Dcw1grcmYSsyyVwzpK8F0WmLviYPzOWDufx28NYB
2esQzGUXdYK3Lj1nPeQPll/SDd669YINAfAW1ItgxQZzJWCutALMVYX0sqoQ
pE8yVwHpqwRzVQZz1XVWZKptrg8zR9nbakSngreWPq2R1tanNdHa+7SWDlhn
n9ba1UfmcBrbu/uYNJK1oOAN20AbSRDM9YG2Pm1fcZGq/WTmDMWtr4Lc3aMo
woYUJUlcle7Rf3vDZ7WfPDJdWPBxkPYEy9VBEhTgovsJEuR/AmSZJtWPgEmy
Hg/TBbIYnQ5wXnoTqGqA1fULsgRY8EdbRhoXMMUl5/oYd41MCN870hre+SiX
ScatpQzyxPBOQpSCkGAuYRTy5PVW9gEgKXruSTcTKlPkHm4YMRmVwE02y78C
OJcTOK8E7uDqkv7TuZsGRHwJc5E1t5M1cHafMOUjXGLTfeWqAG6CM9wcmQxa
l9wTNpeYZjdr5DQ7W0WYl2Ck33uFpXD/8MmP6v/wqY/qjQCuKXuGXpt6t1ED
SrRqQAUGbMWAbf39SfrKZRlgrQEKt80INkFcJmjLapK05TQjyGyRCkfa1rVB
4dpBWzvUrUPQll3ciUCzCwoHK/Hr60pJWzdoC0DdQFt5ELQF9RIQVyoUDrRt
Cukbo9C2yaCtBrYZxNWCti2grc6grb6pD/rWJ0jbRiNlrQZp7QZpBm3tUDew
pnV0G8oWFMrGSLKXBO4rLNJ+Mn2G/tvrrkOHJVxILwdiShi1Dxmb3wJqL8+a
pgWf7NF6nuxxaYEne5TLtG48JV/+Jw0Fe0Ky1QGu2mkGY4IvZoA7pWrV9weG
67+zK1qlxz1GqCZKEQNAYibQJXzk47aLLRFLiCViiRIlf8ebejJMYJIkUDLu
OyOqLtZ4S7jUWh9ftSaPVC23EyKXDAqPrC0fOJFTOSCCw5vlIGmlwmU5SRJm
sIQDvfG+DReLh+7B26c8LBGCzbw+dpg4CwjdK2cKmZPsJhsQ3TISIrOgkvmt
KyzFSn94iv6PgCnjkSl6S84MfevKuw2IkKkBoMJvSYhK7k/S1s5/QF+aRohg
GdsQJhKiRgHRyuwmZGqACLYGIKVDtjIA0lqAtFZA1A6IOvQcgJS7vlNAlF/S
BYj8BkTdkKyAgKiEBoAIUVkVLaSXA6QKGiCqMiGCVW+RIWKtBVEfIOrTtjb2
qaQIAbTgpzXMT7PBUGuHYAhC1YUF6EFAQH66wI8fkeFhMvPZ66BAuoh1wIng
Bmvl42Lbx/S3bjSA2dUjoAlgDWYEMd0mMSYtTwQtYixaGOftNOoj/YFDDd9/
0XkDqPDPkxt1EXGL+4+QAPE7S5c4WUiMy4JAgdryZqS2GOMNAghr/MEoOo6N
ACEj1pydaqtEYYvXeBFf5Y6ja8v7BQcuQ1IeKDd15SYZvwkILicPqnjoCd+5
8HqrghE1hpt1kyABr4EF5VPOq/tiDDKa8wdy7r/SkpS1oIHdY+asKXpb3gx9
2+qvhGm4X9JQ+u0k0FCvp6RtM2jYphIH5XNQFBsQuc3ImQhDqwFDG+I3wADL
ARC5xR2AoVNfJ2DoAgx+5EyAYWM34reAiN9KKwxFAQwbTRiqQ3olDTBsglUD
hhrAsJmKUt+nbaEBhq0SBqEoDc1STRoNGprbBA0qUUD30gZBAQtah1+ICaK1
APXj8LQZ+vBnrxMeL2Myr3b8nsu0d2Dm+j/LroFdrWo/K70abXKk9GrtP0qu
1l7B+q27L9Xemnop2uS3Uy81YjrBTA+ZMQzcMPt6kpGc4EVYDF4GjHyoPxB1
ECGcFbksaoSoXENWLrFYSYrLimdMrFg/YW4WAUUQZhuJi02NawQ106JT48Oy
0qwrnMiu3HEkY+MO43k51QTsuCU7IibbQHP7b7y3ZIL/+ntLkrDYoCQc+uot
kyMZGlGjV2abCI28YYS4QDY8/TTW1FPWHdYlX6k3Q0woKESIKOXMmaJ3rZup
N6d9Rat45FNaybclQquWpUtRIUKw5ZnbpKjAJENNQlTSKCr5LWCoVc8ER1mF
bUJUcoraDYY69HyDowJwVFjmh6D4wU9ARmVgaENlj15miIrJEARFh6DoYEg3
Gaqp64OgSIbq6iVD9WCowWCosVnmP80GQ6aaWAAZEHXC9uYXaYcfnJEoIyzt
xFcv034PO1p5Dc2tHa24Bpt/VXGN9qvya7Rf0jZeo2q/KLsGKPx8w9Xaz8qu
1o5g/R9g6aeln9ZeKfm09vL6T2uH11+l/Wr+x7U3p1yiv/tpn+IV3+DTXpkN
tHb3aL1Ea7eBl5QkJmBPsIQv0HoijFabgVbTgEiIhhue2jUWtHzG0Nxx/eNE
68Ph+47JuE7cNdjMc8T/TrDQgsAJvlrj8mX9SItV2RN81ZtkjcaXe3S+uKh0
S0XSczf1H1xV3GfpkZAmKJAhSxvCdm8JJAp4KUmDX7pzpjbtOitak3TdIOl6
5EZ7uHaTV/lcjFux2Mj60siLISIrekUPXqm35s7Q2yFOJIuE5c2dqncXztQD
hTO16tmf0goevkHmPBkNIKtBX75W0pWaRbIa9VXZJKsJZDUjXGtBvtMCslr1
rIJWqFMbyGrTc4vaVWDVofwTwOoEWJ0Qpy69GGAVQ6BKAFdpRVAIVBng2ijA
6pXiZIJVC7C2hPSaLX0QJxtYFKcGAyzYtiYJVlOLFKcWA6y2CLAEVHlF+vCk
6xSfUSL487UJ2smvXaYd23SttKprITJ4pBoP/6vqGu01GrB7lVZ+DWA4iuXF
grlfwH6+8WpqmPazDZ8GcJ8WsAnQiq/SDhVdpf174VXam3cBtqt88BShhtpQ
7mwttAew7ZbWE9YzmTUx/nuStb4nePWtnTeRJA2IcXFR1ovJm9viLYG8TYpC
WVjKIihzR6FsxK0AJWrWLccEapItt50tmms88qW4jMSnkqa4rXhPyFW5nlvV
f2BJXg8fC/1SvBGYlRAzQvYRLIo9ArcHh+/73OXadBtuArUI3GaFg8GRt/Qz
b7liY21ZJGtTbdVzWM7XErWS6Z/UO/JnChUja2Quf95Uvadopt5bPFNPX5WL
1Khe8LZ8bYO+ArylgjfJWqO+hqzlkbVmRINUMvBG1mA54C23uE3PK24HaB16
Ac2EDRHhegFbt14K4DYAuLLKIGDrMWDrtcHWB9j6CJtuwbaVtQCgBl+v3zYS
tmYDtlYDtvbOMGiHkmcYkLn0/wFkf/j6ZdrrNdciKvxvsfx1zbXar6uv5Vo+
U/kCFtXXKtdqr+OV14Hj/yeQvEY7BvL+q1JSSAGk6kn6rgZ9nwZ9BnmQuFdA
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
Ju02L9NFwlAFyLmJtex2hGEC3G6+jmF6A2OYvJAwbARe6VlNltEit+xRJMjt
orBG4njLjHZRUteF2iFKajaLAjheYVG7KCa3K10CDJfC6QjDZcBwuahEVVet
gNMBQ1QdUCQMG+pXsds1N5DbrQGGa0UbUCQM4XLS5ALE/4YEiL6UEcIIjEt4
SMjzDKdEkAYdbGxOGJsTDPWtZMdbRbGRMDzZCa9azYWwuCYMNK4NI97WhNGZ
qZjKNaEWf+3kGoNUSe0qZZrww5MdIeSldACh45nNvqXgcYnk0tk2nv2vV7F5
HFzq/vcd+98Y7Ss9YML7PiuR4fJDncuckVq3GkDuyZBcPlskuezUR/n6JZGb
2fe6W1/abScm/Q0m2ePOIyYvMfizG/xJ/GyZ7X/zdgnwr9TDAmzGuJ7+eUQf
N95ebbp147/HIW13d+/T9En9bYxgrp055FnIgfjcDmdq0SpwmEEYWmSatJsR
JOzA3tRkO50RnlOTO4JR+IifQsc/uU/9Tbb40CRz8vQZkDwNFml12pw8b/Bg
8Td6M+fvYvEPHoPIuySL1fcEiaTYBSImqZZtMZ5YhC0uSKtXLDaAxQaRInkE
jY1i4aImsTAbFpm/lHksqt0u7k2STJY17BDlqLLaLWBxMZInsYgqWwoWl4oK
8FhZuQy2uBwsrgCLK8Bih6ivXSka6layLTbBFlsaV4vWJsnjjqQc1cEFiv+6
/QLR0x4iAKFAvyb6OF4CtqWo5aF6f2Zl+mxaH3jpA3coYnF1GA5rwsgbAdrJ
dYBtHb3CEXFzfRhIPUVvrjfKqr6CvvakGU4r22q4NNmVVEwkAYkCictRyxSN
cEonE+lKpGan/I4W3kAjj1MqFI3kksXKJfPMNI7Q3gSNr6WN0HY0TmcajRSq
b7aiW2k8ugq9URtbHD1jp12Whd3SwpHUcMYoOg41yDyXyPSRZN61+B+eZFK7
9ys1/LcZiwAuMmU2NV8YydfV/wckWl0kot3j9k6vzC+SClYdTSlcxd5n5QxK
/phKL+kjm2Kqh1HaDDoTQSeXZQgfr995xdW3uQVXGmvePyC0KjovN9F51UA6
dbdcALc0jzQzfusRWm/z0hf+ienUFs26HaEVbplcCzrhlkQnKhGEJqXXi+QM
orOB6UwjQhc1Mp1Z2c0iK6eZ914Vg9CS2i4xO3OD+N3Mxfykjh2WC0RF3RZR
WrJYlIHQckVoZQXRuQxuCUJRdTUrQGeHpBOO2QRCmxs7RSsIbQOhoFPfH+JM
hUMCzF4JpkDPJzw6PkZlFRtjJ3NFhriGi95bS4Cuo8N6/uwGECeLqNsQ7qud
ejQcZ48ytfSZR8Ncr2Cm9B0ndXzXmc0UJrw6VBkx/ztQTA6xgNIO1ApF61IX
sUb/CP/saVa0GosNoBXe+aWJ1o+LRhmDGaKVFhf2Is++Ad98NXW4tqmzUA5k
+LYd6BdVlm2TWbaj7QuiE8QO8YLoaDqeS4j6uiNq4++z3dU6gFOKrwanxsO+
TZzqNz1m47R64dQ12fyXOQ3w4DRLX0c4mly46tP5eSuYw0Dm0M4uaWLRD4cF
/h3BNyyw3NV946QomV493VLNaaZPJhZ9JItXmFi82sTitZJFwy2nmtxSH33e
GjDQLU0NZBUayLp7g8BiDZJrrWog6+CWdeyWzCJKstgAFhvYLTPAYybxCBaz
c6laeD9Jaf12UV7fJVIKHyUmRXZll6hqelxUNWwBi0tEBaqyYqmoQlWDx5qq
ZXDL5aIePDaAx0bw2IT02tKAIh6bVotvgsP1scz/hgaIHrDoAItIqQImKWCQ
VsFzTOFiMYxIZG+0+EoU14YZ9kgonVwP4k5uoMOj4QxlOFGondoYTmhtDEeQ
3RTOZ5RmN/FnUGFcJzcy2I9y0t1gApMNlYUAcIa54FwFQ18FGlcqKpebyGQf
Hcc+SuPT4+ZUS1TCQ7+pMnloiTuV74LK/egy3wKVu+GfzxVOkRfS6P6pkiz8
82hz13Z6VDnjxT5qJeTOIfh8CMMhBOSFdMaOeh591peA9B0USJrj/EqBaDOW
Huifh90ibYX5djT/AY5yoyQv6BGSsqUMGgxMirRkms6Uwo7D8TnLCEjYLXBk
n7TSGR0WnMdghrhibJR3k5xxGUHpI6G80gTl1SYoVYRlk5ziZ0x2OML+Vo+w
Ad4j7J9cETY5dr5VxCbVWEKVR4LLtDokWMllSka9SF1Yr5hsAJMNSLGSy0W5
ksvcvGaRl98iCkrQNTZ0iQpUduV2cePMlSKnqktUNz8hahq2ispy4nIJmFwq
asBlXTWqRnLZWNchmsBlc/1K5rK9eKX4OjhczUqHin/efr4JylAdSoHESkQK
ECmYSEklQ8muSO7lwtGgEYeNdNjEXIK6k0TfZuZyc7ifdmoLHTYTlyc3y8+e
3MRMsmla2TQj5Y+lH78ulJjkrpN47OsEi52KRd0ll0sWnXBJp+Kxp1UuY5xo
GqsdUyx+VyMd8h8VoweweChvpPZuNrE4QnaWcMdnCqbwbUXc3JHuq7xhVUfL
38gOdRr9DBovkla4hJvJr8QFhikGnplBtczOzx/wYJDCa7nk7045TVVTVLn5
/051rbTcQomj+TrpX+qQdMi2D1hez7DwdAfMqehK5ihSClbsnZPRRvQRjAvO
J/p8cEiw3LnziitvlRh6eKO+LDgDNfMyQtBXm32FQvCqwRE0e2PazSqn3kI5
NcB9uHq7e04lbyx+MAq+WANfrAGDtSIhRffGOr6eIDmDvBEMotIzdQYbJIM5
xGGTYrBZ5KMKClp4rxhxWNXYxQwSi7lVO0RtyxOitukxdJCrwOBSUVu1lDls
AIcNtZLD5voO0QIOty/IEkcvDlUMnif6UoeLniXBohem6NT5WyEZRNMo+laF
CbAn1KjGZYnrXFZIOMIBmThJnY0AIwi34OXmCHyMoEy6NQL8PRZhpTP439Zw
/goyWuAorVJm2JNUG1TwDTVI7FsDAleHSBJXmUgEhU64onOppNABCh2gsIey
qonCbz0o/JQX50dpR4jC3JHaAZq7UkdJGTVluLZxVSHdaY5v4EgE0s2O2x5d
1d3ywm4i8G/gDhj6GKboQ8iFEHwXGfAF0WdB6t+YwAGDHSZQup/c5eKjcDNG
Nq6rbaxurN0+kDXTLhabuuAzl63P6hqi+rq5nGKNSOOW0eKvUGPcZE0l7Jbv
eiSxkYgbSsQFEHG+HeOAXVT31EmRRiRl54t2XzYk55sF52PkrjQhd40Juetc
yOnOl+rmfAGG8xX8wR250juHaCV3DNHK7hwiEufOFzELEEnRIsYlEXa1aA+B
XFqdFczVWUax86Vn1ouMrHpFXCO6w0amLgfU5eQ1KeKaRWFBqygqahUlZcuR
RuF6TTuYOCIvr/pxUd/6hGhoe5LvwzgjqV3cNrNV/GFWm5iVsoQvnWsBdV3z
MxVtQ1QMDRaOpSBuGWLo8pABtPWBtr7VqDVhiKfK7MKl0VEpnyO6yMA2c5Ev
bgFYJ7dG0Nc/FkFnsrYRb9uIvO0RdjojEvEFOEPxz3mMGdwazryeUiwqa5Rp
1W60kifXgb21tDVgdYhljJshOmGIzuUKQxhib/s4Y11/MAw/JwyLR/GY9XD+
KO2gGuzs5VA6XHu2UBnhVhlIl9LzRzZ2MoK+LiskyNjl7HT0JxgDCcHzCcZL
DRiHKMccAKPHrREUkWqVA0G0xFhE9JjbDIKj3cu2F32R3tQX2k0wmiC0e0LI
mdNi67p7VoVILli+8/64WjTHADHQABGH6xIsf2QD1C9EuM+0iD9tkhzU6Abo
RiIq9hoTide7SEyc6icHNcoAs2CA2bfKRfys3wXhPAiEDsX5OTg/R8v9/Tla
/m3naMkP3iFmxdeIOQk1ILJOxKLiEtEkJiGQJjWI+ckNIimtAU0iGsQMmB9w
zASOEsVGkY0iHPMUjoVkgIUtorgQOBa3irLyFaIGONY27wCKEsn8msdFDYJp
dfOT4vezl4nJ9zSLy+5pEZfdS9Uqlt+YrGdPItFh+B5RiOoI8Uah6FuLWoeA
KACgxU/PnC7T0zmEyzGCViLQSuhR1NzOEMqi8y76qlNdROSOCD6zEZuWIDqV
X6LXtnCCk9E8tSVc2SmjSX8QeskQtsq+DfDG9cylySOD2SOdK01gLlNJVe8a
aS8AOsZj9QCzdoz2bfUY7avKMdoX5QCTJ66j1MR1pOoWZUJ9DQm1q3669EZA
uYxuLE5PAFu/ytrR9LlgMJlLPwPHSILQThCeS+8FDgqhcWeFX8lAaizx3+6y
w8HnpjYzcvKqU/ZCYynRwuRZOW/6mv3PlDPlgqExEV3ALZ6Vj7ad98fWiuT8
ZfxqCOHnQ/jZCD9/HOIsf9x52RW/M4Ko7oh6LzhdD6HsiJLDmKtMDF7rncHk
qS5HTL4pUEv7TRBccijYHIrzoWBzKMLpUG0ROMwBh3lgMOvuCWJmXI2YDQ7n
gsN5C2pFrMEgAmkyAmlKvUhMAYdpjSIlvVGkotIymsXCzCaRtYgssRFBtJE5
LCAOmcEWUVLUIkqJw5JWXtknDutaHgeDO1STSCw+KWpawOIcF4uXR/xRMvhr
zp6OxYrB5Z4MhnryJ/rWh4u+DahHwwX4E+78cco06CNb22aQRLR0wf1OdkXS
J3ZEaqce5wLNp56ItNKpjXCk1wThDlN16fyyyz7GjrnVgJHe20Qg9m0EhI8S
iKHuIK4GfJ0KxA4vILYOBPEogziaQfyrGqZSSD1IIZWvLZKD1FeShysI6Ukd
0h3bNqza2bTvrzYC0d+LQwYq/L4Uw4w1xwvpvXMGRdK4uPxXckObRNJubgQH
GqK3XtDXWy94Bk9kONVaBq1b+HgkU6ZTkmnlJtC2d056M/Bcyq/IIhPshKeV
8DyX8byte+rESHeLNM9PPdDULZLRRMVfq9BELaD+kMIqbR+dEoC+MUiLu36I
Nn/KEC0RaCYDzdSbhwLZodrCW9wtsuAP54i4WfMZTbLIufNrGU/dIiWaCK7A
MymV8GxQaDaK9IVNIgOVmdkMRFtEdnazyM1t4cRahCpmNFtEGaqc8Cxr5Y03
9S07kGAfFzmVO8StsRuQZB8X09PWiMl/bhI0zuK/9nP51sBCFSO6JIQR7dNt
cmWIxLOTEEWtCVWIAgYC1OLDiPZtlHVyUwThKSMqGeJjEWY2GUorQYkM+jjz
+USkdvJJ8PkkfQJHxNanIvWzJ+hLCN+Tj+N7n+Cf+3iEZaILVvzMPnJOk3vq
ztm3KVSCukGBus7lms6zgMpRtnmsdoJmrLSjR4H6JUD9O890RmkfcYwdySse
5nnO0wVTOMKu0CPsBkTY5ynCgtIAL5ReIGc2hKnxHveYY+j0AokqfZ+Bq+wn
jUvU2UeNxQ2OsPrM5qx95FlnNjYvpIa5kerXEXajZx/p8lK7hPVATEabMylP
wmqjo417SjZTgpWBZWxB8XWxlt8f/X3kxXxT2Hu92Co1mrPB7hywO1e31Wsk
u8ztde7cxl0XoM27NkiLuXaIFnvdEC3+hiHagqlDpK3e7LLVrFvA7e9c0XbR
nycg2laD22pwC1sFu7HMbq1hq4lgNym1HtzWixTFbvrCRuaWrTWrSSxCZWe3
iJycVpGb0yby81rZWkuZ2xZRUdoiKkvBbnkr7w5IK9zI/FIHevUDi8WkuxvF
kIuC0V3S3/H5fI9igtdY5DA8VfdTHdZQ5adhhp8yrJsY4M10iXvfFlMLKYFl
E9X98yQDyOA+QeA+yZ94Cm/uBLg7I2nvwE4m9elIopeKXimObfwdMOQnmWHd
bNFVdlEQPrndHd++LQi5m0NdHusKvLTRaE2IZYREd5VCd4VCdzGwbZMdqAMd
6HF0oD/WjeFx7De8YKkGQdSBqlEsDYGkvw5nf320o5D9dRk96erRzqPN27rw
C9r0mWB2CcLPBYHIEOuGCzwNbCfR8WJ6y6py8efebdbFrtvC5F3RxK660YpH
3rWdbdgTeWuWZ48pt8UBUuvAqJvIeMqBqu2L+dlLji7IXcpMWunIKPoRiuDx
2ljLrdpd5sGPxzokLXfMvpxY9JUsXmWKuMpHicWE6/212VcHaXOuHqLNvWYI
mBwywEfTbvYecYv+eI6YFVcNH63miBszv0b5aK2IZx5rDR6TU4nFerDYINKI
R3jpQjCZmaV4pLhLXprTIvLIT8FjQV6bKC5o5ahbCR6rylpENXicNr9JTPxT
vUgv2igyijaBxQYRdGGwH/+dniNOtI914afH2U4Tfowe6lHUxjBCj8CzEnc4
bEV+FX2GT0Yq9OwSvScidYu0EnIE3k4CLwqvouiLdkbhE09HMX1R2qlnuMhK
n4nit2jx8WnG1KiTOxXAZKRPRkooUX0w2T7A2delm6sks++xMBeVbqYKI4Wp
OslQ1wRLU2UqxxuzoV5FZa/bXGiMnAvBTP/B7ecomXphpgc9Ws+d+TdoKynx
gsglGzq11nV0P+jGz4QLSytBFiRxA3jBBoLsmf6DImjcfsKM4Nlzrdfrm0zL
G7SZ3Os6owGk1QBy4G4c5ZdW6Y1H5+csORyb2cbeGGQA6UtAWjvGgMrf4xiz
c/Jlv3VLuXQF/cMeI1l2yqt8JZlXm8ik3TrX+YPIQG2WiUzDKa93OaWRcE1D
oDw4ZeEfztFSH7pDzAadc+N1MmtAZo2JzFqxAJWUUstOmZpGZDaAzAaRoejM
ympkMrMXNTOdeTnNIp/pbBFF+SjQWVLQJkoL2+GYcEqiM4HorGNCb525mG6L
ZvHnv+sh4ljLSI8u0xRhPbHcHE5I0mErrVsCSdG3DbU9EkREcmol4B43iCSE
rESgDxGITz1DLD5LWJ56Fhw+Z5SN3rBLJk8+HWm5SFL8lCr8qD6YY5+JQRlw
wd72MMnfVuIvzMUfnNGp80cjWsBnGSbxU4bY64bfWF6jpP0C35uaTnOWfV8Z
4j5liC/DEFfqzeZGNJvrO3c27qFHUzV+AujAoA8x6EMMstENJd4mE3l2Ohsq
yQtrHECecVOKX7ktQMrgensx02f9NzOraemfxj48/OG1RtrK6lrrN22SA4d2
ffdqIuEngythCAo5jcZBopPyXCj6Gij6EYp+BKHlN91TJkYwhvd6M8jLZKM5
9woySF+eAcVd7UIw5poAbeZVQYzgbCA45xoPg7xBGmSKF4PMvZWbTC37nglA
sErMia+SMyBUrI5hUo2YnyQRTASCSam1bJJskIxgAxBsQKMJDFHZWWSQTSJX
YViQ2ywKFYYlBQiuha2iDFVe1CYqS9rFtPgmq5h4Vx3+T9GNCS3y2TMWaZKX
iJ6lYyWF5kZynQeFm5hCgpAYBIGobeGKQlQXakek6AOCfS4MyTCfimJnjCIQ
iUOLDiLO6UwvfBHRePJ5QvIFOvDZc1F0Ff6zpi+lb3tGJlwAq/XtBOl9cEx3
Uk+yW3pQqpzSCUqdROkGg1JX2wlMe4FpL2FqXj1By3mct8aOYUy/qRrNuZUc
8hOeC6HdzKUNdi6H3FY3nZ4OqS19lBHtbnpmN37V3RBlm/QhHM8jMEcSotyI
XsDWyUwaN7lwY9JHBdJiV+m3TPLmhsa1iT7m/Te6B1rUhYlyzvPbDN6umqa2
rJpJtND1G4nmLlKH0ccF497ZqU38yurui9RRXhtDRDKVAXy8pXsq2NTDq75R
wNMeY64ke/SV9sjNJMLqlYGSy6uCZHC9xos9TjmDPargGj8rgdmci0YyBjVv
frWIA5vxqARiM7lGJKLYHsGmDK/1bJEZzGUDuGxAIwk2YZG5qLycJtijzmaz
KM5vZjbL0FiWFbWKCmKzuE2kZbbwTdimXB8fyDwOhRvCFTtRq0M8ekSdxXDJ
ootD6he30+3YJYeox1FPUBEVUeCDudsZResmT+sQKaBghKAOH6OJyucRUk6+
EE0Tol3R2qkXUbtU4V1m00psWumb6BueM3H5NLHIBwTZCMLSBCVg3KGA3BZm
RFcnAblpECAJxpVmIMcZQPY0y0byJ9VIfq0PakvkMqb0zBHsmbSE+VISPJMe
pQy/XLweDeTWLmtH/ccgUAfS1wCSk2kYYThMOmVHy2eeWwaM+2SYqTyjNZ55
7CpXRMyzHJt+XZUplvoMZodyBYQI3HzL/XmgcPHO+2Iq2A5jfWQoBXuBjJwN
xzkdY67mwr8zHW/R7go3pVR1Gb+nPc670oXgvKv9tRlXBGkzr/SOINsjMEwg
ewSG3vpHNYNle5zF9lgtMQSCsYxhtUhIJHusgT0CwxRgmFojUoBhahohWA97
rBcLUZlAMSurAQg2ihxULiwyHxgWoArzmmCPEsPSgmbGsJwwRD9ZVdIqqkva
xJLr4ujZUgEKw+w7zvHAkPrFUI9e0WSJtIhPANLYxozgk7DFp8gK+4CfL/CI
cre+56IJOjtBZyfmfLWTL+KvAORZCTtwtotge4Fhez7KAK6PMm3fM2x80gdl
PRWhOZ8M98qbc+sZeOtUrKFF7F0+MKP28OBmjPYjr1BK8/ubyfxoUeQdbg+H
866dx2qnM2vcGq6l2z4BNmoQPxZEHBXe09nzN/LqRUQc94fhdOZL6Hlc16+I
e8gzm7r5H89keM3R4ufN8owrpuyucanNPC61SMPzMQzPcxkygfOnlUeitq47
ZxYTdfSRfc9EXYAX6vz4OFn7U4RriqqH0hlqg4DZ+CiQzrkyQJsO4nTq5LQm
yI043fgolCZNlaHUbHw0saHpafHt54pZsZVidnylmJNQZRhfLIiLZ+qqxYKk
amV8NSIZlZJWC+LqRLqkDq6TubDecq5YBPPLziLiGmF8jaCuURTmgjhQV4wq
KWhCKNWpa4HxtYgqkLft9wnqiYjy6W56MvXh48Xi+mAfieAaE4IbCMFQhWCY
hxOa0+gABAWZEpwSXZ4P0aP1EUWEn0SQHJItjowPDFLRey8Sly+RLb7MDvkS
rPBlo+CIL7FbvmR8ExHLwLJHAlKEWPWnPRtJyDKwTsDqfCqcYXXqsHaFMbBO
HdYtXmCFMfZ2ehjj0nEGrJRU5SomkipNWNUsRzaTIw1jpL09tCjyYtIwbcXG
1Qxq29pOmOKHIHEgrJxc5YSHYKVChNOxvYJgDSRYrfTemYi1I7kW/rLOUcZV
L2scNvfxqWc2ddUCQtaqBjfXcUoFreSNRKuRSmM5mvoPBireunq25Tc7J0++
mdtI71HV5JFX0W1vArXplwcN8EhPWtkjVVRNnurdIwspps5MYGLnUFRFGxkz
v4ppJY+MB60JoHU+E1sNWqvZI9NAbDoqI6MOLWQd8apobRA5qNxFDSIP1BYw
sY2gtVGU5DfCI5tEGXyyHNRWFDWLmoxG8dit8TYvsNrVeiXB2tMxdnBYN6O2
oLaGuWCVoBKUj/Os9YlICasBqr8ALoKxeU7C2vc86gUUMbaLOkYyStCHs5cn
AM9XJuDs1QlWOrNrp16JtgxhVk+a6yU3UPEDUc9HyT/kWUL22UgLsHwGXvo0
Snmq8wkXpk7CdJsXTNeHaL3w017ClPJrR7D0U1N+dbSO5YWQE+SnddJPvzL7
Ka9djtD28y5YOe9Zv7RQW7aeEe1u2EmPqaz9UAwKq68XWIcY+Xa8mst+JgJc
sBq39zDDajNudGPxHyy+6u7quXvc6CM94usv4ZQXGq0Sz72zUxpFUi7BGmOx
npFTO3Fq6xgNWG/unhIdxteCmMeuRqBVCyJkrTMuD9SmAVSy1pmoWWStV1GY
DTLmPDqourUmkrXe6MVaKczSwiRZa1wlz3tiUPNgsbEANn5BlQHqAoCamFIt
rRWhNi2tBtZaKxbCYjMBbBaAXZRVD1DrFagNIh9VkNMAWBtgry5YywubRAWq
Bj1p17XzLDqpPwcHiB+aQ0T2Hy/AK/obHSauH+8jdqZfIpOtTut6E62bPGjd
htoOYrtQO8LNzaXZWnVSBdkd6H2eJjcMFiDre1EVgffSBEKVPjKzjCtS72tE
L4F76tUJ1Gi+ii+VRUb6iqQckYnA5Z+5ywPc52Coz0ZIand6UAuDdbpRG+qi
Fsbau86TWj0FS2N18PKlNNaflLF+XUUd5yiXsebSptkR2ltIwK9RAq6Zri2D
qbav6+xu3Lm7o/YIEQlqbQa1VoLWX7Ha9ImL1eF8VKuan3FZLqDjxQawfEsQ
xeqDKgpHIAqr5z1YrGdYE+FmM9cch10DIIvNPIm1eJqsjzd4LVYDX14liVPb
BmKpbEYQpr0G6U3HFmS3McC+dKTFkjn+BK8PwWsleHG4kg8zLTcB41C+H5a+
z4AT8mQ1GrpcJmTaZ8AIm/yWER4kHZv9NhUJOeM3tL9gqLEviMdCM+PRk1bA
byul3yqE4xTG8xOrkJCr4LdVSMjAGAinpukY18Bza4BxrVgEz83O1DGuB8L1
QLheIowqzmsAxg2iDCiXFzSKavS1XdfGSIIvlQQ3BYufWkLE8bYQcaI9VJxY
gloaJk4sDxOOlaHCCYqdoNgJip1E8UYTxey3YXJcq1P8OOoJ1JO0zPlUBNks
Afy0DnEUQUwICwAm+qgBBb0Um8Fv38uqXqGPExhOCTGl49cA9utG4Y3d9LnX
yY9fm0C7a/VPvqaXwvwVac38k+lP4fCNP5r6W0W500y4hy/3EuE7FOGPKcLV
sLdXJ3yNl+isz5RANw954cm0+e+bao8Bbz5dH+aaJ72YOExbDj9eLOnGrz34
ZrzthDe3u+zJAbLJBd03Ebt8Jh3XuJ2IG8WIx7cVymdLyLK5bojqcUeebLmI
Qp7rWj8xNbQuz6XLmRNtvIrpY5oZGZyyr/J2AumrMV/EZ7UdTchuk6/Yav28
QOrLkN7YPZUgNYfiSfpGIF9uY2kT3yOXBTGkRiBWkM4FpDFmn71eQaoPjm4c
oqXdNAQ+OwSBeCgAHQqfhf8++Ef4bAV8FpCijY1BzUuodPlsogvSJECanEyh
uFqkonRAFxKkC2tFVmYdIK0DpHUizwRpEao4t16U5NWLUoK0oAGA1omua+Za
3AhtBKHNweI4KD1BlC4OkZQuQ61AgdKezjCDUPxWCicIdYJQpyehO7wQGgRC
YblPRwxGqNDtFQAROOSXfa9Sw9oHwvpeNYhjGqnL3Y2Xb0ykIoRxxHtvTJDv
72aWcfSVsO42lYTXStTyn0O3NDGgjVLQAsYXIgcCC1vuRc/bqwPbZQIWdtwL
O+5FiO5d7wGs51CKd+vSJsAxvCLzbc1oOQAugx3zLqKR2qHcETyQ4gBNPS6s
eMm6zqNNm7rw215zmMZPtYcFYauX3cDXx8A3kPD1IWgnE74BLnyNe46Y8T2j
6/6CQdQvs1vbWew2xs4GayeCD89b2CKTskLYl5tZTsmEMBUaeeL4Ghyn80jK
s8HVM/Osy/20hyYHGXl5hjkvM8tDeDNf7HVByMtBvBk34YYgZOYgLWlqEDLz
EC395iFobocgL4Pj24aiuR0qZsyrYJal2YJl5rgSZlsJlivBcaXLbFEpKZLj
NGI5rRqZuRpmW43MTIYLlsFx7iJiuQ4s11lFYU6dxQco1zHKZfn1ogr98far
z4Jxuwnj5TjvCGGUT3SiVocKGItEeTNqKwoYO4GxEybrNDCOUBjvjLCcoxCO
UEkZ9TzqBdSuSIVxtABKwnBYeCMIBmOvM2mvT9T6dlOx8bK5Al3A+iZQ3mMU
v0FjKSZ8Alcflf59VpYBadhSIaKVaEA/IplmJxTFuQsEPz+Q5F4Pknt1kmG7
vZt1kkMkyZ7B2sN2efeRWlc9SuuqCNW880ifVqlQ/WrKMG1r1XRtydpOrWX1
KrABin0IXG6GfQ3f9SFwgwjcIML1EgL3Yhe4vGrD6zcS3AeM9JyrP9PJYvU0
3dt+qen+gimyW2p2M2RZ+tqpTM0+rm5XJOa2HZib1kjR2TvI/gSyjTiGP18x
3TKF51V6C6xveZilpssPTQ7UHnaz5UDgHAiUA4FyIGw5yMCZUb5eorxgShCy
8xBk5yHIzrDlW6QtF/5hqIidESdmzitX1uyBM1BOSJQ4JyZVAuVKtL+EcxVw
rmKUM9IlzlnAedHCGthyjchB5WbViPxFtaIguxY01yI714LnWlEKnivRQm+/
eo5ieZg4Nn+4ZLlJsdyqs4xaGiJZXqFYXiVZPrEGtS5c9BLPW0w8b0d1oR5H
wZIROgV8jAdUDLTR9nrA/CJgfgn1MhWAdsFMLNsIRRsxSVS/CUK5GOU9E0Hn
WxN96YwYBtp9RjHLkmHLZfRD8NMIYTeM2ZGdL4HfFyOlE3sw3MsMh5sYDmOG
e9Ec9+oMe43O42V01ifOrWOlE6uloe8Qm79GbP47+P20aKQcZVFsXjhc2506
XHsq5wZt6Trit7Oj6hDArTkEZsmNbWY3plcKaz8Daz/CeghhfZkLZuPmCW4w
qxD9/68B25UBm8zX8F7GlaC9GtDmtL02bUGtfDUQ2pn419Kh9ZHQdoy8Yhrv
idCXhaYZTS89eCcA4AYgTwfCgwN50EzQzga0tFUwBnl63jXuHqxDmzhFenAa
eTDydM7vpAcv+nM0PLicwZ3NPlwBcCuQpytEbIL04QTDh13gErRpDG4VwK2C
B1fBgwncaoBbDWir4cHVALdaFGZXI09XA9oaUQpwG+4rE9uvmq2gHSeOJQwX
3zfo0Aa7oF18dmhPrEc9Gi56KFObod2hoH2SwEU9jYL7OgGscyCwBPVLUbSR
gqB9BfUq6jWqaIkZ2yegtRKJAHcPnb3FefotOO1eLtplsVcyTJ+lwx4CmwA2
mbGVf9xExa9iF+V8JcrF7q5ItyTd641dtL0OeK8DKbp3i6f3Bp/Ze9VK0Q9I
0EdppQgJ+q96glYj6DdUu7sMvttG3L4nYE86vT5npNffoDeI6D2X6A0menmv
4hkQ/n9owDazAVu8xmo5p5JUM8a0z+LeLEJ7571zS3n6zFRLoplqX3eq7QS1
5XreY+GG9WUUsRGrJwVoDxPWl0ukvXlx7DUDYzUhTdHazYtv9fTicm6T56Ji
FNZx8ysQrSuAdYVYkFgBP65grNmLU0xYozINP66GFwNrVF6WxLoAVQS0i3Nq
RP29pWLbVbMU0iGM9HdA+kd48fFmhXSbCellgyEdZiB9YiNqE9DeGu7uwzrS
OwnrCIU16nnUCygg7TR78CtRVuKZ1plegx2/jtrNrfIb0Yw0jbfgrkCaiJa1
l3HfS71x375J2klZ1BXvmwTk9yFn9+1145t/hJnvKHJ75tv5apRXtnvhzb06
2zsV20/KXO2AJzvgyQ7yZE+2z+DJcke/8mRk6q+Qqf9WgkxdQIPqEVo3uN6T
JjvjNW0FxLWdwbYT2MS1XuzOVsLbFbUDiWobUX0+UT2WWA6gM4sts+HjQe+u
ovi+n48+YRG/y/VcR7JYvd+Rwcd9pvXLrJlIjjP787UGyWzDgLjrjmkFgLiV
PlrsZ4fYV0K8c+LEG9zmXfq60oOTdG8OQKgGxIN587UDA3XiVBmq3bwZoTr5
/j/Am8sAchm8udzDmyXIBPF8QLyAIEYlM8iVALlSpKdWAuJKhOpK9udFqOyF
VQC5ChBXAeIqQFwFf66CP1cB4hKx7Uod4uHip/hh4rv6YA7Ux+DNJ9xmXCaI
qTlehepErUGtBcjrAfIG1EYUvPnEFsAMkHu2h3v6spUItgRJhp/TOY6UHL+E
ehn1CootmQEmuwbCdgGEAZ5RxCPHalgy8GSA8d6+iXjrbWb5bXAsi5wbR6Tu
/cZ7VFb6Uv4mi13+kLdkOSmdg3KpGRwJNCcc3PlalCT8ZXfCe4nw5yIk4U+7
6HbAuR26cyvCHZy6Q1Tq9nTucdK525C24dzHGsfw5sfvkbi/QeL+ghI3OuYj
uSO1d7NGaHtB96uge0vFNK19dWd37Y7dHRXvCqac3dvmTrevQfcQg+6rJNN3
NX7kcaGAxUZ3aTEeV+QONrJ37i/w7H8pcA/q1BJyH0/IOX77uPZu+Ox6EOiA
dHrFRYvErm7ZTnRTyzzNhxC3dYy87GHLdd1TokJ4FsbNs+L8wUn+zPnDivPp
l0uznm0ya53xOOL8OsW4yawpg2eA8yxwTmad+acoMT0GjKNmKc7nxpXDrMvB
eTkYL4dZl4Pzcpg1/kOSymHWFWC8QqTiYxo+pqdWiIVpFTDrSpGFWpRRKXIW
VopcVF5mpcjPqgTnleC8UtTdUyz2jr9JR/zH+EvFt3XjEL/HI36PQ/weD68G
6u2oJcGu+M3zLzPiqPXAfAMKfbNEHLUVhRh+Apif6EJP/SQ8++kwQjwcLfNA
mx6IOHASztdRu4H7GyhgLfr28AzM5dDszoz6vgnEqs73fkL9HXk6SaK9fxI1
zfsB9sl3JtnpfQL77Yny2wC4k4zc+dZEyyRiXBq5MnMn1e5oF+MmF+/1xvhT
iu/HTYw/Br7h4A44uMOcznUHV8vNdNu0E3Dw401jBiZzdNQf0rV4i0Zob6cP
115PVnx3dnbX79htI8ABSdW7gijXg/oA3jms+7kWpIl3KstQPjL6cjsJ6J84
uAbQxe2kAXyLGLMGmB6D5K3T9jnzCpXdcyA2gPHrdMZj2LT1pnrvLLqEBoy7
N9UebPsy29d2TzWzPUk+b/N+5d/E9jRiWwXx2XoIN/v3de7+naT8O/VGVxDP
u3WomDctVsxQbM8G23MU2/PAdiwqDnwngO/5qAXgOwl8J8PDU5JdbGcothca
bFfAwysQxCvg4RVguwJsV4DrIvHV+WOUd08WP8RdKo7WjYV/j0MIR4/dDLgJ
7DbU4mCPvlqBvVrBvS5Uwv1oqPTvzQpuE9gndqDg473cV6OeRT2PegG1C3S/
iHopYlCynSDb+SZqDwh/C6a+1y1476MW+23me/8EolqHulvy7aNYfodZBuVk
7MS0cx+xrAOtQv2bBHK0rNc9YH4ZAHvCrOK440kTyF3uZu2AWTvczHq8YdYO
RPEeMutmfef0aBnFAfLnaLE/BsiHstFiZwzXdqcM03YlDGOQYdTWjopuoAqa
fRhimzmUW1xDM/tgIJ+vQG780AVy6OAg0w1ljCelKZDv06fivzuzif/70Vxt
nTZdFKQmZn6uGdnhmLSGYwlZzfiJwNlOONu84Ex+/aDlmu6p0cHafWD6oQmy
uSavfsCUyadfHsD7vWadyauvd83KdK+m9edMMJ2NTL7wLnj13FIwXYpMXgqv
JqbLwHQZmC4D02VgukzEzy+DX5fBr8tEIphOgmenJJcjk5ejuS4H0+Vgulxk
guusdPAMpnMyyuHX5SI/E5VVLmr/XACeR8td0hPFf43zF98D6W9qJdI/NIxj
vz4Gvz7epvu157hMxzpY+vU61IYQ5deoLaitoQprFHrsE48T1hHixFMRopew
fs4b0qhXUK8C69dQr0d6IB0tnG9RRnfupYzu3IdsTvX2BCorIY3DO0z3OxOJ
adQki5/Wd4BT+QGYdjcXSUE3TcLxeYJdFnB3sqk7Kag7Oag7ycc5pIN1agTg
2hbk8NejDNx7gXvvSybcn49g3B3wbQf5to57l6dvh7BvO+DbDrd1aaC+hHwb
XXeLXJM+pnL51+i6/46u+xN03Ydz0HUvHK69mTpce2n+MG0xod61u6N8v+go
7yaqdeY9HNzmRQLYy21q/euw8FcSUH/EJQEX09GfFOActQ3lw0HoJ/sm+vle
NW70+90l6R/g4P9n8Z3fc9+G4rmz019t6oSn276Iy2w6Gp/VzK+sXhxeTtkg
B1c8TLrAVs9h3kcqRMfwSQ/C+YONEdzDk+D6E6VKPGxSCercuWu/ilw/0N31
lUok3uByfV0lVKIXj8wuFdNMKjHLpBIxpBJQiDhSCNR8pRKkEMlKJdKgEukp
pBJlrBJZqEXp5VCJcqhEGZJ9mSiOLxE1d+eLr85zU4gvqsaKr2rGGsb/A4z/
R6jET6wSSPaLUUtwvgy1ArUyWBxfhYJCHIdCHIdCHIdCHH8UBYU4vhkFhTgO
hTgOhTgOhTi+AwXjP44G/gQa+BMIAL2GSoS7K4ShDqg3UG9GGqZPCmFjhfBh
hXC+jdofTbrg5vUH+PTdiSQO+Mgy8S416Qe4P6c3u40C9kgEl5E8kDjI2scJ
X+uFOvTuiSZ1cCUBJQ+9nvKgkoADScCxU8mDuW1/bGAScCDSO5AEHGoo51gq
pUHu+R6jnUCk/xHScLRilKtlhzQcyByhvQVpeHmBIQ020gZQBnUgbdCLU76V
JMJbOHApgy8pQ4AXZRhFxwvOrgf8yj0NuG6g8dtMeWtwb1nepi5QVNu69fJ0
frveqOuoM+k+knSinMyf8OaZnMn3vUFup6OdIZ9IkKMe0MsAnkZ1D06UMf9B
U8yfYQLebdZujgSqfU9WkYDm7ek3yVFdwr23MfB6LJilxwIF+zwFfHyCC/hE
VBKgT04qQ8wvg0+mpZRZAhj4TKq0MgBfJrLTSwF8qSiKLxaNv80l2NVVU9Hi
n6D975VjxZfVY8U3IP477uFBfNNY8SOi/k+tyAbtiPw67ctRHYr2TtQaIh61
HvUoaiOI34zainoMxG9DdaF2oJ4IY9qPg/bjoP04csFxNPIOEN/7Eoh/OVzl
ASI+wkU80b6Hltacb0Ux66B+Hxe993Y0PaQH6Z4L1Du7Qf4BqolMPBh/jw7v
SgUA4O9x0SscfTTne+o9+ty7kzk+WJUMmLXApQO9+yZAByawDvS+6d4R9Oo6
QB3BSzIiOBARHM/qOuAREbx0Aw50AxQRHOgGehARelQ34GijPaZjtB50A8fQ
1n+Ltv5LaMBfoQEf5I4wxnavJA7TNpZO667dtruj9G3RUbpfsBZYSQoGzQk8
2fMz8PczgoGd6I+SHcFddQN5p5t+ePL+FyP9L9Qv6PDK+78yiTcP6QzujaWz
MXLizvQrDRALspsPzEmtZQ34BR4v8ccp488SgG+j45UsAQ8oCbhvgvT7B81d
wRUB2iwlAWf0+ykuvycJoGl90h8jxcOzSg0JmKkkYA5qbmypiIkrRVdQiq6g
FBJQCgkoRadfiq6glPFPYQkoFWmo9JRSJQGl8PxSsQhFElAYVyQafptjwv9y
8c+x/uLz8jHiC0jAV5CAo9wWjBXfN44VPzRDAlogAW2QgMWopahlqBWolahV
qE7UmvHi2DrU+vFSAjahNgcrCUBtR3WFmCQAtRP1DArd/nGY/nFIgAMS0Av8
e4F/L+OP2o16I0KXABIAif7bxkeSgP0cART6KIr0B2hvmvNdyMB7VBOVCByk
Bbf3WAkOgvZDk+gjPd/yIE0AXEowmYp+zCQbiYAlkFSANaCXCi1I714PDdiN
j6+jY4AAWMbLGKCGAg7EAIceA54O9xIDTB0C4b8+WMaATqCPGNCDDqFniY4/
Cvgfrx2tfa8PA4pGah/ljdQOAv996cO1V13424l/+9lygK87+f5EfiCR70Pk
Bw9OPi26eyfffheRH+ZK+/8nYd+Pw37wdXEeShDDSsBTPNfYDj0j+N/1wLxS
Ip+KEgCN5s+U8G1m81f0h+B4X8fwifdBBcbxmt39E3wNFXjILfUHGLMBUgGv
IUBXAShAilKAjN8MEbMejIEKlIhps0vEjDklUIESMVupQAxUYJ5SASiAlSTA
co4hAkmoFJRLBErEQgjBQohAZloJhKBY5McWiobfLIIAjJL8XylOjfUTn5WN
Fn+rgAZUjUboH43QPwYRYAwiwBhEgDGIAGPQno46fapj5OlTq0ae/nnd8H6x
cVi/2IzaitqG112ox1FPoJ4a0S+eHnH65I7Rp089Meb0qSfHip+gAcd2QAMe
hwY8iXoK9XSo0oAwQwOO70IceAU68BrqdRT470Xg7wX/vXugAW+h9qL2RSr+
o4l+sM9jgm7are48EE30M/soMPzeBAYcMnCIipfyDlL0P8SHiXyGbzxE6/LO
g0ZAwLdTwfIPQDVIBSZpvVABpn/fQAVwsAKYEsArwJ7wHzQBeJkH6gMC4N+D
LoDxXwH80QX0qAGBoxFdQJ3EnwYEfyseqX0M/A+pof5rSQr/x3Z3FO+F++8V
JhmwmWVADg08hIBagPdcDYGPoQuBRkMwhHThkjPrAt1xaIAueEQAb1ttzhr+
6QFe18V5GebP0Rfgx1ztEQXssgvY/Ju708WCRc0775lVaDmzGLhHAZMYWEkL
bCQGlsu7b1RycN8EP5YD8/L9DCUHs68MYDmYd02gMSZMUKN/Y0lviqkngBzE
3v178dDMEvEI5GC6koNZCAYsByoQSDkoEXGo+IQSKEKJWIBKXCD1IDmpRKRS
JReL9OQSkUGakFqMYAAtmFcg6m/OIi1QYWAyi8EnpaPEX8tHoScYjZ5gtPim
drT4Fr9qx5tHnu5bPPz0f68A8J2X9Is1qHWX9osNqI2oTXh/C4kBajtEYIcS
gychBjtZEPrFM6jnRvaL51G7UC+OOv3zCxCI58eKYztDpCCwGKCeR+2CILyI
QjBwvKoEAWGg903UW6i9VBCGfZHcB3BvsB+i8E4USwHeO8Bzw3chCFTvRZMK
QBAO0rjvEIeA9yeSAuAjNQJ0BOjvTyItkB/fp/xPOuEkxXBy1+CSBR4ecjro
7aZkMMFDG6AJ0AbHG4Y2WEkYLHDyl5Q06Mng2TMkA4/hgEsWZGPQsxiywDt2
kArwd/UDrefT3BCy8En+SO19tUTwulkW9hD6EAcrqYON1IGEAa0CTxP302cH
EQsriQU3Dn4kFgGkDnw5zBAjNYwkdSBhODJAGGjXvPEIeiUM95pahUGuQftX
ugS/wdTBuFuR127B7trzbuu646Fs6EQTKYTFW7dgNecFs0TY3CWCDvdaLjN0
4t5ofx4W8uyAt/hInZildGLuVWp2cK3cp8fLg0onklDJU+TyYPpNQVrGzUHi
wZnF4qFZpBPFYvqcYjFzbrGYRbEBNSe2BM1DCXSixKQTxdCJYuSGYuSGEuhE
sUhGpSQVQyeKoBPFIgMfF6YUityYPGhEpjkv/HDzOeIjSMSnZaPE5xWjkRlG
nf6padhpZ9ul/T8v+3V//4pf959eCWlYhVqNWgtpWI96VEmEnhm2mzLDkyoz
7FQS8aySiBdIIlAvjeoXr6BeRb02+vTPr4w9fepl9B3PhYpjL0AydoWxRBx/
GYXs4CCZeBO1xyQT+1BvQyrQN/RCInrf4b6hmyXjQBRJhKCYQJhPAOCHSCXe
5/UAiIOTROIwF5qHw6QDhydZAqRAHJ6sCwWLRi8VIgTFCFILK6mFZTJphdZL
RTrxzkCtcJBWvKlrRZTmeE1OEh1oIVgszpQhvCwy9KyDSKxBrfIQijYpFCfU
xgASii8gFJ9CKA5DKN6htcTkYdomCEXN1t0dRVIo9oh/Uy1sasuQ92jhr08c
aeuvLMs5hoxcNLiM0FVzdPmcFxm5K+TmhcbF59b/uxUGJSp8V3vXoqNJVHy9
LDBa7K89El8u5kNKICJUVtIR+2Dthod8WEk+bB3DoCGTufW4P9pXu3eCFw3h
toNyhswaMR5bDBbowwdUytQgLe1G6MdNQWLmA3OQM4rRdhSj7YCGoGZAR2bN
hYag5swrQetRDA0phoYUizjoB2nIfNIQVCJ0JCmxCBpSBA0pFGmodFRGcoGo
vGORqLtpofjy3JEqY4wXn8+8WHxQPEp8XAp/qhx++qfGS/qdrRf3n2q/uP+/
l/y6/3+WQ0A6fi0FxFvO2GzKGV0eOeMplTNIQJ5TArJLCcjLuoCgdo+29os3
RlvO6xdvokd5bbw49mKYOPYSdOQVFKLG8dfQh5CGvIXaGy71Y1+k1JD9qHdQ
3ZFW0XsgitYd3oWEvBct62A06QfFhPf5eHgCneHjRH5F3cYRXnI4AoVwlRQV
lT7en6z14mMvpQ8oiuVys6Zw/nDXEnc9caAn4dyh6wl6EserpCVRpuAR4T6S
cOtHQlU/orRkvdKSTtc0skftTehpHiMv3amRKxL/KBmlfVowUjuSLRcr34CW
PB9/KWkJKCl6E1pA2cOmNyZUFvt/oChWEpQgLzpyIR2DSEcCBtcRunierqIf
oCNepxV2T+E443YjmzmHmC7HM1YnZ8uNhe6ywV0Jp41pe6cvqHQmZDZZPDTD
14tIWFkkLsfxno5h0VwQjLHaXyAYf6E5xUTzvmKXYMyGYOgLFjynQM2/LhCC
EQjBCETgCNRSIRjpEIzE28LFgzOKpGCgps2SgjFzThEEoxihoxiCUYzQoQQD
FRdfBMEoEgkJhRCMIghGoUhCpSQWiNTEfDQo+RCMfFFxe5aouzHDJBaXib9C
LA4XjTz996pL+39quKj/RNNF/b0tF/efbLu4/5+Lf93/89Jf9/8vC4aXxMGC
McwkGOYpxQj3xOHelEixeEWJxeujSTBIL0gt+sWeMf1iL2ofGpc3oBxQjGNQ
jGNIHcffQPogxdjHigF1eJv2I5sEQ/S+S4UAAqXoPchqIZyHSDFQ7/P44jBl
jyOUQo5wh/IBAogs0o8PaB7JQtF7GApw2EMo5PyiFyLR+y7E4ACqG/UOfiYU
wgLWSR/0vLHHPW/0IG/0mBuT5z0bk7ABjUnPRqUPa036oMaVuj7QasVPtFpB
+gDh/6xArVjSZgalD9VbkDV2A25DIuxmiRgsd/Cqho8XWeCcMYRkYbRpi5M3
CaC74HhKwD1yhBkWMdWIEv/hyMKLGHCSiDH2GnOGsHsRAzWiODw3tfZYfGaD
x7zSJQZWo+GQYmAziwF+PB0nohMZq92nROF+JQreUgR1IvOuJlEI1BIgCCQK
iRCFJBaFIBYFShAz7p8DUShWKaIIKaIIolDkLgqomNgiiEIRRKEQolAIUSgQ
81EL5heIRFTSgnyRjEpdkAdhyBPlf8wUmyfdbxKEceKz6Ref/rTskv6jtRf2
/1B/Uf+xxov6e5ovNhLEf1GCoDYEoiC8iYK3NmSH3oaYJhWDtyAWK0mC5Rx3
QXiLBaFfvI3aj3oHLcpbweLYbogDROEYooSDYsTbJAr7IyyBEAQkim7UAV0Q
UAdRh6ggDu+zIBDs0boefMAH2sbUS4Lwoak+4E7jCE0neo9MUtrAKsEjDepK
HCwME0kUrKQKlkijEXEgOEhhiHZrRHpIFBAcetCE9JhF4blBBpmqCelBE9Kz
IUSKwmr3NQw3UagerX0HUaAlzM/UNgYODSlKFDZRaCjYTWIAcSBt0OtMGmEl
ifBxVwYfd2UYqgJD7SFXYBjFgcElCpQNBooC9Repbv3Fv7VtMc7mygN20xaG
2TSYsA6qAnZ9CvFFbEb90biMButgs0ruJGxedMFOQgBtiL7bEs0R4c9R/i41
mOSuBjy7vNJfi2E1CDTUwIgHqBSoQRrUYN5dt4oHpheqiFAkHtHVAEpw/+wq
qEEReooiqEGhmDuvEGpQADUogBoUiIT4fKkGCflQg3yRND9PJM/PFVmzsqEE
C8XmifepLclRp7+cdV7/Pyov7P+65sL+7+ou6v8R0eC4igZ9rRQNLu7/WVeC
FVCCld56iWGmmeVw917iqUHmlZ59hDka7BktVWCvoQJWkgFLUL84MPb0z/vH
AaxQcWwPxOCtCNFDCWF/uIcK0Biz971INBSGEryPOkwVzXyrgEB6QHJAamAn
AQD1HzL7hh7QIgepAt77YJLUhCOkEaQKgTIzQCMc+Og4NFFzkC64BQa8R7sr
oQyWUKkNpsDQ87rSBRUYenahzqQLaCh6tipd0IcTq/XhhGlxQzUTFBZIF74q
UVsbVFggXXgOulC1kR7cXvAaEVxAuiC1QTYY1FtAIyAP+pRzD8mCWgPxlh98
jbGmrzHWZJU4R658QCQuNWkDhQWv2mD95TPLXzpssLtUgm4HbVKJq+WV/15V
wtc8q6QipaD88O8KxYSOYZF3o+7qnho5RrvbLBhuOyDomQr+2lwWjAAtVgmG
3k8kufcTLBYPzHAJBseHWYWID4UyPswpRHwohGAUQDAKxLx5JBj5Ih5ikRCf
J+bj44KEPJGYkAvByBGZMxeJ2qlpJBYqMWinxtj7Pyu7oP/v5Rf2fwnNOArN
+B6aQe1EDzTDCc04hXbiv0ztRP/Z2okBA8wzJIeXOTG8MspyLg0vpWboyeEt
o5WQqWH/WJKMftE9lkSjX7yLOjju9M8HxkMYju2lB3I6IBqOdyAcByJkL/Ee
i8ZButFt7yG8fj/SJRpHogE/6sgEI0BY7FIfPjIKkiAPnBM+nGRkil6WFUjI
leZIAemYKGWDPh6U0uEwpAPnUjq8ZooeNBo9eqOhMkUPMkWPN91Ao9GzXenG
ZqUb681DTfdFUb6Tl64byBOfFyjdyHTXDWtH3quAHeLBycJK4jGobpw1YPi5
SwcHDB+SjnMN6bjAJB00sqTRpVk6/uzWa6Tq9X85duCNU7LT0MvoOFhBaBlk
ul42ebOB0XJWaRpYwoHnZzUcmJ1UxTJC0eNBn1+gHhN19ei4RFb3FE8VQex4
ZLI/VMRfm6mryFX+iBxQkWsCtfhrPRsQVhEx/b454n5DRQqhIoXiEdS0WQVQ
kQIxAwoya24BYgcUBBUTkw8VyRexsXkiLi4PSkIqQpULFckRC2dkidopqWLT
hL+opuMG7SQk5JOSC/o/h4x8UXFh/1dVF/Z/Cxn5oU42II5mFTtUA0LrIP+L
2NHvGTvMDYi3pdLBYgdNJMxrIHrsGLz5cJeQ98aRjPSLQ5CS98YDzFBx/G3I
CHKHg2UE9R41JodooPl+pMWuy4esD2hP0wfRFl9IApTEXB9RIYL0fsxdyUcT
WUGM+ohSCHSEvp8GFEdokumg3IEMw7njkC4iE1hEHBARB/KH4x2zgMjw0UMC
Yg4fuoCo8NHzLEqfVJgF5DElIBs9J5nj5CRTCchxJSDfV7oE5ENT8Hg27tLu
8g27O/JeJqmAiAxIILvp1Vl6E5sX6fAzb8FSqcOfpMPfJB20aEqLpwOlQ+9I
PB+15Log8ixzCE91mGNSB/NCKW+j9i4NrAX4xYE+7Lp/bhG9Qsh4wP4L1MFm
Vgf8qTjS4U64N0uEWjF9aJK/Nm0QiYjTJeJ6KRGyK8HrW8PFfdMLIBEFqjOB
RMwogESgZuVDIvLFTMjErDkkEfliLuQhJiZPzEPFzssVcbG5kIGEuBz6L4vL
FqW3pYuaKSliU/Q9Uh2iWB0+Krqg/1MoxN+gENSYfFONxqQWjUn9Rf0noBC9
UIiTUIj/okUOhIyfETL+twMKYSxyXOremPySkDFoY+Ixr5Qhw0ryYPGTGcNN
HMbq4kA55f1xlsB+cRjNyjth4jiaE8e7EIr38PEgRILqfdThSBIIaMWRKNKK
D0xR40PSio9obPERLX70QiB6P57A+oBPfCLTBn8CIkD1ITcleM+XmxeWDdWw
OI6wUKAJoeVYyAT+d5NQ9OhCQSKxP1oKhadImJOG3qG8EMFJg0SiR40ze8wi
sSXE+zhTXzpVIvFT7WjtB4jE154ikQyRiL20I/dFYJ0rVeJlQUpBBT0YKBfe
goeNjnYvWQOfqdjvWgzhrsXCww25i/tdek9XEn9SkvNISQJISZSI0FZN2prl
RUSkgMjB5hlveTToMIOXRC1+uoCYWhWXgFgHExB5/aVt8013p5CI7Lxneq7l
P1EPHCLutFwACfHT7ov20x4wScgMk4TEmCQkQZcQlTBSpgSJv0yDfEwrsEI/
CiwXIGgUIGTko1XJR8jQFSQfCpIvZs/JE3Pm5kFBcqEguVCQHBE3L1vEx2aL
hNhFovT3aaLmhmTx5TkjlHqc/nza0P4PCs7v/7j4gv6/mtsUKMj3UJBjUJAe
KIgTCvJPKMh/t/+6/3+WyAEntSmnBxtwnm0rlnmJ9Gz5gtVj3xiLr3uH4lIP
K8uHL8kHxANvHcHHD5A23g8Wx7vDrVAPeuqq4xB0hPoT0o8jkawcPLOIIt0g
2SAp+JiehUOa4fxY1w7UJxMM/fgYBwcf0LJczUoig4csxwekHPh4mPoUihmo
gxM4ZvQo9eiBevRwzCD1iGb16BlMPYw+RanHM1AP9CknzOqx1aQeGwZXD+pR
aN/2j57qkSHV4xmoR/aLJAvQEPxq55J8SAmRfcugGmIlCbG7K4ftX1EOf+Ny
sEBSjgtc81FjvSRgcA25W34KPUySWhg5s4b8S+MPm1o0NXTFFE6M1uUKeX2H
p6yoPRYkJyIhs54HHtb/VFbocLsldFBtmWXSlljWlgCpLde5tGXOHb8T90Fb
7puWj3iSD2HJRzzJRzzJRzwhcckTM2bnKXHJU+KSK2Lm5kBcckRsTLaIi1kk
Uh/O5EhSfX0ShGW46lquOP3ZI0P63887v//Dggv6Pyl2dS9fm7qX4w3oXpou
6u9rQTZpg7qcbU3VbflkuEldRrjU5YxD00EGpnr3MnD4IaXF7iktePtDvH36
58PjxTH0MI5DiCnvo4dxHI7EbyjUBeISKQVGQGA4cUSRxLDAkJTQfWAcn0ST
tBjyQuMRKTcTuRyfSK1BOHF8rAILSQ2KPjqos3HwZg5uaFxqYyWpsYS7xEYJ
Tc/eaCk0ezyE5lVvQhMhheZJFPqZE9vDBvYyutCsHCg0J0xC8zc1DOmm3V1J
w7Sn512CX+rsXdCIMymNzViS9TYc8SGlsaqN5b9caQKMjBJkrMSY4gnfDmqg
tGQG35RsrLna/l9IyxiTtNgGlRY7tTkkKK89HFdKEmMddD3Wbl6P/YVSY2Op
eQTHP2h/OoPczFHdEMlNvJKbBUpu4m8JE/c8ko8okwe5yYPc5CHNQG6mk9zk
QW7yWG6mK8mZNScXcpMr5s7JQWWLeXMXobJEykMLOb9UX79A/OOc4SQ0Wu8o
++lPHhrSfzD3vP7D+ef3f1SIVqhYtUJKbr6D3Pyo5Ka3Ca1QCwUZud+LhiX/
o4Ylp82tEMuNlzUa8/aNAXu9fsGgxFifUUnG1QdR/3OQteaQrjVjSWtsrDU4
foRE88F4ceIgPS7XcZie0+k4Au2B0Dg+UILzIY9jP6JHbbLgfKwX+iKoDQ6f
0hpO76cTdOGhsruUJsBQGakwkJMPUEcmmAMNxKrnIC3g9rwXbQo0OIfGnNin
dGYPNOVN1O5I9zDD7VCEMTM5YdaYLhS3QqHu85LVJo1pH6gx33hoDG01X1cw
rSPreaIfOmN1dUV2c1f0r0iNzZAau7yWFUoTQAIz1Mgu55Ki8PUqgVI29BtM
sapY3RRFVxPWEutZFeVfmLb6DZi2mlqiQecqatOXXLq5Ql2PLkXG17xgQ7V3
+vxyZ/zCepfO2HmjOW8V1WVGbvmgUHO3lfTFq7SEkrR0XBzGdXRq5AjtL0pi
HjZLDORlDuQl5mpIDOQl/toA86qOeOjemZCYPJfETCOJyRMPoR4miZmRK6bN
zIXE5IqZqFmzc8Rs1BzIy9w5i0TMnExRfGuqqL4hSWyMutuYvTpG2vv3Z53b
fyD7vP5DkJgj+ef1fwyJ+UxJzJeQmG+qZK/0k5q2UK90qlVKjL4M7FVi/q0l
HY80M7BXGjzNuOawiDNjB8aZQJKYfvEx6pPxp3/+MFjrOxKmJCbCJTUf0pT2
Izp8zDLzMWWYaM4yDpaST3nyQsoClXFwtMHRZmgMxOOjiZYrtZ4PlLgYAiMz
TA8yDORFiQvqQDR3Syf2S3E5wSFGFxfU65GuAGMSlxMkLk9DWJ5yF5cTEJcT
np2Sh7j0KHH5wRxg1Pb01xOHHV1dNK8j61lBAtOR/Z+LjG2wPMMiE0gicw6J
DF8hfx6JjIe+8A3slL78SZ/KTvXUl/98IecXSovHxMUUXXjjmK+xDGwoiuyK
LPbDs1OqjsVl1OoXvJ5ZVyjTuC/tuPTFrvTlYpe+oG7rvj5itLvGXOavzbxc
dkxSY/SOiTQmgAe6cRxh8sS9pDGo+x7JFQ9My0WEyUPlQmdyoTOkMTliOmrm
LKpsaMwiMWd2lkh8UEaXzBsXitaJ9xtd0pfX+vXvzTi3f3/muf3vksbkndf/
QQE0puj8/r+WXND/d2jMV9CYo9CYH2ou6j9WJ+cxfTSPQcf08+KL+/9HdUz/
i46JJrqnPTsmT40xr/eYOyav29UHWTJ2jzBWEhiLj5KYsSZ54VTzAaeaD8eZ
9IUk59PxliH94rPx/x919wElVZW1DbhWhW7opsk5Q5PVGccwhtFBMCJB0QER
BJQgQaLknDOoBMEiCSrIEARbEEEySBbJWVFHDHTO6VTV/+5zzr333Fu3qruR
mW/9s9auDoT58JNn3r3Pvqf86ecVZi5QgZmLjSnHEDKB1MtNNGJcFGAiyRiO
CvVQV3ifREWx5BKX5QKEQHRJNumC752h0oRRdblL6CLjS5KmywFNl8am8+Kk
ULqsl7qsqedPss5h9B0ToQt/fl7qck0urB+nh2f7VjmxbNIA7xDSZRvlDxli
SJodvBxBXZN2JMSVcetHysZUBj888ZCx8O6yocal55nS5lmMpMZ0xZ6JGrds
jvQq9MmP23ryw6+2Roumrpkomsjn6PmDLNatdDtPeD5xuG50HzT9Zo+BM/hD
sy4bUVyFOA6ivNKSTOGuiBmMS9WFvmrwjCPmRP1GD4QU5g0pTA+zMBDhxQ6j
HGUgzEgIMxIpZiRSjKYMhHltBFLMiEDH14ZDmOGB16BL5y7DAl26DA0MaTVI
NEYP88ZIu13D913bKHZwYCl25O1S7DhSzCkIcwbCXIAwlyHM9Qll2A0I85+p
5div09EkIcUkIsWkQJgMCJONFJO3ELIoiym2whS1SbKmGH0mYzlNPs75OFHb
UVykGD7uRZ2ubU0wPMA4CRjqlESE4cK4SBh0SslnGxq+XKSiTinlEj9BIl+u
NCFaqCDLVWqSxJeQ4yov4HKVUgziTSTZI34M+iRDn+RLEOXi3SQPKXSe3hWD
1Ek+B100edRcQ+ocJ3WaQJ0mujpJhxR19qJ2I8t83YifHwWps9lenSSok7Rc
PnanbLbxS3t0darr6hyDOrv7VD7hnUint0O2AgbAU1h3+LSGRsLIOcCHD4id
RWbIY8MQfnjaCWNuU1oPQB5FJdPVf6pKrkLf46WeHplHMeJx/ghjFHO/rk/B
9riEPWQO2XO2a7+ptvYUpktyq10SlaCmtLdCvafiatZ/1P/8XaX97RVuqGnq
ep+6xCK46QNuXnuuGbAZSdQ4yRpHM+SZEVycdh1HQJsRgQ6oVzsNhzjDAp1Q
r3UeFuj9r7cD454cwCe96JECP8ZU4SOYxKoutqtvSbZvQEl2aJDQ5gS0+Q7a
nEXPdBHaXBlfBv1SGfbjZNKmLPtNapMEbVKlNjnIM/nQhr0vzpd82vmSaX8l
xEhGe/yO55kijGSM9TeH2Jf1yH6pltBGSEM/drY2nTAZ2qjNkotTE0HUsMA1
9E5XYoFNQ4lNY3KGtlpSLjcJJKPwEaA04c5wZtxEi1ukmmSkmvsNTy7eJdLM
eRR5cvZuxZO7RIqRfVKSyRPUYeFJEjxJ2m/2JAk9UlE9SbJsymqXgP3ON2Wr
+6+OruY/O6yq/+jAKv6ve1eOG/nJde/gOPprrJmCT2XDxDmxnwAXwRQPmRJh
g4hbR8RJhpTV6bCowb+SarTS26a3ZI7p6yjMczXKg/4i1QRJ8qC4Fbgr96Sz
qolTf8DftC4bsj8SpkSSKSRJoNfbMw936jWBPtdMEVnmtjxxESeOUt7y9Zr7
H25c25RfrKD0lFOYbk/UD7zwykgNFPxvatsOIxwlpCgjhCgdh6NDGg5VhiG/
DA107DQUkgyUw9y+gU8atxaRpbnvaKsotrNPSbb7rZJsP0D5BqAcBSgnhwGU
EaXZuVEEShl2FfHl+4ll2E8A5ZdpZdnvM8qy+FnlWPKc8ixtHpqjd9EcARQG
UHwAxWd6IqeyEl+KOOM1PZ4Xpjk6Ss0RPp5AnSRMaoWLLmpnRKCI7ihGA0XU
9bq+vKuxRoK5hC7pcmOI0pirkswTDL19LWxxkS2UWIQtDnoVaSZZFLVKdzke
kNBIZFBJgCYJ0CSdvcsMzSkggtCSdEJBhoA53NiETBKQSQIySToyDQ1ktliR
qWeLTNL7ymM6s4HMdIHMTxKZM0Or+o8MpPvGK3sHbgl4B1PFBbxD4gI8v7ju
sDWuUPnFraUY2ugX5TAGxB59dsMRKsNTjKvV9JPh7y80cyRbKz6toSlOSI6K
drwUqUhk7azk033hEXLqT/46XMTQjpe6jrLw86dbKc2jCvWak0ncpb80bORv
eXdpk0tdLC4h6ATavfAaucT7qhH4PxEqIesMh0vD8b1/4fVJ2DQs8AqqQ8eh
gUEtB/PNW+2Aafo9L/N0E1/Z5TvcMopt7xXDYdoDmA70FzAdkzCdljBdkjD9
AJh+Bkw3AdMfgCmBw1SOpc8rb8C0CCgtBkqmB4SUyXC4pGOdDO+wmQxbeyqe
dGrKDV2JkpZyvuMJ5wxPOPYwOUklmuJcqaui5CSVKDNdj4VN9aRLjcgk/FNO
vtLYEUEuBZKv8sRDPomPwqW7XIQTZ8rBP0X6uYuKT3LIr4t3OUr6k3SX7uIu
JSnhJ4m71ES4dFwJP980dvqTDjZ21NBZSgxiqaHB0meFYGkRir8dgri+hFj6
bTJYoutLRlXznwZL3wzgO3j4d3rgZvy1h0z4myhtIppso9B2yRN+6kh0WjBK
K77B96eF4uEoQncpQg9HbnKpRGiXTLcrmlz6b5x9P2g8EVDL/ERAiJjEWy8n
AWX3DJHDtfbxlr0Db749M651x6GhY1EIjZSAhP9mTSMnIeSI8ZaPBUexzU7U
q3+v/95GjYI5ut/gqOOzTwTavDICfyFewOuzAGk4OBoeeAn1cgdOEkAaFmj3
6tDAQGLosQF8pWbGo28FRoCjs6VrEEW+C3+NYFu6lWBbe8Zwjr7WOEJOOiw5
+lZydJ44GluGXRtPIx7B0a9ovP6YXpYlzizHUoijd8DRe+VZ7oLy4KgCC3CO
KtlzZDdEVjnaauEo7Eow6jDqqOTohM4RPwPnDOk5yUSRkyxyFNOmO2aOrusf
8dO+j3W4fLnX6wWSOUeNDI6uNuYcybjEOUq+hmYs+RrnSJfo2t08OUERnqSA
0n2EkkhL8qNJpnNQ5wwKMiVpMn1LMjWxykQwITGh9jfyJ0qaEkFToommBkHn
4jpNq8HSStQy0LREoUlewXZrGmiaVMP/47jq/ssjq/m/G8JvOjixYtIA74BN
Aa4T/q1WwxPKvlG7XZ08fDvQzR+YHm+UW1zmNFE2bpb05DErFaUrVSy8Uvpd
j1KplkIp0cz9L8/TOxmHXkXu61xaX8f5chqzIgIs8ObgGbazIhdHLEJFTNaz
FKmc5vbORYC5yC5HcalXQ/8/0OyZmjxDL0SnNu1HOP4Bu4YLuV4huYYhTA0L
vNF2aGBAy7f5Q4+aWiPxseM/3ya1/L9XcrF1nUuwTa+XEHL1iGFfvSnk2tvP
kOs4yTW0FDsj5boMua5Luf5DciFI3ZpRjiXOEnJlIEhlv1ue5UEuH5erggxS
FQsnl2lhMGhcJJ+YLCtva0IdqCEXBmuKEEVyHTfJZR5Om0OUmEsjPF2qa8h1
laZG1/iAmuC6HsvNcjLfD5DLn3m1PqmlyXWVtgrhF0SioiaPXl0kF8FF5eCE
iTAVAbTuJrj8SSCOigcrGalA2oUm9HN0vaRc3zXxJ56iH/62iaOBiFXHgdTR
xgZchwRcifsIrkYKXA39iSa4UJ8BrA31Dbg+UeBaqsD1noArge6OBFy/Aq4b
Y6v7L42o5j9FC4N9q5zwjgdcGwKElytMtArq/LabOj+32vmFxYsepNpr2nEO
SlohDYuwMcxDhrlCG2a6ltJkGDrAf+h+Of4rB/YRliM2fcDtCpuy3NpqIZq+
ve27jSWh+ET7zqQsjhQ+i23q6OgtX6ep/96GDf1/Qz3WpJZVqsDLrTsFWrcb
AauGI2sNF1q9MizQ//khgf4th/CrnWY9PkhIJdu8vo+/HWjVdKh/R/1avh3N
i7FPOkazdV2EVp93i9G12iW1OgitjkitTg0TWl1QtPqRtJpSlv0mtUqCVqmq
VvPttKooBtyrKyl3zFWWWlUxtDJdUInaXk22ffSMN2pP9WCtDkutjoXQKngW
JRaBPMYJmqGVw8TV97HMRxGLc+X2p11tAJ4ayWosxHIDIGiBfEWVfJVnrCYu
oRRsckRCJkOopMv4SZea8GyVdJFiGCn1V5NQiVwoFHJV4skmBlHHiKjGchql
ELUHtQs0fd1QJypxWwNJVH1JFFj6N2ot6uN6ouVbUVchqraJqHht3xBEXRhe
zX+SDu37VI6b8u4Gbz8iSjDlHbgpoLSBTm0UbmDlKGBOZa+Vk7ByFcWoyLBG
RZpzlj1PpusuVZ6ct7VF5FJR4m+ZxSfkxjNbwY0gQKop39XWApI7ZHaKUM/Z
qA537Dk+reegaa7bno67LDK9TjJ5y9Z53P+XBg24UPc1auC/v3ED//N/qcR1
6vxYvUCrf40IvPbCMH6b7ex/Ur3Nb6Y0VDJk6osfb91spL/rU518W5tGshXt
o9nqDtFsTadotr6zodM20qmX0GnfW4ZOJ4aQTqXZWanTlTFl2PdSp1+kTvFS
pzTolIkuMPs9ylIVQuu0inSqZKNTFeMK3biqcpVI0elrTSc6epM6HbTodLRW
sE6FmpRzmsT5foTRAV7nMpFL9NHJGICKYOxGbCDtakMDKXSB0AkOXeMvtMnI
s9R1Wdyoa3dxxJoYRl0BYoCKvg2qkngL2IQK3z7fxIFPz1qlasylSjxhkeqb
RlyqRKtUO0mqBrpUiXEWqdZRBxhrHk55pVQLpVRzxUE/f/piQnX+mNe5YdX8
x+hgrldlb991gKHferzAKvzbLrUiq4xs5bFmK+/QrXwbKUR36LF2h8YjqEV3
y1WwW8V0t+zJMt2sKcl6Xj3iQ6KKvZ1uMMTOUpRlZ6mr+gCHNlkv5FzdSFYu
EajOduk7KaHHwKnk1u2FK7EwQBHrKXJMKzHPcmnzLN4XCtne4LKVr/M46UZ1
ol69v0C4BrpwD6AebNwg8PizvQNPvjRW6iZl++dgU+Yaje91boZ81nx04Mln
R/rbPd+JLX4xii19OYqtJOFeNYT7rKsUrmcM2wHhdkvhDkG4o1K476RwFyHc
1bFCuJ9IOHSLv0vhkmdDuLnlWBaEy4Vw+RAuEFY4u/xVRS5LWoT7ShFutyLc
AUW4b0IIF36NSRXOwQ8CnUb+Yj4Y5xONIl6LMQbrQBwBR+XL+yE2kCqhS7rS
yBmQwEnlihnK4SOAo+8qxDV2cd7+5k8Eb4kXibgmgrjzTUQKOwuvgnxDnUAd
05pFzTeYdqBRsG9fkW8NdN8S4VviJsW3T8g3mPZhXcO396Vv79bi70WcOAO+
KYsHdCZ4uH+VmxsG/dPbd22AjHNw5PDvvCWVFTGUhZ5/8SVvWvWm7tEoO+Rc
xu0c2iDM4bThLop845eCFSff5PNrrSYH+2a6NtTkm5t3jIW/BrTwoAV1iXZj
+NB5zGbvySm2uG92Hzj1Rrf+U/hh4e0Ntkg445zQoWS0N7SMptRj0Owertnf
FM0eeuxfgUdenBx49IXJgeHNh5sk6we93noCneVTYwNPPTcm0LTl6MCjrUf6
W7bswha2iRKavSQ0+wiarVU0i7Notl/R7OTbQrNzpNlos2Y3SbOpZVkCaTZL
aEZ5LUdqFpTXVqA+lN3kxwVo9oVFs52KZnvD5LVjimbWuVdozRziBNFjGtn7
BGgSM7eBmQDNyfJvxDo83LQk8uyqrGuNqTvUTHNJy3jxeT2lsSu8Ab3cmPeV
iVSX8O3Ei41FYylAO0s/P/FMY8dd/sTTFtCOE2hAS2srAVoiBw2A7WsYDNqX
qK2ALK6+DloigfapBG01EFuJWlZHX3JIWiBOEzXQ/lBOE/nI/q0qJ7xjB3j7
EGgCNW8/DbbbSG/cNr7SGVY0lyqafm9IETkrZuYsijhzhubMdKmhylkB133Y
LWy61DUrOYt3yRl8ey19FTTTUlfCKXqd7dJnItFU8B5DuJNDu6TltvrkJqAc
ETpP91HQuu/xwMNg6ZEXJjvxMsnRIvDyc2MDT7eYEHj6+fGBpq3GBx5tMw41
FiqNDjzSaqS/9fOvsndbFWML2hTXdVoRQqcve4TRaajQ6ZLU6QdVp2mKTtRN
6rMu6LRQ6sTfT8FGpzWoT8PotC2ETuG6SfN6A6lzqqDzRCGTS5cJKpFIcCkK
r7FCJSlTPtUN42PejVh/5vX6LnLJLUhK5M0k5+hKY20EpoKUSHWpsQHS3f7E
C415ukpE9wiOgBHqO9SpxjYgoQASx+igClJDM0iUrr4AQp+jNtcTIK3Hx09j
bUCqrc+5EukMcXZNvt7wqzxDvETv7UqPvvWpHDdx1qdOb581+MsMkvAvNEdp
PS9HCJNct9VRulSdxJ0kf8Ynl41P0bpPvJ0kmo7Z0qRfmihpaiE7yTqP9dZS
lqPIW+XmXVAtUrkLjlNivyHoeX7jkbhWgTcHTTvcoceYO5mjXKpT+P0IqWL+
vzaoL5Bq1CDw0NNvBR5uM4l8AlYTA4+0megESRMcT+NTAdQjClCtWrzK5j5f
zBYpdeRlQupNiVS/kuwbBanTGlKjDKR+JqSmlGV/WJDKUJFSI5SKlNoQElL8
DV/CNIRFGXkJpAink/xao2+tEaoORSgxjI+wTryYj+oqukKCqhjvCNn1kES5
yCiHO5D5fX0jQF1txHtCF7AilRIJqSuNNbAEVi4FKv4VpLqfS5V4DsX7QFUq
SPRtIxupGvoTtD5wP2Tai9oNmb5uIOdcilQUmz6DUBtj/Yn/xse1+EhSrYJS
K6DUUtQSKLWwFqSqxS9D064zuklv6DNWXGd0fFAV/84eFby9Vge8vT4OePtQ
rQncRoxyGWTFBRz2y6UFe3XbHaIdWfjm5MPGQKy4LpgntGCma1/NgqFXlILJ
La0i7LU/JPfaaVjfWX9MJqg/LGzYMo4NHZ5Az0HTdrTtPJzoEtWopcNdiIAV
qQYsWU21URb+HKArUsilz7Pup2gFtR5qI9R6uA3VBMSs1uMdL+EVarUei4Ja
LUf6Oj/3OJv1XDE2B3K9Q3K1JrmKM68qV0dVrhJcrp0kV28Rr0LJdW0M5BoH
uSbYy6XHqwKH9WGaP+uwPtQoS5PrmxDNH49YtnLZjbKc5BY084mExRiVQZeb
vBJW4fXHWF8Omr7M6/UcTtIK/zuDV9LKKPoabiUKt8isRrTTcEUNWI1JLZgF
7hLPN3Z4/AmgK+EsfuXpRlrAog7w20YUwk7ie8dRRwVdCd8QXSg+wrLSBaq2
o7ZpHR8FLNQGkLUOtbauP/FjfFTpWizoSuQjrJqi45tSw/8LOr7ro6v5zw2r
6j8yoMqJZej4eq4KFMSXopfHqpd38GYS6E90gp7Cy8XXUCOIKu3qSHuqeDPo
1G81sKfKdM2smSqNKWOt9HapMl9+IhpEj9ogotoRWMoVkEWIYC5h2Man2/aD
Y1PjWnYYrBvGTxipU1RyV9BYvrl1AcJtHcYX44a9Fle97v1kmO7XQ210vwIP
tR4v8Go1LvBwqzH4ODrw8PMjfQOfiWXTnolkM4HYXBWxFwix4ibE1r1Wgm0K
hVh/FbFS7LwVsYmiR/xjalmWCMRSFMRyCnXieAcQK8w8PgixoD6R+YCYjx70
I8SKM3bVDFj+9zJvyY95P3DGbtCEPhdZLPdGXX/297GBjOv1eAATeHHQXPSJ
kxijk8VGjvvwaSM7whC7Gkm/UGfwOTeskWwSGwm/TpBhDW0MQ+1rIJpE1bAv
6xtTq83SsH/H8iYx8RMY9hHqQ9TyOv5EL02t0CAugF/v1JRNYg3/75Nr+H9G
k3gFTeJpsWgaN3E6mkQghn/fe0rGUA6lcXSrjSON6IsaxPBTh24NiFtYxE0s
LuMqFsGZ/sgyHNsZvErhKlg0d8GiOXj60i2zu6VSOvac2jTeCccirIvyWuxy
Fjly8amWw0VWkVlK3gr3rGAhe8VortVL/vsffVlX6qHWhlIPtSahUC3HoEip
Eb5+T8WySU9FCqmeFXGLGsX5kOp9kqotSRXFVmlxi6TqUoJ9/oa9VMcGQqrB
wVLdkFL9qkk1HVLNLMfSZ/8PpQq5Z2orFV1KyYdaZ4xRuw9Q+QRUTpKKpuno
Fxl6RYmVk+VfpzFXvuYVP0UkqaJJKvqM5fKqS16xnBt1A1nSLN2rKw0pLl1t
5CKl0DheJrrQHv4FSuGHz5NQjXjCUpVK4ErJBvGETFnHSCmodFgqdRC1v4E/
YS9qD3TahdqJ+kpTqp5IWdQgbpBK8ZSFWgWdVqKWoT6o7U9YBKXmQ6l5UGpW
DX/CtBr+3yZV9/9IW6XDq/m/pRsPepbx9lgOCHqspL/wFLi4VEIrDhW+/V/M
XE7yyaVnLY6RW7wvyDi5PW8Q5NFPCJ0kkISnwYTgAEXw0POEwfC4h8Q+8qbd
jkNR2Sluy05Nfde9fSGiEzfIaY5M0iDKSoc79Bgd6Dlwqm3PF3aXoRANoODo
1XXV7n311n0vzgn8vbXg6KHWBkcPtRobeAgcPfT8aNQIX58nY9mEZpFsMkia
qpHUQoSn+a2LsUUgaQlIWv4ykRQllkkVkrZ1l7OrUCQNLwJJ6ADztQH7+3eY
JJpd7S4iSTar7z5hEg3SL9IQy3eprgBJQSnfjFLe97wkSm4DI1FOEsnh9mX/
AJeuxwbSr8GlKw2dHCW35EkrfDvhMil1iZpCPUGpPp0BXcDJIXhKOAWOTjYU
PEmaEo8QTw1EgFJ52l3fn/A1is+vJE9xkqdNsUYTuEbhaQVIWgqalqDQBCbw
+RV4mgmeplb3/zqxmv97NIHn0QQe61/lxNKRfb3dlgW83TSioqxEFaIvdBlG
mZZRCxOn7KkKMdCyuGUZY7n13tCjJynOWCQxZnf3rurWnxpKhXiU0HoaeBtz
dtHkRch751pqdbhD99FpPQZMdt5Wn2eOTTHcqVeONG4x7cd7X3wPTk3gRv29
1XiUMOrvMOrvMOrvLUb43mxWl415IpKNV516TjrV0uzUspeLsw8Rnz7uGMU+
hVMb4dSW16VTPWPYrt4xbF9fi1NDpFMj4dTowjnFl941p/glDNqcvVLwYaDm
1Ea5VqofBipL7/obmxXCqTCrCj445TvHfTpPd0ZRfmLIT+wSHf4xfiBITuVf
5YXvca3yrpNMXCotLn2PbwuefqATwxyKTj/U9Wdep/lVbCD5agPyCFGJyuRT
Q0c5UsqfcKkRQSUi1IWGgikTVbDndEPpFOpbfM6taqjEKEpmCYcaOOqi2WvA
mz2KUQm74NROFGJUghajyKrNscKq9XVFs0dWfQSnPkQth1EUoxbDKTR7Ce+i
0eMDqxr+W5Or+38ZX81/bVRV/5khVfyH+laImzDlU+/r3oDmFcUqIktrAHuF
bQCNJrBIuSrOkqvwY8pEXlmnh1zuUEeHxk4qtyvCJnMZWPGLHeyu3XQJrJ7V
urtHzN3d7bAVGZyw7u+oX8/gtNkgLWyL5zQfBp7t3Ht8Qvf+k7QDQY6Vu8gN
npDKRYnq4l9eWoJa7HCSU46OXKq/txRSPQipHoRU3ZvWZcMfj2CjmwqtJj0p
tJrxrKJVK0OrpS+JZu8jJCtaXdjQuQTbDK22dothX5FWvaBVn5LsUL+S7Kiq
1TBDqx/GQqvx0GqSplVZQ6u5t6GV6VSwMFrZPKITbrYOrXzQyqdpdbYOicUY
khXTtarDE1U+zdfzr9R1RAqwrtVleVTXqUSyyuWP63CtcrhW39M2FsKUL+v7
uoHMa2j0rsX6k680oAYPNEVztYCUUZcacqoSOFOUpvA11blGRM/ZRkhhOlWI
U2DKSU450AjSSOoYNOKJikZSDYRS++sHS7W9nj8BSiVoiYqk4ieCJFVdMZZa
rTV8lKgg1CLUfCg1D2lqNpRCw/c7Gr6fxlbzXx5R1X9qUBX/rm4x3q5L8r2v
U3nzoRVquQ9a+XjA4lw5SSv89SvksaFHDVg6Vi6xW6pdRxOcrNwhB1UudVBF
d9MUyqxIPWBFmM1y8PdgsbaIofXyKC1iT15h75JRxIoOKZalLxTX/BalLcQ/
ZUvI4tMpuW51843+k6507TOe9HKEyVqyPXRb20ODM3247ijJOWunUUZ1629t
ZuqUPahTNtL3UrPH2ZB/RLDhj0WwUU0j2DiNs6cFZ7PB2TzJ2UJwtljjrB0a
xVei2BoEsA2dozlnX4Cz7SpnaBSPDCjFToCz78DZOZ2z0jpnN4mzKeBsmoWz
d8DZeypnFYrAWZVgzsLtiRJn+puqmBtFHzjzgTOf4IwCFx9e+c7UZszCWf6l
Oi6yDBELmLG8q7JE8qJv50KzXKgGx6jcxJiLZcOyCF/m9bpkWCDjKhy7jNSF
SrjUgCctF+nlcHG7hFk8LuE1whKxNLvo151o6LiX25VwlOxCfYM6KO3aB6v2
1le6QZj1pWZXrD9BS1gb4NU61Fp49TFqFcxCN5iwVCashTVFwppbwx8/s7r/
D9kN/jCmqv/CsCr+Y/0qnPAO7eHtujgPfuXBL5Q3T/i1TPfL25MquEUM3tUS
iYuaQxq6DzSugxi8WV4HIa6E4II5XFrOssyw8PMVvsyzrEKQRbsN+40W0UOv
/K0WItVHf4gwC16ma4hNeLkNuMSOe2Hc8ti5Zbm/QRwJBs/ROVkv2lzkGY4t
+YghhS6Er3HmCz2LfhAoqHqNekRJ1aKL97SlWgimQNXzYwIPtOCpy9/8yQ5s
0KMR7G2Fq7HgaiK4moJ+ccYzBlfvEVdttM0Gg6tPXo1i614DV12jwVUJtr1H
DPsaXO0FVwc1rgYJrs6Cq4sjSrOrVq4mS65mgKtZ4GoOuJonudIe0imIq8Ku
tZseklb7RcGVD1z5wJUPXPmOKVx9W1sjizEkMEZcIYFJspC2+FXDEAvFAxjN
rfiGgySL5fKqA6+owBRFLryCL4DF0XIKuhgiGMu6XtcPusBXXX86KulyfSf5
ZdDV0B9/npek627Q1VDQZYpdsOkk6kQDYRdyVzz8iueTrPrCr/3Srj2oXfWM
3LUN9QXs+hz1GTpJNXetgV0fwawPUcvhlhcf36cOEXa9I3PXdPg1uZr/P+gQ
r8oO8eCbJb2dF2R5Oy/KcQKxHPy9EITlK4QREjYtY58/0TLeVgpzF2yYSx1z
BRnm0g3jb+dgd0uxROsZgZbsF4uEVtBUyyW9qql4Vb2g6XvRbsTix4CBngMn
H37ljVGFPQYMwVVnNIodBFdtda4u3vPCglt/bTWVc/XAcyP9zcBV/4c8OlnD
iKx/CrImSLKmo2mkZax5zwuyFmhk0Si+XXH2oULWpi7RLO6NaE4WnQ7uAVkH
QNbh/iU5WafeBllDBVlXRpVm34OsnxSyEqYKstI4WeUEWWgaffNBldo06rfQ
FDCK156cLsKIy6eRdVghS6YsBrYY2GIWsvJBVv55GnXlX6DLsyAXy4NZeZdl
yaiVi4+5V0Eb0EJ/eJ2/IHll85fvKX5Jp1B1fJn4qYF0iBflx6s/8RIIudhA
FHWKxNUF4gr0nEOdpW7wLFfrDH7K6QZq2JJaNTC0QtqK/6a+P57EOlDfkrbq
ibS1PdZIW1tQmyAW0laCkrYSVkOplahlkGpJTdEpvic7xVnV/fFIW78jbd0Y
W9V/aUQV/8n+ZW9u6nOvt9P8dKiVCbWyhFpuRS0flZOz5RLZaxUvh2gfXcKu
NbwcIei6/fhV2O6RP3vtMbvFs1cxPWwVI6icNlCJr1SoXKI1LOh60YKV8pg7
wnuNJ6AL0xHyy2Vaac8JGuvtIckiqgI9Bkze8ULHwbdFVilOVlckrClWri7e
3Wb+j/e0mhW4H1w1bf4q6/N3D+sHsgY+YpA1kshqCrKai6m8RtbcFsbmu7bQ
sPxlQdbHClmfg6xt3UuwHT1LsD29DbJoKv+tRtZwkIXG8PvRZdiPIOuXiWXY
7xpZ0w2ysiVZzEpWUNKqrDSGVYzGsBBk+UCWD2T50Bj6iKyDClkyaTGwxVSy
Tgmy8kFW/lkqnS2Wx08R8y7SvTQaW5yqy4hVV+jHgBYawWv0E7KRt7KvGwWo
ELmyrtG7W2Veq0NSkVn+NKpLYOKiVOtCA00rJ3GFvBV/Ft/iuYpGYvT6ALRq
YMlXpBWUOlKf5ysu1kHUfqi0r56Sr6RWX5JYMl9tpnyFWg+lPkUhXyV8VEfk
qxWUr1CLaxr94RyINQNiTanmvzm+qv/6qCr+c0Mr+4/0io4bO36Ft+P8VFUt
Qov3jBpbr3t9gi7LhF6YFWEeea3RR15OPvOK4GwNWC8fpLY8TG3Fy5S7PNbc
5R2+Tb6xRIgeskiOGYFLEma6TNlMmOnh55DP5xSyO4wQjpk7xDvQIIqNh0jN
ro1PvdgLfk2Ke75dP+KLOkRHkGGxQYapTztLw7psr/v4IOmXybCLTVq/d7FJ
q3kZ/2jWmfW838N6P+hhb8GxAQ9HsMGIX0Ph2Ih/GvP6yXIxa5Zyuqg59oF6
uvgqnS5Kx143HNuNjnG/crr47eBS7IzcgtAdQ/z6ZUIZ9hviVzwcS4JjqTPL
sYzZRXGsUkjHfOgYfXDMB8d8cMyHjtEHx3xwzPc1OVbdcGw/WVaTxy8Gyxgc
Y5pjxw3H8uFYPuJXvm4Z/KInefL4ISMoI8jAGGfrEn1PMsZyrtAVgTlX67gI
MTc3y0NmMQQtKl/GlTqBNOozSS5HpD+V/LpQ30hYetIisOLPNEAyi+cxSxbH
q74B1zENLjSayFmO+/zxSFrxcCt+L7zaHSuS1lf1DLe+gFdb6sreEPVveIWk
Ff9JbX+8mrQ+gFfvo+bDrHnVRdKaht5wUjX/z0haV5C0vutf6ubmPn/1dpiX
4O34bgpK+NVJ82tRjpx55YfyqxAzr4JbRuvg3hU+d/05siwtY4SexDyKYKZr
l6VgT+uniz3ulGD00sF8lsjfcg+/JrhFLHCkZew6ONxkFZmleeUszFmiJEus
aJUmsJzklKOnSaq7hVSrGj8/u2nne92s+30e1usBD+uL5NUfWg16RGplOV2c
pu5syV0IVauV7eTpohzHb4FWW7uVYF9Bq129SrB9fWLYobdi2NEBIXYhoNV/
xgutbk2BVtPKstQZYhyfJcfx+XIc74NWPv4ONyhoRe+n5YNWPmjlg1Y+aOX7
FAWtfGgWfZtUrVBbNa1QO6RWSvJiEIshebGDUqvDhlb50CofySv/WypDrDyI
lQex8oRYBBbnKpdXbZZ7sTaBxbnKuUxwASw3y6Z+MYv6xSwKYWAKPwKofOmX
gRXtUvhTL9altwk9X8effL4ucKpPSDm5Uh5SCkbhW/ApXoQrClsn6zsehFP4
/jElYPF2EDgdqMcDFiEVvwe1CzDtiBUBa5tE6nPUZuC0CbUBtQ5IrQFSH6NW
1fLHL5cBi1rChUDqPdRcQDWzmghYE6r6fxhdxX9hSAX/sd7RJxYN7OLtMDde
YpUUhFVnFaslClbLTFg5ijrgKlyXqL1rl3w6MWSD6CSkPLpN2iXyYWxy6bcI
KjbpF5WabRpS56E3i7TlUJBNpmdytFUHlSceqDyFnGCpQBFMh195Y4RE6naB
chQ70vDZKUFpShp1sVHL2WKR7V+73/ibh715v2BKbRDFEoQ8NUSDOPUp49RQ
X4JooyxBqKeGpjG8YGovmDoIpo7ImdZ3b8tTwxE2p4Y0hp8aPIbPlzMtTtVi
1AcgamlF/ubFvpWoVaiPwNMnqLWodRpTKApWaBB9ccHBiiFYMVDFwBSzMnVI
MJWPYJUPqvJVqk6CJTCVZzDlJKcc0Sz3HFQ6L0sqlXOJiiulf8y+TIEr+wrp
BLIIK5bFe8csUizzCvWHYItlXOYVAFr+1At1OVup5+r4U1DJZ8HXmfoiWkVI
tlCnUOgJ409StKKZ/fH6jnshVz0tXQm1DmpqxQq1EK/id0Krr6gtrCviVVxd
0RaSWhshFuJV/KdavIJaK1HLavrjKV4tQi2AWu9Ardmo6dUQr6r6fx5X1X91
eEX/6f4l/Pu6R3nbz/zV2372H0XQy0d6OYkumm5Z8TKNuES7SAeLa2Wj6LFr
FB1cMIdLC1p8mcsZNmzhNxq+LXifyxUqcbkLqVqknrgkaKabl1XQ/uTpoRAs
wiSYErLcBVzhUNgZl9iMr2TajPec7NhzdFr3fhPUk0SH/a6pDWrF+XQ+CLU2
QK31vIuNW85+sMFz0+WK7qtN30AI63Gf0TIOlC2jPq1/IpJNbK4dMEay2cq0
XjtgXNo2+IDxMzmt/xKy7XyTRl8x7ABkO9w/hh0fWJKdGlwSLWNpdmG4mNb/
MEZO6yeW1UdfybJlVEdfumyFCmFVTCGMIYQxhDAG2RhCGINsjGTbocmG2iN0
y0fLmI+WMR+y5SOE5Vt0y4NseWgb874165ZLhSCWe7a2xhuYyrlQm7pDjTf0
kNm0K5FNb6QMwvDCMxk+Jcw4aE56dZJm+JWIYyz9Uh1f2gXYdr6Ok0DDCxCN
8iefqSswM4GGOllPoHYcdYzcO1qPYDtczxzF9sUK1CRo8Yhi8duB2DbUF3VE
FPtMgrYekK2rbYliAM2LWlzDH09R7F0lik2t6v91YhX/jVEV/RcHxfiP94k+
sXhgJ2+7Gb9I2H4zYJuXxPtIHbYFdrAFOGyhZ/du6xzMqdvmLEQg2xImkBW+
c4zQHfPoh41OYoxPvCRcpjuZJVxP6WeKPbQkdqdzWHu9TfyzIy6bixwc7huv
9xl38/W+4wu9AFFWD2KTQ3g1h7xy838y7XZ3oyCGfvGtvyvTrX+I6RZRpU/p
n45ks54tZtxPoz0grU3pabqFfvHTTtFsozbd6ianW71puhXDvukXw46Bqm+J
qiEl2flhpdhl9IvXlekWURU03UK/mIt+kaFfZAsq8DfnYYvp/ZdRoIqBKoYg
xhDEGIIYQxBjCGIMQYyBKoYgxhDEGIIYQxDjVCGIse3VBFUIYvnoF/MRxPKJ
qn3BXOWBqzxQlUdUHTdzlXuqFsv9DnUadYbusQFW1BGCqxwkMcKKk4XIdZHc
yoZZ8IqQooJWlyh1QabiInFdEpXOqzZLh3PpF2oHUkTycgipIvwpZ5DCqE7X
9id8F6tJ5SSqHH/3x5+o578FrETDWE9KhToUa4lfqK+B3g4UmsZ4xK/4rVAq
ro7eNMajaeRSrUV9UssSvyDVItT86v54Od3i8WtyVf9/xlXxXxta2n8G8Ws/
4tfL026gfi5ALMSxBelmsRabo5hJrJUFi1XkVjJcFnOpWYxuu7kzmnnEJTdD
6NWy5WW6vdmEG7WZ3fU2s5CydQ4lm9sqm+fPLXZZn/jxaAtdZNqVLr3H2kax
UKhtr/P4wDCozfHwfyLteQajsX2fB2kI5uFDMNpJHSG7Sz6ypyHY02IIxo8e
aWSvDsFeMg/BNqpDsB7KEKwfDcFKspNA7TuJ2qURpdg1ZLAbyor9LbnkRUOw
DDkEC0YNhe6Sobtky8OghgzGNppRy0cGywdq+UAtHxksn1D72gY2dJh56DDz
NNSOKLABtdwTNVnuSdS3tUyw5ZypBcPOwjCwRoYBtuwLenlY1sXaLpZ5iX4s
85JhWMYl/BIA5iTBgGLahdq+1HO1uWBOEsxJfNGlpd/V9id/C8i+recQgj0g
BUOhebwVJFiskbdIsF2xQrCvUF9CK+SteOSt+M9Rn0GtjbVF3vpUCvYR6sOa
lrwFwd5FzUHWmlHVHz+lqv+3iVX9P44o7b80qATPW4v6veJtO+X7IkqWqe17
5fHNCTkREw8JFdkyj9UyajCDLxvcpF0YIR9zdIcCzUOC8StvnOaxWEiqXIKq
VhMOhL+IWaXqtm6ikU8o2s2/ZPfocNvMv4oMU4S6aYpecfzZ194cRSy5dZac
/Ilpl3ZjMidJwBQZCqW3GrWY4YjUotb9YjRPUYvPux6Va6f/tGzJ09opusJ3
nlceUXzREGm17ArXW+ZdX6Mr3Ntbm3fFsBODINLbJdlZiHQRIl0dVQpdYWn2
87jS6ArLGPMuRK10RK0sqJQr5135/M3nURApHyLlQ6T85SiIlA+R8ldXZvno
CvPRFeajK8yHSPkQKR9dYT66wvzPpUhb7VXKg0h56AzzIFLefinSIUOlXKiU
exR1DHW8plSpFlcpByrlQKWc0xS14BINsdAdZp/jRYOt8+TRhdqQiFDK4KFL
hihR5+FR2nnu0TnkKmSolNPkEVEUrVOUfBJ1opY/8URtM0VHY/23QNGtbzhV
B2MdD4Mi8LOvrtL6KRRtrWNQhEAVvwm/3wZq/UDQWtTHqFUgaAVqWQ1LoAJF
s1DTqvr/mFTF/8vo0v7rQ0ogUEX793WL8r448bK37eSrCkk/WUj6I5gk27UI
k0nWY0UxqI8wP2wtXeqrdoX4C6JMvARKBacst4oSlbOIQSu8WXzmZc+V6aJl
ydWTpsPFHvq78nSjIZgBF10I7wq6YZkQ0x+sDl6KkI/88P0u24Uulzrschg3
v7sLZIuyVKB7/wmH278xjKcpVwFsiSbRxNY7Fxu3mruqcYtZ8p/PS0FhStt/
UPe47IZZi1oLtsSYvrhgS3aI2urpl92NYZbWIRrDrJLswvBS7MrIUuw62PoR
bP0yoTT7fVIZljClDEtGmEqjYRbYykGYypMninQRfP4ioquiQlclgy6EqXyE
qXyEqfx1Cl0IU/lbFLrAVt6XKLCVhy4xj9hCmOJs7ZVs8TBVg+UeQn2DOlxD
0KWwlYMwlfMthadTtWhmBbmyT8uiTAW63CzrHFmUhUyVScUbxkwCLOOCnpyA
FkuHcWncOHotxtLOIk2dqc07QK7WKZNcTn/S8VqOx/xJxwDM0boSLtQ3KGSo
W4TWfiqCC7W7rtIJorZpcNXmcN0CXLeQo279W8L1CcBajVop4fKiFgOtBeYc
dWtyJf/NsaX9Pw6P4TnqRJ+ouOFvz/a2GX/JDNiUEIDNLRJgBQzrC5pp0aNA
xsCexvTmYf1mdVhvGW3ZkeUO2w7idcwu0/XNQXyJmb2uV3FDLv0WU5NcHtkT
mt7FwiHexiLS9m0sbOjy2NEl91I96l6q1hs6CrcdYTjGx/PPyqWIZ/jDinIb
1a2dPBJnO154dYBT58xhfjSxvJBMjOhJsheCJRMDwhd2d/ub2xTAtJZwDFpC
7S4b0zZqy+A516r2ciTfSbaEXY29iN3WlhAB7PTbcs6FAHZ9NLWEpdl/xpdG
S1iG3YJiidPKsJQZZVnGrLIse045ljevnDmAvV/BrNgK1If2ASxvAwoBLA8B
LA+K5cVBr61SMQQwrthOUgyf7ybJqrPcvaj9KEiWq0nGFavBchDAciBZzvGa
FLRO1CS+EMKyEcKyEcKyvyO+TlP+yjpTi2WdpSKb8IpW8Bzkgmb4RRmQKwNy
8Y8UvdL5tzlmZ/WCaWdJyDT8XqlnagW4ZadqOwkz6g8RxKAZWUZvanGUu3ak
pj/xm1rSM/h2EEWe8Rm85hn82lFHeKaFsTh4tgWOfYZfu0F4dutT1Bo49hHq
Qzi2ArVUerYINb+aDGPoC6dW8v8+rqT/PyNj/NcQxk73i765uXcTb6sxZ71t
xp2Daxf+fDBbpLhmTL583DV6xNFXONfUbnGd0S0a4y8LbeGXvmwjmXm1wmnT
SIZHzi2QazU2OJ6Zrmo2IRfibXoK61vIbS/XHRnjVwq6j5mymkBtY/M2PQJo
MeOe/1fvMEOvCuJtL4JYa0KsPT9b3BPUmm99UT7ri3w24CHRVmqHjeOfkGsU
TxvbXlw15LP32xRnH7wYPOjiD19TW/kG2krks697WtpKymfUVg5FW4l8dnWk
ta1EPpuKfDa9LNrKsixrTlm0lZDt3XL8Pom8haj3UUsqsDwvallFlgfV8qBa
3moU8lke8lke8lneOqka8lke8lneFnyMQ32Bz7ehvkR9VY3l7kDtRH2Ngmy5
JNs+RTaoloN8lgPZco7QG1rDNsQn0i0bOS0bOS0bOU2RjWV9VwuunaYL6Um3
TKqzVLWJNvLMyTL4nJ9oSxeF3zmdf0+YVoswo68o6KXi93rSl3Kqlt5XJh/X
SSPQOGdJh1HfgLWDqAPg5wBYOgDW0FveMkU0MPYV6svanLRbIO0WJ40iGn7N
ekkaYtqtj2v6b63C77UStay67C8lae+g5hBpZf23JpT03xwd478xrIT/wsBo
/9HeUXFvD5zubTnqVNFpmxtfEG34awXc8BfGePYxn557XE7G9Sz4KNJ1p5vO
QiS4wpLmDE0arbLqVzpL0poL0tBxvhFMmseONIpz93d2BT3tqOc1pcXkI7IX
1d2KAodk4e+WNyyjIsfIswIti9xe5x8DrJZdbNxCbFCU4P8MWo7vfp+b9UZM
6/d3j76+OjLE5gSfkWk7YXJzYuXLxfUZmb458bpoNo1l++DjSL3ZREz7Uca0
3xDT4gFaMkBLQ0zLREzLmQvI3kG9h1oAyBahFqM+AGZLUcsB2krUKtRHAO0T
1FrUpwBtPWojahOBVoXlArTcz1EALReg5QK0XA00wgxRLVfGtByAlnMAhZiW
I0AjyA7XcESybDSd2Yhr2RbQsr6l6Jb1Lc9opzhqLJPPzfDqJNSQzgin9LP0
cqaWtCrttATLxVLxS1LxS1PptyKynDyCNTWJlXjIECtxP2ovag+E2QN5dkMn
TaztVBBrG5T6AoXG8tZm1CYKYqh1+PlrUWgsb6GxvAWxbi3H7+NFLa4mG0t8
nF3BHz+tlP/WpFL+38eW9P+MIHb17RL+U29F39zQs7G3xfBj3pYjv/2vypXH
5dIvntDlEsnMVzi5itRw4u/qkC3KhV9x+ls02g/MXLdnV2i29BucTWxFoN00
sRVqOFZLS2CusMMx61zs9ib6HstoTNn6Erush9u/PoTYcoQ3i7eWwqz50ixj
66ukMGt3T7lyTysUfK5vc9KorU+8hwC2sHUx8/pEO219wuak8U1l3Z7vsYq5
vnHSWIrdoABGbaUMYInwKkULYLOFWbkwi973NRdm5cKs3MUVWC7Myl2GWlGR
5cKsXJiVC7NyYVbuGhTMyoVZuTArF2blbpZexcGprdKr7cKsHASwHJiVsxsF
s3I0s/aTWzVYNtzKPkRmZcMst25WFszKOl4TTPEOM4vYQpeZiSyWeQogZX5H
XWHG6VosAxTxj6fBVvrpWh5yylGcpRFRWnGqOFcs9WRNX/LxmkrL+LRZrAM1
hVb7DLESdlfzJ3yN2gllvqruv7W9Fm8bb23VxKplFuvfmliQajUKreMttI63
luLXLsHvsbAKxKoIsUr746ejJkOs8SJnfT+0hP/cgGj/oZ5R3meHHPK2GHpU
l6uVSa5LRZBL7LTay5UDt3Ks901IuSK0nlK828Yq9fLnj/nlz2LWL56ELKJf
rtuJXSEbS1fBkrk0yfaGvxJalcxpPZx8UB5OhjYsUjFMvdNL9JLO/zJkfCzm
iDjZsdvwtDfeGqte7UyCVRId5JEGz0zS9Loh9OLrEqXEXKxpz3vFXIwW8Slw
DfuHPJSUgYuW8GcicOlPNrYO7h4pcK151VjCt073DyJwHVam+2eHlNID1/fA
6yfqHi3T/XQEriwZuHI4Xih0kLkLCa/yAi8vAVZRAPYhCh1k7scSL3SQuetQ
GyReSuDKQeDKQeDKAWA5X6F2KIDtIsQEYNkALBuAZWuAoYsEXyyLineSWegk
IzTEWOYJWVAs81ugBsKAFzmW/h3FqXT4lEbFv0rjttHXqaf0mOUkuBytWCp+
nxQqIszaHgbxVT2Ir4SvqvoTvkRtRXsXVwUtIkj6HLUZPH1WU7SJfPKFz9fg
ex8RX9V54Lrlreq/tbgS+CqPFrEMWkTUDPA1pZT/j4kl/b+OiTGm+X2j4ga/
Nd77zOCDYRl70Yaxdpyxn8MwlmJhTE78l+QZNxd69QsofBBAfRCyl5yNhSDM
VXDzaKxP3Fb68pjNcos32xijHlM6OFU6VMobZuj3P0ukmonpfqs6D75hjVoF
ORUV7JRpAV+f4rtCrd2j3CHPIcMYxbOWw3WjS+/RN1/vM4Z8Etv1Uqd1Vf7a
3nhMSOxNrGrYYkYZ/od9fnf3v7n5PRJatNIn9spm6mxEq3kt5LljG2NdYoWc
2FO0Wkfnjp0tm6m9SrD9fWQrOACtoGViz6OVNrFHtLqFaJU0rQxL1Sf20Gke
dHoXpcn0PmqJJhNquU20QjuYg2iVg2iVg2iVA51yEK1yoFNOHGqrotN2aCTj
VTZ0yoZM2YhX2WadANEhevmGopXQCQIhXmUeI4WO14Q2GkwZJ6krpFcXy0BO
SudFXSFeI1ganVZqDrmIIScZ5HiBpRyr4Us+UiNoSGVWqFpYheI/R22u7I//
DLURwqxHrUOtQUj6GLUard1K1DLI4y2Htg+1sCxCFGouFJpZWm/9flNaP5rB
b+zZwPvUgD3eZwbu/S9qlAqN0hWN8hSNfJpGYkhfyAPI8JOs2+oHixSqLO2h
AZSDP6+t22R3YapbtcktW8HCtoAulSV5kbNHuchZ0GQ+XAx2KeTjQFamXCpT
dOCoLtTzrrApGXX2tR4jhVGVuVEe815XqzmrGj8/y1FO9H7szfvd/EkfNTrp
j1nzwXskP0609n06TvL5Rb7P1SWafQGg+ODdss9F0em7webB+/ejEZ0A1M3x
IjrFa4sRNKtC35eF6JSF6JSN6JSNvi8HfV8OolMOolPOUtRyFKJTDqJTzmoU
olMOolMOAbUuFFBVeXzKBlDZACobOGUjPmUTULsIqGocqCwAlQWgsgBU1gHU
QR6XDhFQmYhRmUAq80gNQspJSsEi6gIzeBeYDqrST4pKO1ETKJ2UuYiDxFKP
88JvmMppS0H+gk4s5Sj9l6QgmbXxJ2lDKUuLl0g67SqEUJtIqMpCqE9Ra6HT
J1KoD1HLSSjUEgi1CDq9h5pXRm/1bmmt3qgY/3XZ6h1+M8rbvO92b/N+O81S
DYVUwyHVyBN3Rqp3Vakyw+Umb49lvqBVryJBtT4MVC5j89R+yctJRLltslLI
/s7S1UUWhJJNQxfuRi67TXg+Tq8u7pUXIBX1XLBIFMknEgPd3xoHi0bwTQdJ
0ZEGT09UNxwuNnpulqM8/3M+xTu53nJPa4jMSmORlezG5sFngOqOlhhDfd5V
ZqUeNlkJFJ0eEjyG+g86uV8niKxEY6jU6chKcgxFHGVzjkCQzlEFhaOKCkeV
BEefEEeVdY6ywVE2OrlscJSNTi4bHGVvlRxtNzjK+roatNlVjZozRKasPWaN
Mg8iLWUCI5eKEcWiI/iBDDR1HpYBVNKpjss6RtSkHQdVaRSKeDJKpS9TiS+y
52Wyh6UclvVNDV/SwRqhBSJ9dlQVAm0jgaoEC7RBEWiNFOgjRaClikDzywZ3
axNEt3ZjeAl0a9H+432i4gb0GuZt1mcbFNrhbT4AEg2ERIP3Ii+RRIe5RC1J
olGQaMzpO5iZFIkW22Qmu+shBEWe4Au5tMsElUGU2/So9cA7mJ3sujk7oZyh
hTJd1SyFekL8EG/pbIQq4qOI2tu0GrcHttVO/ByFO/ILuZhlBxYlpnr67fF8
jq4eAIKvsYfbdx0c3OwFHf5V4P8Ynhvf8z43X8/iWeoxYwxlzNDNWWrJC+LM
T30Eca12FwRlqTfMWepAX2SpfmKJIVSW+kU79+NZSpz7UbOXNQdZCs1eNpq9
bDR72Wj2stHsZaPZy0azl41mLxuAZaPZy0azl41mLxuAZSNPZaPZywZg2RtQ
myRgWyRgyFJZACwLgGUhT2UBsCwCbCdHjAzjgmXuqQ6x9lWn+ATEMgViZBi8
4qkqA5BlHBaVfqSGi6VTtEo7WtPD0o4JpeDVUZ6hjtZgqSTVEZmXnASW40Ui
iyUfqs6SD1b3Je2vHjo02bG1xcLWvxW2PlbYWiHZ+gBsvY9aQO2dZEtp7/jJ
3ogY/xV5svfv7vW8j/fc7G3aK87brK/g66kBuyRf+0Py1WYc8XVB4eu692WN
rxl3iq8A8aU9yxO8vuCx25sXgIUcQ92xQOU2D5/CIGW6mtmM1JBaD3WVSHWl
9YNCP1VoRap9EFJV7/m/Qmrtw81fCXR7a2xci5d7qRHLfNI3x1FJjqN6PeDm
8epty/LoVBmv5ihbCXq8aqvEK7k8SqMovpWAeLVTHUW9ZV4ePQehLkOoayPl
KR/Fq4mlTad8aYhXGTbdXjbiVTa6vWzEq+ylUijEq2zEq+zVUijEq+y1Uqj1
QqgsdHtZiFdZECoLQmUhYmV9oQi1XQiVCaEyIVQmhMpE1wehWCa6PiAFkvZX
pwgFpTIOgCRIBaRYOj8ATP+Gclc6mEoTRbGKDEo7WsNNNrkIJzeR5CSR8Bul
CJNYMn7DZPCXvK8avTPP7mqOlsEmbZcufaG49FkYl6ihWyVdWmbjEo2dZgmX
4uHSH+NK+n+RTd3ZAdE3P+sZ632s23rv4z02eZv23IJotbXoPo3/n/jEz/qo
xdPf5VU/6Cv6lFzw5FZ5Kvy0nDPlCZWqOFPyZgcag+v3/5lJ0jgySAr5LI6g
KDKYIuVRQqfc/RSZqY3+PM7trX0WTSOPdnK3sVnL1yHSGHzs4hC5ybO9zj/6
KSTxAbmjMv9n0II/odMHLA2UoWm0DE20+WkXmhbL0LQCXd+qdpbQRPvsCE3a
4sFeeXanb37ys7uS7AK6visjRGjSl6UmimWpJNn1pSE0Zcwpy0NTFkJTFkJT
1kKNpQoGSwhNWQhNWWApCyxlITRlgaUssJQFlrLAUhaxtBEUfSZp4ixV4Sxl
gqVMsJSJ7i8T4Slzh5mljN3Vqa/bU53G3eApA20g6QSHDgCq9IOcHwCVdogX
fcWBIpxSRVFkOkwsfYMXEqkdRKrBVUo5aJUJtbcaqipL3lPVrNN2OWqSOiV8
ruhEo6YNlex1+tCikzYUf6+soZPcLvhjPBq+0TH+H2iLEw3fkV5Rcb269PM+
+vpaoVRPKNVLU2q7rpQYRe3nQ3Oh1DF7pSb+15RyGHc7hCXKpRLlsH/4UH8i
2kN9oPFEtHgq2qGc67lUqRz8whp3qDTlMjNld8eyFKqp7OxqUmdXNKHuK4RQ
99wRoezfYMdtoxI1cchIPUkmOYtyX7ybRJJHdo1bzKqqjaEeoC7ObT6uQ0aa
8qQ5I4kRVDF9BPUhuriP0MWtAUjrkZE+62xck0wZaY+SkUzHdchIl4aLEZS+
ij4BGUlZJqCHbARI5cwgISdlAaQsgJQFkLIAUhaBtEIDCQh9FAIk5KRMgJQJ
kDIBUiZAytxqBakq7NlBY6gMxKUMuJSxi0yqRiKx9L0kEOWl9P3kUxoASQMk
aXxYnkZDqjRq8FI5S9CHPuNf8e85SSFHcd0hvQ5Ij/bxpEQW4RdAI3R4Sbur
sqRdVYPTErq4hDhpkn5AJ4dPoUxabklMC4PH4DSEos3y37SVgcEl/Cf7RsX1
7drX+3Dn1d5Hu67hNj3eY4PR3cEmY0xutqmFYpMYk5ttavtnbFpgZ5MxKv+f
6uS67RzF2z2XApTpCmUTUJFDzIvlNs/LBB/VtZdHdZHmLQJ1k+AucWTXhrd0
ptM6413tOUz6kZ3a2Uml9BRVCKkirPubNHoirUSEcqOrGy/P7+ZebNRiVnWR
nsbzhu4hN7/1aiRPThEiOaGhm/WM/biJH91pK5t0OQyS05YuIjmZrmIIm5xK
8eT0i0xO2rycnptJRUOXjoYuQzZ0anrKeh+1BEh5DawykZ4ygVUmsMpEesoE
VpnAKhNYZQKrTGCVualyMFZITxkAKwNgZQCsDICVgQQFr7hW6dAqfVc1Skq7
q+GFJlBpJFYaiQWrQBJFqNSD1d30mZvggUm89bPJQmTQbm7QLhj0NWpnFV/i
V1WMTKQZhEyUYD2CoyWBtSEMsk6TtEE4GSQH4bcmluQTpZ/UidLrdbwPdVzp
fbjTKlj0MbfosdfXcYua3rZF5/5LFsmtTW++U3/DnXAQObXLSI1WznEnezm7
kITfeuR20zXLamvntJCkXzSqklSElYFgh4I2mu6wQ3bvlqMgFGlFiOw52aHb
kITX+4x2VBTNHB+Ck0R8AC43yWvwfwBP8/nSoIc9/GaY0WpukmtOdrmJz5bk
g8laboqjo7s35NHdmyI3iQvbY/hs6Ts5W7KbfmubBPRwcvIMg6NMcJQJjjLf
QyE3ZSI3ZS5GgaNMcJS5DKVxtErhaI3C0brKLAMcZWxEIT9lgKSMLSiQlBEH
fhSS0sFR+lekRjoClJulaySh0nYBpDRSKY03dmCJpVLtq+6IpNdIlrKPfoDz
s6cah0fw8wJLBj/JX1NVIYJY0g7UV6jtVQRBX0iGNqM+s5zDrVM2AT5S9pXU
sziNofcs53FTBUN/aHtL8tnhDd3reB/ssMz7YMfl3oc6BXP0mB6NRNvWvN92
07ndM0PkBoG+62Tm6EWNIzq3s3I00/pMcliOHPztv7TnX7oZ7/8ltsj/Nx4V
3LHZBSK7G44lPP8UX6BZ66zmIOszdjbrSvTSTt9ZohDU1rSzFBYed5GtMe51
CX5gxSnedf5G594jb3btPYp/VUF2avp5W8vZbzV6dkYt0ant7vugmw1+xMNG
PEbP1xnBh9a956JLe1dqs9gUfIrznSVtZPSZtrPUTTwsTF3aAWhzGNocl12a
ft3niNBdWpK8CkEbG2WiS8tE8Mmcb9HmA6nNUqFNBjq1DISfDGiTgU4tA+En
A+JkQJsM0ma9vTbpCEDp0CYd2qSTNl+iUwM54CMNGSgNGShtpywBDktFFkLk
2S1egc0eXtSLcYQIoBRRdKq2l2JQCvxJ2WMULCKVduG/DAQ5XmLJAChZA0gg
xJK+rMyStlX2JX5RmfdjhFDCJpsZkQrRqjAQvSt7MhUiOcnWLjE42z/65iZA
dH+7xd772y/hID2kgYQ+TQepmyUf6ZNu6yLBITnptlu+DAXSz4UHSZ8jZQWT
pD7Y4haP41lWwsMdyOGX9FtrujPBSToVbp7kJJzsLlBwFiUvORWxTFcbm8Ry
DQn3SHBIriJkVgrq2ZyFWvy+E1i5BFYE1dlOPYbxr8RlLu7ttR/tpw+6G7eY
UYf/UZvvpi5tyKMeNupxWrCM4EsBYvs7km9/z29Jt07JLu0l+SBwe7HRtK6j
OHLbIufbtBTAH6xDl3ZIWwoAVt8NEl3aRdmlXQdWP8qtpt+A1S1glSgXA7Qt
cLpOnWPFo1F5jlUGsMoAVhmIRhnAKgNYZRBWKzWsKgZhlQ6s0oFVOrBKR7eW
DqzS0a2lA6x0Aywknq1V6akRmJWGpi0NKSmNpkypO6qBoJ2IRKlfV3MTVsVY
ym6aPKXAruSvq8nMg9pJVcVJ7hBGujpVwBbccbRlSVsh0BeouMpCn42WCGQ9
11+lrm2H0EfrxhR96BxNPgd387Metb33vbzAe1+7RVyhB9t7FYVWyWnRx8Yk
u4c6yS7ovO2YnGSf8rYxKaStM90RhUSXtoR3aXyana/EIo81FpFADjE08lhP
3Uggx5+YGxUyI9kB5OBTbgKI/82TT6SY7iA25yZjbiR6Nm4Qb9o6EkQcIzHd
Lhby/E1q5DS9EUQbWa1c/yWG3IIhmhNRm8a/KicY0ts0MHSxUYsZdfmf9R98
uk0UDfuHhx+18Q5NXh0157lIPTO9D4o+eEFOtpGZPpKPyPEOTd5JoC9Xqh2a
HBidHozMBIougaKrNDACRT+Bol84RWV0ilLkvneGnG5ngKIM5KYMUJRhR9Ey
e4rSQVE6KEpHpyYpos5rQ2VHNOcoDRylgaM0cJQGjtLAURryEzRiqVTwKPVL
arJSt5NGaNw8eK1GLolCkkrZWY3G1V/zDEQi4XvJO3hntoM8+opethNKMgIR
RITSF5XRtyXFVWJJn6M2V/IlbqzkT1hvE4Xsjsz0LW0FJO3YTI6H4ieaQTo/
UBydvdGui/fetu9ymO4nmHg00mDSerXVoXs10xGbAVOLoEWAU3JRyR6mdhKm
9hKmDhKmjoWDSV5Z4FHyUb72jIqjYJ7uwEzbVcj+zRU2HAmbHNp/7C4dljY9
burpCmFT6N2A6uLkTXuzLS0taTg5iqST2ANwq3sAYYDyGEDtfem1/ipQRxo8
OU6bZtMMKZb/gR9qyncBHnaz4Y95+NHbpGbGM7z6NJuaujbF2NIXtT0AtamL
Mi9PWpq6YwNiRFPHj95KiqM3ugVKfRhF2QXQVpTSrUDNDwdUBZaOxi4dQKWv
QhFQH1cikNZUcsQIpJCZ0pCX0jagkJnSLEilAqlUIJX6BRWHaSvBtI1eqNmD
Uy6W8lXVSJayg9oxLhaFIQhkFA9FyQhF/2LJWyurwUhYtIV7xJI+Q22s6Etc
XzF4VG3XnmnH+HYmacdmZNLYkv6bI4VJ2qVMb/yrk/cvbeZ6731xnve+tvOl
TYsNm6xzJB6YijrWPirnSOoSpY1N075XdsDtbepkb5PNKMno2wKWR3lRrrBn
bCFHSW4iyFWU/iwkQfxpOdmVmW4ONpszRPGGztGsZ/weuzN+B3/C5P+WmbUP
N29P1NBJvzkH6bOjafX5n/FJzsygRzxs5OMeNq6pmB1Nl+tG8yQzi7QM1FZp
x15RDs0s60b7epdQ2rEYdmqQcWh2WbZjxkMmcnYk72dK1ZiRB2cGM+U4M+lg
Jh3MpIOZdDCTDmbSrcys1qlhachDaWAmjZhZZ6YmFdSkgppUUJO6heIKsKG4
w7mReUhkIhoEbavqZilfVvWwFEpGyV/ylyro4ZK3VSFaOCwofPsLvIAWR8dg
XDZVZEkbUOsrssR1FZWHQdTAY9OBLVTOw8IA84ME5hgB83IH7z2tZgKZ2d6/
vDhXBCAOzaKQ8yERgNZaNiG1+dB2OR8Kd36m7hmZHzZ52Q6a2YWGRnRm2hma
6M5M5/n4C2exhnKQw1k0cO5Qc6bo41b1sdijX4tpssdmuSj0uZlLPTczFrL/
ot/ry59wa3Pn3BFvsqdd3hsp0KFFR33hUaDj0sDhi44NxeFg0/4PiGn1KIgz
/gljADQH4hg718WYF6FmuWWfiA+AXpOPtEEc45G2EmLnGl3XSflUyDk5ANK6
rh/1rqu00nWJARCdjaVBnHSIk/4OCuKkQ5z0hRZxPkAt1dSBMiuFOmlQJ+0j
lCbOGrM6qVAndQO1QKkbK5Mzhjz0Pc0eIU8cfZXyRRVos5VetlE3tZW/VHYJ
W5JhS2eW/LkSXqzGbBTGJK1DfVqBJa6p4Ev4pIKxJb1S2fshZ9QQ854yZ55p
3v8hZ37RgswABBk0V13btvPe1WKK956W03RvKNRoDRefBLUPNQkyzuqNncZC
zKML3B3SvLnxJ71Rp0Fit1FeUuIxXbUUXpuQD4n8qXbLE3YUpI59TDfwSmrk
3ZWitSrcEb0dNR6VGi3p3E7KCblUbfammLBlR5sOfckb5a0QXNtrP/qWNuhx
NOZ/vEbcm7cfoSmPh01o5uHn8DPhzdxnxZRHa6I0b/Qmii5C6oQmSp7Df9kt
mu2EN3toytM7hn3TV/GGn8OX5Ofw+lqQJeEkytOxZJM3ZZ0EjgOcvAduKOAQ
Oe9Lcj4QIScN3KQh5KQh5KRp3KwmcgxuUsFN6qeodVScHKIF6EQQOpIcU+BB
puEvn5MycVU4OjTRQacFYDgybkKGv1ZiyVtEgRknOePoBGkqCWk2KNqsrcCS
1kCcT1Afo1aXN6catW1aWE6kGn22rD07JraguThjIM4IiDOkhP88ifNmVFyX
Ni97Gz87HupM9t7VEvK0muH9C5dnrpRnfgGjHvMpmHnUY8jzTMiTMLM8LwbJ
Y90U+rNJJ0gemXNWFlaesKdhLhUfh9Om1XKHH+9YRzmm63HN3gyR1hhvDlXA
OZfbfM6lTZfl5d5yfdr5X/OmuLBFW0TkX5XRm6p2dJOINrtpwv+Ej3Jy6IyL
yJkIcqYqh/HvPa+dbxULOoz/FORsBDlb9MP4aPa1JOdAbzm3ATnfysHyOctg
mZMzFhFnvIg4CXIbMWm6OJRPnQVy5igxh8yZX56lwZw0mJMGc9IQc9LInKXS
HTJnpXAnFe6kIuakIuakfgIFUtdUIl50eipr9BA8IuyAFsiT8pleAGdzZbdO
D4GD5JO8pTLhQqMb4iUZvLgFL1qY2VDRScY4upqUSTKUYYmrUB+W9yXoT6Za
+qf3LP2TPMWip8FujS/p/32MeFKV3pnpXP9o/xFI07l1W2+jp8Z4Gz8zDuJM
5OKInDPDpq8yD3AeChrg2Jy7F2q4rJ56WZeBQu0m2ojzriFO53DiePPVQY56
CZKjsDvTBbDjkm9zZ8k8dujwkENrivQcv1EugU+rYV+Fv+TWhE+4u0IKMTj+
38ITJeChg3VaPFTgcR2p/+RYbZLjuIf/0f6+m46yxjT1sEnNIti0pyLE3rMm
Tisa4RRTRjjF9RP1ja8JcbZCnK/k+s9eNFUHtfUfKc4Z5SjrGsT5QT3KInHk
tDhBEYfWgNIgThrESYM4aWis0tBYcXEWSXWWoD6Q6kCcVCSd1BWolVwcMLK6
IjBQ4CF3nMQODWu0zAN0Uqg2UIOVspGc2UTOfMbzC+yBKSwZouCjhz4hazbi
Sy2/iAxDx1TrKtLkBl0TVwbCJEGYpI/Kq8qwxBXlWOIy1NJyhjIFdVDyeOq3
0TH+n4aLK8/O9ou++dnr1eI6Pt/G26D5cGgzSoqDfMPFCdVZzVfO2K2THOvI
eBMXpxkXZxsX56mgkfFBm5Gx9Zw9xPqhKs7cIomjvX2AuoToKtxStNt60u4S
d4iE9sVdyHaKxxsHJ0YHRrnSUb93VuLyD/7qaVXzvrDXfBRaGI91aMwfC7st
ZOqFQEZOjR3RNuuGpcX3RLqR05u/8j/ivToyE5tHsOkSGXVtR5sTi6lNcfEU
mFzb+VybE3c3I3OkkMhQJ/W7fGqeI6PsGlI3lTYXNU8ig2iTtqCcHm1SEW1S
l5SHGt4KjhIsFekmVbOGnNHSzWot4ViwSQE2YAXYpKzjRRPh9fx7GyoROhwe
J8FD3ODrZHxfFn2jInLO+ooCl57ARUYYJcZwZABMkgbMShMyLPGDsixxSVkz
MlqcmS1XArXGSe4n/zoqxv/jsBj/lcFyR7lLVW+9xwd66zUd4m3QbCjAGcnB
EfFGaahaWhsq9ezcOspZGbzUEzTKUUbH1FCFPKOynp9fsjk//wnY3DY4SsTR
Hwcr8KF6V5j1Hq6Oq6DVwhBHV0PjQh5dhQ43+pWyJn/cQ6qbw00RzqpM7zCi
LewUKtc4wjwfH4xP0JFVtM0GofRHn+RwefjrX42Q01yEnNnPRrB3WkRyf963
nFN99EpxPsURT1NE6VPjr7pHs13wZ19QyIlR/Cmp7OuUEv6MF/5QyDGmx2X0
aQ4POvAnFf6kwp9UBJ1U+JOKoJP6fnkaxywpT/0Swg4YEggZYcdJCtFjD9Kh
FDiUAodSPqECMms4OmsrcYecHCFBUjI0QeG3Tl6H34Y+hTZrdWIo06yp4Ohm
yjIaNUkaNcuDqGGJ76MWlvElLChj3j7WTp8s3dMv8gSKLpQ+1Tf65rrXqnhj
H+vnjX18AMgZjAI5zZBxODsFdFWmY3FljtPRurIj2Hkc7DQt7BwH7LQMeWJ1
webEysxOB9NTX0VmR39rS+OmtFCNVYHw3NYwOWx31WrYtoAMO6brGD0KNkU+
Cy+mTImDzsSJGmfY61//C/KUsFkaLKW0V3Km47iP/6kfHD/sUTcb80+Sx2OS
Z4Eiz3Il+ayVyUeVZwfk2d1TOSEvQJ4fIQ8NdEiePyBPwqQyLFnKkzJdyEND
nVTok4r0k2rVZ4Guj5aADH2WkQvwh3orCJSCGJSCGJRCLVfKaiJEF+hj/tUn
yDApayoizaypCGogCpT5RA8vpAxeewTpkgRdkijIaMJ4LcIsgqcLUO+h3ilt
CKMFGkvn9PNwMaOh86cTvaNOTGl7l7fOw728dR7tC20G2AacRiRNyI5qrtFR
yRnOg7YznNU2z5aGWhAszNT4nM15lVWbXy3aaFfDSm0WFE6boANy6+D49qCx
GRy7jQvORIu1hd9xplHj0qghZrSmSrtUUXXmUe14itb7RKBx3P4heFt+6Ybx
aIT5go2iR5yga151XuiNup0WYL5+oeNb/KuSNq3VA/wP+kjTYY+5+cR4UjMA
87QKTCQHxvtCMVtgNr0GYLoAmNfNwBzsU0IAM0AAc9oGmBujS7GftW0/tFfx
QIYfVPFn2Km9ksgQMHMkMu8oyCwwRRwFmfIcmRREnBT0WSmIOSkriIiUlcRG
yocVCBoqB9eGYwNOPqoAWT6uwD+j/eGPZE+0muITQKHeSSElCaQkaaFFY2Wx
DSvv4s81DzWntC9hpsLKJHHVDoUXWp+hN02kXumsHP92eKaZt9ZDPby1Hu4J
XvqIMMOJGSyJsYYZux7KPLQxeqgC1m94D7VZ9FCSmKdsx8SHzGPiUdqY2O5g
SiUm9MGUHTFdQxPjKIoxRVnCcerXv7oL2T8JYDguStdkurXVDAy6JgmM3CEu
8lGUIYtTTzJ/RhS+ZeMkSFRHTFt9elBpPuZiI4QUPgEWQWW3Zsh03ZAItEeR
bHHrSJMhH4cw5KtuaI96lGB734QhcOQwgsqxfjAEjpweVJKde7skuzi0JLsy
vBS7DkduaC2SdvJELdIkqyNKUCFH5imOzNccKac7kgJHUuBIChxJ8dLffUhC
Z0maJcITzomTNKEosqoCqjxL/rC8ozh9Rn5oEeRD7sdK/r0Vuh30vaXlyBQ1
kpAfi3jjo8YSzQ+WOKsUS5yBoosEJ4t30vldRpP/yIPqiwOjeQO0vnMl/LvV
1VuTv/dnN1jSU4kq1BgN5I2RiCpkiXX4qzZGM0M0RouVA+7liCqKJd1CrdbY
zWPMR06twh45KZYU5pCb32RfKEvM85gicVLglk1ITozjbZq6bAt5oaoY9Kp+
uDU7tCrirDfC0gyZG6I/zQjve9SLLB6PMe/rqbFke+1H+uh9z8P8j/e38WP+
6WYTnlB7HsHJ++Dkgxci7SNJJ3tODiicnAQn3w2KYWfByQXEksuIJfrEdzRx
Uor9Ok7Ekj8mldaPlvhDm7z3KWPpfQxSUhBNUkBKCkhJWUR/zVPeL098mFkh
VehlGRmyrDwIWV4ecqzA95L4y/JyTooXQokuLOkDqAEhkvSEoSgxn1KGlGJu
kBTQsCTaNymFnjZi/FcHi8Pm472jbn7SsRL+V6ezEOP+16FGNyN9PNwnbIOj
p49CNjjGIbVlLSbokDrcOGW/Mk4paIp726sxTiLDUdyMRtBbYPxZNMKeVBd+
oOIKjYjpClSJyCMCEdnl/H+DiASDHmayInKxcYtZ/Fza+OM90HQUeptxTT1s
6pN0ZBTB5lkQWda2GFv5cjH2UbvibM0rQORViUjnKHkuTZsw0Toi3/QtwY4S
Iv2BCHqbs4MFIry3GV6SfT+yFPsRiPwHueQmISJzSQIgSaIBylSJyAwDkhTk
khRAkgJIUt5BaZDMN2FClDhJEroWQrMEMFAlf1COgoi3nJslLy2Hz8gO/hkA
cVLKcHQXiiBraJIkQZIkqyTvSU3mSU1mB2uSOKkki58Qw/4YG+Ojc56f5FiE
ssd3b0X7D/WIimvX7DH8O9MRqnQyZAnKIn0sQ1q7vkbLIuqynU1fY3cYDVlo
SGs8VrBBOYxWRyd2C3fhB7Vt5fnQy5bzoULK4igcLT6DFle4MW2hVHGFXbsL
OT0xeh11cGK6s9REiuxrTM9GFjiltXlswPbmG8sV7rdliks1RTvzoS27tNf7
imWXGKPJ4YMS+s9j8hxoLJqcKc09bCaanHnPRbD3no9ki4DJkjaRbOmLkWzF
S8XY6nbFgElxtk5isoUw6RrNtr8BTLpHsz09gUkvYNIHmLwVw04Ak1M0iUUq
OY9Ucok3OSWNJkdJJX/IYUnS5NJ8IpssG51kgJIMUFJsQSlLoFAamV+OHqDW
UFlYVsACBJKp3qeCJovL0Y7KEtKEwyLyB88g1LksKeskQJwkCB3u4LdJgiFJ
oQyZIx2ZCT+mkyMlzY6Mi2G/jS7BfhlZgv04LNp/eZCYg1Ay+fjVivhXoz2q
g7eq1RM1qZj6Gy2pKP1N0HJL0fsbbcHFZIo6K+kr7tYqcFZiMeVF3ZTLtqaE
PHOeZzr8EaS4BCmmx7bdVlIUUYIf2+6z2uax7VCsrCsUK26VFcsUxToxMV02
qspStBlshN3TASSKU3/PP1d4Sgp6V9IQCaW0zfZcCWX62qjFDLQ5k+TlF39t
Ou4J0ebMQJsz51kCJYItbGUGZRVA+eSVYuzTV4uzDZ2Ks80AJU6Cok1e9wOU
Q0goR5BQjutTkxh2brDR5ugJBaj8TAmFUBlvoBIPVOKnlObtTqJEJYWjgpod
BAuB8m5Zam/wNz5lPvAQheixgF4WlvWQKy6ChRSReQNFX+G1l8mOJNiRhN8p
iXczNn5oOYQMmQo/JgcbchOG/DQ8ml0fEs0uDozyneob5T/QPSruX00f8la5
52VUO+EJz7eh8kmP4HwSNHe17K7IzucvITufRZbOZ7nlaIeuMDbvrzS3efTR
fl5yogizV/UwOewOiyMcKN3M7wDIHw/434ESNI5tNezzoK7HdEWohEQMZPWf
+SB/jWilTFHUCWzBzwKoiyvGm4nyjOIK+TYzhYfFdG5cxmZjTsKiz07oP0/w
17vHTwAsU5/0sNloe95BUlmgj2JpdgJU0PZ83L4YW9uhGFvfsTj77LXi7PMu
UWzb61F627NHa3t4UimhJ5XTMqnQOFbMT4zWR4Plt/GlxAwFsNwCLAmAJWlq
af0MOYXjUlriUhqWzClDJzRz4c48XnRzwjtl8PIuvbxXBprMp88W4AVguEkM
J5HhGMDRSAIaSUAjKRwcWhMj8UgYzxsZ9qsRQDgelwZFsTP9otixXsV37+1W
DP9vbeOtxP9XpK2BSJFCid3Q9c80OhIS6xlxgSOUXSFGKMrgddztQdKxwGW4
TOtNV05+1ZVb3Cej3ynzf0KJU1LydjAlpks/NUrclFLou/SjxIo4T/UModmJ
JklNeZbjCgoqpjlK0ALcnXPEvNtfzmbtLdoYwurtTnP+2qDpuMfcu2nxhNLJ
PKST+S0i2PtIJx+0odlJJFuptzvF0O4UZxuRTrZ0Ls6+6BqFdBLFdnaPQjqJ
Zvt6RbODvaPZYaQTfQjLl0+sLU9J9sPIksYMRULyx4RSSCj4qzupFEueXApY
TC1FV9NNgx/TUTPQDVHBk+RZsCSZQEmeQ1rMLeMiTNzCEhiBX6droRdXAz88
t7SjP0sCHEkcDonHzNCAJCJ9qIj8RyJyTUHkeO/iuw92L9Z0Z2cecuXbbGiY
FJxKjHmsTCVh57FjbOaxM4xUwrscy1Zth+A1frHeZgYl9InwXqXLKcpMVjvJ
sZ4KFw2U103JJE9/iKiHvEDvjnMS8jzHwQNJg7fNPY3pCk7Nj0haciM76Ees
ljj+JoyxQhLsSDvFEX4g7HCZtvedhZDE+vYIRbmGobzNOluU1u/cg37nOSHK
0/z1rqaTnnDvniZjybuIJQufR6+DWLIUsWQFRNFiyaeIJRsQSzYjlsR1Kc6+
RCzZ0S2K7eoRxfa+GcUOQJRv+kQjlkSj3ymBfqcEYkkJ9Dsl0O/EQJQY9Dsx
ECUGosSwn0aXRDQpCVFKst/GlWR/jKfOoRRLgCpJpIqQhSVPQU1FTStN+WN6
aRqsarTM5N+bVdqlAVM6krBwkhb03CC8SJpJhd9zBpQCGI6yggz8lgl0FDOZ
H8ewhAkie8SDjd/HxLCbo0DHiBLsBtHxNm9edDoO9SzWdM8bxVz8n2DLVpUa
teZxhDe1qh4h40ioM+ABMo6E3ifhcaSAvubBoL7G2Ms3Xemiz0m0vsYQ5Nki
zUmEIC9PuVrQ7BX/fsMPR3HocbuC6I8+69cAW0926D3vVpvuAnaSIkVAxGMz
fJV3tZjuzZR0iH8RioXzo/TGjRvvFoS0MhFyX2hCKIWYd2WdxpUK2sYavUlU
uPfQDEFJIZ8KqmBgQvcsqJgciW02Su9xnuWvjZtOe8q9e+ZTHjaXBieIJovQ
43wATJYBkw/R43wETNa0p2hSjG2S0WQrMNkOTHYCk93AZB8w4dFEYnKifzQ7
ZcKkBLtMmAwDJgDlB4Dy46gY9vOokuwXoPKrAsqt8fQ3G3/bNVQmlyIwppQi
RDgqvDgspcgV+oGkGZoa3JCZcAN4OCqzJC1uaDWVoocRP+LhyK2JKESQW7Dk
1v9r71qjpKqu9J17q6qrugXxhYZJiI5Ox0fiyhrH0Tg4+GC1YkoeGmixISCK
tiJNsBFh1BYfjCEzLoeYMIGgwcHILKMiKioiAoqAgmB4+AQRh6gEQuLKqLO0
XM7Ze59z7znnnnPuqaJ65c/0Wvd2d1V1dXX1t7/97W/vcy7nkg+mcRky5aDK
jslNlbcYn2xjfPIa8Ull1eXFrmdHFwv4Jo4kNXJSokb6nOyrRsY51Aj3XFsc
nusgWY34lDcLYp+kv3QZOtknaXHOleg+CYzB2ns5w529nH2OObVP+fYtVOYk
fNKNXkkoX6980iPK9cplbsH/OTZxQtj2kjAQFNyMAlMowCi0tUnEKxxkE0Nl
MwzbOdqi5SHJouUg4teWGxhfWY4IBRjkPPMFm6qhEXHdAnVyLdEkF8//1nmk
SS4gqwRpZGZLHhs6sy5IKpx5QxiNXATdYaKRhxiNPMo0yWKmSZYwGnmGVTjL
GI08z2hk1ThGI1cRjbx8TVNlw7WMRiYwGmFUsoVRyTZGJW8wKnlLpxKmTd7/
5x6V3aBN2PEho5OPbiYq2XsLCYU/sCDff2tPpJT9twFxIKPsZ1yw/w48oKa5
AziDOILrDOFxwDGdngqe9iMwSxlXfHgjmKZce3C+eJfxxdvXQenSVNnS0VjZ
NL6x8jLjjJVji13PjS6SoG3t7P0toUGG1qhBXL1f2VudLnmrUhUz1NSrMS1G
TtsiZ0u8MSBzskSfR5N5o0p/Ne7XOHmD65CC7rGK7RBqo468Th3QEg5ClT9y
Wic49kF4HaNsWsnFSMlOHfBQQR3N9Ay1DrjKIoRxRu7AOCMZdKWLKkXi2pSy
4IjnW+GjjOcTkSl+wpgCDVXGFLMZU8zhTDGfMcUCxhQPthJTgOCImWIMMQUK
jnFQvTRWXmKiYx1jilfGE1tsYkzx24lcdFyXsMU7jC12SGyxi4mP/wbGYMcH
EmPsEazR1TME6ggh6EMgjxBoIKKvGAkERyCz7EXBwmTDzeRefMQp4XcSJezC
koRkBDgab05qqmzlUmLD1aXKmitLyxk1QHnCFeuY5sOB2BW7tEpNcbrQFNem
+7hSjXKS1TL1rVFEL1fiB2cvN8vlOMD+ix8/qNtQdi8/oL4IcBSN/FPa3ICT
hGk7Sc4KB/mxAu2KD2ttWrOt0iixOHKSxaEtpEkIAb5CDhhgnXM/0jBOxvdd
errv99rjemOwFP5CKIjwn8vC/14t/H8DQgHCP643SlRvXN5YWQHhz2qO1Sz8
1ypioQnFwmZGAVsVCjio8g47tnMa2ClEA9CARAW7QfnDcVOPCNJ7kMeIhmQf
H+zWCEqE4DCM9A8w0tmPwtOwaH+fRft7EPFYOByEEQ/Fw+tcDIAh8eo12BSp
vHhFaTkTBP2fGlUMeuDbc6nT13SrAlfHdbKkCmRvU60mVG9TX+0iqol5GdWE
qeua5U5sVNwJo7+Z1TBRJjkyI19tmnRf4Lv3aOPRr+zwyKP/4HT0/3HXrl16
9H9TKif4wGktq+pUaZAx1eG5ACaIxPUX5YJCmRIrKgUFjZ1ejOfmrpkDCsvv
Pj+PxcTscgElAnFEA3LEQpkjRnKOGF2qLL2sVHmO8cSKuKBorKxpb6ysuzqR
CcQTTUwqNMWFxevAFex4i/HF2xC41wNfsAMCGVT9DcgbIRBHVNk1tUdwJPLH
+1P5cQOlegh+qAKAAN6FtA/PwYkAqgJI/0AGW9nv3jyBqgOQAeuIECrLxqCz
EPTC92GEalVWKwU0u1KRAlXZlX6lQkoKaKWCsYNqtBheVUuFlGW5nRGCaHpw
UviJTxdVIoXZ8S6xVC4klCBrAbxyEGxrBJ7lVd6eZRYlJF5DKBGBsvUiJ4JD
EyKAiVFQCiYioKspVzUlqjNAIgUOnAHSsxdHGoa6ePxvOvasG+IygbZ++1vQ
CV2gEaDB8bPvFxIzYWhD5T8vbqg8CGbCJaxEuLRYeYxxwBNMJywZDWUC6IQS
6QTGAS8wDljNOWDt1Y2oFdYzHngVyoUJUDIQD2xGLmiKdYPggzc7iROYhghC
YAaW/t/uhHjGg90G50PxNkj0b/IYf4PH+TYe65j8ebyjAGhH6V95gcX88svQ
Gej/+IjiYUSCKUfR2d/M1AFpV/GElKt4u+Qq6kMTfl2KRAeYKgDVIRjo7RD4
OIs87O+isG8zTmHl5U6FcBaDiC7nHDcpIrlJAYEurlboivZIjvYgdNmKi9xb
HvKgP8Id9LAaBe6jMaxcuQ/T/tJyk0w/AHYpU7fw6K6oP8owcdVgqA5G4Plv
+s9kUc8ifvk9309n/QeGNVDWvwQsRBb1I4tq1EPmv7yEVuJKXiG8iCYBRf46
iDoWfeu5Cnh1QsIAqAYEE3Q0RZUtE5tCFrPsxL4NDqY7QTZACDMNvxHCGFI3
e9JX4Ml5OEMKXzG2WFn6Q0zjqO174x83qLP3ia6uoxTXp1STyn1dvyr0vTGV
m/T9Uknfd0NlTx0DakA2WRqQfzaGNSXzKEnm4mKkmMjrG9ZS8o53F+RxfJQ9
jqF1IOKYwr2hU03ctiVjka2vmLHnTo1Dk18zzDvxEI5FO3yMwnMfDN9ZF+Qr
P8PwLfAOAEvaLHxhxgmS9sMsfBe1FVlxz0IYJhN4CIN4X4bJm0URi6RVUhiv
lkO5vTGsvHw1O70Cp/XxV3gbuzdgj2OCeg07XoKoHEeJduXlmGwrS0cXl7PI
7HqyrUhO7ODqLTdr0rW38k4w2m4GrX2xXWtD0j0jNfJs0tq2dt5qg9beaNTa
ntZbYIzQWGu7IjQvR2h8Obz6BinW23zRFUjleBs+3rn76+wghXkAFOL2zn+m
si77xKjbgLdtOyx6/6EUr2DGQbGN3xV4oX0Ue2niYyyee3exArvrPwZRup3L
PkO6vR+LbCayWxsoXkfweMWUW2TFdjGJWXYsw6IbYoulX/Z5xeWlPARb0KOy
CsKOh94KOMbSQ55jYchqXQjFytPsKR9va+iCkHxsRDEgV2O43QwTLbLvtqUS
5jcVG1xOmHxUx9YmMxliXAj/nUsIGxOmQQhfYxbC501+URPCLCZvrKH+dZpi
+2VTLISAZByuemKfy254gJIYFmPPY0p4nrIg21MVh/G2vlo8BiSGxQcfEFb2
q+OR2VeNTIhGiEqITvgaboPI7Clk8Mmtcup0l724OFIZGE7is+oxP8/ZHIzP
PoYBHR6fzYcf0y9+X67C8yFd97D4nFMudN07hMXnhYXKfYMLlfmsCH4AimAW
o/81vKHyGxanj4AsZnH6GBbELFbZ8TjE68hikKs8OaoYVZ5kXxYqT8CdlzZU
Fo1o6Hq8DSOu6+HWwnH4+1qrN5zEuL4zEcrrCOX+k2466f1pu1I9XVtLeGaW
Uu1wKdWsClSelaPAG+5lPCmBF1DkFV2RJ0pRXKmsBt4Bxp1pwzYeaMeYAw0e
BulQjMRRqBaO7t27969uvfXWQ9rb2+GGTu+6s0GqO5XmU+w7d3fYKQMtprD7
Ef2NGHK/HIRh1/Urdtx/UaFrwUWFqOvXw9hp4bBCgF/Cbf3vH1IMaFRQX+WS
ylkhxE5woVfKOlZJWa4eju7d/FsSOXH3lmTkaamdhhaoMvIql4zU+zhrDH0c
uc5zTHh4+zfVRs9XmdFjXfFvCp0g6oQGrpatlE3JeBARgRbb2E2r165du/P1
118XTVv4LIKINn7OfXfPnj1fXXnllRBMcEO6a2Ov+Wx60jdw9B0QUzXf1w0z
HfxK7Z2HHPOP8bvxCClJi7PhkTNO0+eZLDkj1aiYPuc7me6Gvh2oVkCl3A1Z
rMlzTc9pYm21KtYcBdTFXg5HJvI95xfqh3yaVygD/BHTBHplJy0F9If+/M47
71w2derUrRMnTjyrubkZiibIIqYAgB+Q0S/ptmHatuaYNSJp408pXfiOKlgg
/g3D3EJIt5V7SflgEZ6Hxv6AIouspvwBkruPR2Dsx+k1yf1Yk8jS6OxMabTK
II3Wp6WRrSbJ9Al6GZw8FeZjJJiP7VaYxxCXuF3Z64nDnK65nAPFAzBfMWXK
FIBuiDc3wk+ALy/P6Dzw5ZdfCoR3+lUkBdM2UAD3MJFHwjNAZq9hs5a+SRt+
z/0LFyHUl+BfkTdJF0xBw4MLMlrNWcq/U2LxaRqL36axuK3kNumX+VrvKa1f
BqT0i6b+p9p8apP6355W/2rZTQiPCOEk/rH99DFuVCQ7YZ8mw+0JwoO4E8VH
UaJkFCVzF7RQvY6OGdzKrkMc3Hyw9LgePXrsnDBhwpiFCxdyA7sEfA28veHd
d98FNO/csWPHhnXr1j/8i18+YJAphOMmg8pXqNsA5NqML4FqFPfE2zmh5sWK
wafwL2mqpq6FPZdOGR1cZCFwee56okTgUzII3L+2TRm9Bp1yDnZXLTql06VT
XpszhCv0oUaF7lHfivUban1rM3tjr3eOxeuVR67mJyNXHlCnmQpdqSg74HCU
00WsI0QxQznqbrqrdMquXbvg9kf379+/Y/fu3fCje957771ff/LZZx379n3M
FMqQICwzVDP92+fbg8VS88CqyGswd7Oq2J6J/gagI9jzeFYLWB7oULeDAsPv
KAZ6ZhWnNoYPIQCCwQn8fZuQVk8VCtS7LAWqyVela4S4NcyzaQ1j9FVrkeq7
HUWqVwhI/Q6+TYMeAxFSfCTAj9C3zhzKAWCieWXnFoXmUcMA2DdNmjTp7pkz
Z9K9TSIGRD3qXFp9Fv0WZXCRMBZxnkWMQXx8hzaSMvIs0ew52TQr9dKOT/XS
TBairRwUOEvTrNm7r1ZI+NqIRq0cAsiYUPD3QkqOlXIxzKTdDyUHMa86iOQi
BpqNGHKEjV9o3NAjXpCvICx/1vr16wFKA1euXAlUC8UeX3GbnzNjxoxhixcv
VuBGlkjmalx+FWJlYIZQV2Ll2RBnecbYLSDvLafPVxC7XaDJVxe7Zdtv1MXV
L7ymj1HfZzGvq0nwZMGVp5oSfE0SNgt6hLycKcd/HvObyPHYPMrq5y5g4FRg
FyCzxagzbQGhIu6G2bNnA5+J+gzcaYG4H82dO3cHQyEcMeIa/BD3vQRx8YXb
nqanJc/LWC2VvQYGjOv4UkQ3VSO66Qaiy6qYDP2SsabBATWhtkzUTQFDo1KG
XJekKVPDA05Naa+aGtNVk3lZMPUrI7lfGYRVw85EdCCi4u0DFNgVnpo2bRpY
AfANkBrAC8iPkJcDpMHdAnWNdtDJo7y0pZrap3mGaE7buMJYxMQ0p7lQRHNn
MsyN8xRxJpozGVES7ix1DOIuNqJqTLC+DfLbUgmWvSUMdYycLknXMuw+BjsY
XnEKuQR4Y03DK/NqIjsaXlF5DteUNygwA0abPmvWLAFM+B6UG6XNCKAFaRa/
6+GHMboymuroLsVzOo1axxTrTWxGK8jVytJy6SiX26mPItty6bpULq1JxfWq
oViQLSGqmRNWS/AV2owhN9JM1KYsRlaorQE4C40g/gF6DUAG9MYHWjMXJ9GF
h9VinEA2logsBbIq7HQEmYvJ9H5pNY6MBjTjileT51iPDLqFuzLViLaay9KI
E5lWkdYENPbQa3Q205a2Km56JCpRqT6IgNeEuy6PzwKIbGtfvp3gLK55CWej
3HWBzfXQJlr8SlIPQlOsj7tVQjMVB9aylBNaTVnTx/5QsZbOmvYCYXRcm+ZN
tSnPnEUNcF8ywH2ZrLxwjbrEYDMRGvz7LWADkAG46Lskc8JtvTo6OlxjoPKa
C76Bi1KMPItnV0mQ87I+quU0q8ucZX/IVcE8M6eZkmdHkjxjTqtP8iSBVjQJ
tDltAmqz9odYGjQR0gSjscNeGHyRtFT4Ur68vJRP2M3gtPHWClogpgV5HE9l
P5w0G1Is4aSkJT+Xij/PsBjETErHcVJq5mMTCSlNM5DS7WZS8pDyak/ZJeVt
CTCrLeGdAAOSWpEstbic76klwI9dcl6Gi6y4OCdRIkzZs1J/AvhIfJhWdXHk
DLYjRx40P5aeQTFXl+G5KSOVmZpYrQ5t7ksxNofV13jQnXxZn+teVy3pTDcf
3mDpjCNnhks6fVCDdFJEOqWzKIWZryyYWcAxI9FL7CtxkFyUBolp5vloA8wI
JAcfiLYOyCXoR3mIAeXYmullhkIvaadA1teJQ5XWPLq+TnJRi56LJuu56OXs
XES6JwSUBEdVKXs8cTInHlE01XOZfoFp6Qo3CIapYJHnduFrQAaA5RsGuBFY
hpJAtuUip0CuB6vY7ExLfzC17kLkoweN+UgVyUs1VuGA0Vmlmnyk2Eue6qUo
dLKzJvNBSiQjRVxWSllHwWFySQIT12De17hSlo3H5bG0HaybQlzaFrM4hShl
EJe2V0nSVgxQVEEpLvPRkXuIUlzyVu+zMJR0HmDusZbthBI19+zVBir+JFSL
6LeMMc1UFLR+SwwWK1ZkkaL8pzlW2ugBwDYurJAFpBqIhJVIzj+8A5zT8w+p
20GaurV1gevJKFB2zzIziqJwzYwiLJ6EUfSpg1pT0NsMK95axexZyyL3E4tn
bVgSDbwyL9nzINJAEytbbfQd2ESAZjQ9wDQHGc8M0M4Wqhv4vJC1Jw1RWxqZ
snaEloCuqI1ezkvoJVU910Qv1UrbeiUhBpkf11m2OBbpjuM7ZXyVgKVkIASO
Dlpp2iBmCY3ooO2O1MuEEDpYuSzQYdezcbnc16tcthGKPsFnIZSUj5ehafnS
0DM9NG3irzxv8VdsCWhLVgLiMuUIt0y5G9CxX/bzXAiJB1fVGugrYw2kM4ky
aM2xMs4DK9TjUhuzKxQmEThRbRVNynImGebhwbmY5Ma6MckZyCS8O58aCDHJ
2YzkM82SfFK+ryv57DYUyhaxkmAFttSa/SljDkMRJA0560P8HC6mK6RyfLTT
N87pNGlTzdh6W8F17FGaju0T69jzPfpONi7pqEKcZPUEsrhE2G9VilnX0g6/
bEM1csmSbBSIcBeul7dA0SDCk415pQfXtaVET4A5IoNkvAdITB0DAgkNk/kl
nB8kCtZYE9uIRG8c+RCJv9t2Rspt0+pio4p1mfo1Jx2nLDEkHRr7aahSySYX
j9eQgsmnZNAWHCkdeM6cA+P9IsVtW5nKOCbzxKRdW8zaVWaUM+vEKA6wnK4Y
KFJ5XJN+lbOOaxRRBYuWdUig9DJXyHfJSccpUGA7x/8NipI++ULGilIis3K1
Pa1MlO4eh8okPDdmTdYIk20VJRyTeOUJp6DBo00knBDwEZyd5BvZXqsblcgW
m7kgJj+WaRIP/Tog5cmSgTLQx0Cx55yAks6hFmO2al1CsiRKt6Rjvy3BhxiA
KF9xrxdAJtuzDnxGKRIifeQBIAAYdPLZ4wE4cY8nI/MwpOiEMshKKLp9nyzH
yyIUjw7hMFWinK6tOhUFsUooNchYDplB1WSfGQAXW1Gs+Sg5XaaA5fZnFp9J
a1lx8xPAhGL5BmUdRErJUJ1whNAupwWBELgbUCL6O3kUu3nRE4S7Yg0bokhB
tQOyGB27EIUMNgZifNJXP+A61ysrVaFz68k7idY9dbg6ayV4x1w3V6N15cxk
17remam3r4rhtOM05NJ9oZxs4AKWkosMkWEb3ExJBf7jACL4/wMScNtBohZk
pviKZyFyVASIAmwhvvCiqyEKoZxYJAY/AD/ooqf59Lub+6TFMU9oY1IJLVMc
WzuMvhQ1oyrNo1ZRcqX9kEpRVoFcoyuT8u3S1fYlXtW2Tfh8kgifnC585O1t
TclMKZQ5Vf0rQg893hxAASABMAOAEBflBcPJFBYQh+V0Dgvx+XPwgzKFIYOF
AK97jMlPH4sxqWndvzGoaXn7t7O7i7fSijpdo5sUtaUt2W0J0EszBZQCIzkF
BgSvSIYXejlfkPsHAJMzoDLAwmH1i78ggf2LosiHys0GP0XeoinyvxR/zUtU
+VhXge9S5f5OkHd2LBhVVluiskZZVNZst8ri8IqZizcvFeeGw+vB7mCtSGat
IETpFSnImlazctcHQG3kZWpUaOQ18ADIK5UaM8irBvWekRpDwBWYi9mZEbeR
2RM0+govqvmKmu4iCuNjyLHY0kY+OayewHNOZ60QAZEDaMikhZwVxoKeM5Ws
5i1MJdym4FqqEyQRryTDEADF/n5PDR8CnoJ/UidF+ydEdfw5U7qNqNK7ENns
gyVporIaTFI6vHkjIypnOiQH4fAasqFZa42RtVZBnx8lNM2V0RQ7hhxNqw6I
pEqCpODQ05+TpX6oCHhT/mux5T+ngPdnqvRMT/2YytdnSFtTTqaiJBgCsIKD
XTnQaTW0xS2RnK607EIrr2CL4yqQgBXP8nFgbXTRVCTTVBCiuorS+CK2Kups
BYwITyDoymQ9DKk5C57rzoJG3poc89YJyhKvOgssL/vBYYxXI+MpEwbuVPi+
7I7zVNggpcJ9EnH9CVJhYNNZYyWdBYXh3KQwpFlkdeSUWxDbJfaS5buFvcTa
QM5ePX3Yy6TeB+Av71G29vftvlZA6n2Aw324Jm2QyuTV4hpIrNbbEu25DPLS
HQijgheJcZ2j82IdTqTEeNgBJkZFailtf4m9ypfN/ULodmVAlYNqD55Lgrng
0DNjNnUFjSbn1Je9/oHIU8+MlBjzJmeLk9fIKvwH+wyJnbzuZOT14yoM+PuS
ORIjedk8iBpkfKpvU012/EDOjmmApXs3qvISNsTnzUBc2kAr/n85tj5LCKuo
ExYAAwAiGKuedsOJlJo1Ea+kQ9z099LgfE8n3rXgS2cs00pUP8YSkyenKZMn
8wxtHZNnmuU5OKT8jQYpPx0RRRnxIJ+MyADl8B0yFBdiKmYE7o6KiUZCEN2F
mZK2SOzpQ1omPV+Pbg+tWS1Jkt6aFfnASl6bkDSv+qmm01w9c6mZ8TRtwimR
Xb7uqYYzG3OlMyPJ+pw5MUZyYsSlhruZuFUT4x5XYuTCK28SXoFpXFYGF01L
N5qM0u4mrl6+mVCX8SNTvJXgycFb59SJt3x6PU7eAgviabsFUb2Urykb+sqt
MbPlaQadtZTZWhlYR9OjXKwVZLsQ1dLW1xXaYh9l9wJFV4N6jNGGZ/AqH9Nv
fPm4fh3l4/p3hOx0XVg+/tzrgwZ2nlo+vuUmPE5quaV80kA4bms+eeAt/Pqq
hXK/KxaWmQino/1Rdiwun9u+OCyfO34Jq47O7Xim3NKxDI4gLLdctyLow84v
lAdeD8dLdEx9uXwhHhvKF94Ex2s+BlWMjuHmtBZipVfUes37zGktJyslAIZp
llbGw8n4ZX07Mjs3b97y1sZNv9284dVN4ZpVL6wJ8ksXP/ns4wsfWgwbBz94
x50/b120ZBV7I/sy8ojKfU+9rLnPqXQBuYEo18qtM3ezO1pnflhmf3wZS112
/j37Z176779nx348RsFxz8edo376R4lx1dRumhOV34B+iT602XFr9+7d+7ut
W7ft27btjT9s3779f9hRYyCo+ZsWW6mTifJrw6o3hPQedcO/yTch0Lp1deZJ
fpWt2e9gHbsu8JLwZZ2d8bKuqPNbBnf7vmV/T69NGQKSX9t19XnLhIvi26jC
TSlwoKQkvZhb8MtqfUN4DbpvWFWXgy83VaYP5PfoYLofNm4Z8swztAMehkEI
3045oHewdhe9iV6H0tw2vGp5O8CALhMQwX5a8b5at9f0pmt/Rg9fx0MUxtjZ
kv/3JPYK8kUN4AbY6gu+/6n0Llfj9mHc0J8RiI+G9K8VW87Dfp07+f6csBnP
I9JDD6E3Srx5YjPFR9MPgZvFzsaAmvRD8vBL3mG/AP42+KX498q/jb8w2FBU
vBh4Kvg52IJPfij/T4vdbnGHPu0/jTtbPWzGNCID3166DX4V3IabEck/8+L/
f13t18Ff/R90yTaT\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"b07326b1-ab47-4cea-9633-5b19d115dd9a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q1", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the derivative of 2z with respect to x where z is constrained \
by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \*SuperscriptBox[\(z\
\), \(2\)] = 1\)?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{"2", "z"}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["x", "2"], "+", 
         SuperscriptBox["z", "2"]}], "==", "1"}], ",", "z", ",", "x"}], "]"}],
      "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748483094238105`*^9, 3.874848353169245*^9}, 
   3.874849072984931*^9, {3.874849607567947*^9, 3.874849625937704*^9}},
 CellLabel->"In[44]:=",
 CellID->27476665,ExpressionUUID->"018ebbb6-ef02-4e3c-9c78-be67adc672f1"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{349., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of 2z with respect to x where z is constrained by \
\!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \*SuperscriptBox[\(z\), \
\(2\)] = 1\)?"], 
   AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748483354416924`*^9, 3.874848354699422*^9}, 
   3.8748486032523413`*^9, 3.874849074089477*^9, 3.874849632702711*^9},
 CellLabel->"Out[44]=",
 CellID->944504415,ExpressionUUID->"89271cc8-386b-4088-a472-087e7ac155ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImplicitD", "[", 
  RowBox[{
   RowBox[{"2", "z"}], ",", 
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["z", "2"]}], "==", "1"}], ",", "z", ",", "x"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8748496435856147`*^9, 3.8748496640824943`*^9}},
 CellLabel->"In[45]:=",
 CellID->270584409,ExpressionUUID->"310cfa43-f1e7-4ee1-b15e-33165f5339fe"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"2", " ", "x"}], "z"]}]], "Output",
 CellChangeTimes->{3.874849082049799*^9, 3.8748496668871393`*^9},
 CellLabel->"Out[45]=",
 CellID->765768,ExpressionUUID->"46c2bb93-d8ce-472d-bb36-4c3e06a3f9a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q1"], "Input",
 CellChangeTimes->{{3.8748483590095572`*^9, 3.874848366709193*^9}},
 CellLabel->"In[46]:=",
 CellID->107512250,ExpressionUUID->"daa7a08c-a97d-4b45-b2dd-6e84efba0ae9"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = (-2) $CellContext`x/$CellContext`z, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> (-2) $CellContext`x/$CellContext`z, "Explanation" -> 
     None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 7, 58.0654426`9.51649257173149}, "Instant",
        "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = (-2) \
$CellContext`x/$CellContext`z}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of 2z with respect to x where z is \
constrained by \!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \
\*SuperscriptBox[\(z\), \(2\)] = 1\)?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{349., {49.433593799266966`, 53.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of 2z with respect to x where z is constrained by \
\!\(TraditionalForm\`\*SuperscriptBox[\(x\), \(2\)] + \*SuperscriptBox[\(z\), \
\(2\)] = 1\)?"], 
   AssessmentFunction[{(-2) $CellContext`x/$CellContext`z -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748483600911417`*^9, 3.8748483670692296`*^9}, 
   3.874849089698501*^9, 3.8748496712808075`*^9},
 CellLabel->"Out[46]=",
 CellID->109853918,ExpressionUUID->"9092df2b-2827-4b27-b206-ec98788b6845"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q2", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the second derivative of \!\(TraditionalForm\`log(x\\\ z)\), \
assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\\ \
\(sin(z)\) \[LongEqual] 0\)?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"x", " ", "z"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["z", "2"], "-", 
         RowBox[{"x", " ", 
          RowBox[{"Sin", "[", "z", "]"}]}]}], "==", "1"}], ",", "z", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "2"}], "}"}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748487035793943`*^9, 3.874848733906603*^9}, {
  3.8748487851863947`*^9, 3.8748488365897503`*^9}, {3.874849109670535*^9, 
  3.8748491114075727`*^9}, {3.874849680748108*^9, 3.8748497167935143`*^9}},
 CellLabel->"In[50]:=",
 CellID->384523848,ExpressionUUID->"5c233680-63e2-4e73-94db-30dfa59284da"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the second derivative of \!\(TraditionalForm\`log(x\\ z)\), \
assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the second derivative of \!\(TraditionalForm\`log(x\\ \
z)\), assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the second derivative of \!\(TraditionalForm\`log(x\\ \
z)\), assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
               12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
               6 $CellContext`x^2 $CellContext`z^3 
                Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
               Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
               Cos[$CellContext`z] Sin[$CellContext`z] + 
               2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                Sin[$CellContext`z] + 
               4 $CellContext`x^2 $CellContext`z 
                Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
               Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
               12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
               6 $CellContext`x^2 $CellContext`z^3 
                Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
               Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
               Cos[$CellContext`z] Sin[$CellContext`z] + 
               2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                Sin[$CellContext`z] + 
               4 $CellContext`x^2 $CellContext`z 
                Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
               Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
                12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
                6 $CellContext`x^2 $CellContext`z^3 
                 Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                Cos[$CellContext`z] Sin[$CellContext`z] + 
                2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                 Sin[$CellContext`z] + 
                4 $CellContext`x^2 $CellContext`z 
                 Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
                Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                 Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) \
((-2) $CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (
                  8 $CellContext`z^5 - 12 $CellContext`x $CellContext`z^4 
                  Cos[$CellContext`z] + 
                  6 $CellContext`x^2 $CellContext`z^3 
                   Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                  Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                  Cos[$CellContext`z] Sin[$CellContext`z] + 
                  2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                   Sin[$CellContext`z] + 
                  4 $CellContext`x^2 $CellContext`z 
                   Sin[$CellContext`z]^2 - $CellContext`x^3 
                  Cos[$CellContext`z] 
                  Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                   Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) \
((-2) $CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (
                  8 $CellContext`z^5 - 12 $CellContext`x $CellContext`z^4 
                  Cos[$CellContext`z] + 
                  6 $CellContext`x^2 $CellContext`z^3 
                   Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                  Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                  Cos[$CellContext`z] Sin[$CellContext`z] + 
                  2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                   Sin[$CellContext`z] + 
                  4 $CellContext`x^2 $CellContext`z 
                   Sin[$CellContext`z]^2 - $CellContext`x^3 
                  Cos[$CellContext`z] 
                  Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                   Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{308., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the second derivative of \!\(TraditionalForm\`log(x\\ z)\), \
assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"], 
   AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
       12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
       6 $CellContext`x^2 $CellContext`z^3 
        Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
       Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
       Cos[$CellContext`z] Sin[$CellContext`z] + 
       2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
        Sin[$CellContext`z] + 
       4 $CellContext`x^2 $CellContext`z 
        Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
       Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
        Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874848812958515*^9, 3.8748488369339747`*^9}, 
   3.874848981636528*^9, {3.874849111799576*^9, 3.8748491271751823`*^9}, 
   3.8748496866445675`*^9, 3.874849717572124*^9},
 CellLabel->"Out[50]=",
 CellID->192784200,ExpressionUUID->"13944631-c7c0-4aa2-a45a-6cc7189a5b50"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"Log", "[", 
     RowBox[{"x", " ", "z"}], "]"}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox["z", "2"], "-", 
      RowBox[{"x", " ", 
       RowBox[{"Sin", "[", "z", "]"}]}]}], "==", "1"}], ",", "z", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "2"}], "}"}]}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874848424615323*^9, 3.8748484366626644`*^9}, {
   3.8748486117073727`*^9, 3.874848613361526*^9}, {3.8748487366476994`*^9, 
   3.874848775750579*^9}, 3.874848844464062*^9, 3.874849115526744*^9, {
   3.8748496908050003`*^9, 3.874849695185913*^9}},
 CellLabel->"In[51]:=",
 CellID->15521903,ExpressionUUID->"c59b58b2-3ae0-41ec-9c77-77fd093e15d6"],

Cell[BoxData[
 FormBox[
  RowBox[{
   FractionBox["1", 
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["z", "2"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"x", " ", 
         RowBox[{"cos", "(", "z", ")"}]}], "-", 
        RowBox[{"2", " ", "z"}]}], ")"}], "3"]}]], 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["z", "2"], " ", 
       RowBox[{
        SuperscriptBox["cos", "3"], "(", "z", ")"}]}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "3"], " ", "z", " ", 
      RowBox[{
       SuperscriptBox["sin", "3"], "(", "z", ")"}]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "3"], " ", "z", " ", 
      RowBox[{"sin", "(", "z", ")"}], " ", 
      RowBox[{
       SuperscriptBox["cos", "2"], "(", "z", ")"}]}], "-", 
     RowBox[{
      SuperscriptBox["x", "3"], " ", 
      RowBox[{
       SuperscriptBox["sin", "2"], "(", "z", ")"}], " ", 
      RowBox[{"cos", "(", "z", ")"}]}], "+", 
     RowBox[{"6", " ", 
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["z", "3"], " ", 
      RowBox[{
       SuperscriptBox["cos", "2"], "(", "z", ")"}]}], "-", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["z", "2"], " ", 
      RowBox[{"sin", "(", "z", ")"}], " ", 
      RowBox[{"cos", "(", "z", ")"}]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "2"], " ", "z", " ", 
      RowBox[{
       SuperscriptBox["sin", "2"], "(", "z", ")"}]}], "-", 
     RowBox[{"12", " ", "x", " ", 
      SuperscriptBox["z", "4"], " ", 
      RowBox[{"cos", "(", "z", ")"}]}], "+", 
     RowBox[{"8", " ", 
      SuperscriptBox["z", "5"]}]}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.8748487398701773`*^9, 3.8748487762865953`*^9}, 
   3.874848844912294*^9, {3.874849115934745*^9, 3.874849128239153*^9}, {
   3.874849695826987*^9, 3.874849719036647*^9}},
 CellLabel->"Out[51]//TraditionalForm=",
 CellID->268538735,ExpressionUUID->"0c7e0141-f88a-40f8-9ae4-924cc2486771"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q2"], "Input",
 CellChangeTimes->{{3.8748489849085054`*^9, 3.8748489885452785`*^9}},
 CellLabel->"In[52]:=",
 CellID->67480101,ExpressionUUID->"2aeef08d-86e6-4a67-85d6-0a7e4a9c0452"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = $CellContext`x^(-2) \
$CellContext`z^(-2) ((-2) $CellContext`z + $CellContext`x 
      Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
    12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
    6 $CellContext`x^2 $CellContext`z^3 
     Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
    Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
    Cos[$CellContext`z] Sin[$CellContext`z] + 
    2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
     Sin[$CellContext`z] + 
    4 $CellContext`x^2 $CellContext`z 
     Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
    Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
     Sin[$CellContext`z]^3), QuestionFramework`Private`interpreter$$ = 
   Identity, QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> $CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
       12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
       6 $CellContext`x^2 $CellContext`z^3 
        Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
       Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
       Cos[$CellContext`z] Sin[$CellContext`z] + 
       2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
        Sin[$CellContext`z] + 
       4 $CellContext`x^2 $CellContext`z 
        Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
       Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
        Sin[$CellContext`z]^3), "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 8, 43.0891235`9.386942531827048}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = $CellContext`x^(-2) \
$CellContext`z^(-2) ((-2) $CellContext`z + $CellContext`x 
      Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
    12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
    6 $CellContext`x^2 $CellContext`z^3 
     Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
    Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
    Cos[$CellContext`z] Sin[$CellContext`z] + 
    2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
     Sin[$CellContext`z] + 
    4 $CellContext`x^2 $CellContext`z 
     Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
    Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
     Sin[$CellContext`z]^3)}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the second derivative of \!\(TraditionalForm\`log(x\\ z)\), \
assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the second derivative of \!\(TraditionalForm\`log(x\\ \
z)\), assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the second derivative of \!\(TraditionalForm\`log(x\\ \
z)\), assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
               12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
               6 $CellContext`x^2 $CellContext`z^3 
                Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
               Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
               Cos[$CellContext`z] Sin[$CellContext`z] + 
               2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                Sin[$CellContext`z] + 
               4 $CellContext`x^2 $CellContext`z 
                Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
               Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
               12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
               6 $CellContext`x^2 $CellContext`z^3 
                Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
               Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
               Cos[$CellContext`z] Sin[$CellContext`z] + 
               2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                Sin[$CellContext`z] + 
               4 $CellContext`x^2 $CellContext`z 
                Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
               Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
                12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
                6 $CellContext`x^2 $CellContext`z^3 
                 Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                Cos[$CellContext`z] Sin[$CellContext`z] + 
                2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                 Sin[$CellContext`z] + 
                4 $CellContext`x^2 $CellContext`z 
                 Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
                Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                 Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) \
((-2) $CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (
                  8 $CellContext`z^5 - 12 $CellContext`x $CellContext`z^4 
                  Cos[$CellContext`z] + 
                  6 $CellContext`x^2 $CellContext`z^3 
                   Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                  Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                  Cos[$CellContext`z] Sin[$CellContext`z] + 
                  2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                   Sin[$CellContext`z] + 
                  4 $CellContext`x^2 $CellContext`z 
                   Sin[$CellContext`z]^2 - $CellContext`x^3 
                  Cos[$CellContext`z] 
                  Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                   Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) \
((-2) $CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (
                  8 $CellContext`z^5 - 12 $CellContext`x $CellContext`z^4 
                  Cos[$CellContext`z] + 
                  6 $CellContext`x^2 $CellContext`z^3 
                   Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
                  Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
                  Cos[$CellContext`z] Sin[$CellContext`z] + 
                  2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
                   Sin[$CellContext`z] + 
                  4 $CellContext`x^2 $CellContext`z 
                   Sin[$CellContext`z]^2 - $CellContext`x^3 
                  Cos[$CellContext`z] 
                  Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
                   Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{308., {99.93359379926696, 104.06640620073304`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the second derivative of \!\(TraditionalForm\`log(x\\ z)\), \
assuming that \!\(TraditionalForm\`\*SuperscriptBox[\(z\), \(2\)] - x\\ \
\(sin(z)\) \[LongEqual] 0\)?"], 
   AssessmentFunction[{$CellContext`x^(-2) $CellContext`z^(-2) ((-2) \
$CellContext`z + $CellContext`x Cos[$CellContext`z])^(-3) (8 $CellContext`z^5 - 
       12 $CellContext`x $CellContext`z^4 Cos[$CellContext`z] + 
       6 $CellContext`x^2 $CellContext`z^3 
        Cos[$CellContext`z]^2 - $CellContext`x^3 $CellContext`z^2 
       Cos[$CellContext`z]^3 - 4 $CellContext`x^2 $CellContext`z^2 
       Cos[$CellContext`z] Sin[$CellContext`z] + 
       2 $CellContext`x^3 $CellContext`z Cos[$CellContext`z]^2 
        Sin[$CellContext`z] + 
       4 $CellContext`x^2 $CellContext`z 
        Sin[$CellContext`z]^2 - $CellContext`x^3 Cos[$CellContext`z] 
       Sin[$CellContext`z]^2 + $CellContext`x^3 $CellContext`z 
        Sin[$CellContext`z]^3) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748489865648127`*^9, 3.8748489888572884`*^9}, 
   3.8748491291277065`*^9, {3.8748497061962366`*^9, 3.8748497206066537`*^9}},
 CellLabel->"Out[52]=",
 CellID->182350874,ExpressionUUID->"e7958f0a-a65a-44f3-87ce-3bd1aaf65452"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q3", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"w", "+", "x", "+", "z"}]], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           SuperscriptBox["w", "2"], "+", 
           SuperscriptBox["x", "3"], "+", 
           SuperscriptBox["z", "5"]}], "==", "5"}], ",", 
         RowBox[{
          RowBox[{"Log", "[", 
           RowBox[{"w", " ", "x"}], "]"}], "==", "z"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "z"}], "}"}], ",", "w"}], "]"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748491895884457`*^9, 3.874849205054508*^9}, {
  3.874849259479203*^9, 3.8748493344162397`*^9}, {3.874849726140946*^9, 
  3.8748497664836864`*^9}},
 CellLabel->"In[53]:=",
 CellID->223523663,ExpressionUUID->"630a6e54-8a98-419b-81a5-674b4126a439"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{-
              E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
               2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
               3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
               5 $CellContext`w $CellContext`z^4 + 
               5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{-
              E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
               2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
               3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
               5 $CellContext`w $CellContext`z^4 + 
               5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{-
               E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                5 $CellContext`w $CellContext`z^4 + 
                5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{-
                 E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                  2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                  3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                  5 $CellContext`w $CellContext`z^4 + 
                  5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{-
                 E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                  2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                  3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                  5 $CellContext`w $CellContext`z^4 + 
                  5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{322., {51.933593799266966`, 56.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"], 
   AssessmentFunction[{-
      E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
       2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
       3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
       5 $CellContext`w $CellContext`z^4 + 
       5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874849334776243*^9, 3.874849767661992*^9},
 CellLabel->"Out[53]=",
 CellID->909482580,ExpressionUUID->"fc7bb820-d2b9-46f9-ad0c-de668991b3f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{"w", "+", "x", "+", "z"}]], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox["w", "2"], "+", 
        SuperscriptBox["x", "3"], "+", 
        SuperscriptBox["z", "5"]}], "==", "5"}], ",", 
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"w", " ", "x"}], "]"}], "==", "z"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "z"}], "}"}], ",", "w"}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874849222581764*^9, 3.8748492244197617`*^9}, {
   3.8748493440275865`*^9, 3.874849349977123*^9}, 3.8748497734955587`*^9},
 CellLabel->"In[54]:=",
 CellID->198204712,ExpressionUUID->"b3c0fbca-f0ab-4ee1-a075-2586d98a0860"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"w", "+", "x", "+", "z"}]], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"2", " ", 
        SuperscriptBox["w", "2"], " ", "x"}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["w", "2"]}], "-", 
       RowBox[{"3", " ", "w", " ", 
        SuperscriptBox["x", "3"]}], "-", 
       RowBox[{"5", " ", "w", " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"5", " ", "x", " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}], 
    RowBox[{"w", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}]]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.874849350289596*^9, 3.8748497741606035`*^9},
 CellLabel->"Out[54]//TraditionalForm=",
 CellID->29091776,ExpressionUUID->"00cee667-a077-4bed-a46a-ca6772ad83f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q3"], "Input",
 CellChangeTimes->{{3.8748493522671223`*^9, 3.8748493531071224`*^9}},
 CellLabel->"In[55]:=",
 CellID->290477810,ExpressionUUID->"63467ddb-37b2-4203-b6e4-e339fd6a9595"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = -
   E^($CellContext`w + $CellContext`x + $CellContext`z) $CellContext`w^(-1) (
     3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (2 $CellContext`w^2 + 
    2 $CellContext`w^2 $CellContext`x - 3 $CellContext`x^3 - 
    3 $CellContext`w $CellContext`x^3 - 5 $CellContext`w $CellContext`z^4 + 
    5 $CellContext`x $CellContext`z^4), 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> -
      E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
       2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
       3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
       5 $CellContext`w $CellContext`z^4 + 5 $CellContext`x $CellContext`z^4),
      "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 9, 41.8110231`9.373865672034205}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = -
   E^($CellContext`w + $CellContext`x + $CellContext`z) $CellContext`w^(-1) (
     3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (2 $CellContext`w^2 + 
    2 $CellContext`w^2 $CellContext`x - 3 $CellContext`x^3 - 
    3 $CellContext`w $CellContext`x^3 - 5 $CellContext`w $CellContext`z^4 + 
    5 $CellContext`x $CellContext`z^4)}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{-
              E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
               2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
               3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
               5 $CellContext`w $CellContext`z^4 + 
               5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{-
              E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
               2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
               3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
               5 $CellContext`w $CellContext`z^4 + 
               5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{-
               E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                5 $CellContext`w $CellContext`z^4 + 
                5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{-
                 E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                  2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                  3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                  5 $CellContext`w $CellContext`z^4 + 
                  5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{-
                 E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
                  2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
                  3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
                  5 $CellContext`w $CellContext`z^4 + 
                  5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{322., {75.43359379926696, 79.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "z is constrained by \!\(\*SuperscriptBox[\(w\), \
\(2\)]\)+\!\(\*SuperscriptBox[\(x\), \(3\)]\)+\!\(\*SuperscriptBox[\(z\), \(4\
\)]\)=5 and z is constrained by log(w x)=z. What is the implicit derivative \
of \!\(\*SuperscriptBox[\(\[ExponentialE]\), \((w + x + z)\)]\) with respect \
to w?"], 
   AssessmentFunction[{-
      E^($CellContext`w + $CellContext`x + $CellContext`z) \
$CellContext`w^(-1) (3 $CellContext`x^3 + 5 $CellContext`z^4)^(-1) (
       2 $CellContext`w^2 + 2 $CellContext`w^2 $CellContext`x - 
       3 $CellContext`x^3 - 3 $CellContext`w $CellContext`x^3 - 
       5 $CellContext`w $CellContext`z^4 + 
       5 $CellContext`x $CellContext`z^4) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874849353428746*^9, 3.8748497782358074`*^9},
 CellLabel->"Out[55]=",
 CellID->293681875,ExpressionUUID->"f65403e0-d4d0-49ee-a186-d6f88e9c1b64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q4", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?\>\"", 
    ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{"Sin", "[", "z", "]"}], ",", 
       RowBox[{
        SuperscriptBox["z", "t"], "==", "x"}], ",", "z", ",", "x", ",", "t"}],
       "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874849375582616*^9, 3.8748494596566825`*^9}, {
  3.874849786258898*^9, 3.874849800590905*^9}},
 CellLabel->"In[56]:=",
 CellID->357717194,ExpressionUUID->"64e38fea-54a4-4e73-830c-0bbcda5830f8"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"|>, 
            "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                1 - $CellContext`t) (-Cos[$CellContext`z] - 
               Cos[$CellContext`z] 
               Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                Sin[$CellContext`z]) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                1 - $CellContext`t) (-Cos[$CellContext`z] - 
               Cos[$CellContext`z] 
               Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                Sin[$CellContext`z]) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                 1 - $CellContext`t) (-Cos[$CellContext`z] - 
                Cos[$CellContext`z] 
                Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                 Sin[$CellContext`z]) -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                   1 - $CellContext`t) (-Cos[$CellContext`z] - 
                  Cos[$CellContext`z] 
                  Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                   Sin[$CellContext`z]) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                   1 - $CellContext`t) (-Cos[$CellContext`z] - 
                  Cos[$CellContext`z] 
                  Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                   Sin[$CellContext`z]) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{403., {43.933593799266966`, 48.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"], 
   AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
        1 - $CellContext`t) (-Cos[$CellContext`z] - Cos[$CellContext`z] 
       Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
        Sin[$CellContext`z]) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748494648246136`*^9, 3.874849801761299*^9},
 CellLabel->"Out[56]=",
 CellID->46140855,ExpressionUUID->"43ef038b-60f2-46f5-80ad-f15cc583a31b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "z", "]"}], ",", 
    RowBox[{
     SuperscriptBox["z", "t"], "==", "x"}], ",", "z", ",", "x", ",", "t"}], 
   "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748494660726213`*^9, 3.874849472795849*^9}, 
   3.8748498132874327`*^9},
 CellLabel->"In[57]:=",
 CellID->561695890,ExpressionUUID->"62a7d6f8-71e5-4dd1-a3bd-b55a016d7f99"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    SuperscriptBox["z", 
     RowBox[{"1", "-", "t"}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", 
       RowBox[{"cos", "(", "z", ")"}]}], "+", 
      RowBox[{"z", " ", 
       RowBox[{"log", "(", "z", ")"}], " ", 
       RowBox[{"sin", "(", "z", ")"}]}], "-", 
      RowBox[{
       RowBox[{"log", "(", "z", ")"}], " ", 
       RowBox[{"cos", "(", "z", ")"}]}]}], ")"}]}], 
   SuperscriptBox["t", "2"]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874849466952894*^9, 3.8748494731398287`*^9}, 
   3.8748498139525423`*^9},
 CellLabel->"Out[57]//TraditionalForm=",
 CellID->438760691,ExpressionUUID->"e96a2d13-8945-4a36-9810-3c201960aced"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q4"], "Input",
 CellChangeTimes->{{3.8748494743245926`*^9, 3.8748494757743607`*^9}},
 CellLabel->"In[58]:=",
 CellID->418455343,ExpressionUUID->"100ac583-bb79-4baa-b3f7-8b800c22807d"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = $CellContext`t^(-2) $CellContext`z^(
     1 - $CellContext`t) (-Cos[$CellContext`z] - Cos[$CellContext`z] 
    Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
     Sin[$CellContext`z]), QuestionFramework`Private`interpreter$$ = Identity,
    QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> $CellContext`t^(-2) $CellContext`z^(
        1 - $CellContext`t) (-Cos[$CellContext`z] - Cos[$CellContext`z] 
       Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
        Sin[$CellContext`z]), "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 10, 19.8891272`9.05119066261614}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = $CellContext`t^(-2) \
$CellContext`z^(1 - $CellContext`t) (-Cos[$CellContext`z] - 
    Cos[$CellContext`z] 
    Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
     Sin[$CellContext`z])}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"|>, 
            "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                1 - $CellContext`t) (-Cos[$CellContext`z] - 
               Cos[$CellContext`z] 
               Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                Sin[$CellContext`z]) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                1 - $CellContext`t) (-Cos[$CellContext`z] - 
               Cos[$CellContext`z] 
               Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                Sin[$CellContext`z]) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                 1 - $CellContext`t) (-Cos[$CellContext`z] - 
                Cos[$CellContext`z] 
                Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                 Sin[$CellContext`z]) -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                   1 - $CellContext`t) (-Cos[$CellContext`z] - 
                  Cos[$CellContext`z] 
                  Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                   Sin[$CellContext`z]) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
                   1 - $CellContext`t) (-Cos[$CellContext`z] - 
                  Cos[$CellContext`z] 
                  Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
                   Sin[$CellContext`z]) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{403., {57.433593799266966`, 61.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "z is bound by the implicit equation \!\(\*SuperscriptBox[\(z\), \
\(t\)]\)==x. What is the derivative of sin(z) with respect to x and t?"], 
   AssessmentFunction[{$CellContext`t^(-2) $CellContext`z^(
        1 - $CellContext`t) (-Cos[$CellContext`z] - Cos[$CellContext`z] 
       Log[$CellContext`z] + $CellContext`z Log[$CellContext`z] 
        Sin[$CellContext`z]) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748494760961046`*^9, 3.8748498177931595`*^9},
 CellLabel->"Out[58]=",
 CellID->8745002,ExpressionUUID->"0409b20e-46a5-43ec-acb9-7fde1d5e29f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q5", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the derivative of \!\(\*SuperscriptBox[\(z\), \(3\)]\)-3xz=2 \
of z with respect to x?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         SuperscriptBox["z", "3"], "-", 
         RowBox[{"3", "x", " ", "z"}]}], "==", "2"}], ",", "z", ",", "x"}], 
      "]"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748495169928665`*^9, 3.8748495638508925`*^9}, {
  3.8748498226040063`*^9, 3.8748498302534676`*^9}},
 CellLabel->"In[59]:=",
 CellID->158953157,ExpressionUUID->"1f3b2e7a-96f2-4b23-8927-0b23cd33300c"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of \!\(\*SuperscriptBox[\(z\), \(3\)]\)-3xz=2 \
of z with respect to x?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of \!\(\*SuperscriptBox[\(z\), \
\(3\)]\)-3xz=2 of z with respect to x?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of \!\(\*SuperscriptBox[\(z\), \
\(3\)]\)-3xz=2 of z with respect to x?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{247., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of \!\(\*SuperscriptBox[\(z\), \(3\)]\)-3xz=2 of \
z with respect to x?"], 
   AssessmentFunction[{$CellContext`z/(-$CellContext`x + $CellContext`z^2) -> \
<|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748495674860287`*^9, 3.8748498313644*^9},
 CellLabel->"Out[59]=",
 CellID->340151133,ExpressionUUID->"c53c0854-48a1-411d-a3e0-98ea3da98565"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox["z", "3"], "-", 
      RowBox[{"3", "x", " ", "z"}]}], "==", "2"}], ",", "z", ",", "x"}], 
   "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748495696566906`*^9, 3.8748495877751174`*^9}, 
   3.8748498357942095`*^9},
 CellLabel->"In[60]:=",
 CellID->214458709,ExpressionUUID->"1d906d86-de83-4426-bcf7-9e508c04c59a"],

Cell[BoxData[
 FormBox[
  FractionBox["z", 
   RowBox[{
    SuperscriptBox["z", "2"], "-", "x"}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.8748495881506214`*^9, 3.874849836384762*^9},
 CellLabel->"Out[60]//TraditionalForm=",
 CellID->436210643,ExpressionUUID->"88286edc-1feb-4d55-b825-0f2aea6a840e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q5"], "Input",
 CellChangeTimes->{{3.874849575245943*^9, 3.8748495761600885`*^9}},
 CellLabel->"In[61]:=",
 CellID->720785520,ExpressionUUID->"19241c26-8c67-429e-a6a3-ece9f3d77c90"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = $CellContext`z/(-$CellContext`x + \
$CellContext`z^2), QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> $CellContext`z/(-$CellContext`x + $CellContext`z^2), 
     "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 10, 43.3196198`9.389259508206965}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = \
$CellContext`z/(-$CellContext`x + $CellContext`z^2)}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of \!\(\*SuperscriptBox[\(z\), \(3\)]\)-3xz=2 \
of z with respect to x?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of \!\(\*SuperscriptBox[\(z\), \
\(3\)]\)-3xz=2 of z with respect to x?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of \!\(\*SuperscriptBox[\(z\), \
\(3\)]\)-3xz=2 of z with respect to x?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{$CellContext`z/(-$CellContext`x + \
$CellContext`z^2) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{247., {48.933593688416295`, 53.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of \!\(\*SuperscriptBox[\(z\), \(3\)]\)-3xz=2 of \
z with respect to x?"], 
   AssessmentFunction[{$CellContext`z/(-$CellContext`x + $CellContext`z^2) -> \
<|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874849576520201*^9, 3.874849839670432*^9},
 CellLabel->"Out[61]=",
 CellID->15795471,ExpressionUUID->"e2fcf4b6-43f9-414d-b6ef-d8b64ccec735"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q6", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{"Sin", "[", 
        RowBox[{"x", " ", "z"}], "]"}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["z", "4"], "+", 
         RowBox[{"2", "x"}]}], "==", "0"}], ",", "z", ",", "x"}], "]"}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874849854256096*^9, 3.87484998437514*^9}},
 CellLabel->"In[62]:=",
 CellID->986482082,ExpressionUUID->"24bf485f-d0e0-4da6-abff-3d4636d896c6"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((
                Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((
                Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{((
                 Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                 2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{((
                   Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                   2 $CellContext`z^4)) 
                 Cos[$CellContext`x $CellContext`z] -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{((
                   Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                   2 $CellContext`z^4)) 
                 Cos[$CellContext`x $CellContext`z] -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{461., {44.433593688416295`, 48.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of sin(x z) with respect to x if z is implicitly \
defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \
\(4\)]\)+2x=0?"], 
   AssessmentFunction[{((Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
        2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874849984774881*^9},
 CellLabel->"Out[62]=",
 CellID->342586736,ExpressionUUID->"0f21b4c4-0b93-459b-b356-deaca1ef8dc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"Sin", "[", 
     RowBox[{"x", " ", "z"}], "]"}], ",", 
    RowBox[{
     RowBox[{
      SuperscriptBox["z", "4"], "+", 
      RowBox[{"2", "x"}]}], "==", "0"}], ",", "z", ",", "x"}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748495984439135`*^9, 3.874849599405852*^9}, {
  3.874849993447442*^9, 3.8748500002470074`*^9}},
 CellLabel->"In[63]:=",
 CellID->105902790,ExpressionUUID->"90da1cdc-a0ad-4e8d-94b3-84536dc8f148"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["z", "4"]}]}], ")"}], " ", 
     RowBox[{"cos", "(", 
      RowBox[{"x", " ", "z"}], ")"}]}], 
    RowBox[{"2", " ", 
     SuperscriptBox["z", "3"]}]]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8748500005589976`*^9},
 CellLabel->"Out[63]//TraditionalForm=",
 CellID->496749734,ExpressionUUID->"31f3f6bc-d12e-4762-914f-d22179bda7cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q6"], "Input",
 CellChangeTimes->{{3.8748500056111207`*^9, 3.8748500061148977`*^9}},
 CellLabel->"In[64]:=",
 CellID->145514994,ExpressionUUID->"30cd7206-7047-4f08-be6a-f6dee18e3da7"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = ((
     Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
     2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z], 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> ((Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
        2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z], 
     "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 13, 28.908681`9.213603189603687}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = ((
     Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
     2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z]}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of sin(x z) with respect to x if z is \
implicitly defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \(4\
\)]\)+2x=0?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((
                Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((
                Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{((
                 Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                 2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{((
                   Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                   2 $CellContext`z^4)) 
                 Cos[$CellContext`x $CellContext`z] -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{((
                   Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
                   2 $CellContext`z^4)) 
                 Cos[$CellContext`x $CellContext`z] -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{461., {53.933593688416295`, 58.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of sin(x z) with respect to x if z is implicitly \
defined by the polynomial equation \!\(\*SuperscriptBox[\(z\), \
\(4\)]\)+2x=0?"], 
   AssessmentFunction[{((Rational[-1, 2] $CellContext`z^(-3)) ($CellContext`x - 
        2 $CellContext`z^4)) Cos[$CellContext`x $CellContext`z] -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748500064681635`*^9},
 CellLabel->"Out[64]=",
 CellID->54822361,ExpressionUUID->"99f88ede-a661-4856-8abc-bb55bec05c07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q7", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the derivative of the transcendental exponential function \
\!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\)]]\) of \
z with respect to x? z is implicitly defined by Log[x-z]+Sin[x z]==0\>\"", 
    ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"Simplify", "@", 
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        RowBox[{"Exp", "[", 
         SuperscriptBox["z", 
          RowBox[{"-", "2"}]], "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Log", "[", 
           RowBox[{"x", "-", "z"}], "]"}], "+", 
          RowBox[{"Sin", "[", 
           RowBox[{"x", " ", "/", "z"}], "]"}]}], "==", "0"}], ",", "z", ",", 
        "x"}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.87485001792992*^9, 3.8748501672317924`*^9}, 
   3.8748502501211834`*^9, {3.8748502931759343`*^9, 3.874850295497883*^9}},
 CellLabel->"In[84]:=",
 CellID->120992786,ExpressionUUID->"8bb674f9-fbb8-4fe6-800f-0af316e93426"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of the transcendental exponential function \!\
\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\)]]\) of z \
with respect to x? z is implicitly defined by Log[x-z]+Sin[x z]==0", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of the transcendental exponential \
function \!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\
\)]]\) of z with respect to x? z is implicitly defined by Log[x-z]+Sin[x \
z]==0"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of the transcendental exponential \
function \!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\
\)]]\) of z with respect to x? z is implicitly defined by Log[x-z]+Sin[x \
z]==0"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((2 
                E^($CellContext`z^(-2)))/($CellContext`z^4 + (($CellContext`x \
($CellContext`x - $CellContext`z)) $CellContext`z^2) 
                Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{((2 
                E^($CellContext`z^(-2)))/($CellContext`z^4 + (($CellContext`x \
($CellContext`x - $CellContext`z)) $CellContext`z^2) 
                Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{((2 
                 E^($CellContext`z^(-2)))/($CellContext`z^4 + \
(($CellContext`x ($CellContext`x - $CellContext`z)) $CellContext`z^2) 
                 Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{((2 
                   E^($CellContext`z^(-2)))/($CellContext`z^4 + \
(($CellContext`x ($CellContext`x - $CellContext`z)) $CellContext`z^2) 
                   Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{((2 
                   E^($CellContext`z^(-2)))/($CellContext`z^4 + \
(($CellContext`x ($CellContext`x - $CellContext`z)) $CellContext`z^2) 
                   Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{568., {46.433593688416295`, 50.566406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of the transcendental exponential function \
\!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\)]]\) of \
z with respect to x? z is implicitly defined by Log[x-z]+Sin[x z]==0"], 
   AssessmentFunction[{((2 
        E^($CellContext`z^(-2)))/($CellContext`z^4 + (($CellContext`x \
($CellContext`x - $CellContext`z)) $CellContext`z^2) 
        Cos[$CellContext`x/$CellContext`z])) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748501156778903`*^9, 3.8748501676078267`*^9, 
  3.8748502509047995`*^9, 3.8748502958418984`*^9},
 CellLabel->"Out[84]=",
 CellID->210210784,ExpressionUUID->"491e54f0-74f5-4d81-a85c-9112b557b0bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"Exp", "[", 
     SuperscriptBox["z", 
      RowBox[{"-", "2"}]], "]"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"Log", "[", 
       RowBox[{"x", "-", "z"}], "]"}], "+", 
      RowBox[{"Sin", "[", 
       RowBox[{"x", " ", "/", "z"}], "]"}]}], "==", "0"}], ",", "z", ",", 
    "x"}], "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748501722309875`*^9, 3.874850227110919*^9}, {
  3.8748502609943676`*^9, 3.874850280332947*^9}},
 CellLabel->"In[82]:=",
 CellID->617443464,ExpressionUUID->"fe07e3e5-5e53-459f-8ca7-644b45d4b7d5"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     FractionBox["1", 
      SuperscriptBox["z", "2"]]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"z", " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", "z"], ")"}]}], "-", 
      RowBox[{"x", " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", "z"], ")"}]}], "-", "z"}], ")"}]}], 
   RowBox[{
    SuperscriptBox["z", "2"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       SuperscriptBox["x", "2"], " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", "z"], ")"}]}], "-", 
      RowBox[{"x", " ", "z", " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", "z"], ")"}]}], "+", 
      SuperscriptBox["z", "2"]}], ")"}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.8748501752462454`*^9, 3.874850227518927*^9}, {
  3.8748502621721063`*^9, 3.874850281366152*^9}},
 CellLabel->"Out[82]//TraditionalForm=",
 CellID->36595102,ExpressionUUID->"8c20606a-b8e2-43ca-8742-5f9e4989c8fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"Exp", "[", 
      SuperscriptBox["z", 
       RowBox[{"-", "2"}]], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Log", "[", 
        RowBox[{"x", "-", "z"}], "]"}], "+", 
       RowBox[{"Sin", "[", 
        RowBox[{"x", " ", "/", "z"}], "]"}]}], "==", "0"}], ",", "z", ",", 
     "x"}], "]"}], "//", "TraditionalForm"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.8748501722309875`*^9, 3.874850227110919*^9}, {
  3.8748502609943676`*^9, 3.8748503011480083`*^9}},
 CellLabel->"In[85]:=",
 CellID->20483341,ExpressionUUID->"d1aa20fd-08e1-4a10-97f1-77ad53f120e2"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"2", " ", 
    SuperscriptBox["\[ExponentialE]", 
     FractionBox["1", 
      SuperscriptBox["z", "2"]]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"z", "-", "x"}], ")"}], " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", "z"], ")"}]}], "-", "z"}], ")"}]}], 
   RowBox[{
    RowBox[{"x", " ", 
     SuperscriptBox["z", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"x", "-", "z"}], ")"}], " ", 
     RowBox[{"cos", "(", 
      FractionBox["x", "z"], ")"}]}], "+", 
    SuperscriptBox["z", "4"]}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.8748503016999855`*^9},
 CellLabel->"Out[85]//TraditionalForm=",
 CellID->26973327,ExpressionUUID->"c502a590-bcf0-4e60-85a2-9c4c991c059a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q7"], "Input",
 CellChangeTimes->{{3.8748502312806377`*^9, 3.874850232713543*^9}},
 CellLabel->"In[86]:=",
 CellID->103645897,ExpressionUUID->"5bbc665f-0224-4e8b-bf59-80b1e6f64d18"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 2 
   E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x ($CellContext`x - \
$CellContext`z) $CellContext`z^2 
      Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]), 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 
     2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
         Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]), 
     "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 18, 35.7576574`9.305943952713516}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 2 
   E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x ($CellContext`x - \
$CellContext`z) $CellContext`z^2 
      Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z])}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of the transcendental exponential function \!\
\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\)]]\) of z \
with respect to x? z is implicitly defined by Log[x-z]+Sin[x z]==0", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of the transcendental exponential \
function \!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\
\)]]\) of z with respect to x? z is implicitly defined by Log[x-z]+Sin[x \
z]==0"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of the transcendental exponential \
function \!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\
\)]]\) of z with respect to x? z is implicitly defined by Log[x-z]+Sin[x \
z]==0"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
                 Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
                 Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{
             2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
                  Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
                    Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
                    Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{326., {72.93359379926696, 77.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of the transcendental exponential function \
\!\(\*SuperscriptBox[\(\[ExponentialE]\), SuperscriptBox[\(z\), \(-2\)]]\) of \
z with respect to x? z is implicitly defined by Log[x-z]+Sin[x z]==0"], 
   AssessmentFunction[{
    2 E^($CellContext`z^(-2)) ($CellContext`z^4 + $CellContext`x \
($CellContext`x - $CellContext`z) $CellContext`z^2 
         Cos[$CellContext`x/$CellContext`z])^(-1) (-$CellContext`z + \
(-$CellContext`x + $CellContext`z) Cos[$CellContext`x/$CellContext`z]) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874850233041105*^9, 3.8748502547583246`*^9}, {
  3.8748502849461393`*^9, 3.8748503098072147`*^9}},
 CellLabel->"Out[86]=",
 CellID->81770927,ExpressionUUID->"dd8fa69a-f9f0-442f-9c6a-ceedf875a1eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q8", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z.\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"Simplify", "@", 
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        RowBox[{"Cot", "[", 
         RowBox[{"w", "-", 
          RowBox[{"4", "x"}], "-", 
          RowBox[{"8", "z"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"w", "==", 
           FractionBox["x", 
            SuperscriptBox["z", "4"]]}], ",", 
          RowBox[{
           RowBox[{"Sin", "[", 
            FractionBox["x", 
             SuperscriptBox["z", "8"]], "]"}], "==", 
           RowBox[{
            RowBox[{"7", "w"}], "+", "x", "+", "z"}]}]}], " ", "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "z"}], "}"}], ",", "w"}], "]"}]}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748504278134747`*^9, 3.8748507519255595`*^9}, {
  3.8748508052550755`*^9, 3.874850806463509*^9}},
 CellLabel->"In[94]:=",
 CellID->252773179,ExpressionUUID->"dfaf6ecb-c717-40d6-a3e0-fd78843d5831"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z.", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{($CellContext`z^8 (
                  4 $CellContext`x + $CellContext`z) + 
                4 $CellContext`x 
                 Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
(-$CellContext`z^8 (116 $CellContext`x + 57 $CellContext`z + 
                 4 $CellContext`z^5) + 
               4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                   8 $CellContext`z^4)) 
                Cos[$CellContext`x $CellContext`z^(-8)]) 
              Csc[$CellContext`w - 
                 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{($CellContext`z^8 (
                  4 $CellContext`x + $CellContext`z) + 
                4 $CellContext`x 
                 Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
(-$CellContext`z^8 (116 $CellContext`x + 57 $CellContext`z + 
                 4 $CellContext`z^5) + 
               4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                   8 $CellContext`z^4)) 
                Cos[$CellContext`x $CellContext`z^(-8)]) 
              Csc[$CellContext`w - 
                 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{($CellContext`z^8 (
                   4 $CellContext`x + $CellContext`z) + 
                 4 $CellContext`x 
                  Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
(-$CellContext`z^8 (116 $CellContext`x + 57 $CellContext`z + 
                  4 $CellContext`z^5) + 
                4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4)) 
                 Cos[$CellContext`x $CellContext`z^(-8)]) 
               Csc[$CellContext`w - 
                  4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{($CellContext`z^8 (
                    4 $CellContext`x + $CellContext`z) + 
                   4 $CellContext`x 
                    Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
(-$CellContext`z^8 (116 $CellContext`x + 57 $CellContext`z + 
                    4 $CellContext`z^5) + 
                  4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4)) 
                   Cos[$CellContext`x $CellContext`z^(-8)]) 
                 Csc[$CellContext`w - 
                    4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{($CellContext`z^8 (
                    4 $CellContext`x + $CellContext`z) + 
                   4 $CellContext`x 
                    Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
(-$CellContext`z^8 (116 $CellContext`x + 57 $CellContext`z + 
                    4 $CellContext`z^5) + 
                  4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4)) 
                   Cos[$CellContext`x $CellContext`z^(-8)]) 
                 Csc[$CellContext`w - 
                    4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{327., {56.433593799266966`, 60.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."], 
   AssessmentFunction[{($CellContext`z^8 (4 $CellContext`x + $CellContext`z) + 
        4 $CellContext`x 
         Cos[$CellContext`x $CellContext`z^(-8)])^(-1) (-$CellContext`z^8 (
         116 $CellContext`x + 57 $CellContext`z + 4 $CellContext`z^5) + 
       4 (2 $CellContext`z^5 + $CellContext`x (-1 + 8 $CellContext`z^4)) 
        Cos[$CellContext`x $CellContext`z^(-8)]) 
      Csc[$CellContext`w - 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748507377600307`*^9, 3.8748507532480955`*^9}, 
   3.874850806639536*^9},
 CellLabel->"Out[94]=",
 CellID->105895004,ExpressionUUID->"5165038f-098f-40ca-9514-a90bcec4fc98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"Cot", "[", 
     RowBox[{"w", "-", 
      RowBox[{"4", "x"}], "-", 
      RowBox[{"8", "z"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"w", "==", 
       FractionBox["x", 
        SuperscriptBox["z", "4"]]}], ",", 
      RowBox[{
       RowBox[{"Sin", "[", 
        FractionBox["x", 
         SuperscriptBox["z", "8"]], "]"}], "==", 
       RowBox[{
        RowBox[{"7", "w"}], "+", "x", "+", "z"}]}]}], " ", "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "z"}], "}"}], ",", "w"}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874850781541091*^9, 3.8748507823171144`*^9}},
 CellLabel->"In[91]:=",
 CellID->6121009,ExpressionUUID->"c02c9388-ecbd-4364-a94c-11b42a2a6be8"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"116", " ", "x", " ", 
          SuperscriptBox["z", "8"]}], "+", 
         RowBox[{"4", " ", "x", " ", 
          RowBox[{"cos", "(", 
           FractionBox["x", 
            SuperscriptBox["z", "8"]], ")"}]}], "-", 
         RowBox[{"8", " ", 
          SuperscriptBox["z", "5"], " ", 
          RowBox[{"cos", "(", 
           FractionBox["x", 
            SuperscriptBox["z", "8"]], ")"}]}], "-", 
         RowBox[{"32", " ", "x", " ", 
          SuperscriptBox["z", "4"], " ", 
          RowBox[{"cos", "(", 
           FractionBox["x", 
            SuperscriptBox["z", "8"]], ")"}]}], "+", 
         RowBox[{"4", " ", 
          SuperscriptBox["z", "13"]}], "+", 
         RowBox[{"57", " ", 
          SuperscriptBox["z", "9"]}]}], ")"}], " ", 
       RowBox[{
        SuperscriptBox["csc", "2"], "(", 
        RowBox[{"w", "-", 
         RowBox[{"4", " ", "x"}], "-", 
         RowBox[{"8", " ", "z"}]}], ")"}]}], ")"}], "/", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"4", " ", "x", " ", 
        SuperscriptBox["z", "8"]}], "+", 
       RowBox[{"4", " ", "x", " ", 
        RowBox[{"cos", "(", 
         FractionBox["x", 
          SuperscriptBox["z", "8"]], ")"}]}], "+", 
       SuperscriptBox["z", "9"]}], ")"}]}], ")"}]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.874850772342613*^9, 3.8748507826377106`*^9}},
 CellLabel->"Out[91]//TraditionalForm=",
 CellID->672058100,ExpressionUUID->"86867e77-9539-4d9f-bb76-72357e3de49b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"Cot", "[", 
      RowBox[{"w", "-", 
       RowBox[{"4", "x"}], "-", 
       RowBox[{"8", "z"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"w", "==", 
        FractionBox["x", 
         SuperscriptBox["z", "4"]]}], ",", 
       RowBox[{
        RowBox[{"Sin", "[", 
         FractionBox["x", 
          SuperscriptBox["z", "8"]], "]"}], "==", 
        RowBox[{
         RowBox[{"7", "w"}], "+", "x", "+", "z"}]}]}], " ", "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "z"}], "}"}], ",", "w"}], "]"}], "//", "Simplify"}], "//",
   "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748507736226125`*^9, 3.8748507864378767`*^9}},
 CellLabel->"In[92]:=",
 CellID->645872114,ExpressionUUID->"334e92cd-6efe-4387-993e-f82be07dfd99"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"4", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"x", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"8", " ", 
             SuperscriptBox["z", "4"]}], "-", "1"}], ")"}]}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["z", "5"]}]}], ")"}], " ", 
       RowBox[{"cos", "(", 
        FractionBox["x", 
         SuperscriptBox["z", "8"]], ")"}]}], "-", 
      RowBox[{
       SuperscriptBox["z", "8"], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"116", " ", "x"}], "+", 
         RowBox[{"4", " ", 
          SuperscriptBox["z", "5"]}], "+", 
         RowBox[{"57", " ", "z"}]}], ")"}]}]}], ")"}], " ", 
    RowBox[{
     SuperscriptBox["csc", "2"], "(", 
     RowBox[{"w", "-", 
      RowBox[{"4", " ", 
       RowBox[{"(", 
        RowBox[{"x", "+", 
         RowBox[{"2", " ", "z"}]}], ")"}]}]}], ")"}]}], 
   RowBox[{
    RowBox[{
     SuperscriptBox["z", "8"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"4", " ", "x"}], "+", "z"}], ")"}]}], "+", 
    RowBox[{"4", " ", "x", " ", 
     RowBox[{"cos", "(", 
      FractionBox["x", 
       SuperscriptBox["z", "8"]], ")"}]}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874850775305051*^9, 3.8748507868778677`*^9}},
 CellLabel->"Out[92]//TraditionalForm=",
 CellID->31384587,ExpressionUUID->"aa24b4de-f7c9-476b-a222-f7aeb8785501"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q8"], "Input",
 CellChangeTimes->{{3.874850793058276*^9, 3.874850793828401*^9}},
 CellLabel->"In[95]:=",
 CellID->11483923,ExpressionUUID->"733065ac-cdf9-4c77-ad68-77c9556453d1"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = (($CellContext`z^8 (
        4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
       Cos[$CellContext`x $CellContext`z^(-8)])^(-1) ((-$CellContext`z^8) (
       116 $CellContext`x + 57 $CellContext`z + 4 $CellContext`z^5) + (
       4 (2 $CellContext`z^5 + $CellContext`x (-1 + 8 $CellContext`z^4))) 
      Cos[$CellContext`x $CellContext`z^(-8)])) 
   Csc[$CellContext`w - 4 ($CellContext`x + 2 $CellContext`z)]^2, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> (($CellContext`z^8 (
           4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
          Cos[$CellContext`x $CellContext`z^(-8)])^(-1) ((-$CellContext`z^8) (
          116 $CellContext`x + 57 $CellContext`z + 4 $CellContext`z^5) + (
          4 (2 $CellContext`z^5 + $CellContext`x (-1 + 8 $CellContext`z^4))) 
         Cos[$CellContext`x $CellContext`z^(-8)])) 
      Csc[$CellContext`w - 4 ($CellContext`x + 2 $CellContext`z)]^2, 
     "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 15, 26, 54.9985034`9.492925713659153}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = (($CellContext`z^8 (
        4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
       Cos[$CellContext`x $CellContext`z^(-8)])^(-1) ((-$CellContext`z^8) (
       116 $CellContext`x + 57 $CellContext`z + 4 $CellContext`z^5) + (
       4 (2 $CellContext`z^5 + $CellContext`x (-1 + 8 $CellContext`z^4))) 
      Cos[$CellContext`x $CellContext`z^(-8)])) 
   Csc[$CellContext`w - 4 ($CellContext`x + 2 $CellContext`z)]^2}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z.", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(($CellContext`z^8 (
                   4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
                  Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
((-$CellContext`z^8) (116 $CellContext`x + 57 $CellContext`z + 
                  4 $CellContext`z^5) + (
                  4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4))) 
                 Cos[$CellContext`x $CellContext`z^(-8)])) 
              Csc[$CellContext`w - 
                 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{(($CellContext`z^8 (
                   4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
                  Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
((-$CellContext`z^8) (116 $CellContext`x + 57 $CellContext`z + 
                  4 $CellContext`z^5) + (
                  4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4))) 
                 Cos[$CellContext`x $CellContext`z^(-8)])) 
              Csc[$CellContext`w - 
                 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(($CellContext`z^8 (
                    4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
                   Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
((-$CellContext`z^8) (116 $CellContext`x + 57 $CellContext`z + 
                   4 $CellContext`z^5) + (
                   4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4))) 
                  Cos[$CellContext`x $CellContext`z^(-8)])) 
               Csc[$CellContext`w - 
                  4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(($CellContext`z^8 (
                    4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
                    Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
((-$CellContext`z^8) (116 $CellContext`x + 57 $CellContext`z + 
                    4 $CellContext`z^5) + (
                    4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4))) 
                    Cos[$CellContext`x $CellContext`z^(-8)])) 
                 Csc[$CellContext`w - 
                    4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(($CellContext`z^8 (
                    4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
                    Cos[$CellContext`x $CellContext`z^(-8)])^(-1) \
((-$CellContext`z^8) (116 $CellContext`x + 57 $CellContext`z + 
                    4 $CellContext`z^5) + (
                    4 (2 $CellContext`z^5 + $CellContext`x (-1 + 
                    8 $CellContext`z^4))) 
                    Cos[$CellContext`x $CellContext`z^(-8)])) 
                 Csc[$CellContext`w - 
                    4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{327., {114.93359379926696`, 119.06640620073304`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the derivative of cot(w-4x-8z) with respect to w? x is \
implicitly constrained by w=\!\(\*FractionBox[\(x\), SuperscriptBox[\(z\), \
\(4\)]]\) and z is constrained by Sin(\!\(\*FractionBox[\(x\), \
SuperscriptBox[\(z\), \(8\)]]\))=7w+3x+z."], 
   AssessmentFunction[{(($CellContext`z^8 (
           4 $CellContext`x + $CellContext`z) + (4 $CellContext`x) 
          Cos[$CellContext`x $CellContext`z^(-8)])^(-1) ((-$CellContext`z^8) (
          116 $CellContext`x + 57 $CellContext`z + 4 $CellContext`z^5) + (
          4 (2 $CellContext`z^5 + $CellContext`x (-1 + 8 $CellContext`z^4))) 
         Cos[$CellContext`x $CellContext`z^(-8)])) 
      Csc[$CellContext`w - 4 ($CellContext`x + 2 $CellContext`z)]^2 -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874850794156413*^9, 3.8748508101524563`*^9}},
 CellLabel->"Out[95]=",
 CellID->138663844,ExpressionUUID->"be99a0bb-20ba-48a5-89e6-47ca25d221b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q9", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"Simplify", "@", 
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        FractionBox["1", 
         RowBox[{"1", "+", 
          FractionBox["2", 
           RowBox[{"1", "+", 
            FractionBox["4", "z"]}]]}]], ",", 
        RowBox[{"z", "==", 
         RowBox[{
          RowBox[{"1", "/", "3"}], 
          RowBox[{"Log", "[", 
           RowBox[{"5", ",", "x"}], "]"}]}]}], ",", "z", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "3"}], "}"}]}], "]"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748508469394903`*^9, 3.874850960458248*^9}, {
   3.8748510235637217`*^9, 3.8748510347981267`*^9}, {3.8748511017982874`*^9, 
   3.8748511696059775`*^9}, {3.874851205293645*^9, 3.8748512074764223`*^9}, {
   3.8748545175066385`*^9, 3.8748545239591045`*^9}, 3.874854581236641*^9, 
   3.8748547099783025`*^9, {3.8748550734050493`*^9, 3.874855086308102*^9}, {
   3.8748551948727455`*^9, 3.874855247795905*^9}},
 CellLabel->"In[144]:=",
 CellID->265231833,ExpressionUUID->"2b299f98-46c2-4434-be03-8cb2fbb4463d"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(((
                 Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                  3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
               16 Log[5]^2 + (9 $CellContext`z^2) 
                Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(((
                 Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                  3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
               16 Log[5]^2 + (9 $CellContext`z^2) 
                Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(((
                  Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                   3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                16 Log[5]^2 + (9 $CellContext`z^2) 
                 Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(((
                    Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                    3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                  16 Log[5]^2 + (9 $CellContext`z^2) 
                   Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(((
                    Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                    3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                  16 Log[5]^2 + (9 $CellContext`z^2) 
                   Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{403., {58.933593688416295`, 63.066406311583705`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"], 
   AssessmentFunction[{(((
         Rational[-16, 3] $CellContext`x^(-3)) (4 + 3 $CellContext`z)^(-4)) 
       Log[5]^(-3)) (3 + 12 Log[5] + 
       16 Log[5]^2 + (9 $CellContext`z^2) 
        Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874851151132841*^9, 3.8748511699426937`*^9}, 
   3.8748512076441083`*^9, 3.8748545259897566`*^9, 3.8748550867087016`*^9, 
   3.8748552520615435`*^9},
 CellLabel->"Out[144]=",
 CellID->98619844,ExpressionUUID->"279c588c-9484-4425-bfe0-79d96ebf57e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Simplify", "@", 
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"1", "+", 
      FractionBox["2", 
       RowBox[{"1", "+", 
        FractionBox["4", "z"]}]]}]], ",", 
    RowBox[{"z", "==", 
     RowBox[{
      RowBox[{"1", "/", "3"}], 
      RowBox[{"Log", "[", 
       RowBox[{"5", ",", "x"}], "]"}]}]}], ",", "z", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "3"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874855136884594*^9, 3.8748551816177635`*^9}, 
   3.874855256868173*^9, {3.874855320394149*^9, 3.8748553294603596`*^9}},
 CellLabel->"In[145]:=",
 CellID->257369976,ExpressionUUID->"f16f27b1-2a9d-4363-8198-9749878cb50e"],

Cell[BoxData[
 RowBox[{"-", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"16", " ", 
      RowBox[{"(", 
       RowBox[{"3", "+", 
        RowBox[{"12", " ", 
         RowBox[{"Log", "[", "5", "]"}]}], "+", 
        RowBox[{"16", " ", 
         SuperscriptBox[
          RowBox[{"Log", "[", "5", "]"}], "2"]}], "+", 
        RowBox[{"9", " ", 
         SuperscriptBox["z", "2"], " ", 
         SuperscriptBox[
          RowBox[{"Log", "[", "5", "]"}], "2"]}], "+", 
        RowBox[{"3", " ", "z", " ", 
         RowBox[{"Log", "[", "5", "]"}], " ", 
         RowBox[{"(", 
          RowBox[{"3", "+", 
           RowBox[{"8", " ", 
            RowBox[{"Log", "[", "5", "]"}]}]}], ")"}]}]}], ")"}]}], ")"}], 
    "/", 
    RowBox[{"(", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "3"], " ", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"4", "+", 
         RowBox[{"3", " ", "z"}]}], ")"}], "4"], " ", 
      SuperscriptBox[
       RowBox[{"Log", "[", "5", "]"}], "3"]}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{
  3.8748550970277624`*^9, {3.874855137799139*^9, 3.8748551881880455`*^9}, 
   3.8748552577311616`*^9},
 CellLabel->"Out[145]=",
 CellID->108457924,ExpressionUUID->"e3b42e5d-8a3b-4e10-a321-080cea3b6cfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Simplify", "@", 
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     FractionBox["1", 
      RowBox[{"1", "+", 
       FractionBox["2", 
        RowBox[{"1", "+", 
         FractionBox["4", "z"]}]]}]], ",", 
     RowBox[{"z", "==", 
      RowBox[{
       RowBox[{"1", "/", "3"}], 
       RowBox[{"Log", "[", 
        RowBox[{"5", ",", "x"}], "]"}]}]}], ",", "z", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "3"}], "}"}]}], "]"}]}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748551216185703`*^9, 3.8748551576179667`*^9}, {
  3.874855216654227*^9, 3.8748552304499855`*^9}, {3.87485531599415*^9, 
  3.874855316184159*^9}},
 CellLabel->"In[146]:=",
 CellID->102566625,ExpressionUUID->"bffa5a15-b83b-41f2-9249-d0a93840540d"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{"16", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"9", " ", 
        SuperscriptBox["z", "2"], " ", 
        RowBox[{
         SuperscriptBox["log", "2"], "(", "5", ")"}]}], "+", 
       RowBox[{"3", " ", "z", " ", 
        RowBox[{"log", "(", "5", ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"3", "+", 
          RowBox[{"8", " ", 
           RowBox[{"log", "(", "5", ")"}]}]}], ")"}]}], "+", "3", "+", 
       RowBox[{"16", " ", 
        RowBox[{
         SuperscriptBox["log", "2"], "(", "5", ")"}]}], "+", 
       RowBox[{"12", " ", 
        RowBox[{"log", "(", "5", ")"}]}]}], ")"}]}], 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "3"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"3", " ", "z"}], "+", "4"}], ")"}], "4"], " ", 
     RowBox[{
      SuperscriptBox["log", "3"], "(", "5", ")"}]}]]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{
  3.874855093688532*^9, 3.8748551282796865`*^9, 3.8748551584355855`*^9, {
   3.874855217416065*^9, 3.8748552595326395`*^9}},
 CellLabel->"Out[146]//TraditionalForm=",
 CellID->396959763,ExpressionUUID->"def8dd92-382b-426a-a579-8a84aa1906c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q9"], "Input",
 CellChangeTimes->{{3.8748511783714886`*^9, 3.874851178755484*^9}},
 CellLabel->"In[147]:=",
 CellID->474758336,ExpressionUUID->"de0d3950-9e9b-409b-bded-a14fdb0244ad"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = (((
      Rational[-16, 3] $CellContext`x^(-3)) (4 + 3 $CellContext`z)^(-4)) 
    Log[5]^(-3)) (3 + 12 Log[5] + 
    16 Log[5]^2 + (9 $CellContext`z^2) 
     Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])), 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> (((
         Rational[-16, 3] $CellContext`x^(-3)) (4 + 3 $CellContext`z)^(-4)) 
       Log[5]^(-3)) (3 + 12 Log[5] + 
       16 Log[5]^2 + (9 $CellContext`z^2) 
        Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])), "Explanation" -> 
     None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 16, 41, 11.2180522`8.802492415700582}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = (((
      Rational[-16, 3] $CellContext`x^(-3)) (4 + 3 $CellContext`z)^(-4)) 
    Log[5]^(-3)) (3 + 12 Log[5] + 
    16 Log[5]^2 + (9 $CellContext`z^2) 
     Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5]))}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(((
                 Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                  3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
               16 Log[5]^2 + (9 $CellContext`z^2) 
                Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
              "Score" -> 1|>}], QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(((
                 Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                  3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
               16 Log[5]^2 + (9 $CellContext`z^2) 
                Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(((
                  Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                   3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                16 Log[5]^2 + (9 $CellContext`z^2) 
                 Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
               "Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(((
                    Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                    3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                  16 Log[5]^2 + (9 $CellContext`z^2) 
                   Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
                 "Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(((
                    Rational[-16, 3] $CellContext`x^(-3)) (4 + 
                    3 $CellContext`z)^(-4)) Log[5]^(-3)) (3 + 12 Log[5] + 
                  16 Log[5]^2 + (9 $CellContext`z^2) 
                   Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
                 "Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{403., {90.4335936884163, 94.5664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the third derivative of \!\(\*FractionBox[\(1\), \(1 + \
\*FractionBox[\(2\), \(1 + \*FractionBox[\(4\), \(z\)]\)]\)]\) with respect \
to x if z is implicity defined by z=1/3Log[5,x]?"], 
   AssessmentFunction[{(((
         Rational[-16, 3] $CellContext`x^(-3)) (4 + 3 $CellContext`z)^(-4)) 
       Log[5]^(-3)) (3 + 12 Log[5] + 
       16 Log[5]^2 + (9 $CellContext`z^2) 
        Log[5]^2 + ((3 $CellContext`z) Log[5]) (3 + 8 Log[5])) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748511790834885`*^9, 3.8748512102377315`*^9, 
  3.8748552693510485`*^9},
 CellLabel->"Out[147]=",
 CellID->2529627,ExpressionUUID->"798dd231-48b7-4022-91ad-d699257c673b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q10", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        SuperscriptBox["z", 
         RowBox[{"-", "3"}]], ",", 
        RowBox[{
         RowBox[{"Log", "[", 
          RowBox[{"t", "+", "z"}], "]"}], "==", 
         RowBox[{"x", " ", "z"}]}], ",", "z", ",", "x", ",", "t"}], "]"}], "//",
       "Simplify"}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874855392770108*^9, 3.8748554651203146`*^9}},
 CellLabel->"In[155]:=",
 CellID->63906574,ExpressionUUID->"843f415f-cb50-4299-a6cd-8c2004971c7a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"|>, "Interpreter"], 
           String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
               4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
               4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                  4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                  4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{358., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the mixed partial derivative \
\!\(\*SuperscriptBox[\(\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of \
the expression \!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"], 
   AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
       4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748554658097596`*^9},
 CellLabel->"Out[155]=",
 CellID->610446124,ExpressionUUID->"ba9b1884-1b4e-4dd1-8a60-998c6b5eec76"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     SuperscriptBox["z", 
      RowBox[{"-", "3"}]], ",", 
     RowBox[{
      RowBox[{"Log", "[", 
       RowBox[{"t", "+", "z"}], "]"}], "==", 
      RowBox[{"x", " ", "z"}]}], ",", "z", ",", "x", ",", "t"}], "]"}], "//", 
   "TraditionalForm"}], "//", "Simplify"}]], "Input",
 CellChangeTimes->{{3.874855299697727*^9, 3.87485530958515*^9}, {
  3.8748553449274807`*^9, 3.8748553887452936`*^9}, {3.8748554475674086`*^9, 
  3.87485544878032*^9}},
 CellLabel->"In[156]:=",
 CellID->353548350,ExpressionUUID->"9b9caf8b-df2c-47cc-bc4a-1c19fff3b813"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{"3", " ", 
     RowBox[{"(", 
      RowBox[{"t", "+", "z"}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", " ", "t", " ", "x"}], "+", 
       RowBox[{"4", " ", "x", " ", "z"}], "-", "3"}], ")"}]}], 
    RowBox[{
     SuperscriptBox["z", "4"], " ", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        RowBox[{"t", " ", "x"}], "+", 
        RowBox[{"x", " ", "z"}], "-", "1"}], ")"}], "3"]}]]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.8748554490338507`*^9, 3.874855472186189*^9}},
 CellLabel->"Out[156]//TraditionalForm=",
 CellID->203266047,ExpressionUUID->"b8a35554-18f2-4c5f-be43-7dceb1220bb5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q10"], "Input",
 CellChangeTimes->{{3.8748554769919744`*^9, 3.8748554773409686`*^9}},
 CellLabel->"In[157]:=",
 CellID->991592304,ExpressionUUID->"c5c843e7-36e7-4ab2-aa23-ba13e80fcb80"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = (-3) $CellContext`z^(-4) \
($CellContext`t + $CellContext`z) (-1 + $CellContext`t $CellContext`x + \
$CellContext`x $CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
    4 $CellContext`x $CellContext`z), 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> (-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
       4 $CellContext`x $CellContext`z), "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 16, 44, 40.9318285`9.364636025869999}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = (-3) $CellContext`z^(-4) \
($CellContext`t + $CellContext`z) (-1 + $CellContext`t $CellContext`x + \
$CellContext`x $CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
    4 $CellContext`x $CellContext`z)}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"|>, "Interpreter"], 
           String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of the expression \
\!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
               4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
               4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                  4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
                  4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{358., {51.433593799266966`, 55.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the mixed partial derivative \
\!\(\*SuperscriptBox[\(\[PartialD]\), \(2\)]\)/\[PartialD]t\[PartialD]x of \
the expression \!\(\*SuperscriptBox[\(z\), \(-3\)]\) where log(t+z)=x z?"], 
   AssessmentFunction[{(-3) $CellContext`z^(-4) ($CellContext`t + \
$CellContext`z) (-1 + $CellContext`t $CellContext`x + $CellContext`x \
$CellContext`z)^(-3) (-3 + 3 $CellContext`t $CellContext`x + 
       4 $CellContext`x $CellContext`z) -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748554777192183`*^9},
 CellLabel->"Out[157]=",
 CellID->7885916,ExpressionUUID->"0b3c19dd-e954-4188-ae5c-9072d6765524"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q11", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        SuperscriptBox["z", "3"], ",", 
        RowBox[{
         RowBox[{"Log", "[", 
          FractionBox["t", "z"], "]"}], "==", 
         RowBox[{"x", " ", "z"}]}], ",", "z", ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "3"}], "}"}]}], "]"}], "//", "Simplify"}], "]"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.8748555588865056`*^9, 3.8748556296064444`*^9}},
 CellLabel->"In[166]:=",
 CellID->417512614,ExpressionUUID->"6dbf8552-b8f3-41e0-9b55-d733643e3695"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"|>, 
            "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            3 $CellContext`t^(-3) $CellContext`z^5 (
                1 + $CellContext`x $CellContext`z)^(-9) (300 - 
               120 $CellContext`x $CellContext`z - 
               735 $CellContext`x^2 $CellContext`z^2 - 
               496 $CellContext`x^3 $CellContext`z^3 - 
               8 $CellContext`x^4 $CellContext`z^4 + 
               92 $CellContext`x^5 $CellContext`z^5 + 
               24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            3 $CellContext`t^(-3) $CellContext`z^5 (
                1 + $CellContext`x $CellContext`z)^(-9) (300 - 
               120 $CellContext`x $CellContext`z - 
               735 $CellContext`x^2 $CellContext`z^2 - 
               496 $CellContext`x^3 $CellContext`z^3 - 
               8 $CellContext`x^4 $CellContext`z^4 + 
               92 $CellContext`x^5 $CellContext`z^5 + 
               24 $CellContext`x^6 $CellContext`z^6) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{
             3 $CellContext`t^(-3) $CellContext`z^5 (
                 1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                120 $CellContext`x $CellContext`z - 
                735 $CellContext`x^2 $CellContext`z^2 - 
                496 $CellContext`x^3 $CellContext`z^3 - 
                8 $CellContext`x^4 $CellContext`z^4 + 
                92 $CellContext`x^5 $CellContext`z^5 + 
                24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               3 $CellContext`t^(-3) $CellContext`z^5 (
                   1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                  120 $CellContext`x $CellContext`z - 
                  735 $CellContext`x^2 $CellContext`z^2 - 
                  496 $CellContext`x^3 $CellContext`z^3 - 
                  8 $CellContext`x^4 $CellContext`z^4 + 
                  92 $CellContext`x^5 $CellContext`z^5 + 
                  24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               3 $CellContext`t^(-3) $CellContext`z^5 (
                   1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                  120 $CellContext`x $CellContext`z - 
                  735 $CellContext`x^2 $CellContext`z^2 - 
                  496 $CellContext`x^3 $CellContext`z^3 - 
                  8 $CellContext`x^4 $CellContext`z^4 + 
                  92 $CellContext`x^5 $CellContext`z^5 + 
                  24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{397., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the mixed partial derivative \
\!\(\*SuperscriptBox[\(\[PartialD]\), \
\(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \
\(3\)]\)\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"], 
   AssessmentFunction[{
    3 $CellContext`t^(-3) $CellContext`z^5 (
        1 + $CellContext`x $CellContext`z)^(-9) (300 - 
       120 $CellContext`x $CellContext`z - 
       735 $CellContext`x^2 $CellContext`z^2 - 
       496 $CellContext`x^3 $CellContext`z^3 - 
       8 $CellContext`x^4 $CellContext`z^4 + 
       92 $CellContext`x^5 $CellContext`z^5 + 
       24 $CellContext`x^6 $CellContext`z^6) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.87485560297676*^9, 3.874855630184832*^9}},
 CellLabel->"Out[166]=",
 CellID->33267781,ExpressionUUID->"4e8011e5-be50-42f7-a58a-0bdffcfe01ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     SuperscriptBox["z", "3"], ",", 
     RowBox[{
      RowBox[{"Log", "[", 
       FractionBox["t", "z"], "]"}], "==", 
      RowBox[{"x", " ", "z"}]}], ",", "z", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "3"}], "}"}]}], "]"}], "//", "TraditionalForm"}], "//",
   "Simplify"}]], "Input",
 CellChangeTimes->{{3.8748554864501295`*^9, 3.8748555499928493`*^9}, {
  3.874855615902526*^9, 3.874855618152233*^9}},
 CellLabel->"In[167]:=",
 CellID->49704765,ExpressionUUID->"6d68e538-4bd9-4e4c-b756-6cca14f730ac"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{"3", " ", 
    SuperscriptBox["z", "5"], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"24", " ", 
       SuperscriptBox["x", "6"], " ", 
       SuperscriptBox["z", "6"]}], "+", 
      RowBox[{"92", " ", 
       SuperscriptBox["x", "5"], " ", 
       SuperscriptBox["z", "5"]}], "-", 
      RowBox[{"8", " ", 
       SuperscriptBox["x", "4"], " ", 
       SuperscriptBox["z", "4"]}], "-", 
      RowBox[{"496", " ", 
       SuperscriptBox["x", "3"], " ", 
       SuperscriptBox["z", "3"]}], "-", 
      RowBox[{"735", " ", 
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["z", "2"]}], "-", 
      RowBox[{"120", " ", "x", " ", "z"}], "+", "300"}], ")"}]}], 
   RowBox[{
    SuperscriptBox["t", "3"], " ", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"x", " ", "z"}], "+", "1"}], ")"}], "9"]}]], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.874855618499894*^9, 3.874855634530892*^9}},
 CellLabel->"Out[167]//TraditionalForm=",
 CellID->769244460,ExpressionUUID->"9016d632-6b08-4a10-be80-a7b17e15286e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q11"], "Input",
 CellChangeTimes->{{3.8748556358774776`*^9, 3.874855636609662*^9}},
 CellLabel->"In[168]:=",
 CellID->471696306,ExpressionUUID->"e01dbe96-a44b-4d0e-ae63-1b80cd0b2cd1"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 
   3 $CellContext`t^(-3) $CellContext`z^5 (
     1 + $CellContext`x $CellContext`z)^(-9) (300 - 
    120 $CellContext`x $CellContext`z - 735 $CellContext`x^2 $CellContext`z^2 - 
    496 $CellContext`x^3 $CellContext`z^3 - 
    8 $CellContext`x^4 $CellContext`z^4 + 
    92 $CellContext`x^5 $CellContext`z^5 + 
    24 $CellContext`x^6 $CellContext`z^6), 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 
     3 $CellContext`t^(-3) $CellContext`z^5 (
        1 + $CellContext`x $CellContext`z)^(-9) (300 - 
       120 $CellContext`x $CellContext`z - 
       735 $CellContext`x^2 $CellContext`z^2 - 
       496 $CellContext`x^3 $CellContext`z^3 - 
       8 $CellContext`x^4 $CellContext`z^4 + 
       92 $CellContext`x^5 $CellContext`z^5 + 
       24 $CellContext`x^6 $CellContext`z^6), "Explanation" -> None, 
     "Timestamp" -> 
     DateObject[{2022, 10, 15, 16, 47, 22.5739252`9.106182010805565}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 
   3 $CellContext`t^(-3) $CellContext`z^5 (
     1 + $CellContext`x $CellContext`z)^(-9) (300 - 
    120 $CellContext`x $CellContext`z - 735 $CellContext`x^2 $CellContext`z^2 - 
    496 $CellContext`x^3 $CellContext`z^3 - 
    8 $CellContext`x^4 $CellContext`z^4 + 
    92 $CellContext`x^5 $CellContext`z^5 + 
    24 $CellContext`x^6 $CellContext`z^6)}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"|>, 
            "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the mixed partial derivative \!\(\*SuperscriptBox[\(\
\[PartialD]\), \(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \(3\)]\)\
\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            3 $CellContext`t^(-3) $CellContext`z^5 (
                1 + $CellContext`x $CellContext`z)^(-9) (300 - 
               120 $CellContext`x $CellContext`z - 
               735 $CellContext`x^2 $CellContext`z^2 - 
               496 $CellContext`x^3 $CellContext`z^3 - 
               8 $CellContext`x^4 $CellContext`z^4 + 
               92 $CellContext`x^5 $CellContext`z^5 + 
               24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            3 $CellContext`t^(-3) $CellContext`z^5 (
                1 + $CellContext`x $CellContext`z)^(-9) (300 - 
               120 $CellContext`x $CellContext`z - 
               735 $CellContext`x^2 $CellContext`z^2 - 
               496 $CellContext`x^3 $CellContext`z^3 - 
               8 $CellContext`x^4 $CellContext`z^4 + 
               92 $CellContext`x^5 $CellContext`z^5 + 
               24 $CellContext`x^6 $CellContext`z^6) -> <|
              "Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{
             3 $CellContext`t^(-3) $CellContext`z^5 (
                 1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                120 $CellContext`x $CellContext`z - 
                735 $CellContext`x^2 $CellContext`z^2 - 
                496 $CellContext`x^3 $CellContext`z^3 - 
                8 $CellContext`x^4 $CellContext`z^4 + 
                92 $CellContext`x^5 $CellContext`z^5 + 
                24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               3 $CellContext`t^(-3) $CellContext`z^5 (
                   1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                  120 $CellContext`x $CellContext`z - 
                  735 $CellContext`x^2 $CellContext`z^2 - 
                  496 $CellContext`x^3 $CellContext`z^3 - 
                  8 $CellContext`x^4 $CellContext`z^4 + 
                  92 $CellContext`x^5 $CellContext`z^5 + 
                  24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               3 $CellContext`t^(-3) $CellContext`z^5 (
                   1 + $CellContext`x $CellContext`z)^(-9) (300 - 
                  120 $CellContext`x $CellContext`z - 
                  735 $CellContext`x^2 $CellContext`z^2 - 
                  496 $CellContext`x^3 $CellContext`z^3 - 
                  8 $CellContext`x^4 $CellContext`z^4 + 
                  92 $CellContext`x^5 $CellContext`z^5 + 
                  24 $CellContext`x^6 $CellContext`z^6) -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{397., {75.93359379926696, 80.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the mixed partial derivative \
\!\(\*SuperscriptBox[\(\[PartialD]\), \
\(5\)]\)f/\[PartialD]\!\(\*SuperscriptBox[\(t\), \
\(3\)]\)\[PartialD]\!\(\*SuperscriptBox[\(x\), \(2\)]\) of the expression \
\!\(\*SuperscriptBox[\(z\), \(3\)]\) constrained by Log(t/z)=x z"], 
   AssessmentFunction[{
    3 $CellContext`t^(-3) $CellContext`z^5 (
        1 + $CellContext`x $CellContext`z)^(-9) (300 - 
       120 $CellContext`x $CellContext`z - 
       735 $CellContext`x^2 $CellContext`z^2 - 
       496 $CellContext`x^3 $CellContext`z^3 - 
       8 $CellContext`x^4 $CellContext`z^4 + 
       92 $CellContext`x^5 $CellContext`z^5 + 
       24 $CellContext`x^6 $CellContext`z^6) -> <|
      "Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874855637073862*^9},
 CellLabel->"Out[168]=",
 CellID->513974534,ExpressionUUID->"2c199791-a102-4b63-8e2a-633b893c3a9a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q12", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"{", 
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        RowBox[{"Gamma", "[", 
         FractionBox["1", 
          SuperscriptBox["z", "20"]], "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "t"}], "+", 
          FractionBox["1", 
           SuperscriptBox["z", "40"]]}], "==", 
         RowBox[{"Sin", "[", 
          RowBox[{"x", " ", "+", "z"}], "]"}]}], ",", "z", ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"t", ",", "x"}], "}"}], "}"}]}], "]"}], "}"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748557524134912`*^9, 3.874855840223675*^9}},
 CellLabel->"In[179]:=",
 CellID->431444270,ExpressionUUID->"eed2f601-d644-439c-93aa-9ba7acb77984"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{
              20 $CellContext`z^20 (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)],
                20 $CellContext`z^20 
               Cos[$CellContext`x + $CellContext`z] (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] 
               PolyGamma[0, $CellContext`z^(-20)]} -> 1}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{
              20 $CellContext`z^20 (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)],
                20 $CellContext`z^20 
               Cos[$CellContext`x + $CellContext`z] (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] 
               PolyGamma[0, $CellContext`z^(-20)]} -> 1}]]]}, {
         If[
          Or[
          AssessmentFunction[{{
               20 $CellContext`z^20 (
                  40 + $CellContext`z^41 
                   Cos[$CellContext`x + $CellContext`z])^(-1) 
                Gamma[$CellContext`z^(-20)] 
                PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                Cos[$CellContext`x + $CellContext`z] (
                  40 + $CellContext`z^41 
                   Cos[$CellContext`x + $CellContext`z])^(-1) 
                Gamma[$CellContext`z^(-20)] 
                PolyGamma[0, $CellContext`z^(-20)]} -> 1}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{{
                 20 $CellContext`z^20 (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                  Cos[$CellContext`x + $CellContext`z] (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)]} -> 1}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{{
                 20 $CellContext`z^20 (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                  Cos[$CellContext`x + $CellContext`z] (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)]} -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{320., {57.433593799266966`, 61.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"], 
   AssessmentFunction[{{
      20 $CellContext`z^20 (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)], 
       20 $CellContext`z^20 
       Cos[$CellContext`x + $CellContext`z] (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)]} -> 
     1}]]]], "Output",
 CellChangeTimes->{{3.8748558013493404`*^9, 3.874855850167053*^9}},
 CellLabel->"Out[179]=",
 CellID->354493600,ExpressionUUID->"83aba8c8-e8db-42fd-871e-524767507bb8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"Gamma", "[", 
      FractionBox["1", 
       SuperscriptBox["z", "20"]], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "t"}], "+", 
       FractionBox["1", 
        SuperscriptBox["z", "40"]]}], "==", 
      RowBox[{"Sin", "[", 
       RowBox[{"x", " ", "+", "z"}], "]"}]}], ",", "z", ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"t", ",", "x"}], "}"}], "}"}]}], "]"}], "//", "FullSimplify"}],
   "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748556477482677`*^9, 3.874855745017221*^9}},
 CellLabel->"In[176]:=",
 CellID->668127900,ExpressionUUID->"01dcf88d-43ed-4204-8d86-fba828687a44"],

Cell[BoxData[
 FormBox[
  RowBox[{"{", 
   RowBox[{
    FractionBox[
     RowBox[{"20", " ", 
      SuperscriptBox["z", "20"], " ", 
      TemplateBox[{
        FractionBox["1", 
         SuperscriptBox["z", "20"]]},
       "Gamma"], " ", 
      TemplateBox[{"0", 
        FractionBox["1", 
         SuperscriptBox["z", "20"]]},
       "PolyGamma2"]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["z", "41"], " ", 
       RowBox[{"cos", "(", 
        RowBox[{"x", "+", "z"}], ")"}]}], "+", "40"}]], ",", 
    FractionBox[
     RowBox[{"20", " ", 
      SuperscriptBox["z", "20"], " ", 
      TemplateBox[{
        FractionBox["1", 
         SuperscriptBox["z", "20"]]},
       "Gamma"], " ", 
      TemplateBox[{"0", 
        FractionBox["1", 
         SuperscriptBox["z", "20"]]},
       "PolyGamma2"], " ", 
      RowBox[{"cos", "(", 
       RowBox[{"x", "+", "z"}], ")"}]}], 
     RowBox[{
      RowBox[{
       SuperscriptBox["z", "41"], " ", 
       RowBox[{"cos", "(", 
        RowBox[{"x", "+", "z"}], ")"}]}], "+", "40"}]]}], "}"}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{{3.874855709601954*^9, 3.874855745402796*^9}, 
   3.8748558187022123`*^9},
 CellLabel->"Out[176]//TraditionalForm=",
 CellID->125828504,ExpressionUUID->"9aa89a25-7ff2-4cc1-9b52-a50e1f6cf5f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q12"], "Input",
 CellChangeTimes->{{3.8748558520422974`*^9, 3.8748558525548363`*^9}},
 CellLabel->"In[180]:=",
 CellID->113924084,ExpressionUUID->"c38783a5-aa83-4d4f-a3d9-fe09cd7b9057"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = {
   20 $CellContext`z^20 (
      40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
    Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)], 
    20 $CellContext`z^20 
    Cos[$CellContext`x + $CellContext`z] (
      40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
    Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)]}, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> {
      20 $CellContext`z^20 (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)], 
       20 $CellContext`z^20 
       Cos[$CellContext`x + $CellContext`z] (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)]}, 
     "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 16, 50, 58.5459697`9.520071834602273}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "List", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = {
   20 $CellContext`z^20 (
      40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
    Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)], 
    20 $CellContext`z^20 
    Cos[$CellContext`x + $CellContext`z] (
      40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
    Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)]}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{
              20 $CellContext`z^20 (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)],
                20 $CellContext`z^20 
               Cos[$CellContext`x + $CellContext`z] (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] 
               PolyGamma[0, $CellContext`z^(-20)]} -> 1}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{
              20 $CellContext`z^20 (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)],
                20 $CellContext`z^20 
               Cos[$CellContext`x + $CellContext`z] (
                 40 + $CellContext`z^41 
                  Cos[$CellContext`x + $CellContext`z])^(-1) 
               Gamma[$CellContext`z^(-20)] 
               PolyGamma[0, $CellContext`z^(-20)]} -> 1}]]]}, {
         If[
          Or[
          AssessmentFunction[{{
               20 $CellContext`z^20 (
                  40 + $CellContext`z^41 
                   Cos[$CellContext`x + $CellContext`z])^(-1) 
                Gamma[$CellContext`z^(-20)] 
                PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                Cos[$CellContext`x + $CellContext`z] (
                  40 + $CellContext`z^41 
                   Cos[$CellContext`x + $CellContext`z])^(-1) 
                Gamma[$CellContext`z^(-20)] 
                PolyGamma[0, $CellContext`z^(-20)]} -> 1}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{{
                 20 $CellContext`z^20 (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                  Cos[$CellContext`x + $CellContext`z] (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)]} -> 1}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{{
                 20 $CellContext`z^20 (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)], 20 $CellContext`z^20 
                  Cos[$CellContext`x + $CellContext`z] (
                    40 + $CellContext`z^41 
                    Cos[$CellContext`x + $CellContext`z])^(-1) 
                  Gamma[$CellContext`z^(-20)] 
                  PolyGamma[0, $CellContext`z^(-20)]} -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{320., {128.43359379926696`, 132.56640620073304`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the gradient of the implicit function \
Gamma[1/\!\(\*SuperscriptBox[\(z\), \(20\)]\)] constrained by \
t+\!\(\*FractionBox[\(1\), SuperscriptBox[\(z\), \(40\)]]\)==Sin[x +z] with \
respect to t and x?"], 
   AssessmentFunction[{{
      20 $CellContext`z^20 (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)], 
       20 $CellContext`z^20 
       Cos[$CellContext`x + $CellContext`z] (
         40 + $CellContext`z^41 Cos[$CellContext`x + $CellContext`z])^(-1) 
       Gamma[$CellContext`z^(-20)] PolyGamma[0, $CellContext`z^(-20)]} -> 
     1}]]]], "Output",
 CellChangeTimes->{3.874855852935559*^9},
 CellLabel->"Out[180]=",
 CellID->22533797,ExpressionUUID->"b6719765-a541-4744-99e7-7fdabc8e83f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"q13", "=", 
  RowBox[{"QuestionObject", "[", 
   RowBox[{
   "\"\<What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?\>\"", ",", 
    RowBox[{"AssessmentFunction", "[", 
     RowBox[{"{", 
      RowBox[{"Simplify", "@", 
       RowBox[{"ImplicitD", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"z", "^", "2"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"x", " ", "z"}], "]"}]}], "}"}], ",", 
         RowBox[{
          RowBox[{"Log", "[", 
           RowBox[{"x", "-", 
            RowBox[{"100", "z"}]}], "]"}], "==", 
          RowBox[{
           RowBox[{"t", "^", "2"}], " ", 
           RowBox[{"z", "^", "3"}]}]}], ",", "z", ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"t", ",", "x"}], "}"}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.87485586628302*^9, 3.874855976839905*^9}},
 CellLabel->"In[184]:=",
 CellID->365270134,ExpressionUUID->"5384125e-90b1-4cd9-b4d8-e93c4b450104"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
                3 $CellContext`t^2 ($CellContext`x - 
                 100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(100 + 
                3 $CellContext`t^2 ($CellContext`x - 
                  100 $CellContext`z) $CellContext`z^2)}, {(-2) \
$CellContext`t $CellContext`x ($CellContext`x - 
                 100 $CellContext`z) $CellContext`z^3 (100 + 
                  3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) 
                Cos[$CellContext`x $CellContext`z], (100 + 
                  3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) \
($CellContext`x + 3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
                 100 $CellContext`z (1 - 3 $CellContext`t^2 $CellContext`z^3))
                  Cos[$CellContext`x $CellContext`z]}} -> 1}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
                3 $CellContext`t^2 ($CellContext`x - 
                 100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(100 + 
                3 $CellContext`t^2 ($CellContext`x - 
                  100 $CellContext`z) $CellContext`z^2)}, {(-2) \
$CellContext`t $CellContext`x ($CellContext`x - 
                 100 $CellContext`z) $CellContext`z^3 (100 + 
                  3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) 
                Cos[$CellContext`x $CellContext`z], (100 + 
                  3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) \
($CellContext`x + 3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
                 100 $CellContext`z (1 - 3 $CellContext`t^2 $CellContext`z^3))
                  Cos[$CellContext`x $CellContext`z]}} -> 1}]]]}, {
         If[
          Or[
          AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
                 3 $CellContext`t^2 ($CellContext`x - 
                  100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(
                 100 + 
                 3 $CellContext`t^2 ($CellContext`x - 
                   100 $CellContext`z) $CellContext`z^2)}, {(-2) \
$CellContext`t $CellContext`x ($CellContext`x - 
                  100 $CellContext`z) $CellContext`z^3 (100 + 
                   3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) 
                 Cos[$CellContext`x $CellContext`z], (100 + 
                   3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) \
($CellContext`x + 3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
                  100 $CellContext`z (1 - 
                    3 $CellContext`t^2 $CellContext`z^3)) 
                 Cos[$CellContext`x $CellContext`z]}} -> 1}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
                   3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(
                   100 + 3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)}, {(-2) \
$CellContext`t $CellContext`x ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^3 (100 + 
                    3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) 
                   Cos[$CellContext`x $CellContext`z], (100 + 
                    3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) \
($CellContext`x + 3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
                    100 $CellContext`z (1 - 
                    3 $CellContext`t^2 $CellContext`z^3)) 
                   Cos[$CellContext`x $CellContext`z]}} -> 1}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
                   3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(
                   100 + 3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)}, {(-2) \
$CellContext`t $CellContext`x ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^3 (100 + 
                    3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) 
                   Cos[$CellContext`x $CellContext`z], (100 + 
                    3 $CellContext`t^2 ($CellContext`x - 
                    100 $CellContext`z) $CellContext`z^2)^(-1) \
($CellContext`x + 3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
                    100 $CellContext`z (1 - 
                    3 $CellContext`t^2 $CellContext`z^3)) 
                   Cos[$CellContext`x $CellContext`z]}} -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{306., {52.433593799266966`, 56.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the Jacobian of \[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \
\(2\)]\),Sin[x z]\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"], 
   AssessmentFunction[{{{(-4) $CellContext`t $CellContext`z^4 \
(-$CellContext`x + 100 $CellContext`z)/(-100 - 
        3 $CellContext`t^2 ($CellContext`x - 
         100 $CellContext`z) $CellContext`z^2), 2 $CellContext`z/(100 + 
        3 $CellContext`t^2 ($CellContext`x - 
          100 $CellContext`z) $CellContext`z^2)}, {(-2) $CellContext`t \
$CellContext`x ($CellContext`x - 
         100 $CellContext`z) $CellContext`z^3 (100 + 
          3 $CellContext`t^2 ($CellContext`x - 
            100 $CellContext`z) $CellContext`z^2)^(-1) 
        Cos[$CellContext`x $CellContext`z], (100 + 
          3 $CellContext`t^2 ($CellContext`x - 
            100 $CellContext`z) $CellContext`z^2)^(-1) ($CellContext`x + 
         3 $CellContext`t^2 $CellContext`x $CellContext`z^3 + 
         100 $CellContext`z (1 - 3 $CellContext`t^2 $CellContext`z^3)) 
        Cos[$CellContext`x $CellContext`z]}} -> 1}]]]], "Output",
 CellChangeTimes->{{3.874855944272023*^9, 3.8748559782718925`*^9}},
 CellLabel->"Out[184]=",
 CellID->219106427,ExpressionUUID->"5c12b30f-1b9d-4143-8e8a-5c2d9e3cef0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Simplify", "@", 
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"z", "^", "2"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"x", " ", "z"}], "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"Log", "[", 
       RowBox[{"x", "-", 
        RowBox[{"100", "z"}]}], "]"}], "==", 
      RowBox[{
       RowBox[{"t", "^", "2"}], " ", 
       RowBox[{"z", "^", "3"}]}]}], ",", "z", ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"t", ",", "x"}], "}"}], "}"}]}], "]"}]}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874855984067308*^9, 3.8748559863102016`*^9}},
 CellLabel->"In[185]:=",
 CellID->681324460,ExpressionUUID->"6b51f3f9-0036-43b5-a6a7-66d5d8c73eed"],

Cell[BoxData[
 FormBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"-", 
       FractionBox[
        RowBox[{"4", " ", "t", " ", 
         SuperscriptBox["z", "4"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"100", " ", "z"}], "-", "x"}], ")"}]}], 
        RowBox[{
         RowBox[{"-", 
          RowBox[{"3", " ", 
           SuperscriptBox["t", "2"], " ", 
           SuperscriptBox["z", "2"], " ", 
           RowBox[{"(", 
            RowBox[{"x", "-", 
             RowBox[{"100", " ", "z"}]}], ")"}]}]}], "-", "100"}]]}], 
      FractionBox[
       RowBox[{"2", " ", "z"}], 
       RowBox[{
        RowBox[{"3", " ", 
         SuperscriptBox["t", "2"], " ", 
         SuperscriptBox["z", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"100", " ", "z"}]}], ")"}]}], "+", "100"}]]},
     {
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", " ", "t", " ", "x", " ", 
         SuperscriptBox["z", "3"], " ", 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"100", " ", "z"}]}], ")"}], " ", 
         RowBox[{"cos", "(", 
          RowBox[{"x", " ", "z"}], ")"}]}], 
        RowBox[{
         RowBox[{"3", " ", 
          SuperscriptBox["t", "2"], " ", 
          SuperscriptBox["z", "2"], " ", 
          RowBox[{"(", 
           RowBox[{"x", "-", 
            RowBox[{"100", " ", "z"}]}], ")"}]}], "+", "100"}]]}], 
      FractionBox[
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"3", " ", 
           SuperscriptBox["t", "2"], " ", "x", " ", 
           SuperscriptBox["z", "3"]}], "+", 
          RowBox[{"100", " ", "z", " ", 
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"3", " ", 
              SuperscriptBox["t", "2"], " ", 
              SuperscriptBox["z", "3"]}]}], ")"}]}], "+", "x"}], ")"}], " ", 
        RowBox[{"cos", "(", 
         RowBox[{"x", " ", "z"}], ")"}]}], 
       RowBox[{
        RowBox[{"3", " ", 
         SuperscriptBox["t", "2"], " ", 
         SuperscriptBox["z", "2"], " ", 
         RowBox[{"(", 
          RowBox[{"x", "-", 
           RowBox[{"100", " ", "z"}]}], ")"}]}], "+", "100"}]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{3.8748559866407394`*^9},
 CellLabel->"Out[185]//TraditionalForm=",
 CellID->148681319,ExpressionUUID->"f0325813-034f-4a35-9d41-10e37862c98b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["q13"], "Input",
 CellChangeTimes->{{3.8748559927247105`*^9, 3.8748559945079327`*^9}},
 CellLabel->"In[186]:=",
 CellID->805797574,ExpressionUUID->"b4c998d5-15ac-41b8-adaa-b5980b1fd8b5"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{
   QuestionFramework`Private`input$$ = {{(((-4) $CellContext`t) \
$CellContext`z^4) ((-$CellContext`x + 
       100 $CellContext`z)/(-100 - ((3 $CellContext`t^2) ($CellContext`x - 
        100 $CellContext`z)) $CellContext`z^2)), 
     2 ($CellContext`z/(
      100 + ((3 $CellContext`t^2) ($CellContext`x - 
         100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) $CellContext`t) \
$CellContext`x) ($CellContext`x - 100 $CellContext`z)) $CellContext`z^3)/(
      100 + ((3 $CellContext`t^2) ($CellContext`x - 
         100 $CellContext`z)) $CellContext`z^2)) 
     Cos[$CellContext`x $CellContext`z], ((
        100 + ((3 $CellContext`t^2) ($CellContext`x - 
           100 $CellContext`z)) $CellContext`z^2)^(-1) ($CellContext`x + ((
          3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
         100 $CellContext`z) (1 - (3 $CellContext`t^2) $CellContext`z^3))) 
     Cos[$CellContext`x $CellContext`z]}}, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> {{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 
          100 $CellContext`z)/(-100 - ((3 $CellContext`t^2) ($CellContext`x - 
           100 $CellContext`z)) $CellContext`z^2)), 
        2 ($CellContext`z/(
         100 + ((3 $CellContext`t^2) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^3)/(
         100 + ((3 $CellContext`t^2) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^2)) 
        Cos[$CellContext`x $CellContext`z], ((
           100 + ((3 $CellContext`t^2) ($CellContext`x - 
              100 $CellContext`z)) $CellContext`z^2)^(-1) ($CellContext`x + ((
             3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
            100 $CellContext`z) (1 - (3 $CellContext`t^2) $CellContext`z^3))) 
        Cos[$CellContext`x $CellContext`z]}}, "Explanation" -> None, 
     "Timestamp" -> 
     DateObject[{2022, 10, 15, 16, 53, 22.8029061`9.110565128030476}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "List", "SubmissionCount" -> 2|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 2, 
   QuestionFramework`Private`submittedvalue$$ = {{(((-4) $CellContext`t) \
$CellContext`z^4) ((-$CellContext`x + 
       100 $CellContext`z)/(-100 - ((3 $CellContext`t^2) ($CellContext`x - 
        100 $CellContext`z)) $CellContext`z^2)), 
     2 ($CellContext`z/(
      100 + ((3 $CellContext`t^2) ($CellContext`x - 
         100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) $CellContext`t) \
$CellContext`x) ($CellContext`x - 100 $CellContext`z)) $CellContext`z^3)/(
      100 + ((3 $CellContext`t^2) ($CellContext`x - 
         100 $CellContext`z)) $CellContext`z^2)) 
     Cos[$CellContext`x $CellContext`z], ((
        100 + ((3 $CellContext`t^2) ($CellContext`x - 
           100 $CellContext`z)) $CellContext`z^2)^(-1) ($CellContext`x + ((
          3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
         100 $CellContext`z) (1 - (3 $CellContext`t^2) $CellContext`z^3))) 
     Cos[$CellContext`x $CellContext`z]}}}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"|>, "Interpreter"], String, 
           Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What is the Jacobian of \
\[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \(2\)]\),Sin[x z]\
\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 
                  100 $CellContext`z)/(-100 - ((
                   3 $CellContext`t^2) ($CellContext`x - 
                   100 $CellContext`z)) $CellContext`z^2)), 
                2 ($CellContext`z/(
                 100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^3)/(
                 100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)) 
                Cos[$CellContext`x $CellContext`z], ((
                   100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)^(-1) \
($CellContext`x + ((3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
                    100 $CellContext`z) (
                    1 - (3 $CellContext`t^2) $CellContext`z^3))) 
                Cos[$CellContext`x $CellContext`z]}} -> 1}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 
                  100 $CellContext`z)/(-100 - ((
                   3 $CellContext`t^2) ($CellContext`x - 
                   100 $CellContext`z)) $CellContext`z^2)), 
                2 ($CellContext`z/(
                 100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^3)/(
                 100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)) 
                Cos[$CellContext`x $CellContext`z], ((
                   100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)^(-1) \
($CellContext`x + ((3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
                    100 $CellContext`z) (
                    1 - (3 $CellContext`t^2) $CellContext`z^3))) 
                Cos[$CellContext`x $CellContext`z]}} -> 1}]]]}, {
         If[
          Or[
          AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 
                   100 $CellContext`z)/(-100 - ((
                    3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)), 
                 2 ($CellContext`z/(
                  100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^3)/(
                  100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)) 
                 Cos[$CellContext`x $CellContext`z], ((
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)^(-1) \
($CellContext`x + ((3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
                    100 $CellContext`z) (
                    1 - (3 $CellContext`t^2) $CellContext`z^3))) 
                 Cos[$CellContext`x $CellContext`z]}} -> 1}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 100 $CellContext`z)/(-100 - ((
                    3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)), 
                   2 ($CellContext`z/(
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^3)/(
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)) 
                   Cos[$CellContext`x $CellContext`z], ((
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)^(-1) \
($CellContext`x + ((3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
                    100 $CellContext`z) (
                    1 - (3 $CellContext`t^2) $CellContext`z^3))) 
                   Cos[$CellContext`x $CellContext`z]}} -> 1}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 100 $CellContext`z)/(-100 - ((
                    3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)), 
                   2 ($CellContext`z/(
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^3)/(
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)) 
                   Cos[$CellContext`x $CellContext`z], ((
                    100 + ((3 $CellContext`t^2) ($CellContext`x - 
                    100 $CellContext`z)) $CellContext`z^2)^(-1) \
($CellContext`x + ((3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
                    100 $CellContext`z) (
                    1 - (3 $CellContext`t^2) $CellContext`z^3))) 
                   Cos[$CellContext`x $CellContext`z]}} -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{465., {119.9335936884163, 124.0664063115837}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What is the Jacobian of \[LeftAngleBracket]\!\(\*SuperscriptBox[\(z\), \
\(2\)]\),Sin[x z]\[RightAngleBracket] with the implicit constraint \
Log[x-100z]=\!\(\*SuperscriptBox[\(t\), \(2\)]\)\!\(\*SuperscriptBox[\(z\), \
\(3\)]\) with respect to the vector \
\[LeftAngleBracket]t,x\[RightAngleBracket]?"], 
   AssessmentFunction[{{{(((-4) $CellContext`t) $CellContext`z^4) \
((-$CellContext`x + 
          100 $CellContext`z)/(-100 - ((3 $CellContext`t^2) ($CellContext`x - 
           100 $CellContext`z)) $CellContext`z^2)), 
        2 ($CellContext`z/(
         100 + ((3 $CellContext`t^2) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^2))}, {((((((-2) \
$CellContext`t) $CellContext`x) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^3)/(
         100 + ((3 $CellContext`t^2) ($CellContext`x - 
            100 $CellContext`z)) $CellContext`z^2)) 
        Cos[$CellContext`x $CellContext`z], ((
           100 + ((3 $CellContext`t^2) ($CellContext`x - 
              100 $CellContext`z)) $CellContext`z^2)^(-1) ($CellContext`x + ((
             3 $CellContext`t^2) $CellContext`x) $CellContext`z^3 + (
            100 $CellContext`z) (1 - (3 $CellContext`t^2) $CellContext`z^3))) 
        Cos[$CellContext`x $CellContext`z]}} -> 1}]]]], "Output",
 CellChangeTimes->{3.874855994866254*^9},
 CellLabel->"Out[186]=",
 CellID->753464094,ExpressionUUID->"5a8e4bc4-a95e-4d57-b314-5131206fb1df"]
}, Open  ]],

Cell["Last but not least I can find the arity of a function:", "Text",
 CellChangeTimes->{{3.874856070967834*^9, 3.874856078215182*^9}},
 CellID->22898690,ExpressionUUID->"9492e6ac-a2fb-43c1-b97e-ecd33bbcbf06"],

Cell["I define a function for the arity of a function:", "Text",
 CellChangeTimes->{{3.87485432371043*^9, 3.874854331333826*^9}},
 CellID->807499158,ExpressionUUID->"d2ef9fe5-b345-4576-a6e5-e09f20d3f3b8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"integersToRanges", "[", "l_List", "]"}], ":=", 
   RowBox[{
    RowBox[{
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"#", "[", 
       RowBox[{"[", 
        RowBox[{"{", 
         RowBox[{"1", ",", 
          RowBox[{"-", "1"}]}], "}"}], "]"}], "]"}], "]"}], "&"}], "/@", 
    RowBox[{"Replace", "[", 
     RowBox[{
      RowBox[{"Split", "[", 
       RowBox[{
        RowBox[{"Union", "[", "l", "]"}], ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#2", "-", "#1"}], "===", "1"}], "&"}]}], "]"}], ",", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"x___", ",", 
         RowBox[{"{", "y__", "}"}], ",", 
         RowBox[{"{", "Infinity", "}"}]}], "}"}], ":>", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"{", 
          RowBox[{"y", ",", "Infinity"}], "}"}]}], "}"}]}]}], "]"}]}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"consolidateIntegerRanges", "[", "ranges___List", "]"}], ":=", 
   RowBox[{"integersToRanges", "[", 
    RowBox[{"Catenate", "[", 
     RowBox[{
      RowBox[{"Apply", "[", 
       RowBox[{
        RowBox[{"List", "@@", 
         RowBox[{"Quiet", "[", 
          RowBox[{
           RowBox[{"Range", "[", "##", "]"}], ",", 
           RowBox[{"Range", "::", "range"}]}], "]"}]}], "&"}], "]"}], "/@", 
      RowBox[{"{", "ranges", "}"}]}], "]"}], "]"}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"patternCount", "[", "patterns_List", "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"tentativeMax", "=", 
       RowBox[{"Count", "[", 
        RowBox[{"patterns", ",", 
         RowBox[{"Except", "[", 
          RowBox[{
           RowBox[{"Verbatim", "[", "___", "]"}], "|", 
           RowBox[{
            RowBox[{"Verbatim", "[", "Pattern", "]"}], "[", 
            RowBox[{"_", ",", 
             RowBox[{"Verbatim", "[", "___", "]"}]}], "]"}], "|", 
           RowBox[{
            RowBox[{"Verbatim", "[", "OptionsPattern", "]"}], "[", "___", 
            "]"}]}], "]"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"tentativeMax", "-", 
        RowBox[{"Count", "[", 
         RowBox[{"patterns", ",", "_Optional"}], "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MemberQ", "[", 
          RowBox[{"patterns", ",", 
           RowBox[{
            RowBox[{"Verbatim", "[", "__", "]"}], "|", 
            RowBox[{
             RowBox[{"Verbatim", "[", "Pattern", "]"}], "[", 
             RowBox[{"_", ",", 
              RowBox[{"Verbatim", "[", "__", "]"}]}], "]"}], "|", 
            RowBox[{"Verbatim", "[", "___", "]"}], "|", 
            RowBox[{
             RowBox[{"Verbatim", "[", "Pattern", "]"}], "[", 
             RowBox[{"_", ",", 
              RowBox[{"Verbatim", "[", "___", "]"}]}], "]"}]}]}], "]"}], ",", 
         "Infinity", ",", "tentativeMax"}], "]"}]}], "}"}]}], "]"}]}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"arity", "[", "f_", "]"}], ":=", 
  RowBox[{"consolidateIntegerRanges", "@@", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SyntaxInformation", "[", "f", "]"}], "===", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"patternCount", "[", 
        RowBox[{"Replace", "[", 
         RowBox[{
          RowBox[{"First", "[", "#", "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"Verbatim", "[", "HoldPattern", "]"}], "[", 
            RowBox[{"_", "[", "x___", "]"}], "]"}], ":>", 
           RowBox[{"{", "x", "}"}]}]}], "]"}], "]"}], "&"}], "/@", 
      RowBox[{"DownValues", "[", "f", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"patternCount", "[", 
       RowBox[{"\"\<ArgumentsPattern\>\"", "/.", " ", 
        RowBox[{"SyntaxInformation", "[", "f", "]"}]}], "]"}], "}"}]}], "]"}], 
   RowBox[{"(*", 
    RowBox[{"credit", " ", "Eric", " ", "James", " ", "Parfitt"}], 
    "*)"}]}]}]}], "Input",
 CellChangeTimes->{{3.8748543193393164`*^9, 3.8748543523051176`*^9}},
 CellLabel->"In[190]:=",
 CellID->294566406,ExpressionUUID->"701c98c5-94bf-47a4-bcad-3adb00a2c98e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"arity", "[", "ImplicitD", "]"}]], "Input",
 CellChangeTimes->{{3.8748543578858933`*^9, 3.874854361841988*^9}},
 CellLabel->"In[194]:=",
 CellID->353237872,ExpressionUUID->"28a73d3d-9e40-4212-ba56-e134796b081f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"1", ",", "\[Infinity]"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8748543620078354`*^9, 3.8748560822671957`*^9},
 CellLabel->"Out[194]=",
 CellID->280916613,ExpressionUUID->"30e5bdb6-ff49-42bc-9418-687bcee77df7"]
}, Open  ]],

Cell["\<\
I remember seeing implicit derivatives in my calculus class so I think its \
cool that there's now a function to solve this.\
\>", "Text",
 CellChangeTimes->{{3.8748560993353014`*^9, 3.8748561181483636`*^9}},
 CellID->362114512,ExpressionUUID->"ef223121-86f9-4a65-b172-49ad242e90ea"],

Cell[TextData[{
 "Solve this ",
 ButtonBox["problem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://math.stackexchange.com/questions/2453138/jacobian-of-\
implicit-functions"], None},
  ButtonNote->
   "https://math.stackexchange.com/questions/2453138/jacobian-of-implicit-\
functions"],
 ":"
}], "Text",
 CellChangeTimes->{{3.87485756923673*^9, 3.874857584605626*^9}},
 CellID->252245795,ExpressionUUID->"d5a530da-5e4f-4e26-93fa-c819536cc84a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
AAAAAAAAAAAAAAAAAAAAAAAAAJROaYv3LJFdHW3LkexEpgyPRSMb8bOl2hf4
0Xe+e2Y6laNI8EMkLoRs7kDP+lpTp321F30fjiYjfrfLG+9fqBAA8EZoZcMe
gSrAbW6DLPMyo8W1ygnPu80KWearSpeL4dJXsyhGL3TVcY7uo6QsZWxukdLJ
QWcW2/510lKWIFYXFQcAvCXYMtHyQsHDNu6cAnT9ScdGnqyNIC/v/9CC+VOC
bn4nbwpJ19njoj8NFoGfBne5DWkM4k0U7+RVTG1CbiYrhQIAZktln/esCTnd
bmLOracvXmya1k/BvxLeZSv6UFGyRIbszDsTyBr4Dsu7xEtw25BVQ/XbEI+B
br3HiW0NMxa6VVuHb8cGADCG7rplD6RnvRZaZUsy+LmPpy9k8dhqNimE/S7n
p53SrFdlr2VjG598lkWpd3uywd8VK1uBmYs2QbxML0O0ATAN3QaF+5g1I5Xd
m1p10rE5us+LP114QWa2ROcsvihZ2tTrPjLtX+XG5MOFneIXYmlvD24jbhY6
opm6aBtsJkVdT+OKNh01YH148OaQpNIdSp6bVGDSXiZqIEna6PV9PCq/LMWm
NL4Ru9TMRthEnZ5FEq93/EP3fjIDRBuAPxRJsb3rB1fER9r4Oxz+e+T3f7Ki
TRQ7EGcdx0UimDa7CfjEuWG7tLPwKPO+mgn/TVK026frFqvDEsuRojCPtDuS
e6K7BqINwJ8IGfi7wn/l8nnpc5J8byZBYoKi3a0frDq8yQwtRm5X4Lx/PX38
/0TE3GfH3NI6zV3v0JQ/3eb1jzNJ0abJhz7m52//kP7tMLGpaz0j78s57wun
IkHhRA5aKKLdvtgMsz3+FsK7Vz03SJLD5W06Xc6VyAHbgFK/058qv782PXZl
o3BtM8qebToHNvGUxVYW7e5NUd5h0+X81LvqvnQLa/JuoSSN/0Ldk9RgS0oA
/mDIhpucze2yraa0XIPrk4210IaszLIxqfuYSZA2J9qd0lbIueCy2H2K57ye
IVuukytWtri+5vzx9PmT624vD4SAx+uzuX3Ro3KjlAoucJ4FzitkZF90p5yJ
856VcHQ94FmLbJtzH5kTbbrsvMs27wpuaf78dinFr0Sy5LKdyrHAL4XCQtjr
5aN/5UadXHN3Fndz8uMW69nPnCazVFr5z4mN/bPa7U0tH/PbHXO6XXTZNtnB
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
    "], {{0, 106.80925680225619`}, {292.2253261949368, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{119.98960000000002`, 119.98960000000002`},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{292.2253261949368, 106.80925680225619`},
  PlotRange->{{0, 292.2253261949368}, {0, 106.80925680225619`}}]], "Input",
 CellID->391291944,ExpressionUUID->"2a4b344a-50fa-4f5a-9423-aed7774841df"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Alphabet", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748578417759666`*^9, 3.874857843028233*^9}},
 CellLabel->"In[219]:=",
 CellID->155814185,ExpressionUUID->"defa8566-0fed-4e81-be24-270c2727b1d0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8748578433734202`*^9},
 CellLabel->"Out[219]=",
 CellID->109552347,ExpressionUUID->"c4dd7535-eba5-4317-90e8-e1e22e403229"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SuperscriptBox["t", "3"], "+", 
         SuperscriptBox["v", "3"]}], "==", 
        RowBox[{"x", "+", "z"}]}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["t", "2"], "+", 
         SuperscriptBox["v", "2"]}], "==", 
        RowBox[{
         SuperscriptBox["x", "3"], "+", 
         SuperscriptBox["z", "3"]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", "Simplify"}], "//",
   "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874857358516138*^9, 3.874857418531675*^9}, 
   3.874857472428035*^9, {3.874857847030225*^9, 3.8748578509065876`*^9}},
 CellLabel->"In[220]:=",
 CellID->213431196,ExpressionUUID->"ac8620a3-60f2-4275-8e9d-e39c5bbe0c62"],

Cell[BoxData[
 FormBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{"2", "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["x", "2"]}]}], 
       RowBox[{
        RowBox[{"6", " ", 
         SuperscriptBox["t", "2"]}], "-", 
        RowBox[{"6", " ", "t", " ", "v"}]}]], 
      FractionBox[
       RowBox[{"2", "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["z", "2"]}]}], 
       RowBox[{
        RowBox[{"6", " ", 
         SuperscriptBox["t", "2"]}], "-", 
        RowBox[{"6", " ", "t", " ", "v"}]}]]},
     {
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "-", 
         RowBox[{"9", " ", "t", " ", 
          SuperscriptBox["x", "2"]}]}], 
        RowBox[{
         RowBox[{"6", " ", "t", " ", "v"}], "-", 
         RowBox[{"6", " ", 
          SuperscriptBox["v", "2"]}]}]]}], 
      RowBox[{"-", 
       FractionBox[
        RowBox[{"2", "-", 
         RowBox[{"9", " ", "t", " ", 
          SuperscriptBox["z", "2"]}]}], 
        RowBox[{
         RowBox[{"6", " ", "t", " ", "v"}], "-", 
         RowBox[{"6", " ", 
          SuperscriptBox["v", "2"]}]}]]}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874857383511543*^9, 3.8748574188023167`*^9}, 
   3.8748574732886553`*^9, 3.8748575638849964`*^9, 3.8748578521755066`*^9},
 CellLabel->"Out[220]//TraditionalForm=",
 CellID->58209348,ExpressionUUID->"faaf2da8-a5cb-4ac4-91a2-ccb1dff021e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Det", "[", 
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"t", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SuperscriptBox["t", "3"], "+", 
         SuperscriptBox["v", "3"]}], "==", 
        RowBox[{"x", "+", "z"}]}], ",", 
       RowBox[{
        RowBox[{
         SuperscriptBox["t", "2"], "+", 
         SuperscriptBox["v", "2"]}], "==", 
        RowBox[{
         SuperscriptBox["x", "3"], "+", 
         SuperscriptBox["z", "3"]}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", "Simplify"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.874857586984751*^9, 3.874857592909317*^9}, {
  3.8748578565453596`*^9, 3.874857860326993*^9}},
 CellLabel->"In[222]:=",
 CellID->284058788,ExpressionUUID->"36a9cf91-629d-46b6-8591-d69a79f2d73e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"18", " ", "t", " ", 
     SuperscriptBox["x", "2"]}], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"6", " ", 
        SuperscriptBox["t", "2"]}], "-", 
       RowBox[{"6", " ", "t", " ", "v"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"6", " ", "t", " ", "v"}], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["v", "2"]}]}], ")"}]}]]}], "+", 
  FractionBox[
   RowBox[{"18", " ", "v", " ", 
    SuperscriptBox["x", "2"]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", 
       SuperscriptBox["t", "2"]}], "-", 
      RowBox[{"6", " ", "t", " ", "v"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", "t", " ", "v"}], "-", 
      RowBox[{"6", " ", 
       SuperscriptBox["v", "2"]}]}], ")"}]}]], "+", 
  FractionBox[
   RowBox[{"18", " ", "t", " ", 
    SuperscriptBox["z", "2"]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", 
       SuperscriptBox["t", "2"]}], "-", 
      RowBox[{"6", " ", "t", " ", "v"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", "t", " ", "v"}], "-", 
      RowBox[{"6", " ", 
       SuperscriptBox["v", "2"]}]}], ")"}]}]], "-", 
  FractionBox[
   RowBox[{"18", " ", "v", " ", 
    SuperscriptBox["z", "2"]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", 
       SuperscriptBox["t", "2"]}], "-", 
      RowBox[{"6", " ", "t", " ", "v"}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"6", " ", "t", " ", "v"}], "-", 
      RowBox[{"6", " ", 
       SuperscriptBox["v", "2"]}]}], ")"}]}]]}]], "Output",
 CellChangeTimes->{{3.8748575892312803`*^9, 3.8748575932082014`*^9}, {
  3.874857856927823*^9, 3.8748578606874347`*^9}},
 CellLabel->"Out[222]=",
 CellID->446557700,ExpressionUUID->"92cf51c4-5419-4f91-be54-85919de499bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Together", "[", 
   RowBox[{"Det", "[", 
    RowBox[{
     RowBox[{"ImplicitD", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"t", ",", "v"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{
           SuperscriptBox["t", "3"], "+", 
           SuperscriptBox["v", "3"]}], "==", 
          RowBox[{"x", "+", "z"}]}], ",", 
         RowBox[{
          RowBox[{
           SuperscriptBox["t", "2"], "+", 
           SuperscriptBox["v", "2"]}], "==", 
          RowBox[{
           SuperscriptBox["x", "3"], "+", 
           SuperscriptBox["z", "3"]}]}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "v"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", "Simplify"}], 
    "]"}], "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748575966639504`*^9, 3.874857622830472*^9}, 
   3.8748578650333424`*^9},
 CellLabel->"In[223]:=",
 CellID->398678795,ExpressionUUID->"a6d06225-7667-43cd-8aec-2b2ecb06562e"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    SuperscriptBox["z", "2"], "-", 
    SuperscriptBox["x", "2"]}], 
   RowBox[{"2", " ", "t", " ", "v", " ", 
    RowBox[{"(", 
     RowBox[{"t", "-", "v"}], ")"}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874857599652135*^9, 3.874857623157916*^9}, 
   3.87485786566934*^9},
 CellLabel->"Out[223]//TraditionalForm=",
 CellID->30074208,ExpressionUUID->"6d794fb8-47f0-4087-804a-a0ed0a87bd2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ExpandDenominator", "[", 
   RowBox[{
    RowBox[{"Det", "[", 
     RowBox[{
      RowBox[{"ImplicitD", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"t", ",", "v"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{
            SuperscriptBox["t", "3"], "+", 
            SuperscriptBox["v", "3"]}], "==", 
           RowBox[{"x", "+", "z"}]}], ",", 
          RowBox[{
           RowBox[{
            SuperscriptBox["t", "2"], "+", 
            SuperscriptBox["v", "2"]}], "==", 
           RowBox[{
            SuperscriptBox["x", "3"], "+", 
            SuperscriptBox["z", "3"]}]}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "v"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", "Simplify"}], 
     "]"}], "//", "Together"}], "]"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748576060285177`*^9, 3.874857626637436*^9}, {
  3.8748578748347793`*^9, 3.8748578859169583`*^9}},
 CellLabel->"In[225]:=",
 CellID->754706430,ExpressionUUID->"412654b3-4da2-4feb-ac77-6c13893af67d"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    SuperscriptBox["z", "2"], "-", 
    SuperscriptBox["x", "2"]}], 
   RowBox[{
    RowBox[{"2", " ", 
     SuperscriptBox["t", "2"], " ", "v"}], "-", 
    RowBox[{"2", " ", "t", " ", 
     SuperscriptBox["v", "2"]}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874857610976739*^9, 3.874857626872048*^9}, {
  3.874857875374166*^9, 3.874857886131866*^9}},
 CellLabel->"Out[225]//TraditionalForm=",
 CellID->619790141,ExpressionUUID->"4b296e22-3941-4060-8d1e-68faa5ff6c2f"]
}, Open  ]],

Cell["Use Simplify to find the simplest form:", "Text",
 CellChangeTimes->{{3.874857901008746*^9, 3.874857906992695*^9}},
 CellID->67781306,ExpressionUUID->"5c4ad465-7c25-4877-8671-d826d513315c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ExpandDenominator", "[", 
    RowBox[{
     RowBox[{"Det", "[", 
      RowBox[{
       RowBox[{"ImplicitD", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"t", ",", "v"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SuperscriptBox["t", "3"], "+", 
             SuperscriptBox["v", "3"]}], "==", 
            RowBox[{"x", "+", "z"}]}], ",", 
           RowBox[{
            RowBox[{
             SuperscriptBox["t", "2"], "+", 
             SuperscriptBox["v", "2"]}], "==", 
            RowBox[{
             SuperscriptBox["x", "3"], "+", 
             SuperscriptBox["z", "3"]}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "v"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{"x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", "Simplify"}],
       "]"}], "//", "Together"}], "]"}], "//", "TraditionalForm"}], "//", 
  "Simplify"}]], "Input",
 CellChangeTimes->{{3.8748576060285177`*^9, 3.874857626637436*^9}, {
  3.8748578748347793`*^9, 3.8748578953120785`*^9}},
 CellLabel->"In[226]:=",
 CellID->118547987,ExpressionUUID->"265e4055-5ea4-455e-8f33-c480a22a71c5"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    SuperscriptBox["z", "2"], "-", 
    SuperscriptBox["x", "2"]}], 
   RowBox[{
    RowBox[{"2", " ", 
     SuperscriptBox["t", "2"], " ", "v"}], "-", 
    RowBox[{"2", " ", "t", " ", 
     SuperscriptBox["v", "2"]}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{3.874857895565151*^9},
 CellLabel->"Out[226]//TraditionalForm=",
 CellID->441107373,ExpressionUUID->"24c797ed-ae34-461b-ad6f-bd94e5029fde"]
}, Open  ]],

Cell[TextData[{
 "Solve this ",
 ButtonBox["problem",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.youtube.com/watch?v=6UH54ga9qdI"], None},
  ButtonNote->"https://www.youtube.com/watch?v=6UH54ga9qdI"],
 ":"
}], "Text",
 CellChangeTimes->{{3.874857807226341*^9, 3.874857819539129*^9}},
 CellID->61353467,ExpressionUUID->"21dd603e-081e-4021-8425-0f82df63b054"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
i0nAMvK0tNCiMJ6Wby1btoyhmU4KQE8BP+ivIu12uJEI8+x1rXVRQpV4V8bJ
HfJUoJ70Sxr5YQYexP706dM2QVOkC3rj1WkkBsJwd4VqsVswz+WbTofHyNhE
i4m3uZT48MhP4l1ZAezZx9K0+/fv69gdbI6aFlkc66fAvPhLfWcZhv150dHE
wNkBVyUD+wkVuwLzaqUy9kXuQ9LAtlvJwIjZkSNHwF1vv/22zrCzKzmD2BxN
VysWkbTATBceOXyYAf+pk6WNRcVQbCIztorm6SLuFSfCIPTu3Xt3DaH+bW05
BC3+Ri5aoGg+bVKW0uaMtlLGPLTVC7dUWJincysSj67Ip5QSrnODeBGY19jQ
VnUpQ3SJpbYwzzdzQAwhGUjS++AHvLMWwgHqtM8FfgGhFy9eDOLKOSeVu2ZB
X1zUkXhbRBEq6zICiVPTOkw9B2kEcOLmNObVG4GCOuKQhgTlI99uKJT7E3cK
2DPZWWGL8l20J+WhraDCkdbpr0gvjls5LSv4iCCERsUwWV8hzAnpjve72vWJ
5DIfMThx4kTOOc7G/tWPYYOgfEckIMSdy/PCkIX1jJGFOol8qyAbtWppD19R
+SHVUORpiTDPM1l9lFWPMQ56qj3mRbNcmfEXox6l7g+SVkwVQ5jn9pFdMhTh
eaIk23sq/DWidDXpoyBMW2R35KX1Qq1eVw2pgeo+2/Zi1fNc7kNcxtrN8kH5
VH4FZiY+vHKXpQE8txpSUhwBllbnCvnl4dOiA/PiNjD+Uj8WnA/SQ9ldUpk+
p2JfwDxLdsjsOTNKaZ3LDbdu3dq9ezfdunDhwokTJ44YMYIRYoVzgRMppW2l
39vie6V6wAiqdffOnW8vfgtiy7flSjAvtD6FJyvoOkrHcRWmaDGCQXEdq6J8
zzzbo9U8g/fxsHZsGNCuubm1qam09daUEthrbc2VMF6YJiUF5iXukqgE86Kl
WzCvoaG1oSLGqznMKxonwnhN+1g3b96My1D+8zt37mhcCSC/evUqgrFhwwab
gNHtccl2BHUkSkVEEdK0WJ8MJwGW9uhDHq7FaRs3bmTY65vNXHQttZ02bRru
T6MSV+9c6a2SIW7N7WoHkQ6WPXXqFMONYvmp052qQ5od0J3VWDY/HS3XnHyT
RuPMmTNaD1mMRRdtTdxW2IsukHDjdYm2KMIx/2cG8yIUwXj2RUj+zp07sc8H
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
zp4Et9y9r/VpEbJnDqX6o48+mjFjBpBDMeYKwc66G+IJ5oFPlZWVNTU1+sQZ
6aeijUAE9cQ89ydO952M1eZcv4i3uNp4ZfXqlcuWfVdTc5DPDWdOr1m7+vMv
PqNpA5XxZHPuohkvj+hpaTq+MqhKICFkwimMpxHFU7bNH1ruRsqHDx8mGNRB
6oVUSf06mQFCjcOS0ASDgfUph8XLgNRuno9RIjcnTJiwYcMG2bI4627Q5ykJ
diF/mkTabYh8K52fxJQsw8TNnDlzkpLf/va377zzzg8//CDLzXRvnkn7Zvnh
L0RN2MhHarGMDugwjAXSCzSzlhxckQ1QNSWvKObpzrohYV5PT2ep6gy/OqRX
0I83aMzr1OKuvhDtE7XyIojxCjHPOdhCqfHPlDrtInCPFDUfz7cwV2m6LZVu
DTzPIhXAeGGYZ3TfDRDzCknP1QjzRk4sX2+eTGnDP65fv37Pnj0HDhwAmWjX
Y/ZxXsCY3s9Ed1LpH2Lb8XRFMA+fiDvDVp9UcurUKezqo0ePaPhTMaAmXoFR
lZ1Pcu42FAAVJIbxhMTE/UlHoicicl36xGS8TMahtKnxdOXJIO+5c+d4st4B
o0hCeTyj+Att8DXUCYXKkHRv4W4SJvBYhZ1CEk0cK4HBU4inzrnDuwFmc9SL
LhhDxDxbJTWFhJSR06P04Sm2sRjTcgcojx07RnGVLUEgitbWVq7MnTtXVnD/
8ssvZI0e89VTT3Wq6szyB0NfzxpnXsTjcRo+sq33X//614kTJ8I5MsDnHwim
TMr8BCBQjgPTyErzhEonp8O4v7L1xLycy3syyNza2nzixPGKivJvv501a9aM
ceO/+sMffvf73/9Pefnyhw8fmC/NucPTeus/UzxFq1dt6nLz5s2qqirqO9WT
SuGPiE4onbM6C/Bj4DSYRCLI5EOz/AuqnTlzhtyBaYmyLiqB+S41WpKI5AI+
Fy1aJD2W/FbXVg2T+oOZXzqQlpoeKX2Y2UKRb2kdUAGhO4zYkSNHME0UuY8/
/pjQUvz0KL9dCDPaJiC0/igJFDZiJ5NedGl5c/vkBySBjGcpzAs57cK284wX
jHn9013/mOfC2wA062e8QWCeM0fPS3l9GyObC2yDGC+wNy/Zx3sO8jnUF7bd
capw/xX+mV+hG4J5wYwXjnl9UNfs0Vhbc2tbc0uAFmBeKRoN2g6D+E0NBfTZ
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
ybCwPkarccazfAqqDb7y0Pp41p49e3b06FFg7alTp/r6+ihV5oiQuK8qdLv7
fL5Dhw61tLQ8fPiQjl86+JLRAV02x0xVFcAbMeJB6HjG8Gjzn/Ar6P5uoQPA
6T9+/PiHH37AOyYYD28WhPRVqzGWduXPr+nUYR5lO6GpZvXZZotsiT3m2ZCe
wnji2LwSG4aXlwS64zJjnt3YPAXwKNLWJqFKo4zHpjMz0x1XTFSaKaPI5MHT
6Y5LwLxYDfNiEulF3+pIW7OEucksMc8XEbIfB8yY5x9mQRaDkId5755VhdHv
ktEKbho4z14ro2sEruvq6tq9e3dTUxOa0Zs3b3Z3d0ciEUp/rfZX0m85bknw
IP538oz2AkgbHBwcGhqi5Bt8xo0Rm3kTKmyS5QsXLmzZsoXyJN+6dWtgYIBC
aCs2QShiCVTsvUYuSUNrBPPoZMtsVg7Q2v79+wGoZ8+exVnzeTfUB1MzRtKe
P38ep0kJVYhY+PGX2USBZSPFuia8ylladXyY53Du6mW1XB6Px4F5gPOenh7K
98L/ZYfoqlle0wnBPJXxdGXL9YFzYp4TJ8xTcU5XJg0VVWXTpZyuIvPdCRLH
41lgnoUsWK6WVmUsRGcpCfOSgjjykYPOBIHC8roHT1U0RYwXicSgKPvUFY5H
anj21ubNM00766vNZBGo/SljHv+vEn8R8A0GGOYFBweggJ08zHtbbdQ2d9TW
zbPX06jFDIVC4J+tW7du3rx5+/btly5dCofDJXNmFUvMs7ziY4O3hmxEiNHQ
lBAGyY+nGT4usA2AAVh76tQpkO2ePXtAQQBFEYFUHhDdfdoUYh6tnE6nHzx4
0N7efvTo0Xv37sVi+mSyPBGK3cmChe7fv9/c3Lxt27a+vj7amgg8KAoCPH6E
0gbF0taUoGD3pyAWgri1ilWOl7LVkA+NuZ1RDplMhoaIVI2J6ipKD4KDTQjm
ufHjUTbjqcW8QtYy5kJgvEYxz8iel805akIwry4COavlFmgnKM4wLxrVMS8M
uosamBd56zDPYgxeHe0C48W8oId576w5NLjiag6tm2evm1WFkBlgAz6Hh4fv
3Llz+fJl4EQkEikZE528bphH/rqff/75F2Y8QID/19IfRT2wGiPbfD4fDAZ7
mBHQVoUXFpHrJIrQphDzaO/JZBJcevfuXeAoDpsHv4iloWJemc1pe+jQoRUr
Vhw7dowmB+GFQIDHi0W6ZBOLedL9xvlcAi1TDhPzzSZeBU0Ae4nAR7Wpwbwc
ZTOuMd5kY14xl5Iwz9aVNzbMI5bLR7MFQ3mmycU8K5mgTlEsmopGE5FoPGxg
XjgaY9/fQsxTxuB5mOfZBJhdgyutZte0efYaGr9G1OpVWZgqqIkS42iKa0ts
djVh/lAOP3zL46Q4ZyNUEJO50U5HhIR7EvmQVYypW2h9/BxnSpQo3dLOnNYA
3lk9COpT42zc88ZDLcTzklBWXI6fgA9bWloWL168f//+Bw8e9Pf3DwwM4NPn
81EmlhEjTbTDVdPMaDfmp1vaZtkY9wgrGAaOxafEe2UjDki8fPxgJh/zGOO9
ppgnevPqI/F0TTTmiRqN8TKq0kymflgbxtPH2o3qu3PAPKI7E+bFX1fMizYm
w5Vn0VGrD7RTZYV5w7WV/Qbm+QTMG/I6bT0bzRxaN89eW1MvlghvZWH6M81M
KWrzqm58jDA3mvGgWjXUwmF0GYUMq+tISKOSg1o40vJRy0EskIYujboXqWxH
7AfNZrPZx48f79y5c8mSJcuWLWtqagL1ff/998ePH7937146nR6xSkEsbmHC
rSr0oYuAR1Y0m+hPpiWWXj4HGyfmGWaNeXbdtVPpzcumoEIN8Ayoq2OewHhj
7rRV+20dvXZqkKwRRRuz8eCJPbMsnsJaDWEeUygSDYVjYR3DXsNZMKLBQIMy
A57glwOzWYjhXERSfYUhA/D0AFs9xlYfmGdPdx7meUbmYd6baHaYJzWOFbM3
TzNjnt3GJ57wDLZR06fwf1lSnGaED6vrSFRTUcyucOx+4lDaDeGTG8xzLiWc
ciAQuHv37okTJ75nduzYsc7Ozu7ubkpnPQWPqlqe3EGnmgh1EuaVzPHCozKe
gzXCeCVy6BUK5UK+MkrYRY5moS2TCpOMeZlUMZMs6NnwhOR4E4V5mdq0tvUu
V9JoqfPGi3lxK7nGvEQ4EhcwL/ZWYp7cP+thnmdTaB7mvR2mNsqqN69iHkJv
t6nJYDxuvB9TBBtLzLM7Kst1nG/jqcS8MZi0/RFhXGI+nwfa5XI56hud1MMQ
TQUzjm2N2oRg22hQZ8GeRZ3xrDGvAGUtVaacKlOEeSLOTQjmsZwqNKAuaRaW
pBOvIeYlDcyrKRSOe5jnYZ5nE2se5r0dZul+qSidtm4u96RiXlXpsnTAPH7k
6vr0XTov6Sycz/q1xTxu4OFffvmFwjekYY3jssoogxU1q/jlNwrzdG9eoVAC
5hXzlWJeKxLpEeAxFbOW4phXFBjPwLysNeaJqpNeupSlLlpJHPOSRHRZLt25
lzItqS1P2MgYPieo5r6zxjxHb56QAa+uZHw0jYJ5dcUVGZiXDEcSXMC8MOSE
eYmIjRjUxVUxqIupCjc+1i4YiDQmhnlW0RbWmKeTni9iVpj/Sx+Mx0iPAZ6H
eZ555plnnhlW0apMWrlCqpTKusplvqT+rzEh2dggsCF+s/tvoaAKjKc79EoF
jcR4r6ZSjilb5ioaMmbBEFUucMyTpPj3dNijIIsUVFSVTRUElx0oLsOVspK+
PJFONyAT76XNXbd2MbaMDDOM3FKiEnaKjR5zIeFfzErRSBKKRBKRcE3EeBOr
ifPOuZjGQlHAWmG/rwH5wHjDoeGh4JA+54UoPf7CTh7meeaZZ569I1a1wTyt
NArmTTi52SGcG3PEvJIsM+aVzIxXFiTCnjHfmVmuMS/PGA+f+RRUVJUjzKv1
z5oxL2UlhnkNKa3HybqdCCNTdwBmdH5LuFO8Ycyz7rQlzAu/GswLvpGYF1Dk
YZ5nnnnm2btuEubVXHn2mkS8myDME5fbYl6t05bJYDZ8KeXKrjDPGu30Ccu4
ZNIT/HgG2hW4csl8NimOvnuHMM/WlRc2KRxKGPIwz8M8zzzzzDPPXJmKeeVi
CapAHuZNLOalWf9sssCUzyVzgoB5fPSdh3mWmJf0MM+O9DzM88wzzzzzjJsp
qkLskyWQY5hnp9LEj7ObMMxTl0uYl88XdeWKhRwjPXMPLP4sCqPydLrLlGrK
lpwYzwx4jpinA14+kc8ns/lkxlA2n8hla2gnxVm8WsyjiNq0W8yLJ2tj82yC
L2qKJGOirDCPddSKaJcIBaE404RNRdE4zr12mMe9eUwBaGjIwzzPPPPMs3fX
5ODZdxXzVGzDF+CcE+bV8ySbhuGpjAeic8S8HMO8NJMl5pm6bt8UzIuPCfOi
iijyQuilnTTMmxjGGwvm2TDeODGvDnvMv/dmY56X5cMzzzzzbAzmYd4YMK+g
S06ZUguhTZcsZRWCQZ221F2bzSUzhvA9Z+605Zin6w3DPGfGc4N54TcP8+yx
rVE12mkbYqQXlDQ8/LZhnpg7S1yiGYmnJju9lWeeeebZ62y2qfDeZcxjaJd3
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
BufEgAVRMYpfsFY4Gg6pQafRUCganGQFZJarQ50vICkMAfB8/iBTwCwT2w3X
zKePePNxhHOQb8hP8g/5A0NBDnj+gQDJN6DHq3Ki6xe8av391gPe7MXIzUp9
fQOkfuNTT0yH7+IYOReBq8wdJ9Oa2tOq95MqMPZCkchpOtHp6u1+3vtcULeZ
+iz13PwTS0045uVZcAS4rqenp6WlZcWKFSC3HOvJpTBV1Dn0JovvwLy1a9d+
8cUX27Zt2759+/Lly5csWYLPpqamWbNm/fGPfwQBYoX29vbm5ubp06fv3r2b
5jvLmZMtq6RnWW3yH+JgKBYD3wnzcuZu31gsduXKlb179964cSMSifBh0mJf
rfirMdfznnnm2TtrrxLzWPfl64d5tClVbyLmWeQWeeMwjxEdadg3VNMbinmS
Xr4caCg/yRgwT6W7twDz8kY/JiAKCHfs2LFFixZt3br13r17AwMDILRAIIDl
qMHyrN8W39etW4d1Hj16FI1Ge3t7Ozo6jh49un///oULF3766adtbW3d3d2o
dy5evIgl33//Pc1dmzMHcbjEPPFfDr2uOeZ1BN0Fg0HsmtOdJdF5mOeZZ56N
zaYQ82QZg9aUfyVI6ZTer5oxcpgYshkONwbMS1lhXooUt1CSemMN6SznIGBe
XGC8uCB7zIuzKSHkqNU65oVVxWwUDYf0nL+qLKgMCtsr1LjcYl5YwDxOeqIC
wybM8w8ZGvaPAfMg/2AA8g36fQNMg/4hPeShNhlEv961ygfFAdts1GejsWBe
A+p90T9xmGfuYKUu2jFhXve4Mc9yxIiDkY8OtRC+o255+vTp7t27ly1btmLF
iubm5u3bt7e3t3d2dgLnaB1Q35IlS+bMmfP48WPyAVL4A1gOK69Zs+b+/fs5
lkDv8uXLoEFsbfD/b+/NeyO5rvv9lxnghyDIP0ESJEjseLdsRbIkJ0jk2Ioi
O7ElOAkszQw5w7337uqutZfqvZvNZTbZUvB9G7977lZ3ra5qkrP5fvCA7n1I
Aio/PPeec5fL/xNKefwyyPeViFdIJcT0yA1+jf0/be2VP55/ZRZfVvYX5eLi
4vK1IHjS5ribrrqqhbvnCnTHmhHb6V2EPyDdMvEHRv7bC3zUU8TXMl89f/LV
c1ymg4Nenz4vBjn7y5Qn9rlzrEbHwU0N10+vrow8gaNYjVw8Np/PesEF7zE0
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
kjI=
    "], {{0, 194.41684946028653`}, {507.0439438084633, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{119.98960000000002`, 119.98960000000002`},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{507.0439438084633, 194.41684946028653`},
  PlotRange->{{0, 507.0439438084633}, {0, 194.41684946028653`}}]], "Input",
 CellID->73731485,ExpressionUUID->"756b6986-4d08-493a-bbcb-a67de2b30c4d"],

Cell["\<\
I use the following variable assignments, but its basically the same problem:\
\>", "Text",
 CellChangeTimes->{{3.8748581361086807`*^9, 3.874858148520914*^9}},
 CellID->99000448,ExpressionUUID->"c177f455-4f93-4dfd-ba1e-52c394271f76"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"u", ",", "v", ",", "w"}], "}"}], "/.", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"u", ",", "v", ",", "w", ",", "x", ",", "y", ",", "z"}], "}"}], "->", 
    RowBox[{"{", 
     RowBox[{"s", ",", "t", ",", "v", ",", "w", ",", "x", ",", "z"}], "}"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.874858054768902*^9, 3.874858058081725*^9}},
 CellLabel->"In[228]:=",
 CellID->400047158,ExpressionUUID->"f8c66b14-8afd-4266-85e9-b947f32bc66f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"s", ",", "t", ",", "v"}], "}"}]], "Output",
 CellChangeTimes->{3.8748580584744344`*^9},
 CellLabel->"Out[228]=",
 CellID->6412769,ExpressionUUID->"accf4133-0fa0-47d6-acdf-888ce4f0c2f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", ",", "t", ",", "v"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox["s", "3"], "+", 
        SuperscriptBox["t", "3"], "+", 
        SuperscriptBox["v", "3"]}], "\[Equal]", 
       RowBox[{"w", "+", "x", "+", "z"}]}], ",", 
      RowBox[{
       RowBox[{
        SuperscriptBox["s", "2"], "+", 
        SuperscriptBox["t", "2"], "+", 
        SuperscriptBox["v", "2"]}], "\[Equal]", 
       RowBox[{
        SuperscriptBox["w", "3"], "+", 
        SuperscriptBox["x", "3"], "+", 
        SuperscriptBox["z", "3"]}]}], ",", 
      RowBox[{
       RowBox[{"s", "+", "t", "+", "v"}], "\[Equal]", 
       RowBox[{
        SuperscriptBox["w", "2"], "+", 
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["z", "2"]}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "t", ",", "v"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"w", ",", "x", ",", "z"}], "}"}], "}"}]}], "]"}], "//", 
  "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748580998292637`*^9, 3.874858119024668*^9}, {
  3.874858155470401*^9, 3.8748581565541563`*^9}},
 CellLabel->"In[233]:=",
 CellID->316484889,ExpressionUUID->"9b3c4160-0cad-4dcf-9048-203285cf44d5"],

Cell[BoxData[
 FormBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "w"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["w", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["w", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "x"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["x", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["x", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "z"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["z", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["z", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]]},
     {
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "w"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["w", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["w", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "x"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["x", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "z"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["z", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]]},
     {
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "w"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["w", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["w", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "x"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["x", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "z"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["z", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{
  3.8748581193505087`*^9, {3.87485815093272*^9, 3.8748581568842087`*^9}},
 CellLabel->"Out[233]//TraditionalForm=",
 CellID->270995229,ExpressionUUID->"eebe0750-8af5-4976-92c3-4f188c07f1ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Det", "[", 
    RowBox[{"ImplicitD", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s", ",", "t", ",", "v"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          SuperscriptBox["s", "3"], "+", 
          SuperscriptBox["t", "3"], "+", 
          SuperscriptBox["v", "3"]}], "\[Equal]", 
         RowBox[{"w", "+", "x", "+", "z"}]}], ",", 
        RowBox[{
         RowBox[{
          SuperscriptBox["s", "2"], "+", 
          SuperscriptBox["t", "2"], "+", 
          SuperscriptBox["v", "2"]}], "\[Equal]", 
         RowBox[{
          SuperscriptBox["w", "3"], "+", 
          SuperscriptBox["x", "3"], "+", 
          SuperscriptBox["z", "3"]}]}], ",", 
        RowBox[{
         RowBox[{"s", "+", "t", "+", "v"}], "\[Equal]", 
         RowBox[{
          SuperscriptBox["w", "2"], "+", 
          SuperscriptBox["x", "2"], "+", 
          SuperscriptBox["z", "2"]}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", "t", ",", "v"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"w", ",", "x", ",", "z"}], "}"}], "}"}]}], "]"}], "]"}], "//",
    "Simplify"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874858162497244*^9, 3.874858179671462*^9}},
 NumberMarks->False,
 CellLabel->"In[236]:=",
 CellID->274752554,ExpressionUUID->"2d2c42db-1ef2-45de-89ed-6eccb9e08f66"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"w", "-", "x"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"w", "-", "z"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"x", "-", "z"}], ")"}]}], 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"s", "-", "t"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"s", "-", "v"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"t", "-", "v"}], ")"}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.8748581597272863`*^9, 3.874858179940608*^9}},
 CellLabel->"Out[236]//TraditionalForm=",
 CellID->225667379,ExpressionUUID->"329c6632-3c78-45d3-b0d7-a356dc2ebfb9"]
}, Open  ]],

Cell["\<\
Solve an implicit differentiation problem with four variables:\
\>", "Text",
 CellChangeTimes->{{3.874860188010688*^9, 3.8748601985029964`*^9}},
 CellID->19738407,ExpressionUUID->"df57194f-f26b-4ad0-b6a4-e9cae9bdc45f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ImplicitD", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"s", ",", "t", ",", "v", ",", "b"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox["s", "3"], "+", 
        SuperscriptBox["t", "3"], "+", 
        SuperscriptBox["v", "3"]}], "\[Equal]", 
       RowBox[{"w", "+", "x", "+", "z"}]}], ",", 
      RowBox[{
       RowBox[{
        SuperscriptBox["s", "2"], "+", 
        SuperscriptBox["t", "2"], "+", 
        SuperscriptBox["v", "2"]}], "\[Equal]", 
       RowBox[{
        SuperscriptBox["w", "3"], "+", 
        SuperscriptBox["x", "3"], "+", 
        SuperscriptBox["z", "3"]}]}], ",", 
      RowBox[{
       RowBox[{"s", "+", "t", "+", "v"}], "\[Equal]", 
       RowBox[{
        SuperscriptBox["w", "2"], "+", 
        SuperscriptBox["x", "2"], "+", 
        SuperscriptBox["z", "2"]}]}], ",", 
      RowBox[{
       RowBox[{
        SuperscriptBox["b", "3"], "+", 
        SuperscriptBox["t", "3"], "+", 
        SuperscriptBox["v", "3"]}], "\[Equal]", 
       RowBox[{"w", "+", "x", "+", "z", "+", "c"}]}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"s", ",", "t", ",", "v", ",", "b"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{"w", ",", "x", ",", "z", ",", "c"}], "}"}], "}"}]}], "]"}], "//",
   "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.874859694216258*^9, 3.874859739394994*^9}, {
  3.8748602116627855`*^9, 3.8748602154092164`*^9}},
 CellLabel->"In[308]:=",
 CellID->106186386,ExpressionUUID->"cd491ffd-cd25-44d7-8c4b-67688afc5fd5"],

Cell[BoxData[
 FormBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "w"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["w", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["w", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "x"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["x", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["x", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", "t", " ", "v", " ", "z"}], "-", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["z", "2"]}], "-", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["z", "2"]}], "+", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], "0"},
     {
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "w"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["w", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["w", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "x"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["x", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "v", " ", "z"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"9", " ", "v", " ", 
         SuperscriptBox["z", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"t", "-", "v"}], ")"}]}]], "0"},
     {
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "w"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["w", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["w", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "x"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["x", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"-", 
         RowBox[{"12", " ", "s", " ", "t", " ", "z"}]}], "+", 
        RowBox[{"9", " ", "s", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"9", " ", "t", " ", 
         SuperscriptBox["z", "2"]}], "-", "2"}], 
       RowBox[{"6", " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"v", "-", "t"}], ")"}]}]], "0"},
     {
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", "v", " ", "w"}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", 
         SuperscriptBox["w", "2"]}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "v", " ", 
         SuperscriptBox["w", "2"]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["s", "2"]}]}], 
       RowBox[{"6", " ", 
        SuperscriptBox["b", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", "v", " ", "x"}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", 
         SuperscriptBox["x", "2"]}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "v", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["s", "2"]}]}], 
       RowBox[{"6", " ", 
        SuperscriptBox["b", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox[
       RowBox[{
        RowBox[{"12", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", "v", " ", "z"}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "t", " ", 
         SuperscriptBox["z", "2"]}], "-", 
        RowBox[{"9", " ", 
         SuperscriptBox["s", "2"], " ", "v", " ", 
         SuperscriptBox["z", "2"]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["s", "2"]}]}], 
       RowBox[{"6", " ", 
        SuperscriptBox["b", "2"], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "t"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"s", "-", "v"}], ")"}]}]], 
      FractionBox["1", 
       RowBox[{"3", " ", 
        SuperscriptBox["b", "2"]}]]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.874859700275516*^9, 3.87485973973729*^9}, {
  3.874860207463747*^9, 3.874860215973784*^9}},
 CellLabel->"Out[308]//TraditionalForm=",
 CellID->302702088,ExpressionUUID->"767060a1-c8bf-4480-a4e1-6144f82842ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Det", "[", 
    RowBox[{"ImplicitD", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s", ",", "t", ",", "v", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{
          SuperscriptBox["s", "3"], "+", 
          SuperscriptBox["t", "3"], "+", 
          SuperscriptBox["v", "3"]}], "\[Equal]", 
         RowBox[{"w", "+", "x", "+", "z"}]}], ",", 
        RowBox[{
         RowBox[{
          SuperscriptBox["s", "2"], "+", 
          SuperscriptBox["t", "2"], "+", 
          SuperscriptBox["v", "2"]}], "\[Equal]", 
         RowBox[{
          SuperscriptBox["w", "3"], "+", 
          SuperscriptBox["x", "3"], "+", 
          SuperscriptBox["z", "3"]}]}], ",", 
        RowBox[{
         RowBox[{"s", "+", "t", "+", "v"}], "\[Equal]", 
         RowBox[{
          SuperscriptBox["w", "2"], "+", 
          SuperscriptBox["x", "2"], "+", 
          SuperscriptBox["z", "2"]}]}], ",", 
        RowBox[{
         RowBox[{
          SuperscriptBox["b", "3"], "+", 
          SuperscriptBox["t", "3"], "+", 
          SuperscriptBox["v", "3"]}], "\[Equal]", 
         RowBox[{"w", "+", "x", "+", "z", "+", "c"}]}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", "t", ",", "v", ",", "b"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"w", ",", "x", ",", "z", ",", "c"}], "}"}], "}"}]}], "]"}], 
    "]"}], "//", "Simplify"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.8748597403346677`*^9, 3.874859777799775*^9}, {
  3.8748602201325784`*^9, 3.8748602278331757`*^9}},
 CellLabel->"In[309]:=",
 CellID->3758324,ExpressionUUID->"d10be09e-2568-4ac2-a820-088aa0797497"],

Cell[BoxData[
 FormBox[
  FractionBox[
   RowBox[{
    RowBox[{"(", 
     RowBox[{"w", "-", "x"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"w", "-", "z"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"x", "-", "z"}], ")"}]}], 
   RowBox[{"3", " ", 
    SuperscriptBox["b", "2"], " ", 
    RowBox[{"(", 
     RowBox[{"s", "-", "t"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"s", "-", "v"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{"t", "-", "v"}], ")"}]}]], TraditionalForm]], "Output",
 CellChangeTimes->{{3.8748597439715605`*^9, 3.874859778258005*^9}, 
   3.8748602281266117`*^9},
 CellLabel->"Out[309]//TraditionalForm=",
 CellID->64563468,ExpressionUUID->"12aca722-bfca-425e-8077-d5fff2822690"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ImplicitD", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{"x", " ", "y"}], "]"}], "==", 
    RowBox[{
     SuperscriptBox["x", "6"], "-", "6"}]}], ",", "x", ",", "y"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875105907888158*^9, 3.87510592481075*^9}},
 CellLabel->"In[27]:=",
 CellID->465434395,ExpressionUUID->"ea992eac-6694-43c0-9424-773bd6da9efe"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox[
   RowBox[{"x", " ", 
    RowBox[{"Sin", "[", 
     RowBox[{"x", " ", "y"}], "]"}]}], 
   RowBox[{
    RowBox[{"6", " ", 
     SuperscriptBox["x", "5"]}], "+", 
    RowBox[{"y", " ", 
     RowBox[{"Sin", "[", 
      RowBox[{"x", " ", "y"}], "]"}]}]}]]}]], "Output",
 CellChangeTimes->{3.8751059252108035`*^9},
 CellLabel->"Out[27]=",
 CellID->219332291,ExpressionUUID->"f94484db-3f6a-489f-871a-c0dd66455c33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"x", " ", "y"}], "]"}], "==", 
      RowBox[{
       SuperscriptBox["x", "6"], "-", "6"}]}], ",", "x", ",", "y"}], "]"}], "//",
    "Simplify"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.875105907888158*^9, 3.8751059311122026`*^9}},
 CellLabel->"In[28]:=",
 CellID->200298391,ExpressionUUID->"d517c824-7721-4383-a4b6-cd1e83ff9470"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{"x", " ", 
     RowBox[{"sin", "(", 
      RowBox[{"x", " ", "y"}], ")"}]}], 
    RowBox[{
     RowBox[{"6", " ", 
      SuperscriptBox["x", "5"]}], "+", 
     RowBox[{"y", " ", 
      RowBox[{"sin", "(", 
       RowBox[{"x", " ", "y"}], ")"}]}]}]]}], TraditionalForm]], "Output",
 CellChangeTimes->{3.875105931395339*^9},
 CellLabel->"Out[28]//TraditionalForm=",
 CellID->136109088,ExpressionUUID->"6a5a732e-9eea-4dd2-8bb6-5d905aef708d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Cos", "[", 
       RowBox[{"x", " ", "y"}], "]"}], "==", 
      RowBox[{
       SuperscriptBox["x", "6"], "-", "6"}]}], ",", "y", ",", "x"}], "]"}], "//",
    "Simplify"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.875105907888158*^9, 3.875105940640642*^9}},
 CellLabel->"In[29]:=",
 CellID->139691264,ExpressionUUID->"202aad74-6dd0-4a56-ab3c-38bd91a98b8b"],

Cell[BoxData[
 FormBox[
  RowBox[{"-", 
   FractionBox[
    RowBox[{
     RowBox[{"6", " ", 
      SuperscriptBox["x", "5"], " ", 
      RowBox[{"csc", "(", 
       RowBox[{"x", " ", "y"}], ")"}]}], "+", "y"}], "x"]}], 
  TraditionalForm]], "Output",
 CellChangeTimes->{3.875105940972559*^9},
 CellLabel->"Out[29]//TraditionalForm=",
 CellID->122710668,ExpressionUUID->"1db74798-8d0f-4fca-8c31-dedd9011a7b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ImplicitD", "[", 
    RowBox[{
     RowBox[{"y", "==", 
      RowBox[{"Cos", "[", 
       RowBox[{"Sec", "[", 
        SuperscriptBox["x", "2"], "]"}], "]"}]}], ",", "y", ",", "x"}], "]"}],
    "//", "Simplify"}], "//", "TraditionalForm"}]], "Input",
 CellChangeTimes->{{3.875106008871227*^9, 3.875106035112548*^9}},
 CellLabel->"In[31]:=",
 CellID->99385821,ExpressionUUID->"65a79aad-5021-4dde-8943-f12ab1648c2b"],

Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{"-", "2"}], " ", "x", " ", 
   RowBox[{"tan", "(", 
    SuperscriptBox["x", "2"], ")"}], " ", 
   RowBox[{"sec", "(", 
    SuperscriptBox["x", "2"], ")"}], " ", 
   RowBox[{"sin", "(", 
    RowBox[{"sec", "(", 
     SuperscriptBox["x", "2"], ")"}], ")"}]}], TraditionalForm]], "Output",
 CellChangeTimes->{{3.875106027416111*^9, 3.8751060353835907`*^9}},
 CellLabel->"Out[31]//TraditionalForm=",
 CellID->181167192,ExpressionUUID->"02079e80-8406-4e14-bc21-df48151808d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["implicit differentiation", "WolframAlphaLong",
 CellChangeTimes->{{3.875106061390598*^9, 3.8751060690070176`*^9}},
 CellLabel->"In[32]:=",
 CellID->346228169,ExpressionUUID->"d328e080-6c03-4c5b-9f4d-b55d6d937843"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "implicit differentiation", 
   Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    InputAssumptions -> {
     "{\"F\", \"ImplicitDerivative\", \"derivativefunction\"} -> \
\"y=cos(sec(x^2))\"", 
      "{\"F\", \"ImplicitDerivative\", \"derivativevariable\"} -> \"x\""}, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ResourceFunction[\"ImplicitD\"][y == Cos[Sec[x^2]], D[y, x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"differentiate\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    TagBox[
                    TagBox[
                    RowBox[{"y", "\[LongEqual]", 
                    TagBox[
                    RowBox[{"cos", "(", 
                    RowBox[{"sec", "(", 
                    SuperscriptBox["x", "2"], ")"}], ")"}], Identity]}], 
                    HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    StyleBox["\"with respect to\"", {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], "x"}}, GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None, None, None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "sec(x) is the secant function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Sec.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Sec", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Secant.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Result", "scanner" -> "Derivative", "id" -> "Result", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Solve[Dt[y[x] == Cos[Sec[x^2]], x], y'[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                "(", "x", ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 RowBox[{"-", "2"}], " ", "x", " ", 
                 RowBox[{"tan", "(", 
                   SuperscriptBox["x", "2"], ")"}], " ", 
                 RowBox[{"sec", "(", 
                   SuperscriptBox["x", "2"], ")"}], " ", 
                 RowBox[{"sin", "(", 
                   RowBox[{"sec", "(", 
                    SuperscriptBox["x", "2"], ")"}], ")"}]}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Result__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate forms", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "3"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             RowBox[{
               RowBox[{
                 SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                 "(", "x", ")"}], "\[LongEqual]", 
               TagBox[
                RowBox[{"-", 
                  FractionBox[
                   RowBox[{"2", " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    SuperscriptBox["x", "2"], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox["1", 
                    RowBox[{"cos", "(", 
                    SuperscriptBox["x", "2"], ")"}]], ")"}]}], 
                   RowBox[{
                    SuperscriptBox["cos", "2"], "(", 
                    SuperscriptBox["x", "2"], ")"}]]}], Identity]}], 
             HoldForm], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,moutput,computabledata,formatteddata,formuladata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigReduce[y'[x] == -2 x Sec[x^2] Sin[Sec[x^2]] Tan[x^2]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                "(", "x", ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "-", 
                    RowBox[{"sec", "(", 
                    SuperscriptBox["x", "2"], ")"}]}], ")"}]}], "-", 
                    RowBox[{"x", " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", 
                    RowBox[{"sec", "(", 
                    SuperscriptBox["x", "2"], ")"}]}], ")"}]}]}], ")"}]}], 
                  RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}], ")"}], "+", "1"}]]}], 
               Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigToExp[y'[x] == -2 x Sec[x^2] Sin[Sec[x^2]] Tan[x^2]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                "(", "x", ")"}], "\[LongEqual]", 
              FractionBox[
               RowBox[{"2", " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[ImaginaryI]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SuperscriptBox["x", "2"]}]], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}]]}], ")"}]}]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"2", " ", "\[ImaginaryI]"}], ")"}], "/", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SuperscriptBox["x", "2"]}]], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}]]}], ")"}]}]]}], ")"}], " ", 
                 RowBox[{"(", 
                   RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SuperscriptBox["x", "2"]}]], "-", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}]]}], ")"}], " ", "x"}], 
               SuperscriptBox[
                RowBox[{"(", 
                  RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SuperscriptBox["x", "2"]}]], "+", 
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SuperscriptBox["x", "2"]}]]}], ")"}], "2"]]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate form assuming x is real", "scanner" -> 
     "Simplification", "id" -> "AlternateFormAssumingAllVariablesAreReal", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "ComplexExpand[y'[x] == -2 x Sec[x^2] Sin[Sec[x^2]] Tan[x^2]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                SuperscriptBox["y", "\[Prime]", MultilineFunction -> None], 
                "(", "x", ")"}], "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox[
                  RowBox[{"4", " ", "x", " ", 
                    RowBox[{"sin", "(", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}], ")"}], " ", 
                    RowBox[{"cos", "(", 
                    SuperscriptBox["x", "2"], ")"}], " ", 
                    RowBox[{"sin", "(", 
                    FractionBox[
                    RowBox[{"2", " ", 
                    RowBox[{"cos", "(", 
                    SuperscriptBox["x", "2"], ")"}]}], 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}], ")"}], "+", "1"}]], ")"}]}], 
                  SuperscriptBox[
                   RowBox[{"(", 
                    RowBox[{
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["x", "2"]}], ")"}], "+", "1"}], ")"}], 
                   "2"]]}], Identity]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
   Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False, False, False}, True}, Typeset`aux4$$ = {
   True, False, {False}, True}, Typeset`aux5$$ = {True, False, {False}, True},
    Typeset`aux6$$ = {True, False, {False}, True}, Typeset`aux7$$ = {
   True, False, {False}, True}, Typeset`aux8$$ = {True, False, {False}, True},
    Typeset`aux9$$ = {True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "3"}, {
      XMLElement[
      "assumption", {
       "type" -> "Clash", "word" -> "implicit differentiation", "template" -> 
        "Assuming \"implicit differentiation\" refers to a \
computation${separator}Use as ${desc} or ${desc} instead", "count" -> "3", 
        "pulldown" -> "false", "default" -> 
        "{\"C\", \"implicit differentiation\"} -> {\"Calculator\", \
\"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Calculator", "desc" -> "a computation", "input" -> 
          "{\"C\", \"implicit differentiation\"} -> {\"Calculator\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "MathWorld", "desc" -> 
          " referring to a mathematical definition", "input" -> 
          "{\"C\", \"implicit differentiation\"} -> {\"MathWorld\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "ExamplePage", "desc" -> "a general topic", "input" -> 
          "{\"C\", \"implicit differentiation\"} -> {\"ExamplePage\"}"}, \
{}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> 
        "function to differentiate:${field}", "count" -> "1", "pulldown" -> 
        "false", "current" -> "1", "default" -> 
        "{\"F\", \"ImplicitDerivative\", \"derivativefunction\"} -> \
\"y=cos(sec(x^2))\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "ImplicitDerivative.derivativefunction",
           "desc" -> "y=cos(sec(x^2))", "input" -> 
          "{\"F\", \"ImplicitDerivative\", \"derivativefunction\"} -> \
\"y=cos(sec(x^2))\""}, {}]}], 
      XMLElement[
      "assumption", {
       "type" -> "FormulaVariable", "template" -> 
        "differentiation variable:${field}", "count" -> "1", "pulldown" -> 
        "false", "current" -> "1", "default" -> 
        "{\"F\", \"ImplicitDerivative\", \"derivativevariable\"} -> \"x\""}, {
        XMLElement[
        "value", {
         "valid" -> "true", "name" -> "ImplicitDerivative.derivativevariable",
           "desc" -> "x", "input" -> 
          "{\"F\", \"ImplicitDerivative\", \"derivativevariable\"} -> \
\"x\""}, {}]}]}]}, Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True],
    Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "4", "datatypes" -> "D", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "3.465", "parsetiming" -> "0.611", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa2413149cc21ge3215cff0000647i8ia7d9a77gg88350669649384844499", "id" -> 
     "MSP2414149cc21ge3215cff00000g5gcg20a5ggfeia", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "16", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa2415149cc21ge3215cff000058hfidcc5fh1ebdg8350669649384844499", "version" -> 
     "2.6", "inputstring" -> "implicit differentiation"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "0", "datatypes" -> "D", "timedout" -> "Recurrence", 
     "timedoutpods" -> "", "timing" -> "3.676", "parsetimedout" -> "false", 
     "recalculate" -> "", "id" -> "", "parseidserver" -> "19", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "19", "related" -> "", 
     "version" -> "2.6", "inputstring" -> "implicit differentiation"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 10, 18, 14, 21, 35.0797713`9.297631647048577}, "Line" -> 
    33, "SessionID" -> 20912553927900568855}, Typeset`showpods$$ = {1, 2, 3, 
   4}, Typeset`failedpods$$ = {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
   18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "implicit differentiation"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1362., {682.3544921875, 687.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$}, Typeset`chosen$$, Typeset`open$$,
          Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
         Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
         Typeset`failedpods$$, Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa2413149cc21ge3215cff0000647i8ia7d9a77gg88350669649384844499", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.8751060701610637`*^9},
 CellID->60829790,ExpressionUUID->"7a37e633-0359-4057-8433-d853489218bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   SqrtBox[
    RowBox[{
     RowBox[{"2", "x"}], "+", "7"}]], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8751069691119194`*^9, 3.875106974577918*^9}, 
   3.875107005493224*^9},
 CellLabel->"In[36]:=",
 CellID->135240112,ExpressionUUID->"f3aff372-6529-4504-bd33-04a867411ab4"],

Cell[BoxData[
 FractionBox["1", 
  SqrtBox[
   RowBox[{"7", "+", 
    RowBox[{"2", " ", "x"}]}]]]], "Output",
 CellChangeTimes->{3.8751069749760284`*^9, 3.8751070060664916`*^9},
 CellLabel->"Out[36]=",
 CellID->66690203,ExpressionUUID->"aa8b0e33-347c-4ccd-9f4e-9c7c8264e0a4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{"4", 
   RowBox[{"Log", "[", 
    RowBox[{
     SuperscriptBox["x", "2"], 
     SuperscriptBox["\[ExponentialE]", "x"]}], "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8751069825741997`*^9, 3.8751069920282364`*^9}},
 CellLabel->"In[35]:=",
 CellID->156031519,ExpressionUUID->"3ed8ebdc-e15a-42f2-8328-4882fa8503a1"],

Cell[BoxData[
 RowBox[{"4", " ", 
  RowBox[{"Log", "[", 
   RowBox[{
    SuperscriptBox["\[ExponentialE]", "x"], " ", 
    SuperscriptBox["x", "2"]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.875107016086117*^9, 3.875107025114768*^9}},
 CellID->113494516,ExpressionUUID->"a0eafa53-59ad-47be-a74f-5e858318e933"],

Cell[CellGroupData[{

Cell[TextData[{
 "d/dx ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{
     RowBox[{"2", "x"}], "+", "7"}]], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "6ff15448-1694-411d-b6e1-99c12d271322"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8751070268210154`*^9, 3.875107031770809*^9}},
 CellLabel->"In[37]:=",
 CellID->382477971,ExpressionUUID->"afda2874-ae1e-4e9e-82e6-f55590d31cef"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dx Sqrt[2 x + 7]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[Sqrt[2 x + 7], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              TagBox[
               FractionBox["1", 
                SqrtBox[
                 RowBox[{
                   RowBox[{"2", " ", "x"}], "+", "7"}]]], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]], ")"}]}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    SqrtBox["u"]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    TraditionalForm]}], "\",\"", "\" \""}, "RowDefault"], 
                    "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]}]}, 
                    "RowWithSeparators"], "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    SqrtBox["u"], ")"}]}], "\[LongEqual]", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox["u"]}]]}]}, "RowWithSeparators"], HoldForm], 
                    "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    FractionBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}]}], TraditionalForm], 
                    RowBox[{"2", " ", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]}]], TraditionalForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term \"", "\"and \"", "\"factor \"", 
                    "\"out \"", "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "7", ")"}]}], TraditionalForm], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}]}], ")"}], 
                    FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]}]]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"7", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], ")"}]}], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], 
                    RowBox[{"2", " ", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]}]]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], HoldForm]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    FractionBox["1", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]]}, "RowDefault"]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1/Sqrt[7 + 2 x], {x, -8.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5028$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5027$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2732397$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5027$\
2732402$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5028$2732403$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5028$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5027$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2732397$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5027$\
2732402$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5028$\
2732403$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732376[
                    Plot[
                    SlotSequence[1]]], HoldAll][(7 + 2 $CellContext`x)^
                    Rational[-1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$], 
                    (
                    Piecewise[{{-3.5 + 
                    5.003130448600583 Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    5.003130448600583 Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$], \
-8.18], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$]], 
                    (
                    Piecewise[{{-3.5 + 
                    5.003130448600583 Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    5.003130448600583 Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$ + 
                    0.00936, 
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$]], 
                    1.18]}, LabelStyle -> {FontFamily -> "Bitstream Charter"},
                     WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5027$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5028$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2732376]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732376[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732376[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVtuO0zAQbSn3O/wBEs9ItAh4QQK6y7LSAiUp7/\
Umk8TCtYPt7IWfB4/dJM22WymmC2iVPozqSXM8c+\
bMdJ4ciiDp93o9ddWYj4LFyQ08PTZmLOa5KHi8e5JLUIoKnlzBZ7eNCUHvACOnEDvfdWM+\
CDkn2p3f4PuERQUjGr5pyqimoGZ7kuQZjVTtmUh6ZH4yYyIijP6Ep8NXo+\
Ho9UsHg7FMiNYguRq1hcwzSRQkPQS6Zsx7Rvh3d3xUHj8XjIXwowAegXpgvFNJYgMjOGGYj/\
etl5upu5iYJjwmMr5wmqw8x20vUFpSnk5hnuMb55P1vC0wkaly3NwrudmkIBf+\
TXwgQhuT89ik7dkS6BfGJaPvrKz+OXcDPL9tCy/\
F8XriML93DHkjmh6BWqXzWes6OUaqrrXRL7i6qPmy1SDPnzL1/9IBVXo1jGHbMGB+aGq8Xnur8C/\
awoscu34h7vvGfHGOEnDdcKgE90nEBVtE0Ux54CTaPl2VG4fDuFPxHaLTp4IVTmDiLPvF9sfDCrzeF\
EKs3WwL0uH1DAggB+OKLbc7NKV6nBFJIgO8uK5fNtlU1KF43Nm+\
9pTH1AwwR8im5QnNfrJUd6Kj7OsfFbeSy5kmQ973uYYU5EbR38L6SEMuj6fCM5IQL2jq1ZvDKqkJkd\
6yH5QgYU44RUj6y3zsN/dwuRJI1Z5EdUnH4sCW5sQ/\
iX5Z4APgqc6aO7bn6PJuW8wmEMe16gKaJMvTZntM95tMN25oDnRfEnxL4j/Qu02h2xT+\
6qawsgd3a0K3JnRrQrcmdGvC/7sm2IjxX+k3y+C4lg=="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[1/Sqrt[7 + 2 x], {x, -36., 29.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max5030$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min5029$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2732492$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min5029$\
2732493$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max5030$2732494$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max5030$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min5029$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2732492$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5029$\
2732493$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max5030$\
2732494$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732473[
                    Plot[
                    SlotSequence[1]]], HoldAll][(7 + 2 $CellContext`x)^
                    Rational[-1, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$], 
                    (
                    Piecewise[{{-3.5 + 
                    35.021913140204084` Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    35.021913140204084` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$], \
-36.26], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$]], 
                    (
                    Piecewise[{{-3.5 + 
                    35.021913140204084` Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    35.021913140204084` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$ + 
                    0.06552, 
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$]], 
                    29.259999999999998`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min5029$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max5030$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2],
                     
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2732473]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732473[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[CalculateUtilities`GraphicsUtilities`Private`r === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2732473[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkdZNgi9IsI6NSQNKUr73ljiJhWsH29kGfx58dpM0a1cppgM0pR9O9aV5fPfcc9d7fiKCpN/\
r9dRNYz4IFidbeHpmzEjMclHw+P15LolSVPDkBj67Z0xI9D5h8IPEznfbmAMhZ6Dd+Q2+\
DywqGGjyVVNGNSVqeighz2ikas9Y0lPzkykTETD6k7wYvtoZ7r7edjAYyxi0JpKrnbaQeSZBkaSHQL\
eM2WPAv7nj0/\
L4qWAsJN8LwiOiHhvvREJsYAQHhvl433q9mXqAiWngMcj4ymmy8hy1vUBpSXk6IbMc37icrO22wCBT\
5bh5WHKzTkEu/Dv4QIQ2JuexSduzJdAvjGtG30VZ/XPuBnh+2xZeirPVxGF+\
7xjyBpqeErVM58vWdXKMVF1ro59zdVXzZaNBXj5l6v+\
lY6r0chjDtmGQ2Ymp8WrtLcPvtoUXOXb9XNyPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G/\
4jtEp08FK5zAxFn2i+\
2PJxV4vSmEWLvpBqTD6xkQkJwYV2y53acp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmqNk\
oe6go+zLHxW3ksuFJkPej7gmKZFrRX8X6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWhRHVJx+LAlubcP4l+\
WeBjwlOdNXdsz9Hl3baYTSDOatUFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb+TGuHY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Real-valued plots", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[1/Sqrt[7 + 2 x] == 0, {x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "NoSolutionsFromReduce__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[D[Sqrt[2 x + 7], x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"x", ">", 
                RowBox[{"-", 
                  FractionBox["7", "2"]}]}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement["minput", {}, {"FunctionRange[D[Sqrt[2 x + 7], x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"y", "\[Element]", 
                   TemplateBox[{}, "Reals"]}], "\" : \"", 
                 RowBox[{"y", ">", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all positive real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Injectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = -7/2", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=-3.5", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[1/Sqrt[7 + 2 x], {x, -7/2, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox[
                    RowBox[{"x", "+", 
                    FractionBox["7", "2"]}]]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    FractionBox["7", "2"]}], ")"}], 
                    RowBox[{"25", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`x, 
                    Rational[-7, 2], {}, -1, 25, 2], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", 
                    FractionBox["7", "2"]}], ",", 
                    RowBox[{"{", 
                    FractionBox["1", 
                    SqrtBox["2"]], "}"}], ",", 
                    RowBox[{"-", "1"}], ",", "25", ",", "2"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=0.", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[1/Sqrt[7 + 2 x], {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["1", 
                    SqrtBox["7"]], "-", 
                    FractionBox["x", 
                    RowBox[{"7", " ", 
                    SqrtBox["7"]}]], "+", 
                    FractionBox[
                    RowBox[{"3", " ", 
                    SuperscriptBox["x", "2"]}], 
                    RowBox[{"98", " ", 
                    SqrtBox["7"]}]], "-", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "3"]}], 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]], "+", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "4"]}], 
                    RowBox[{"2744", " ", 
                    SqrtBox["7"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox["7"]], ",", 
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"7", " ", 
                    SqrtBox["7"]}]]}], ",", 
                    FractionBox["3", 
                    RowBox[{"98", " ", 
                    SqrtBox["7"]}]], ",", 
                    RowBox[{"-", 
                    FractionBox["5", 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]]}], ",", 
                    FractionBox["5", 
                    RowBox[{"2744", " ", 
                    SqrtBox["7"]}]]}], "}"}], ",", "0", ",", "5", ",", "1"}], 
                    "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtx=Infinity", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[1/Sqrt[7 + 2 x], {x, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox[
                    SqrtBox[
                    FractionBox["1", "x"]], 
                    SqrtBox["2"]], "-", 
                    FractionBox[
                    RowBox[{"7", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"3", "/", "2"}]]}], 
                    RowBox[{"4", " ", 
                    SqrtBox["2"]}]], "+", 
                    FractionBox[
                    RowBox[{"147", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"5", "/", "2"}]]}], 
                    RowBox[{"32", " ", 
                    SqrtBox["2"]}]], "-", 
                    FractionBox[
                    RowBox[{"1715", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"7", "/", "2"}]]}], 
                    RowBox[{"128", " ", 
                    SqrtBox["2"]}]], "+", 
                    FractionBox[
                    RowBox[{"84035", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"9", "/", "2"}]]}], 
                    RowBox[{"2048", " ", 
                    SqrtBox["2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], "5"], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, 1, 10, 2], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox["2"]], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["7", 
                    RowBox[{"4", " ", 
                    SqrtBox["2"]}]]}], ",", "0", ",", 
                    FractionBox["147", 
                    RowBox[{"32", " ", 
                    SqrtBox["2"]}]], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["1715", 
                    RowBox[{"128", " ", 
                    SqrtBox["2"]}]]}], ",", "0", ",", 
                    FractionBox["84035", 
                    RowBox[{"2048", " ", 
                    SqrtBox["2"]}]]}], "}"}], ",", "1", ",", "10", ",", "2"}],
                     "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1/Sqrt[7 + 2 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   FractionBox["1", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[1/Sqrt[7 + 2 x], {x -> -Infinity, x -> Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 FractionBox["1", 
                  SqrtBox[
                   RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], "x", 
                 RowBox[{"\[PlusMinus]", "\[Infinity]"}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> 
     "Definite integral after subtraction of diverging parts", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> 
     "DefiniteIntegralAfterSubtractionOfDivergingParts", "position" -> "1000",
      "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "N[Integrate[1/Sqrt[7 + 2 x] - 1/(Sqrt[2] Sqrt[x]), {x, 0, \
Infinity}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                 RowBox[{
                   RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    FractionBox["1", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], "-", 
                    FractionBox["1", 
                    RowBox[{
                    SqrtBox["2"], " ", 
                    SqrtBox["x"]}]]}], HoldForm], ")"}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 SqrtBox["7"]}], Identity], "\[TildeTilde]", 
              TagBox[
               RowBox[{"-", "2.6457513110645907`"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegralAfterSubtractionOfDivergingParts__1_More \
digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.06401497783434405, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.06401497783434405, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, 
                 CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.06401497783434405, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.06401497783434405, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.06401497783434405, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9147828366098383, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.611299358821781, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.9147828366098383, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.611299358821781, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.06401497783434405, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.06401497783434405, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.06401497783434405, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.06401497783434405, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.06401497783434405, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$546792$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$546797$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$546798$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$546799$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$546800$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$546801$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$546802$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$546803$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$546804$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$546805$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$546806$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$546807$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$546808$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$546809$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.06401497783434405, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.06401497783434405, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.06401497783434405, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.06401497783434405, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.06401497783434405, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9147828366098383, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.611299358821781}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$546792$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$546797$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$546798$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$546799$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$546800$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$546801$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$546802$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$546803$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$546804$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$546805$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$546806$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
546807$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
546808$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$546809$$,
                     0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    31.199999999999996`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    15.599999999999998`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    15.599999999999998`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(7 + 2 $CellContext`x)^Rational[-1, 2] == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    15.599999999999998`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate]}, {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    15.599999999999998`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 15.599999999999998`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(7 + 2 $CellContext`x)^Rational[-1, 2] == 
                    0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[(7 + 2 $CellContext`x)^Rational[-1, 2], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 15.599999999999998`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 15.599999999999998`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2, {2, 0, 1}}, {7, {2, 0, 0}}}, {0, 2, 3, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {40, 59, 3, 0, 2, 3, 0, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (7 + 2 $CellContext`x)^
                    Rational[-1, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    FractionBox["1", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]]], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style["\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.9147828366098383, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.611299358821781, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.06401497783434405, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.06401497783434405, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.06401497783434405, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.06401497783434405, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.06401497783434405, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7+MfIPEZaTBePiAh9sKYNKAk5Xu9+\
JJauHawnW3w58FnN0mzdpViOkBT+uFUX5rHd889d73HRzJK+71eT1+\
15oPkNL2Bp0fW7MhpLgtB905zBVozKdIr+\
Oy2NTGYXeDkB1Dvu27Ne6mmxPjzG3yf8KTgxMBXwzgzDPR4X5F8whJde4aKHdufjLlMCGc/\
4cmLrZevXm96FAxlSIwBJfTztoj5RBENaQ+\
BrlmzzYn45o8b5fFTwXkM3wsQCegH1jtShFoYKQjHdIJvvdRE3cW8DBGUKHrhLDlxbre9QBvFRDaCa\
Y5vnMvVZltcojLtqblXUrNKPz76m/hAxi4k73E5u7PjLyyMy8XeWVH9c+\
oGeH7bFl7Jk6W8YXrvONJGDDsGvcjm09ZV8oRULeuCn1F1QbNlrTGeP2Hqf6RDps1iGM/\
ahgHTI1vh5cpbhN9qCy9zbPmZtO9b89k7SsBlk6GS20dJCz6LopnywAu0fbo6tw6PcafiO0ZnSAUrn\
MjGWXaL646HFXi9I8RYu/EapCPqCRBBDtZFHbe7LGNmZ0IUSSzw7Lp+\
2WMjWYcScGf72jNBmR1fnpBVaxOag3Su7sQkky9/VNxKLmeaDHk/\
EAYyUCtFfwvroyy5go5kYCQxXtDUazCHVVJDooJlPyhB4pwIhpDsl/24b/\
7hfCWQqn2F6lKexYErzWl4Ev2ywIcgMjNpbteBoyu4bTGbSJ7UqotYms5Pm/\
Ux3W8y3bihOdBDSQgtSfhA7/aEbk/4i3vCwg7cLQndktAtCd2S0C0J/++S4CLGf6XfHLy3Dg=="]]}\
; Typeset`initDone$$ = True), DynamicModuleValues :> {}, Deinitialization :> 
                None, UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1200", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa3052404gf53h0715cag000016hcehb04f653ci03629183885576317489", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa3062404gf53h0715cag00005282e9711368bh633629183885576317489", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "13", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.901", "parsetiming" -> "0.228", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP3012404gf53h0715cag00002h172e8a14g3hc6h", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "3", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa3022404gf53h0715cag00002g8a5i77dddde8d83629183885576317489", "version" -> 
    "2.6", "inputstring" -> "d/dx Sqrt[2 x + 7]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 10, 18, 14, 37, 14.3844399`8.910467907011444}, "Line" -> 
    37, "SessionID" -> 20912553927900568855}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {12, 13}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d/dx Sqrt[2 x + 7]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1362., {1463.3544921875, 1468.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.8751070344198685`*^9},
 CellID->350288734,ExpressionUUID->"aa52a1e5-48e2-4359-b0bc-2c3560f6d8b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   SqrtBox[
    RowBox[{
     RowBox[{"2", "x"}], "+", "7"}]], ",", "x"}], "]"}]], "Input",
 CellLabel->"In[38]:=",
 CellID->278976234,ExpressionUUID->"a9c03303-2fd4-4385-aa89-a4370e732e28"],

Cell[BoxData[
 FractionBox["1", 
  SqrtBox[
   RowBox[{"7", "+", 
    RowBox[{"2", " ", "x"}]}]]]], "Output",
 CellChangeTimes->{3.8751070756409483`*^9},
 CellLabel->"Out[38]=",
 CellID->331566230,ExpressionUUID->"04ec6a60-75dc-4b88-90d0-5d4dc88f6657"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "d/dx ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "/", 
    SqrtBox[
     RowBox[{"7", "+", 
      RowBox[{"2", "x"}]}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9d7eb65d-5ea1-4033-99af-5f97106147a9"]
}], "WolframAlphaLong",
 CellChangeTimes->{{3.8751070779666557`*^9, 3.8751070843461695`*^9}},
 CellLabel->"In[39]:=",
 CellID->464190498,ExpressionUUID->"270cd65a-e73c-4676-8342-9704d0fb8c6d"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dx 1/Sqrt[7 + 2 x]", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[1/Sqrt[7 + 2 x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   FractionBox["1", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              RowBox[{"-", 
                FractionBox["1", 
                 SuperscriptBox[
                  RowBox[{"(", 
                    TagBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], ")"}], 
                  RowBox[{"3", "/", "2"}]]]}]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox["1", 
                    SqrtBox[
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}]]], ")"}]}]}, "RowDefault"], 
                    HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox["1", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]]], ")"}]}], 
                    "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    RowBox[{
                    FractionBox["\[DifferentialD]", 
                    RowBox[{"\[DifferentialD]", "u"}]], 
                    FractionBox["1", 
                    SqrtBox["u"]]}], D], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    TraditionalForm]}], "\",\"", "\" \""}, "RowDefault"], 
                    "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]}]}, 
                    "RowWithSeparators"], "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    FractionBox["1", 
                    SqrtBox["u"]], ")"}]}], "\[LongEqual]", 
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["u", 
                    RowBox[{"3", "/", "2"}]]}]]}]}]}, "RowWithSeparators"], 
                    HoldForm], "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    RowBox[{"-", 
                    FractionBox[
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}]}], TraditionalForm], 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], TraditionalForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Differentiate \"", "\"the \"", "\"sum \"", "\"term \"",
                     "\"by \"", "\"term \"", "\"and \"", "\"factor \"", 
                    "\"out \"", "\"constants:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], "\" \""}, "RowDefault"], 
                    FrameBox[
                    RowBox[{"(", 
                    RowBox[{
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "7", ")"}]}], TraditionalForm], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], ")"}]}]}], ")"}], 
                    FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{"7", "\" \""}, "RowDefault"], "\"is \"", 
                    TemplateBox[{
                    FormBox["\"zero\"", TraditionalForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], ")"}]}], "+", 
                    FrameBox[
                    "0", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}], 
                    RowBox[{"2", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\[NoBreak]", "\"\[NoBreak]\"", 
                    
                    TemplateBox[{
                    "\"Simplify \"", "\"the \"", "\"expression\""}, 
                    "RowDefault"], "\":\""}, "RowWithSeparators"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TagBox[
                    RowBox[{"-", 
                    FractionBox[
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], HoldForm], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], HoldForm]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    TemplateBox[{
                    TemplateBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], "\" \""}, "RowDefault"], 
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False]}, "RowDefault"]}, "RowDefault"]}, 
                    "RowDefault"], HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-(7 + 2 x)^(-3/2), {x, -7.1, 0.14}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max10631$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min10630$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4066823$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min10630$\
4066828$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max10631$\
4066829$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max10631$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min10630$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4066823$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10630$\
4066828$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max10631$\
4066829$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066802[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][-(7 + 2 $CellContext`x)^
                    Rational[-3, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$], 
                    (
                    Piecewise[{{-3.5 + 
                    3.891323682244898 Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    3.8913236822448987` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$], \
-7.14], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$]], 
                    (
                    Piecewise[{{-3.5 + 
                    3.891323682244898 Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    3.8913236822448987` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$ + 
                    0.007279999999999999, 
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$]],
                     0.14]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min10630$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max10631$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4066802]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066802[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066802[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiM2JgmviABHYxJA0pSvvcWO42Fawfb2QZ/Hnx2kzRrVymmAzSlH071pXl899xz13tyJKO03+\
v19FVrPkhO0ht4emzNUM5yWQjy7jRXVGsmRXoFn922JqZmj3L4QYn3XbfmvVQzMP78Ct8HnhQcDP1q\
GGeGUT3ZV5BnLNG1Z6TYsf3JhMsEOPtJn+\
483919ubXtYTCWERhDldAv2kLmmQJN0x4CXbPmLQfxzR8flcdPBecx/\
V5QkVD9wHrHCoiFkQI45hN86+Vm6i4mZkAQUOTCaXLyHLa9QBvFxHRMZzm+cT5ZW22BQU215+\
Zeyc06Bfnwb+IDGbuYvMcl7c6OwLAwLhl9Z2X1z7kb4Pl1W3glT1YTh/\
m94cgbGHZM9TKdz1rXyTNSda2Lfs7VRc2XjQZ5/pSp/\
5cOmTbLYWy3DYPOjmyNV2tvGX6nLbzMsevn4r5vzWfvKAFXDYdKcB8lKfg8imbKAy/\
R9unq3Do8xp2K7xidIRWscCIbZ9kvrj8eVuD1phBj7SYbkI6oZ0BEc2pdxHG7x6bMDDNQkFjg+\
XX9ssnGsg4l4M72tWeCMDvAPCHrlic0B+lC3cEk2Zc/Km4llzNNhrwfCEOnVK0V/\
S2sj7LkCjKWgZHEeEFTr8EcVkmNQAXLflCCxDkIhpDsl/24b/\
7hYiWQqn2F6lKexYErzWl4Ev2ywIdUTE3W3LEDR1dw22I2kTypVRexNF2cNptjut9kunFDc6CHkhBa\
kvCB3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUWM/0q/AeTWuHY="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Plot[-(7 + 2 x)^(-3/2), {x, -29., 22.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max10633$$ = 0.5,
                  CalculateUtilities`GraphicsUtilities`Private`min10632$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4066918$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min10632$\
4066919$$ = 0, 
                 CalculateUtilities`GraphicsUtilities`Private`max10633$\
4066920$$ = 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max10633$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`\
min10632$$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4066918$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$, 
                    
                    CalculateUtilities`GraphicsUtilities`Private`min10632$\
4066919$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max10633$\
4066920$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066899[
                    Plot[
                    SlotSequence[1]]], 
                    HoldAll][-(7 + 2 $CellContext`x)^
                    Rational[-3, 2], {$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$], 
                    (
                    Piecewise[{{-3.5 + 
                    27.239265775714287` Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    27.239265775714287` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$], \
-28.979999999999997`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$]], 
                    (
                    Piecewise[{{-3.5 + 
                    27.239265775714287` Tan[1.5040801783846716` #], # < 
                    0}}, -3.5 + 
                    27.239265775714287` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$ + 
                    0.05095999999999999, 
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$]],
                     21.979999999999997`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min10632$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max10633$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4066899]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066899[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4066899[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbinv7/\
APkPiMBkxDfEACOhiTBpSkfK8XXxoL1w62sw3+PPjsJmnWrlJMB2hKP5zqS/\
P47rnnrvfoUEZpv9fr6cvWfJCcptfw9NCaoZzlshD03UmuQGsmRXoJn920JgazC5z8AOp9V615L9WM\
GH9+he8TnhScGPhqGGeGgZ7sKZJnLNG1Z6TYkf3JhMuEcPYTHm9v7ey83HrhYTCWETEGlNDP20LmmS\
Ia0h4CXbHmLSfimz8+KI+fCs5j+\
F6ASEDfs96xItTCSEE45hN868Vm6jYmZoigRNFzp8nJc9j2Am0UE9MxzHJ842yynrYFJmqqPTd3Sm7\
WKciHfx0fyNjF5D0uaXd2BIaFccHoOy2rf87dAM+\
v28IrebyaOMzvDUfeiGFHoJfpfNK6Tp6Rqmtd9HOuzmu+bDTIs6dM/\
b90wLRZDuNZ2zBgdmhrvFp7y/DbbeFljl0/F/\
ddaz57Rwm4ajhUgvsoacHnUTRTHniJtk9X59bhMW5VfMfoDKlghRPZOMt+\
cf1xvwKvN4UYazfZgHREPQMiyMG6qON2l02ZGWZEkcQCz6/\
rl002lnUoAXe2rz0TlNkB5glZtzyh2U8X6k5Mkn35o+JWcjnVZMj7vjAwBbVW9DewPsqSK+\
hYBkYS4wVNvQZzWCU1IipY9oMSJM6JYAjJftmP++\
YfLlYCqdpTqC7lWRy40pyEJ9EvC3wAYmqy5o4dOLqC2xazieRxrbqIpenitNkc0/\
0m040bmgM9lITQkoQP9G5T6DaFv7opLO3B3ZrQrQndmtCtCd2a8P+uCS5i/Ff6DUXauJ4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Real-valued plots", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}]}]}]}], Typeset`pod3$$ = 
   XMLElement[
   "pod", {"title" -> "Roots", "scanner" -> "Reduce", "id" -> 
     "NoSolutionsFromReduce", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[-(7 + 2 x)^(-3/2) == 0, {x}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             
             RowBox[{"\"(\"", "\[NoBreak]", "\"no roots exist\"", 
               "\[NoBreak]", "\")\""}], {
              GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
              LineIndent -> 0}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "NoSolutionsFromReduce__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "400", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[D[1/Sqrt[7 + 2 x], x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"x", ">", 
                RowBox[{"-", 
                  FractionBox["7", "2"]}]}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement[
       "minput", {}, {"FunctionRange[D[1/Sqrt[7 + 2 x], x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            StyleBox[
             TemplateBox[{
               TemplateBox[{"\"{\"", 
                 RowBox[{"y", "\[Element]", 
                   TemplateBox[{}, "Reals"]}], "\" : \"", 
                 RowBox[{"y", "<", "0"}], "\"}\""}, "RowDefault"], "\"  \"", 
               StyleBox[
                
                RowBox[{
                 "\"(\"", "\[NoBreak]", "\"all negative real numbers\"", 
                  "\[NoBreak]", "\")\""}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}]}, "RowDefault"], LineIndent -> 0], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Injectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate forms", "input" -> 
         "PropertiesAsARealFunction__Approximate forms"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod5$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion at x = -7/2", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=-3.5", "position" -> "500", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-(7 + 2 x)^(-3/2), {x, -7/2, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox["2"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    FractionBox["7", "2"]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]}]]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    FractionBox["7", "2"]}], ")"}], 
                    RowBox[{"25", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`x, 
                    Rational[-7, 2], {}, -3, 25, 2], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", 
                    FractionBox["7", "2"]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox["2"]}]]}], "}"}], ",", 
                    RowBox[{"-", "3"}], ",", "25", ",", "2"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod6$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=0.", "position" -> "600", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[-(7 + 2 x)^(-3/2), {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"7", " ", 
                    SqrtBox["7"]}]]}], "+", 
                    FractionBox[
                    RowBox[{"3", " ", "x"}], 
                    RowBox[{"49", " ", 
                    SqrtBox["7"]}]], "-", 
                    FractionBox[
                    RowBox[{"15", " ", 
                    SuperscriptBox["x", "2"]}], 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]], "+", 
                    FractionBox[
                    RowBox[{"5", " ", 
                    SuperscriptBox["x", "3"]}], 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]], "-", 
                    FractionBox[
                    RowBox[{"45", " ", 
                    SuperscriptBox["x", "4"]}], 
                    RowBox[{"19208", " ", 
                    SqrtBox["7"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "5"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"7", " ", 
                    SqrtBox["7"]}]]}], ",", 
                    FractionBox["3", 
                    RowBox[{"49", " ", 
                    SqrtBox["7"]}]], ",", 
                    RowBox[{"-", 
                    FractionBox["15", 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]]}], ",", 
                    FractionBox["5", 
                    RowBox[{"686", " ", 
                    SqrtBox["7"]}]], ",", 
                    RowBox[{"-", 
                    FractionBox["45", 
                    RowBox[{"19208", " ", 
                    SqrtBox["7"]}]]}]}], "}"}], ",", "0", ",", "5", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = \[Infinity]", "scanner" -> 
     "Series", "id" -> "SeriesExpansionAtx=Infinity", "position" -> "700", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Series[-(7 + 2 x)^(-3/2), {x, Infinity, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"3", "/", "2"}]], 
                    RowBox[{"2", " ", 
                    SqrtBox["2"]}]]}], "+", 
                    FractionBox[
                    RowBox[{"21", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"5", "/", "2"}]]}], 
                    RowBox[{"8", " ", 
                    SqrtBox["2"]}]], "-", 
                    FractionBox[
                    RowBox[{"735", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"7", "/", "2"}]]}], 
                    RowBox[{"64", " ", 
                    SqrtBox["2"]}]], "+", 
                    FractionBox[
                    RowBox[{"12005", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"9", "/", "2"}]]}], 
                    RowBox[{"256", " ", 
                    SqrtBox["2"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    FractionBox["1", "x"], ")"}], 
                    RowBox[{"11", "/", "2"}]], ")"}], 
                    SeriesData[$CellContext`x, 
                    DirectedInfinity[1], {}, 3, 11, 2], Editable -> False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "\[Infinity]", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", 
                    RowBox[{"2", " ", 
                    SqrtBox["2"]}]]}], ",", "0", ",", 
                    FractionBox["21", 
                    RowBox[{"8", " ", 
                    SqrtBox["2"]}]], ",", "0", ",", 
                    RowBox[{"-", 
                    FractionBox["735", 
                    RowBox[{"64", " ", 
                    SqrtBox["2"]}]]}], ",", "0", ",", 
                    FractionBox["12005", 
                    RowBox[{"256", " ", 
                    SqrtBox["2"]}]]}], "}"}], ",", "3", ",", "11", ",", "2"}],
                     "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Puiseux series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "800", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[-(7 + 2 x)^(-3/2), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{"\[Integral]", 
                 RowBox[{
                   RowBox[{"-", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               StyleBox[
                RowBox[{
                  StyleBox[
                   FractionBox["1", 
                    SqrtBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}]]], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                  StyleBox[
                  "\"constant\"", {
                   Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                 GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                 LineIndent -> 0}], Identity]}], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "900", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Limit[-(7 + 2 x)^(-3/2), {x -> -Infinity, x -> Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 RowBox[{"-", 
                   FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], "x", 
                 RowBox[{"\[PlusMinus]", "\[Infinity]"}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "0"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Definite integral", "scanner" -> 
     "InterestingDefiniteIntegrals", "id" -> "DefiniteIntegral", "position" -> 
     "1000", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"N[Integrate[-(7 + 2 x)^(-3/2), {x, 0, Infinity}]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               RowBox[{
                 SubsuperscriptBox["\[Integral]", "0", "\[Infinity]"], 
                 RowBox[{
                   RowBox[{"-", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"7", "+", 
                    RowBox[{"2", " ", "x"}]}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], 
                   RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
              "\[LongEqual]", 
              TagBox[
               RowBox[{"-", 
                 FractionBox["1", 
                  SqrtBox["7"]]}], Identity], "\[TildeTilde]", 
              TagBox[
               RowBox[{"-", "0.3779644730092272`"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}], 
       XMLElement["states", {"count" -> "1"}, {
         XMLElement[
         "state", {
          "name" -> "More digits", "input" -> 
           "DefiniteIntegral__1_More digits"}, {}]}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "1100", "error" -> 
     "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveColor$$ = 
                 RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`contraPedalCurvePlotCurves$$ = \
{}, CalculateScan`PlotterScanner`Private`contraPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`dualCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`dualCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`dualCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                 RGBColor[0.813033, 0.766292, 0.303458], 
                 CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`evoluteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`evoluteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`fy1$$ = 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`fy2$$ = 
                 0.982793723247329, 
                 CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                 CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                 RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                 CalculateScan`PlotterScanner`Private`inverseCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$\
 = {}, CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = "grid", 
                 CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                 RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`involuteCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 0.8,
                  CalculateScan`PlotterScanner`Private`involutesLeftTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`involutesRightTF$\
$ = True, CalculateScan`PlotterScanner`Private`involuteTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`isopticLastParamaters$$ = \
{}, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveColor$\
$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                 CalculateScan`PlotterScanner`Private`negativePedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`normalColor$$ = 
                 RGBColor[0.237, 0.34, 0.575], 
                 CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                 CalculateScan`PlotterScanner`Private`normalLength$$ = 
                 0.08223172781907569, 
                 CalculateScan`PlotterScanner`Private`normalOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`normalTF$$ = True, 
                 CalculateScan`PlotterScanner`Private`normalThickness$$ = -3.,
                  CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                 RGBColor[0.877875, 0.731045, 0.326896], 
                 CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 12,
                  CalculateScan`PlotterScanner`Private`offsetCurveDistance$$ = 
                 0.08223172781907569, 
                 CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = False,
                  
                 CalculateScan`PlotterScanner`Private`offsetCurveThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$$ = 
                 Rational[1, 3] Pi, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveColor$$ = 
                 RGBColor[
                  0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                 CalculateScan`PlotterScanner`Private`orthotomicCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = {},
                  CalculateScan`PlotterScanner`Private`orthotomicCurvePoints$$\
 = "curve", CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleColor$$ = 
                 RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                 CalculateScan`PlotterScanner`Private`osculatingCircleCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`osculatingCircleRadiiTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircles$$ = {}, 
                 CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                 RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                 CalculateScan`PlotterScanner`Private`pedalCurveCountFactor$$ = 
                 0.3, CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                 "curve", CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                 False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`st$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                 CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                 CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                 RGBColor[0.237736, 0.340215, 0.575113], 
                 CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                 CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                 0.08223172781907569, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`tangentTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`tangentThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`taylorParabolaColor$$ = 
                 RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                 CalculateScan`PlotterScanner`Private`taylorParabolaCount$$ = 
                 36, CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                 CalculateScan`PlotterScanner`Private`taylorParabolaThickness$\
$ = -3., CalculateScan`PlotterScanner`Private`tiltedOffsetCurveAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveColor$$\
 = RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveCount$$\
 = 12, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveDistance$$ = 
                 0.08223172781907569, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                 CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                 CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                 Rational[1, 4] Pi, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                 RGBColor[
                  0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                 CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                 60, CalculateScan`PlotterScanner`Private`tiltedTangentLength$\
$ = 0.08223172781907569, 
                 CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$$ = 
                 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = 
                 False, CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                 CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9453112865556675, CalculateScan`PlotterScanner`Private`x2$$ = 
                 0.5516549825285468, Typeset`show$$ = True, 
                 Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu",
                  Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
                 "\"untitled\"", Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$], \
-0.9453112865556675, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`x2$$], 
                    0.5516549825285468, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmxQ$$], 
                    False, "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy1$$], 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`fy2$$], 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`}, {{
                    Hold[CalculateScan`PlotterScanner`Private`symmyQ$$], True,
                     "symmetric"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sqPRQ$$], False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`sa$$], False, 
                    "show axes"}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`st$$], False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`ar$$], 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentCount$$],
                     60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$], 
                    0.08223172781907569, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`tangentColor$$], 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalCount$$], 
                    120, ""}, 2, 360, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalLength$$],
                     0.08223172781907569, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`normalColor$$], 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$]\
, 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
], 0.08223172781907569, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], 60, ""}, 2, 360, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$], 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], 36, ""}, 2, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
], 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`involuteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteCount$$], 60,
                     ""}, 1, 120, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteThickness$$],\
 -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    True, ""}, {True, False}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$], \
-3., ""}, -4, -0.5}, {{
                    Hold[CalculateScan`PlotterScanner`Private`evoluteColor$$], 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
], 0.08223172781907569, ""}, 0, 1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$], 
                    12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveThickness$\
$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$], 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], Rational[1, 4] Pi, ""}, -Pi, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$], 0.08223172781907569, ""}, 0, 
                    1.5393804002589986`}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$], 12, ""}, 1, 60, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$], 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[CalculateScan`PlotterScanner`Private`pedalCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveThickness$$\
], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$], 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$],
                     0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$], 
                    "curve", ""}, {"grid", "curve"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$], 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[CalculateScan`PlotterScanner`Private`dualCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$]\
, -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$], "curve", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$], 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$]\
, "grid", ""}, {"curve", "grid"}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$], 0.4636476090008061, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], 
                    False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$],
                     Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],
                     False, ""}, {True, False}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$], Rational[1, 3] Pi, ""}, 0, Pi}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$], 0.3, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$], -3., ""}, -4, -0.5}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$], 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0]}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 0.8, ""}, 0, 1}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$], "curve", ""}, {"curve", "grid"}}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button[
                    "1", CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$],\
 {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$], \
{}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$], {}}}, {{
                    Hold[
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$], {}}}}, Typeset`size$$ = Automatic, 
                 Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$832952$$ = 
                 False, CalculateScan`PlotterScanner`Private`x1$832957$$ = 0, 
                 CalculateScan`PlotterScanner`Private`x2$832958$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmxQ$832959$$ = False,
                  CalculateScan`PlotterScanner`Private`fy1$832960$$ = 0, 
                 CalculateScan`PlotterScanner`Private`fy2$832961$$ = 0, 
                 CalculateScan`PlotterScanner`Private`symmyQ$832962$$ = False,
                  CalculateScan`PlotterScanner`Private`sqPRQ$832963$$ = False,
                  CalculateScan`PlotterScanner`Private`ar$832964$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentCount$832965$$ = 
                 0, CalculateScan`PlotterScanner`Private`tangentLength$832966$\
$ = 0, CalculateScan`PlotterScanner`Private`tangentThickness$832967$$ = 0, 
                 CalculateScan`PlotterScanner`Private`tangentOpacity$832968$$ = 
                 0, CalculateScan`PlotterScanner`Private`normalCount$832969$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateScan`PlotterScanner`Private`ar$$ = 1, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$ = RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$ = 0.3, CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
dualCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`dualPedalCurvePoints$\
$ = "curve", CalculateScan`PlotterScanner`Private`evoluteColor$$ = 
                    RGBColor[0.813033, 0.766292, 0.303458], 
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`evoluteTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
evoluteThickness$$ = -3., CalculateScan`PlotterScanner`Private`fy1$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    0.982793723247329, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$ = 0.4636476090008061, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$ = 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`inverseCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ = 
                    "grid", 
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`involuteCount$$ = 60,
                     CalculateScan`PlotterScanner`Private`involuteOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`involutesLeftTF$\
$ = False, CalculateScan`PlotterScanner`Private`involutesRightTF$$ = True, 
                    CalculateScan`PlotterScanner`Private`involuteTF$$ = False,
                     CalculateScan`PlotterScanner`Private`involuteThickness$$ = \
-3., CalculateScan`PlotterScanner`Private`isopticCurveAngle$$ = 
                    Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$ = 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
 = 0.8, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ = {}, 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$ = 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {}, 
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$ = False, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`normalColor$$ = 
                    RGBColor[0.237, 0.34, 0.575], 
                    CalculateScan`PlotterScanner`Private`normalCount$$ = 120, 
                    CalculateScan`PlotterScanner`Private`normalLength$$ = 
                    0.08223172781907569, 
                    CalculateScan`PlotterScanner`Private`normalOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`normalTF$$ = 
                    True, CalculateScan`PlotterScanner`Private`\
normalThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$ = 
                    RGBColor[0.877875, 0.731045, 0.326896], 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$ = 
                    12, CalculateScan`PlotterScanner`Private`\
offsetCurveDistance$$ = 0.08223172781907569, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$ = Rational[1, 3] Pi, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$ = RGBColor[0.8519382, 0.7451437999999999, 0.31752080000000005`], 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ = "curve", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$ = 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = \
{}, CalculateScan`PlotterScanner`Private`osculatingCircleTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$ = 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$ = 0.3, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`\
pedalCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ = 
                    "curve", 
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$ = -3., CalculateScan`PlotterScanner`Private`sa$$ = 
                    False, CalculateScan`PlotterScanner`Private`sqPRQ$$ = 
                    False, CalculateScan`PlotterScanner`Private`st$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmxQ$$ = False, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$ = True, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$ = 
                    RGBColor[0.237736, 0.340215, 0.575113], 
                    CalculateScan`PlotterScanner`Private`tangentCount$$ = 60, 
                    CalculateScan`PlotterScanner`Private`tangentLength$$ = 
                    0.08223172781907569, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$ = 
                    0.8, CalculateScan`PlotterScanner`Private`tangentTF$$ = 
                    False, CalculateScan`PlotterScanner`Private`\
tangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
 = RGBColor[0.7189495000000001, 0.719797, 0.283877], 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
 = 36, CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$ = \
{}, CalculateScan`PlotterScanner`Private`taylorParabolaTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$ = Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$ = 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$ = 12, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$ = 0.08223172781907569, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ = {}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$ = 0.8, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = {}, 
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
 = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$ = 
                    Rational[1, 4] Pi, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$ = 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$ = 
                    60, CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$ = 0.08223172781907569, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$ = 0.8, CalculateScan`PlotterScanner`Private`tiltedTangentTF$$ = False, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$ = -3., 
                    CalculateScan`PlotterScanner`Private`x1$$ = \
-0.9453112865556675, CalculateScan`PlotterScanner`Private`x2$$ = 
                    0.5516549825285468}, "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$832952$$\
, False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    CalculateScan`PlotterScanner`Private`x1$832957$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$832958$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    CalculateScan`PlotterScanner`Private`symmxQ$832959$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy1$$, 
                    CalculateScan`PlotterScanner`Private`fy1$832960$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$832961$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$832962$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`sqPRQ$832963$$, 
                    False], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    CalculateScan`PlotterScanner`Private`ar$832964$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    CalculateScan`PlotterScanner`Private`tangentCount$832965$$\
, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    CalculateScan`PlotterScanner`Private`tangentLength$832966$\
$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, 
                    CalculateScan`PlotterScanner`Private`tangentThickness$\
832967$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    CalculateScan`PlotterScanner`Private`tangentOpacity$\
832968$$, 0], 
                    Hold[
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    CalculateScan`PlotterScanner`Private`normalCount$832969$$,
                     0]}, 
                  "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Block[{$CellContext`x}, 
                    Quiet[
                    
                    Module[{
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2Old$, 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2Old$, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$, 
                    CalculateScan`PlotterScanner`Private`singularities$, 
                    CalculateScan`PlotterScanner`Private`ts$, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, 
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$, 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$, 
                    CalculateScan`PlotterScanner`Private`pRY$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    CalculateScan`PlotterScanner`Private`tangentsLines$, 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`normalLines$, 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$, 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    CalculateScan`PlotterScanner`Private`iTab$, 
                    CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$, 
                    CalculateScan`PlotterScanner`Private`arcLength$, 
                    CalculateScan`PlotterScanner`Private`arcL$, 
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, 
                    CalculateScan`PlotterScanner`Private`baseSegments$, 
                    CalculateScan`PlotterScanner`Private`oSegments$, 
                    CalculateScan`PlotterScanner`Private`arcFactors$, 
                    CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$, 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$, 
                    CalculateScan`PlotterScanner`Private`curvePoints$}, If[
                    And[
                    CalculateScan`PlotterScanner`Private`sa$$ === False, 
                    CalculateScan`PlotterScanner`Private`st$$ == True], 
                    CalculateScan`PlotterScanner`Private`st$$ = False]; 
                    If[CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x1Old$, 
                    CalculateScan`PlotterScanner`Private`x2$$ != 
                    CalculateScan`PlotterScanner`Private`x2Old$], 
                    CalculateScan`PlotterScanner`Private`x1$$ = -
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = -
                    CalculateScan`PlotterScanner`Private`x1$$]]; 
                    CalculateScan`PlotterScanner`Private`x1Old$ = 
                    CalculateScan`PlotterScanner`Private`x1$$; 
                    CalculateScan`PlotterScanner`Private`x2Old$ = 
                    CalculateScan`PlotterScanner`Private`x2$$; 
                    If[CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`fy1$$ == 
                    CalculateScan`PlotterScanner`Private`fy1Old$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ != 
                    CalculateScan`PlotterScanner`Private`fy2Old$], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$]]; 
                    CalculateScan`PlotterScanner`Private`fy1Old$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; 
                    CalculateScan`PlotterScanner`Private`fy2Old$ = 
                    CalculateScan`PlotterScanner`Private`fy2$$; 
                    If[CalculateScan`PlotterScanner`Private`x1$$ == 
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    CalculateScan`PlotterScanner`Private`x2$$ = 
                    CalculateScan`PlotterScanner`Private`x1$$ + 
                    24.266666666666662`/100]; {
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$} = Sort[
                    N[{
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x1$$, 
                    12.133333333333331`], 
                    
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`x2$$, 
                    12.133333333333331`]}]]; 
                    CalculateScan`PlotterScanner`Private`singularities$ = (
                    CalculateScan`PlotterScanner`Private`ts$ = 
                    TimeConstrained[
                    CalculateScan`PlotterScanner`Private`red = Reduce[
                    And[
                    1/(-(7 + 2 $CellContext`x)^Rational[-3, 2]) == 0, 
                    CalculateScan`PlotterScanner`Private`X1$ < $CellContext`x < 
                    CalculateScan`PlotterScanner`Private`X2$], $CellContext`x,
                     Reals], 0.2, False]; 
                    If[CalculateScan`PlotterScanner`Private`ts$ === False, {}, 
                    Cases[
                    ReplaceAll[$CellContext`x, {
                    ToRules[CalculateScan`PlotterScanner`Private`ts$]}], 
                    Blank[Real]]]); 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], Evaluated -> False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; {{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, {
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$}} = Lookup[
                    AbsoluteOptions[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot0$, 
                    PlotRange], PlotRange]; 
                    CalculateScan`PlotterScanner`Private`pRX$ = {
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$ = 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]; 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$ = 
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$; If[
                    And[
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, 
                    CalculateScan`PlotterScanner`Private`symmyQ$$, 
                    Sign[CalculateScan`PlotterScanner`Private`X1$] === -
                    Sign[CalculateScan`PlotterScanner`Private`X2$], 
                    Abs[1 - CalculateScan`PlotterScanner`Private`fy1$$/
                    CalculateScan`PlotterScanner`Private`fy2$$] < 10^(-3)], 
                    CalculateScan`PlotterScanner`Private`fy1$$ = 
                    ArcTan[((-100) CalculateScan`PlotterScanner`Private`xL$ - 
                    100 CalculateScan`PlotterScanner`Private`yL$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$)/(
                    100 CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$\
)]; CalculateScan`PlotterScanner`Private`fy2$$ = 
                    CalculateScan`PlotterScanner`Private`fy1$$; Null]; {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$} = {
                    CalculateScan`PlotterScanner`Private`yL$ - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 - Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy1$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$, 
                    CalculateScan`PlotterScanner`Private`yU$ + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$/
                    100 + Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`fy2$$, 1] 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]y$}; 
                    CalculateScan`PlotterScanner`Private`pRY$ = {
                    CalculateScan`PlotterScanner`Private`Y1$, 
                    CalculateScan`PlotterScanner`Private`Y2$}; 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$ = 
                    Plot[
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, PlotStyle -> 
                    Directive[Black, Thick], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> 
                    CalculateScan`PlotterScanner`Private`singularities$]; 
                    CalculateScan`PlotterScanner`Private`tangentsLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tangentLength$$, 
                    12.133333333333331`]], {}]; 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`tangentThickness$$\
]], CalculateScan`PlotterScanner`Private`tangentsLines$}]; 
                    CalculateScan`PlotterScanner`Private`normalLines$ = 
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`normalCount$$, 
                    "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`normalLength$$, 
                    12.133333333333331`], "TiltAngle" -> Pi/2], {}]; 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`normalOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`normalThickness$$]\
], CalculateScan`PlotterScanner`Private`normalLines$}]; 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$ = 
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    CalculateScan`PlotterScanner`Private`addTangents[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     "LengthFactor" -> 
                    Function[{
                    CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`tiltedTangentLength$$\
, 12.133333333333331`], "TiltAngle" -> 
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$]\
, {}]; CalculateScan`PlotterScanner`Private`tiltedTangentLinePlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$]], 
                    CalculateScan`PlotterScanner`Private`tiltedTangentLines$}]\
; If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}], 
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
osculatingCircleTF$$, 
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-15, {2, 0, 0}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3.5, {3, 0, 3}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (-15) (7 + 2 $CellContext`x)^
                    Rational[-7, 2]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$ = If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-15, {2, 0, 0}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3.5, {3, 0, 3}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (-15) (7 + 2 $CellContext`x)^
                    Rational[-7, 2]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$], {}]; 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$}]; 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
 = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`osculatingCircles$$,\
 {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$], 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadii$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}], CalculateScan`PlotterScanner`Private`taylorParabolas$$ = 
                    If[CalculateScan`PlotterScanner`Private`taylorParabolaTF$$\
, 
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas[{
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-15, {2, 0, 0}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3.5, {3, 0, 3}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (-15) (7 + 2 $CellContext`x)^
                    Rational[-7, 2]], Evaluate]}, {$CellContext`x, 
                    Min[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$], 
                    Max[
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$]}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
], {}]; CalculateScan`PlotterScanner`Private`taylorParabolaLastParamaters$$ = \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
}]; CalculateScan`PlotterScanner`Private`taylorParabolaPlot$ = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}]}]; CalculateScan`PlotterScanner`Private`evolutePlot$ = 
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 
                    0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], 1} (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2)/
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{-15, {2, 0, 0}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3.5, {3, 0, 3}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, (-15) (7 + 2 $CellContext`x)^
                    Rational[-7, 2]], 
                    Evaluate][$CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$], 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`evoluteThickness$$\
]], PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {
                    CalculateScan`PlotterScanner`Private`functionD[$\
CellContext`x] == 0}], {}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}], 
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$ = 
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`singularities$ = 
                    TimeConstrained[
                    Reduce[
                    1/(-(7 + 2 $CellContext`x)^Rational[-3, 2]) == 
                    0, $CellContext`x, Reals], 1, False]; 
                    CalculateScan`PlotterScanner`Private`domainsAndCounts = If[
                    Or[
                    CalculateScan`PlotterScanner`Private`singularities$ === 
                    False, Head[
                    CalculateScan`PlotterScanner`Private`singularities$] === 
                    Reduce], {{{
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}}, 
                    CalculateScan`PlotterScanner`Private`singularityPoints = 
                    Cases[
                    Chop[
                    N[
                    ReplaceAll[$CellContext`x, {
                    ToRules[
                    CalculateScan`PlotterScanner`Private`singularities$]}]]], 
                    Blank[Real]]; 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant = Sort[
                    Select[
                    CalculateScan`PlotterScanner`Private`singularityPoints, 
                    CalculateScan`PlotterScanner`Private`xL$ < # < 
                    CalculateScan`PlotterScanner`Private`xU$& ], Less]; 
                    CalculateScan`PlotterScanner`Private`pureDomains = 
                    Partition[{CalculateScan`PlotterScanner`Private`xL$, 
                    Apply[
                    Sequence, 
                    CalculateScan`PlotterScanner`Private`\
singularityPointsRelevant], CalculateScan`PlotterScanner`Private`xU$}, 2, 1]; 
                    Table[CalculateScan`PlotterScanner`Private`iLength = Abs[
                    Apply[Subtract, 
                    Part[
                    CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i]]]; 
                    CalculateScan`PlotterScanner`Private`involuteCounti = 
                    Ceiling[CalculateScan`PlotterScanner`Private`iLength (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)^(-1) 
                    CalculateScan`PlotterScanner`Private`involuteCount$$]; 
                    CalculateScan`PlotterScanner`Private`iScale = 
                    CalculateScan`PlotterScanner`Private`iLength/
                    CalculateScan`PlotterScanner`Private`involuteCounti; {{
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 1] + 
                    CalculateScan`PlotterScanner`Private`iScale/4, 
                    Part[CalculateScan`PlotterScanner`Private`pureDomains, 
                    CalculateScan`PlotterScanner`Private`i, 2] - 
                    CalculateScan`PlotterScanner`Private`iScale/4}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`pureDomains]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$ = Transpose[
                    
                    Table[{{CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, 
                    CalculateScan`PlotterScanner`Private`involuteCounti} = 
                    Part[CalculateScan`PlotterScanner`Private`\
domainsAndCounts, CalculateScan`PlotterScanner`Private`i]; 
                    CalculateScan`PlotterScanner`Private`arcLength$ = Part[
                    
                    NDSolve[{Derivative[1][
                    CalculateScan`PlotterScanner`Private`arcL$][$CellContext`\
x] == Sqrt[1 + D[-(7 + 2 $CellContext`x)^Rational[-3, 2], $CellContext`x]^2], 
                    CalculateScan`PlotterScanner`Private`arcL$[
                    CalculateScan`PlotterScanner`Private`xLi$] == 0}, 
                    CalculateScan`PlotterScanner`Private`arcL$, \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}], 1, 1, 2]; {
                    CalculateScan`PlotterScanner`Private`xi1$, 
                    CalculateScan`PlotterScanner`Private`xi2$} = 
                    Part[CalculateScan`PlotterScanner`Private`arcLength$, 1, 
                    1]; CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]}], $CellContext`x], \
{$CellContext`x, CalculateScan`PlotterScanner`Private`xLi$, 
                    CalculateScan`PlotterScanner`Private`xUi$}, PlotRange -> 
                    All, Evaluated -> False, MaxRecursion -> 4]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`arcFactors$ = 
                    Map[CalculateScan`PlotterScanner`Private`arcLength$[
                    Part[#, 1]]& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`iTabRight$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi1$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi2$ - 
                    CalculateScan`PlotterScanner`Private`xi1$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Max[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0]]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; CalculateScan`PlotterScanner`Private`iTabLeft$ = If[True, 
                    Table[
                    CalculateScan`PlotterScanner`Private`x0 = 
                    CalculateScan`PlotterScanner`Private`xi2$ + 
                    CalculateScan`PlotterScanner`Private`jk (
                    CalculateScan`PlotterScanner`Private`involuteCounti + 
                    1)^(-1) (CalculateScan`PlotterScanner`Private`xi1$ - 
                    CalculateScan`PlotterScanner`Private`xi2$); 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ = 
                    Map[Map[Min[#, 0]& , #]& , 
                    CalculateScan`PlotterScanner`Private`arcFactors$ - (
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`xi2$] - 
                    CalculateScan`PlotterScanner`Private`arcLength$[
                    CalculateScan`PlotterScanner`Private`x0])]; 
                    CalculateScan`PlotterScanner`Private`curvePoints$ = 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`signedArcFactors$ 
                    CalculateScan`PlotterScanner`Private`oSegments$; If[
                    MemberQ[CalculateScan`PlotterScanner`Private`curvePoints$, 
                    Blank[Complex], {0, Infinity}], {}, 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`curvePoints$]], {
                    CalculateScan`PlotterScanner`Private`jk, 1, 
                    CalculateScan`PlotterScanner`Private`involuteCounti}], \
{}]; {CalculateScan`PlotterScanner`Private`iTabRight$, 
                    CalculateScan`PlotterScanner`Private`iTabLeft$}, {
                    CalculateScan`PlotterScanner`Private`i, 
                    Length[
                    CalculateScan`PlotterScanner`Private`domainsAndCounts]}]]; 
                    CalculateScan`PlotterScanner`Private`iTab$, {}]; 
                    CalculateScan`PlotterScanner`Private`\
involutePlotCurveLastParamaters$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`involuteCount$$}; 
                    Null]; CalculateScan`PlotterScanner`Private`involutePlot$ = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`involuteThickness$\
$]], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    1], {}], 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    CalculateScan`PlotterScanner`Private`involutesLeftTF$$], 
                    Part[
                    CalculateScan`PlotterScanner`Private`involutePlotCurves$, 
                    2], {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}],
                     CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 12.133333333333331`]}, CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], 
                    1}], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$^(-\
1) CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]]\
, {}]; CalculateScan`PlotterScanner`Private`offsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$}]; 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$]\
, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}], 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$ = 
                    If[CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`maxDist$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 12.133333333333331`], 
                    CalculateScan`PlotterScanner`Private`M$ = {{
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}, {-Sin[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$], 
                    Cos[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$]}}}, 
                    CalculateScan`PlotterScanner`Private`oCurve = 
                    ParametricPlot3D[
                    Prepend[
                    Dot[CalculateScan`PlotterScanner`Private`M$, 
                    Normalize[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], 
                    1}]], $CellContext`x], {$CellContext`x, 
                    Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> All, Evaluated -> False, MaxRecursion -> 5]; 
                    CalculateScan`PlotterScanner`Private`lineSegments$ = 
                    Select[
                    Map[First, 
                    Cases[
                    Normal[CalculateScan`PlotterScanner`Private`oCurve], 
                    Blank[Line], Infinity]], Length[#] > 3& ]; 
                    CalculateScan`PlotterScanner`Private`baseSegments$ = Map[{
                    Part[#, 1], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    Part[#, 1]]}& , 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    CalculateScan`PlotterScanner`Private`oSegments$ = 
                    Map[Rest, 
                    CalculateScan`PlotterScanner`Private`lineSegments$, {-2}]; 
                    Table[{
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ + 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$], 
                    Map[
                    BSplineCurve, 
                    CalculateScan`PlotterScanner`Private`baseSegments$ - 
                    CalculateScan`PlotterScanner`Private`j 
                    CalculateScan`PlotterScanner`Private`maxDist$ 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$^(-1) 
                    CalculateScan`PlotterScanner`Private`oSegments$]}, {
                    CalculateScan`PlotterScanner`Private`j, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$}]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$}]; 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, CalculateScan`PlotterScanner`Private`tiltedOffsetCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$}], 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$ = If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\
pedalCurveCount$ = If[CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x])) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {1, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x]}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`pedalCurveCount$}]]]]\
, {}]; CalculateScan`PlotterScanner`Private`pedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurveLastParamaters$$ =!= \
{{CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
negativePedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$ = If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-(
                    CalculateScan`PlotterScanner`Private`px$ - 
                    2 $CellContext`x) (
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) - ((
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) $CellContext`x + (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x])^2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x)^2 + CalculateScan`PlotterScanner`Private`py$ 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]^2 + (
                    CalculateScan`PlotterScanner`Private`px$ - \
$CellContext`x) (CalculateScan`PlotterScanner`Private`py$ - 2 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]}/(
                    CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], 
                    Evaluate][$CellContext`x] + (-
                    CalculateScan`PlotterScanner`Private`px$ + $CellContext`x)
                     CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, CalculateScan`PlotterScanner`Private`negativePedalCurvePlotCurves$$, {}]}]; 
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$ = 
                    With[{CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + (
                    1 (CalculateScan`PlotterScanner`Private`py$ - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]) + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (-
                    CalculateScan`PlotterScanner`Private`px$ + \
$CellContext`x)) (1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2)^(-1) {-
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x], 
                    1}, {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCount$}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}], 
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
 = With[{CalculateScan`PlotterScanner`Private`dualCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
dualCurveCountFactor$$]]]}, 
                    (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurvePoints === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}, {
                    CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    ParametricPlot[{-CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x], 1}/(($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$)), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotStyle -> Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], PlotRange -> 
                    CalculateScan`PlotterScanner`Private`pRY$, Evaluated -> 
                    False, Exclusions -> {($CellContext`x + 
                    CalculateScan`PlotterScanner`Private`px$) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] - 
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] + 
                    CalculateScan`PlotterScanner`Private`py$) == 0}]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`dualCurveCount$}]]]],\
 {}]; CalculateScan`PlotterScanner`Private`dualCurveLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, CalculateScan`PlotterScanner`Private`dualCurvePoints}]; 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$], 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
dualCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}], 
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
inverseCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
inverseCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$]]], CalculateScan`PlotterScanner`Private`R$ = 
                    Function[{CalculateScan`PlotterScanner`Private`y, 
                    CalculateScan`PlotterScanner`Private`L}, 
                    Sign[CalculateScan`PlotterScanner`Private`y] 
                    CalculateScan`PlotterScanner`Private`L Tan[
                    Abs[CalculateScan`PlotterScanner`Private`y]]^1][
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 1] 
                    Abs[CalculateScan`PlotterScanner`Private`X2$ - 
                    CalculateScan`PlotterScanner`Private`X1$]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$ === 
                    "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}, \
{CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`px]}, 
                    
                    ParametricPlot[{
                    CalculateScan`PlotterScanner`Private`px$, 
                    CalculateScan`PlotterScanner`Private`py$} + 
                    CalculateScan`PlotterScanner`Private`R$^2 {$CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$}/(($CellContext`\
x - CalculateScan`PlotterScanner`Private`px$)^2 + (
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$)^2), \
{$CellContext`x, Min[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] - 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2, 
                    Max[CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$] + 
                    CalculateScan`PlotterScanner`Private`\[CapitalDelta]X$/2},
                     PlotRange -> CalculateScan`PlotterScanner`Private`pRY$, 
                    Evaluated -> False]], {
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`inverseCurveCount$}]]\
]], {}]; CalculateScan`PlotterScanner`Private`inverseLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$}]; 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot = 
                    Graphics[{
                    Directive[
                    Opacity[
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
], CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}], 
                    If[CalculateScan`PlotterScanner`Private`orthotomicCurveTF$\
$, CalculateScan`PlotterScanner`Private`orthotomicCurvePlotCurves$$ = (Cases[
                    Normal[#], 
                    Blank[Line], {0, Infinity}]& )[
                    
                    With[{CalculateScan`PlotterScanner`Private`\
orthotomicCurveCount$ = 
                    If[CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Max[1, 
                    Round[
                    16 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]], 
                    Max[1, 
                    Round[
                    120 CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$]]]}, 
                    If[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$ === "grid", 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CalculateScan`PlotterScanner`Private`py}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}, {CalculateScan`PlotterScanner`Private`py, 
                    CalculateScan`PlotterScanner`Private`yL$, 
                    CalculateScan`PlotterScanner`Private`yU$, (
                    CalculateScan`PlotterScanner`Private`yU$ - 
                    CalculateScan`PlotterScanner`Private`yL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}], 
                    Table[
                    
                    With[{CalculateScan`PlotterScanner`Private`px$ = 
                    CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`py$ = 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]}, 
                    ParametricPlot[{$CellContext`x, 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x]} + {(-2) 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] (
                    1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$)), 2 
                    1 (1 (CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate][$CellContext`x] - 
                    CalculateScan`PlotterScanner`Private`py$) - 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x] ($CellContext`x - 
                    CalculateScan`PlotterScanner`Private`px$))}/(1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], 
                    Evaluate][$CellContext`x]^2), {$CellContext`x, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$}, 
                    PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, Evaluated -> 
                    False]], {CalculateScan`PlotterScanner`Private`px, 
                    CalculateScan`PlotterScanner`Private`xL$, 
                    CalculateScan`PlotterScanner`Private`xU$, (
                    CalculateScan`PlotterScanner`Private`xU$ - 
                    CalculateScan`PlotterScanner`Private`xL$)/
                    CalculateScan`PlotterScanner`Private`orthotomicCurveCount$\
}]]]], {}]; 
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$ = {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$}]; 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot = 
                    Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}]}]; If[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
, CalculateScan`PlotterScanner`Private`isopticCurvePlotCurves$$ = Quiet[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Alpha]$ = 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$},
                     CalculateScan`PlotterScanner`Private`cpIsoptic = 
                    ContourPlot[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$] 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$])/
                    Sqrt[(1 + CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x1$$]^2) (1 + 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate][
                    CalculateScan`PlotterScanner`Private`x2$$]^2)] == 
                    Cos[CalculateScan`PlotterScanner`Private`\[Alpha]$], {
                    CalculateScan`PlotterScanner`Private`x1$$, (-2) Pi, 2 
                    Pi}, {CalculateScan`PlotterScanner`Private`x2$$, (-2) Pi, 
                    2 Pi}, Exclusions -> {
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]][
                    CalculateScan`PlotterScanner`Private`x1$$] - 
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]][
                    CalculateScan`PlotterScanner`Private`x2$$] == 0}, 
                    Evaluated -> False]; 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves = Cases[
                    Normal[CalculateScan`PlotterScanner`Private`cpIsoptic], 
                    Blank[Line], Infinity]; 
                    If[CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}, {}, 
                    Map[
                    CalculateScan`PlotterScanner`Private`getSplineSegments, 
                    Map[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint[#, {
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{1.5, {3, 0, 3}}, {2, {2, 0, 1}}, {7, {2, 0, 0}}}, {
                    0, 2, 4, 0, 0}, {{10, 1, 1}, {16, 1, 0, 1}, {10, 0, 2}, {
                    13, 2, 1, 2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 
                    60, 3, 0, 1, 3, 0, 2}, {19, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, -(7 + 2 $CellContext`x)^
                    Rational[-3, 2]], Evaluate], 
                    CompiledFunction[{11, 12., 5468}, {
                    Blank[Real]}, {{3, 0, 0}, {3, 0, 
                    1}}, {{2.5, {3, 0, 3}}, {2, {2, 0, 2}}, {7, {2, 0, 1}}, {
                    3, {2, 0, 0}}}, {0, 3, 4, 0, 
                    0}, {{10, 2, 1}, {16, 1, 0, 1}, {10, 1, 2}, {13, 2, 1, 
                    2}, {41, 263, 3, 0, 2, 3, 0, 3, 3, 0, 1}, {40, 60, 3, 0, 
                    1, 3, 0, 2}, {10, 0, 1}, {16, 1, 2, 1}, {1}}, 
                    
                    Function[{$CellContext`x}, 
                    3 (7 + 2 $CellContext`x)^Rational[-5, 2]], Evaluate]}]& , 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves, \
{-2}]]]], {}]]; 
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$ =!= {{
                    CalculateScan`PlotterScanner`Private`X1$, 
                    CalculateScan`PlotterScanner`Private`X2$}, 
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$}]\
; CalculateScan`PlotterScanner`Private`isopticCurvePlot = Graphics[{
                    Directive[
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Opacity[
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
], 
                    Thickness[
                    10^CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$]], 
                    If[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}]}]; 
                    CalculateScan`PlotterScanner`Private`annotatedPlotList = {
                    "tangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`tangentLinePlot$, 
                    "normalLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`normalLinePlot$, 
                    "tiltedTangentLinePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentLinePlot$, "osculatingCirclePlot" -> 
                    CalculateScan`PlotterScanner`Private`osculatingCirclePlot$\
, "taylorParabolaPlot" -> 
                    CalculateScan`PlotterScanner`Private`taylorParabolaPlot$, 
                    "involutePlot" -> 
                    CalculateScan`PlotterScanner`Private`involutePlot$, 
                    "evolutePlot" -> 
                    CalculateScan`PlotterScanner`Private`evolutePlot$, 
                    "dualCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`dualCurvePlot, 
                    "offsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`offsetCurvePlot, 
                    "tiltedOffsetCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlot, "pedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`pedalCurvePlot, 
                    "negativePedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlot, "contraPedalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`contraPedalCurvePlot,
                     "inverseCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`inverseCurvePlot, 
                    "isopticCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`isopticCurvePlot, 
                    "orthotomicCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`orthotomicCurvePlot, 
                    "originalCurvePlot" -> 
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$}; 
                    CalculateScan`PlotterScanner`Private`labelGrid = (
                    DeleteCases[#, {}]& )[{
                    If[
                    TrueQ[True], {
                    RawBoxes[
                    FormBox[
                    RowBox[{"-", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "7"}], ")"}], 
                    RowBox[{"3", "/", "2"}]]]}], TraditionalForm]], 
                    Style["\[LongDash]", Bold, Black]}, {}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`tangentTF$$], {
                    "tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tangentColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`normalTF$$], {
                    "normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`normalColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedTangentTF$$], {
                    "tilted tangents", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$]\
, {"osculating circles", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$], \
{"Taylor parabolas", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`involuteTF$$], {
                    "involutes", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`involuteColor$$]}, \
{}], 
                    If[
                    TrueQ[CalculateScan`PlotterScanner`Private`evoluteTF$$], {
                    "evolute", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`offsetCurveTF$$], {
                    "offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$]},\
 {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
], {"tilted offset curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$], {"contrapedal curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$]}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$]\
, {"normals", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$]\
}, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$], {
                    "dual curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$]}, \
{}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$], {
                    "inverse curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$], {
                    "isoptic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$]}\
, {}], 
                    If[
                    TrueQ[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$],\
 {"orthotomic curves", 
                    Style[
                    "\[LongDash]", Bold, 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$]}, {}]}]; Column[{
                    If[
                    MatchQ[
                    CalculateScan`PlotterScanner`Private`originalCurvePlot$, 
                    Graphics[
                    GraphicsComplex[
                    Blank[], {}], 
                    BlankSequence[]]], 
                    Text[
                    Style[
                    "(original curve is not real\[Hyphen]valued\n over the \
specified range\n of the independent variable)", Gray]], 
                    Show[
                    Map[
                    Last, CalculateScan`PlotterScanner`Private`\
annotatedPlotList], PlotRange -> {
                    CalculateScan`PlotterScanner`Private`pRX$, 
                    CalculateScan`PlotterScanner`Private`pRY$}, ImageSize -> 
                    300, ImagePadding -> 5, AspectRatio -> 
                    CalculateScan`PlotterScanner`Private`ar$$, 
                    If[CalculateScan`PlotterScanner`Private`sa$$, 
                    Apply[
                    Sequence, {
                    Axes -> True, AxesOrigin -> {0, 0}, AxesStyle -> 
                    Lighter[Gray]}], 
                    Apply[Sequence, {}]], 
                    If[CalculateScan`PlotterScanner`Private`st$$, 
                    Apply[Sequence, {Ticks -> Automatic}], 
                    Apply[Sequence, {Ticks -> None}]]]], 
                    Grid[{
                    Map[Grid[
                    Map[Reverse, #], Alignment -> Left]& , 
                    
                    With[{CalculateScan`PlotterScanner`Private`\[Lambda]T = 
                    Max[
                    Floor[
                    Length[CalculateScan`PlotterScanner`Private`labelGrid]/2],
                     1]}, 
                    Partition[
                    CalculateScan`PlotterScanner`Private`labelGrid, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    CalculateScan`PlotterScanner`Private`\[Lambda]T, 
                    1, {}]]]}, Dividers -> {False, False}, 
                    Spacings -> {4, Automatic}]}]]]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`x1$$, \
-0.9453112865556675, 
                    Subscript[
                    Style["x", Italic], "min"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    1}, {{CalculateScan`PlotterScanner`Private`x2$$, 
                    0.5516549825285468, 
                    Subscript[
                    Style["x", Italic], "max"]}, -1.5393804002589986`, 
                    1.5393804002589986`, ImageSize -> Small, ControlPlacement -> 
                    2}, {{CalculateScan`PlotterScanner`Private`symmxQ$$, 
                    False, "symmetric"}, {True, False}, ControlPlacement -> 
                    3}, {{CalculateScan`PlotterScanner`Private`fy1$$, 
                    0.982793723247329, 
                    Subscript["y", "min"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 4}, {{
                    CalculateScan`PlotterScanner`Private`fy2$$, 
                    0.982793723247329, 
                    Subscript["y", "max"]}, 0, 1.5393804002589986`, ImageSize -> 
                    Small, ControlPlacement -> 5}, {{
                    CalculateScan`PlotterScanner`Private`symmyQ$$, True, 
                    "symmetric"}, {True, False}, ControlPlacement -> 6}, {{
                    CalculateScan`PlotterScanner`Private`sqPRQ$$, False, 
                    Dynamic[
                    Style["same as horizontal-range", 
                    If[
                    CalculateScan`PlotterScanner`Private`symmxQ$$, Black, 
                    Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 7}, {{
                    CalculateScan`PlotterScanner`Private`sa$$, False, 
                    "show axes"}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 8}, {{
                    CalculateScan`PlotterScanner`Private`st$$, False, 
                    Dynamic[
                    Style["show ticks", 
                    If[
                    CalculateScan`PlotterScanner`Private`sa$$ === True, Black,
                     Gray]]]}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 9}, {{
                    CalculateScan`PlotterScanner`Private`ar$$, 1, 
                    "aspect ratio"}, 
                    Rational[1, 4], 4, ImageSize -> Small, ControlPlacement -> 
                    10}, {{CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 11}, {{
                    CalculateScan`PlotterScanner`Private`tangentCount$$, 60, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    12}, {{CalculateScan`PlotterScanner`Private`tangentLength$\
$, 0.08223172781907569, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 13}, {{
                    CalculateScan`PlotterScanner`Private`tangentThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 14}, {{
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    RGBColor[0.237736, 0.340215, 0.575113], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 15}, {{
                    CalculateScan`PlotterScanner`Private`tangentOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    16}, {{CalculateScan`PlotterScanner`Private`normalTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 17}, {{
                    CalculateScan`PlotterScanner`Private`normalCount$$, 120, 
                    ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    18}, {{CalculateScan`PlotterScanner`Private`normalLength$$\
, 0.08223172781907569, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 19}, {{
                    CalculateScan`PlotterScanner`Private`normalThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 20}, {{
                    CalculateScan`PlotterScanner`Private`normalColor$$, 
                    RGBColor[0.237, 0.34, 0.575], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 21}, {{
                    CalculateScan`PlotterScanner`Private`normalOpacity$$, 0.8,
                     ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    22}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentTF$$, False, ""}, {True, False}, ControlPlacement -> 23}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentAngle$$,
                     Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small, 
                    ControlPlacement -> 24}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentCount$$,
                     60, ""}, 2, 360, 1, ImageSize -> Small, ControlPlacement -> 
                    25}, {{CalculateScan`PlotterScanner`Private`\
tiltedTangentLength$$, 0.08223172781907569, ""}, 0, 1.5393804002589986`, 
                    ImageSize -> Small, ControlPlacement -> 26}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedTangentThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 27}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$, 
                    RGBColor[
                    0.2622702, 0.40739780000000003`, 0.41955020000000004`], 
                    ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 28}, {{
                    CalculateScan`PlotterScanner`Private`tiltedTangentOpacity$\
$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 29}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 30}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleCount$$, 60, ""}, 2, 360, 1, ImageSize -> Small, 
                    ControlPlacement -> 31}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 32}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, 
                    RGBColor[0.2752426, 0.4446824, 0.33950440000000004`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 33}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 34}, {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleRadiiTF$$, False, ""}, {True, False}, ImageSize -> Small, 
                    ControlPlacement -> 35}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 36}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaCount$$\
, 36, ""}, 2, 120, 1, ImageSize -> Small, ControlPlacement -> 37}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 38}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, 
                    RGBColor[0.7189495000000001, 0.719797, 0.283877], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 39}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    40}, {{CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 41}, {{
                    CalculateScan`PlotterScanner`Private`involuteCount$$, 60, 
                    ""}, 1, 120, 1, ImageSize -> Small, ControlPlacement -> 
                    42}, {{CalculateScan`PlotterScanner`Private`\
involuteThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 
                    43}, {{CalculateScan`PlotterScanner`Private`involuteColor$\
$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 44}, {{
                    CalculateScan`PlotterScanner`Private`involuteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    45}, {{CalculateScan`PlotterScanner`Private`\
involutesLeftTF$$, False, ""}, {True, False}, ControlPlacement -> 46}, {{
                    CalculateScan`PlotterScanner`Private`involutesRightTF$$, 
                    True, ""}, {True, False}, ControlPlacement -> 47}, {{
                    CalculateScan`PlotterScanner`Private`evoluteTF$$, False, 
                    ""}, {True, False}, ControlPlacement -> 48}, {{
                    CalculateScan`PlotterScanner`Private`evoluteThickness$$, \
-3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 49}, {{
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    RGBColor[0.813033, 0.766292, 0.303458], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 50}, {{
                    CalculateScan`PlotterScanner`Private`evoluteOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    51}, {{CalculateScan`PlotterScanner`Private`offsetCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 52}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveDistance$$\
, 0.08223172781907569, ""}, 0, 1.5393804002589986`, ImageSize -> Small, 
                    ControlPlacement -> 53}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveCount$$, 
                    12, ""}, 1, 60, 1, ImageSize -> Small, ControlPlacement -> 
                    54}, {{CalculateScan`PlotterScanner`Private`\
offsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 55}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    RGBColor[0.877875, 0.731045, 0.326896], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 56}, {{
                    CalculateScan`PlotterScanner`Private`offsetCurveOpacity$$,
                     0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    57}, {{CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveTF$$, False, ""}, {True, False}, ControlPlacement -> 58}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveAngle$$, Rational[1, 4] Pi, ""}, -Pi, Pi, ImageSize -> Small,
                     ControlPlacement -> 59}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveDistance$$, 0.08223172781907569, ""}, 0, 1.5393804002589986`,
                     ImageSize -> Small, ControlPlacement -> 60}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveCount$$, 12, ""}, 1, 60, 1, ImageSize -> Small, 
                    ControlPlacement -> 61}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 62}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, 
                    RGBColor[0.49978279999999997`, 0.6025278, 0.2508104], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 63}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 64}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 65}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    66}, {{CalculateScan`PlotterScanner`Private`\
pedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 67}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    RGBColor[0.32894650000000003`, 0.5006225, 0.2625337], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 68}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    69}, {{CalculateScan`PlotterScanner`Private`\
pedalCurvePoints$$, "curve", ""}, {"grid", "curve"}, ImageSize -> Small, 
                    ControlPlacement -> 70}, {{
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, False, ""}, {True, False}, ControlPlacement -> 71}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 72}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 73}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 74}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 75}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> 
                    Small, ControlPlacement -> 76}, {{
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$,
                     False, ""}, {True, False}, ControlPlacement -> 77}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 78}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 79}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, 
                    RGBColor[0.7464574, 0.2952580000000001, 0.2454606], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 80}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 81}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small,
                     ControlPlacement -> 82}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveTF$$, False,
                     ""}, {True, False}, ControlPlacement -> 83}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveCountFactor$\
$, 0.3, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 84}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveThickness$$,\
 -3., ""}, -4, -0.5, ImageSize -> Small, ControlPlacement -> 85}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 86}, {{
                    CalculateScan`PlotterScanner`Private`dualCurveOpacity$$, 
                    0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 
                    87}, {{CalculateScan`PlotterScanner`Private`\
dualPedalCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 88}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 89}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 90}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 91}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    RGBColor[0.2860602, 0.4663408, 0.29410879999999995`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 92}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 93}, {{
                    CalculateScan`PlotterScanner`Private`inverseCurvePoints$$,
                     "grid", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 94}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurveCircleRadiusFactor$$, 0.4636476090008061, ""}, 0, 1, ImageSize -> 
                    Small, ControlPlacement -> 95}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 96}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveAngle$$, 
                    Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, 
                    ControlPlacement -> 97}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 98}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 99}, {{
                    CalculateScan`PlotterScanner`Private`isopticCurveOpacity$$\
, 0.8, ""}, 0, 1, ImageSize -> Small, ControlPlacement -> 100}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    False, ""}, {True, False}, ControlPlacement -> 101}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveAngle$\
$, Rational[1, 3] Pi, ""}, 0, Pi, ImageSize -> Small, ControlPlacement -> 
                    102}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveCountFactor$$, 0.3, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 103}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveThickness$$, -3., ""}, -4, -0.5, ImageSize -> Small, 
                    ControlPlacement -> 104}, {{
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, 
                    RGBColor[
                    0.8519382, 0.7451437999999999, 0.31752080000000005`], ""}, 
                    RGBColor[1, 0, 0], ImageSize -> Tiny, AppearanceElements -> 
                    "Spectrum", ControlPlacement -> 105}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurveOpacity$$, 0.8, ""}, 0, 1, ImageSize -> Small, 
                    ControlPlacement -> 106}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePoints$$, "curve", ""}, {"curve", "grid"}, ImageSize -> Small, 
                    ControlPlacement -> 107}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Row[{
                    Invisible[
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]]], 
                    " ", 
                    Column[{"Horizontal plot range:", 
                    Row[{
                    Manipulate`Place[1], "  ", 
                    Manipulate`Place[2], "  ", 
                    Manipulate`Place[3]}]}]}], 
                    PaneSelector[{True -> Grid[{{
                    Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " "}], CalculateUtilities`GraphicsUtilities`Private`more$$\
 = False, Appearance -> None, BaseStyle -> {}], 
                    Button[
                    "Fewer controls", 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    False, Appearance -> None, BaseStyle -> {}]}, {"", 
                    Item[
                    Column[{
                    Column[{"Vertical plot range:", 
                    Row[{
                    Manipulate`Place[4], "  ", 
                    Manipulate`Place[5], "  ", 
                    Manipulate`Place[6]}], 
                    Manipulate`Place[7]}], 
                    Column[{
                    Row[{
                    Manipulate`Place[8], "  ", 
                    Manipulate`Place[9]}], 
                    Row[{
                    Manipulate`Place[10], "   settings: ", 
                    Button["1", CalculateScan`PlotterScanner`Private`ar$$ = 1,
                     ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}], "  ", 
                    Button["unscaled axes", 
                    (If[
                    1/4 <= # <= 4, 
                    CalculateScan`PlotterScanner`Private`ar$$ = #]& )[Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRY]]/Abs[
                    Apply[
                    Subtract, CalculateScan`PlotterScanner`Private`pRX]]], 
                    ImageSize -> Small, Appearance -> "Palette", 
                    BaseStyle -> {}]}]}], 
                    TabView[{Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tangentColor$$, 
                    Bold], " "]], 
                    Tooltip[" tangents             ", 
                    Style[" family of tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tangents", 
                    Manipulate`Place[11]}, {"tangent count", 
                    Manipulate`Place[12]}, {"tangent length", 
                    Manipulate`Place[13]}, {"tangent thickness", 
                    Manipulate`Place[14]}, {"tangent color", 
                    Manipulate`Place[15]}, {"tangent opacity", 
                    Manipulate`Place[16]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`normalTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`normalColor$$, Bold],
                     " "]], 
                    Tooltip[" normals              ", 
                    Style[" family of normals at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show normals", 
                    Manipulate`Place[17]}, {"normal count", 
                    Manipulate`Place[18]}, {"normal length", 
                    Manipulate`Place[19]}, {"normal thickness", 
                    Manipulate`Place[20]}, {"normal color", 
                    Manipulate`Place[21]}, {"normal opacity", 
                    Manipulate`Place[22]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`tiltedTangentTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`tiltedTangentColor$$,
                     Bold], " "]], 
                    Tooltip[" tilted tangents      ", 
                    Style[
                    " family of tilted tangents at points along the curve ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted tangents", 
                    Manipulate`Place[23]}, {"tilted tangent angle", 
                    Manipulate`Place[24]}, {"tilted tangent count", 
                    Manipulate`Place[25]}, {"tilted tangent length", 
                    Manipulate`Place[26]}, {"tilted tangent thickness", 
                    Manipulate`Place[27]}, {"tilted tangent color", 
                    Manipulate`Place[28]}, {"tilted tangent opacity", 
                    Manipulate`Place[29]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleColor$$, Bold], " "]], 
                    Tooltip[" osculating circles   ", 
                    Style[
                    " family of osculating circles (circles that are tangent \
to the curve) at points along the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show osculating circles", 
                    Manipulate`Place[30]}, {"osculating circle count", 
                    Manipulate`Place[31]}, {"osculating circle thickness", 
                    Manipulate`Place[32]}, {"osculating circle color", 
                    Manipulate`Place[33]}, {"osculating circle opacity", 
                    Manipulate`Place[34]}, {"show circle radii", 
                    Manipulate`Place[35]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], 
                    Dynamic[
                    Style[
                    If[
                    And[
                    CalculateScan`PlotterScanner`Private`osculatingCircleTF$$, 
                    Not[
                    0.98 < CalculateScan`PlotterScanner`Private`ar$$ < 1.02]],
                     "(note than circles appear as ellipses for unequally\n\
scaled horizontal and vertical axes)", ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`taylorParabolaTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`taylorParabolaColor$$\
, Bold], " "]], 
                    Tooltip[" Taylor parabolas     ", 
                    Style[" family of second order Taylor approximations", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show Taylor parabolas", 
                    Manipulate`Place[36]}, {"Taylor parabola count", 
                    Manipulate`Place[37]}, {"Taylor parabola thickness", 
                    Manipulate`Place[38]}, {"Taylor parabola color", 
                    Manipulate`Place[39]}, {"Taylor parabola opacity", 
                    Manipulate`Place[40]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`involuteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`involuteColor$$, 
                    Bold], " "]], 
                    Tooltip[" involutes            ", 
                    Style[
                    " family of involutes (curves traced out by strings \
unwound from the curve) of the curve", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show involutes", 
                    Manipulate`Place[41]}, {"involute count", 
                    Manipulate`Place[42]}, {"involute thickness", 
                    Manipulate`Place[43]}, {"involute color", 
                    Manipulate`Place[44]}, {"involute opacity", 
                    Manipulate`Place[45]}, {"directions", 
                    Row[{"\[DoubleLongLeftArrow]", 
                    Manipulate`Place[46], "  \[DoubleLongRightArrow]", 
                    Manipulate`Place[47]}]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`evoluteTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`evoluteColor$$, 
                    Bold], " "]], 
                    Tooltip[" evolute              ", 
                    Style[
                    " the evolute of a given curve (curve of the centers of \
the osculating circles))", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show evolute", 
                    Manipulate`Place[48]}, {"evolute thickness", 
                    Manipulate`Place[49]}, {"evolute color", 
                    Manipulate`Place[50]}, {"evolute opacity", 
                    Manipulate`Place[51]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`offsetCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`offsetCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" offset curves        ", 
                    Style[
                    " family of offset curves (curves shifted a fixed \
distance perpendicular to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show offset curves", 
                    Manipulate`Place[52]}, {"offset curve distance", 
                    Manipulate`Place[53]}, {"offset curve count", 
                    Manipulate`Place[54]}, {"offset curve thickness", 
                    Manipulate`Place[55]}, {"offset curve color", 
                    Manipulate`Place[56]}, {"offset curve opacity", 
                    Manipulate`Place[57]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`tiltedOffsetCurveTF$$\
, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveColor$$, Bold], " "]], 
                    Tooltip[" tilted offset curves ", 
                    Style[
                    " family of tilted offset curves (curves shifted a fixed \
distance in a direction with a fixed angle                                    \
   to the local normal to each point of the original curve) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show tilted offset curves", 
                    Manipulate`Place[58]}, {"tilted offset curve angle", 
                    Manipulate`Place[59]}, {"tilted offset curve distance", 
                    Manipulate`Place[60]}, {"tilted offset curve count", 
                    Manipulate`Place[61]}, {"tilted offset curve thickness", 
                    Manipulate`Place[62]}, {"tilted offset curve color", 
                    Manipulate`Place[63]}, {"tilted offset curve opacity", 
                    Manipulate`Place[64]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`pedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`pedalCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" pedal curves         ", 
                    Style[
                    " family of pedal curves (curves on the tangents of the \
given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show pedal curves", 
                    Manipulate`Place[65]}, {"pedal curve count", 
                    Manipulate`Place[66]}, {"pedal curve thickness", 
                    Manipulate`Place[67]}, {"pedal curve color", 
                    Manipulate`Place[68]}, {"pedal curve opacity", 
                    Manipulate`Place[69]}, {"pedal points", 
                    Manipulate`Place[70]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    True}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`negativePedalCurveTF$\
$, 
                    Style["\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveColor$$, Bold], " "]], 
                    Tooltip[" negative pedal curves", 
                    Style[
                    " family of negative pedal curves (envelope curves of \
lines perpendicular to the given curve and a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show negative pedal curves", 
                    Manipulate`Place[71]}, {"negative pedal curve count", 
                    Manipulate`Place[72]}, {"negative pedal curve thickness", 
                    Manipulate`Place[73]}, {"negative pedal curve color", 
                    Manipulate`Place[74]}, {"negative pedal curve opacity", 
                    Manipulate`Place[75]}, {"negative pedal points", 
                    Manipulate`Place[76]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`contraPedalCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveColor$$, Bold], " "]], 
                    Tooltip[" contrapedal curves   ", 
                    Style[
                    " family of contrapedal curves (curves on the normals of \
the given curve perpendicular to a given point) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show contrapedal curves", 
                    Manipulate`Place[77]}, {"contrapedal curve count", 
                    Manipulate`Place[78]}, {"contrapedal curve thickness", 
                    Manipulate`Place[79]}, {"contrapedal curve color", 
                    Manipulate`Place[80]}, {"contrapedal curve opacity", 
                    Manipulate`Place[81]}, {"contrapedal pedal points", 
                    Manipulate`Place[82]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`dualCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`dualCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" dual curves          ", 
                    Style[
                    " dual curve of the given curve (the dual curbe maps \
inflection points to cusps) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show dual curves", 
                    Manipulate`Place[83]}, {"dual curve count", 
                    Manipulate`Place[84]}, {"dual curve thickness", 
                    Manipulate`Place[85]}, {"dual curve color", 
                    Manipulate`Place[86]}, {"dual curve opacity", 
                    Manipulate`Place[87]}, {"dual curve points", 
                    Manipulate`Place[88]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`inverseCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`inverseCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" inverse curves       ", 
                    Style[
                    " inverse curves (curves resulting from carrying of an \
inversion on circles) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show inverse curves", 
                    Manipulate`Place[89]}, {"inverse curve count", 
                    Manipulate`Place[90]}, {"inverse curve thickness", 
                    Manipulate`Place[91]}, {"inverse curve color", 
                    Manipulate`Place[92]}, {"inverse curve opacity", 
                    Manipulate`Place[93]}, {"inversion curve points", 
                    Manipulate`Place[94]}, {"inversion circle radius", 
                    Manipulate`Place[95]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], Row[{" ", 
                    Dynamic[
                    If[CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`isopticCurveColor$$, 
                    Bold], " "]], 
                    Tooltip[" isoptic curves       ", 
                    Style[
                    " inverse curves (points on isoptic curves have two \
tangents with the given curve and the two tangents meet with the specified \
angle)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> Column[{
                    Grid[{{"show isoptic curves", 
                    Manipulate`Place[96]}, {"isoptic curve angle", 
                    Manipulate`Place[97]}, {"isoptic curve thickness", 
                    Manipulate`Place[98]}, {"isoptic curve color", 
                    Manipulate`Place[99]}, {"isoptic curve opacity", 
                    Manipulate`Place[100]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}], 
                    Dynamic[
                    Style[
                    If[
                    TrueQ[
                    And[
                    CalculateScan`PlotterScanner`Private`isopticCurveTF$$, 
                    CalculateScan`PlotterScanner`Private`x1x2SCPCurves === \
{}]], "(note than the set of isoptic curves for a given angle can be empty)", 
                    ""]], 
                    RGBColor[
                    0.6666666666666666, 0.6666666666666666, 
                    0.6666666666666666]]}, Alignment -> Left], Row[{" ", 
                    Dynamic[
                    If[
                    CalculateScan`PlotterScanner`Private`orthotomicCurveTF$$, 
                    Style[
                    "\[Checkmark]", 
                    CalculateScan`PlotterScanner`Private`orthotomicCurveColor$\
$, Bold], " "]], 
                    Tooltip[" orthotomic curves    ", 
                    Style[
                    " orthotomic curves (points of reflections of a given \
point on curve tangents)) ", 
                    GrayLevel[0.5]], TooltipDelay -> 0.33]}] -> 
                    Grid[{{"show orthotomic curves", 
                    Manipulate`Place[101]}, {"orthotomic curve angle", 
                    Manipulate`Place[102]}, {"orthotomic curve count", 
                    Manipulate`Place[103]}, {"orthotomic curve thickness", 
                    Manipulate`Place[104]}, {"orthotomic curve color", 
                    Manipulate`Place[105]}, {"orthotomic curve opacity", 
                    Manipulate`Place[106]}, {"orthotomic curve points", 
                    Manipulate`Place[107]}}, Alignment -> Left, 
                    Dividers -> {None, {False, True, False, False, False, 
                    False}}]}, 2, ImageSize -> {All, Automatic}, 
                    ControlPlacement -> Left]}, 
                    Dividers -> {None, {False, True, True, True}}, Spacings -> 
                    1], ItemSize -> Scaled[1], 
                    Frame -> {None, None, True, None}]}}, FrameStyle -> 
                    GrayLevel[0.9], Alignment -> Left, Spacings -> {0, 0.8}], 
                    False -> Button[
                    Row[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource["WABitmaps", "OrangePlus"]]], 
                    " ", "More controls"}], 
                    CalculateUtilities`GraphicsUtilities`Private`more$$ = 
                    True, Appearance -> None, BaseStyle -> {}]}, 
                    Dynamic[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], 
                    ImageSize -> Automatic]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]], {{
                    CalculateScan`PlotterScanner`Private`\
osculatingCircleLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`osculatingCircles$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
taylorParabolaLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`taylorParabolas$$, \
{}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
offsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
tiltedOffsetCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
pedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`pedalCurvePlotCurves$\
$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    
                    CalculateScan`PlotterScanner`Private`\
negativePedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
contraPedalCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
dualCurveLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`dualCurvePlotCurves$$\
, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
inverseCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
orthotomicCurvePlotCurves$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticLastParamaters$$, {}}, ControlType -> None}, {{
                    CalculateScan`PlotterScanner`Private`\
isopticCurvePlotCurves$$, {}}, ControlType -> None}}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({{
                   Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTangents] = 
                    Uncompress[
                    "6:eJzNV7tz0zAYT9ryLDCwMLNwcCzJsXBsaUIO7pKQ1oGJIUospzoUybU\
k2vLPgz4/4sh2sGR3aAZdJH/\
6fQ99z9crfhF0O52OeKWXCWIbhTZ4OcIBYUQSziZEyOAICE70cqEoTsgf6+ULp/\
6YR1vR05shomtFkcTeGrHlnHIpcQT/GY6W84j81p+\
WyPcXmgdmUgRPMtAyCwHfvl2zH4gqLIJODaWnVhaUIPH30ILwqf4z4jvu3TLpaUo6whTdYj8hOU0tM\
kegOQvgSjPLHJU5PtJLCize2mIGo16i6AO9nFHEfrUC6xfBjv8v5xtb6JtaKd9ZQ00Ju0s0VC+\
btZp3KBgPZerDLyBSQohUkTleN+NyrghO3+WhXqbch/A1XR/Yi5fAl29Drpj/+SaMsBAaMLkJj+\
xhKd7byvbzU+/DWT+PiUS6OJg8iNYFoXLANloSA9/ajEE19DPQCLONvByjteSRiW7t5iv/qhr/\
OTwb8UmE13CIaEPxJ3l4z6kSjs54lL3tgmyxIH/\
1zzE4mkk9rUpKu103wxxy0cxRYoEIc75cIZVpnXbwrRQzLP3R9nLIia4BA+\
aPMlcTuV5DJPYr0vCSh8kOltme/\
miVxVf1k7kk55iBS9FxAT82nswhCzhHHHAacSefjzWHnDXTXQ6i5E/\
BpgQInO3Td7HPScNXc8sKrbLQfUhogDDn1zhyKMdJfqjNa7t6nXSIWGf+Q+\
ftbsehABBfg1wpD23xuVP5iq+NERV4v3VlOA+\
1QRjS27yNHysW55kq8WHnaVaJpxsPXUVgHsXkrRKf0XsXWDTRqVaBgxXEUOpeGMIcWqCPm1kMN9Amw\
cyGpAUx9Dx6FESKysPDkDkXFqeg+\
BCES5vUZhNRxaSRsTV7StIpmabUGVaYr9zdxZ8WkcIFk4BzTXWh0lNy/RQ5kDIiKyWLpP8A4+pdmw=\
="], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addOsculatingCircles]\
 = Uncompress[
                    "6:eJzNVktT2zAQzoNHKXDhwrkXpr0VpheOadIOBwJu0vYcOZaDporksSQ\
ev57uyo4T22EskTBDDjt6fN799Cna3U+\
hHMXtVqulTsFcEzEzZEYnAxozwTST4popHXcQsANmZDjN4B/AXEke/ZTpXF3CpE/\
41HCi6XhKxCTgUmua4ljQdBKk7B62JiSKbpWFMTHrs3TKqYoPFt7rsRTu3T6Iv4QbQLYakGMTOiCR+\
p/EAfgRBgNZRG/XoYc5dEA5eaJRBjnMpQkISiDiLi5uJlG3HnofTB5BfXZ1Hg++ZifeBfOdE/\
FvI2fn23R2UXXWcOgzV9ePjSy/OLsaMrFNb6SZm/Mxa8Tai+kvw2gu4B6YoYzwGa/\
5559gLDlPpBHRj8ckpUpBCsj28DbGVKtvrnymVMCq6oloRCLGMi+\
79mu1eE1obpYPq38nk9WN4pPfJATGnTpjnAXcqPKez3/DhvN5QD7Ou8UB2JyqdQcoNtkz/\
LzZnHuwYei8LNvKEhIJ5ANN35ZDZwsBL3wCLmXFy+iFqqr7OgnKkDcl+\
GLolel7ua5MsG6dhMVZqZcm3nnlk/RLx57ptnKzJXk3cmXP7FlJyiJ6pPpM4BfyoZ0Vyd/\
WgqynoYR7rxcZrJck/MnWj7wpeXUhKPVRlaRk+y4sfzcO/dkRDLD/\
JNoBfAwDaGuJ4S5o7BGHUP6gGW7uEXtapyw0ugr9D28ERDU="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
addOsculatingCircleRadii] = 
                    Uncompress[
                    "6:eJzNVktTwjAQ5uH7cfHi2YujN/\
XojAcEHQ8iFdQzod1CxpAwTSL463XTQkELNhGcsYedPL5++\
2WTbPaoI5phsVAoyEM094R3NelCuwYh5VRRwe+\
pVGHJANbQNDWDBL6F5k6w4FZEfXmFnSphvmZEQcsnvO0xoRREps0hansRfcOpNgmChoxhlHerNPIZN\
ElAabg98ZD1J81cY8hfCNMgw0IOsqU7Fkgj/\
3lgAdzBRk2k3otZ6O4YWgNG3iFIILvj8HjEhIGHZTO4fJjKWfebaMZe5Imtg7B2lqx6Hc01I/\
x1KbLzVZJdfCfLWfSxLfUoV+WpNVWd8lWykXxt1svMCCtOuo+awjiAG2jqIjDXec7pPzC+\
RH8gNA9uRoMIpMRUkMyZ3WiBkpe2epTQfs8TlCtZ4UEVOGJkwrUec8jZe1XtiUHSM+\
ZhinsiHRRbyoqd9FwOQuzA5ba4kKeqPKblP9VYTsNK+yDnhTWdpB/\
4Oas5d1BDDfnXsM0MGSGeGEL0txpKK3B44eIwDuvaL0+\
HW6pyTEWlBYfDbMxSVPGaHbPs1y1xSINJgH9IGNPEGOfJ5M0HwhaOL/\
f3TOnAYSXpMy1SzDvxYFHM7GHDFGxEWYD3sYF1INHMBm0Kqjq+E1g95hdUFaUi2tHqO/QT8dsTHw==\
"], Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`\
tangentIntersectionPoint] = 
                    Uncompress[
                    "6:eJztVjtPwzAQTksRj8LMzAQj7c4ARAikAlYLzHFSp7JwbeQHhV8P5yY\
FmhTFVghCggyns+7TffdUbj8Ww7QVBIHaAzHAfGLwhEQhSSmnmgo+\
oEqnbQvogBgaRjL4JogLwcbnQk7VMTzOMEsMw5qMEswjxITWRFqdExkhSZ/\
AFGkgIFxfcrApklgCJCjX6daCocynrO1mxu8xM0SlQQVyZGIHpA3/\
7tEBuA1KKN7ZW2VoN4eGhOEXMs4g3bw8CNsy8AxZv0ztMv0GiJxFHbgSPPeypNdBnDLMH+r46q/\
09XWUh66e0/CoMkwPZ6tzXo7TGm/pFDrdWRgRM6pgpK/\
wZY32ScarP0167xfyaTSwnpf3tXKhvRJrMrpPZUNiRuTHAM1npNnCfMcEeiWbUdRL0W/\
kCxtYeP7A3P2RdV9uat0p/F/P37Ce82PF/\
hivHY6aHVDs4Ya1A3gXFLgHsWEuaHtYXcEfBa7I6sPqRGtJY6OL0DcbrUfm"], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`addTaylorParabolas] = 
                    Uncompress[
                    "6:eJzFVslOwzAQ7cK+\
XLhw5oLggqAXzkCLQGohUODcSeMgC9euvHT5ehg3aWhTpNgtiB5GTvzy5s14PJ2jUDzH5VKppA7RNI\
G/G3gnnTqJKaeaCt6kSscVC1hD82wYSeBbaO4Ei26F7KlLfLgB1jUMNGl3gXcCJrQm0q45kZ1A0gFu\
dSCKXmDMhAxAQigYqHh7yr3oSdm9xyF/A2aIiksFyLYJHZBW+\
GvfAbiDi7rIvJcXobsptE4YjEmUQHbTxARgE8Djqn25SoKqi4430aT86sSVOq6fJ/\
Guo7lmwD9WIrv4TbJanqwg6GNX6lGhylNnqhblv8kGxdqcw1wQVp4+PhlK0gRuoGmJyF7hH+r+\
wPoSvb4wPGqM+pIohdc/2bOn0SZanbnq6WfVW5kKeYEQHWfnGjCT3imfAnbPyHjGM+\
0Rf18X3r6mYflU57xI+ok/H7/V1WKsLZXPQAyJ/K+\
Qqf08p2XybkIUr80WtgetXxvwvOa5SpzP3CpUSfL8Oth86jxaTJLgrOJuQM3HIvT3ZNAY4J8mfrVMx\
6gud4SjPz3CrJ9O2msqjyfTxD2fDEvj3PxgG/mDw5yxhws7RYF2AO/\
jAoczMMwFbdW1sJHjSFc861xpLWlodB76BcuBCOg="], 
                    Language`ExtendedDefinition[
                    CalculateScan`PlotterScanner`Private`getSplineSegments] = 
                    Uncompress[
                    "6:eJytVcly00AQlZNANrhwyZlLDvkA7uCFUGUTEQFnt6UeMZXxjJglhK+\
Hbo2tJJYrlirRoWuWN728XvR+Ya7FIEkSd0ZiCroMUOJ8hEJq6aXRU+\
m82GPAAYnroDDCj0hcGlVMjF26D7QZgsqDAo9ZDnqeKuM9Wl5rtPPUylu6mpfos0pJjRmWS9TeieO1\
6rYhx3dXf/RPUAGdSHYgs7DogGS/f1QdgCe0GJnG+qANPV1BR6jgLxYRcrriJQWOX8fDZ/\
DzwK7GaPeQxEq9O++qWcVgX5H4pEDfRFWvScxMwVndwsU7Vm6WlQm6GN9VFp2jioh3+\
8w4enfR1YHKOOnEwbp2UtpyffWJYLB2eXyXY/\
UgYbXLg0fxxUQiqKfP168l7zYqgN9cIhSuXk1AORQctmPYFxHRfJXBEr/1ZSJpO/+\
GnYz5HwZ7i324aZIyg6ql6D7ZGSrM/SP0fT9Pgs59k2GuZCpt9DgERx3QkPMdbnq51hCdESIS/\
bKZrF8f111hfV1VEcqNMlHcKTombku2d5DQHg6pCm5LSPIffbtR9VHPSmnImqIu/\
a8e1Mu9hux2aFwkny0S0I5/B1Cbdra5v9/uEib5a4d5yub4ZwG+A/htXXsCguqC5thmNJzoz7V7pn/\
03spF8JvQ/5sGx/A="]}, 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfkfbyASQkxDY2Jg0oSfneW+\
ykFq4dbGcb/Hnw2U3SrF2lmA7QlH441Zfm8d1zz13v+\
YmM0n6v19M3rfkgOUk38PTMmj05zWUhyPvzXFGtmRTpDXx2z5qYmn3K4Qcl3nfbmgOppmD8+Q2+\
DzwpOBj61TDODKN6fKggn7BE156hYqf2J2MuE+\
DsJ33xanvr9c6mR8FQhmAMVUJvt0XMJwo0TXsIdMuaXQ7imz8+LY+fCs5j+\
r2gIqH6sfWOFBALIwVwTCf41mtN1APMy4AgoMiVs+TEudv2Am0UE9mITnN841KuNtvigsq0p+\
ZhSc0q/fjo7+\
ADGbuQvMfl7M6Ov7Awrhd7F0X1z6kb4PltW3glz5byhum940gbGHZK9SKbL1tXyRNStawLfkbVFc2W\
tcZ4+YSp/5GOmTaLYWy1DYNOT2yFlytvEX6nLbzMseVn0n5kzWfvKAGXTYZKbh8lKfgsimbKAy/\
Q9unq3Do8xv2K7xidIRWscCIbZ9ktrjueVOD1jhBj7cZrkI6oJ0BEc2pdxHG7zzJm9iagILHAs+\
v6ZY+NZB1KwJ3ta88EYXZ8eUJWrU1ojtK5uoNJJl/+qLiVXC40GfJ+JAzNqFop+\
rtYH2XJFWQkAyOJ8YKmXoM5rJIaggqW/aAEiXMQDCHZL/tx3/zD+UogVYcK1aU8iwNXmvPwJPplgY+\
pyMykuV0Hjq7gtsVsInlWqy5iaTo/bdbHdL/JdOOG5kAPJSG0JOEDvdsTuj3hL+\
4JCztwtyR0S0K3JHRLQrck/L9LgosY/5V+AzX6tu4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}]}], 
   Typeset`pod12$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "1200", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa45441ghhc81c420i159900001cci5d2bbff4h7a67167914177805443390", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod13$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1300", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa45451ghhc81c420i15990000600c984006d1f2hh7167914177805443390", 
     "asyncfailed" -> "data not found"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "13", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.604", "parsetiming" -> "0.297", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP45401ghhc81c420i159900002f9i64090h28h30e", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "6", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa45411ghhc81c420i159900005af6d8agifadcd247167914177805443390", "version" -> 
    "2.6", "inputstring" -> "d/dx 1/Sqrt[7 + 2 x]"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 10, 18, 14, 38, 6.4532355`8.562352487039396}, "Line" -> 
    39, "SessionID" -> 20912553927900568855}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10, 11, 12, 13}, Typeset`failedpods$$ = {12, 13}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "d/dx 1/Sqrt[7 + 2 x]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1362., {1450.3544921875, 1455.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.8751070864941573`*^9},
 CellID->367417281,ExpressionUUID->"9578509d-057d-4bf5-8527-8ab146ec2480"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"D", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"h", "[", "x", "]"}], "x"], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.875107655040024*^9, 3.875107660308551*^9}},
 CellLabel->"In[40]:=",
 CellID->412925899,ExpressionUUID->"847ff691-7c5a-4e29-b514-5036f9d08011"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"h", "[", "x", "]"}], 
    SuperscriptBox["x", "2"]]}], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["h", "\[Prime]",
     MultilineFunction->None], "[", "x", "]"}], "x"]}]], "Output",
 CellChangeTimes->{3.875107660603224*^9},
 CellLabel->"Out[40]=",
 CellID->343311296,ExpressionUUID->"14cf1a6c-e619-42ee-9110-82d98f07f95e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"D", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"h", "[", "x", "]"}], "x"], ",", "x"}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{"x", "->", "2"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.875107655040024*^9, 3.875107660308551*^9}, {
  3.8751077361744556`*^9, 3.875107759584922*^9}},
 CellLabel->"In[42]:=",
 CellID->826314469,ExpressionUUID->"b7c00856-ceb7-42be-89e1-229f5d6cfe09"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"h", "[", "2", "]"}], "4"]}], "+", 
  FractionBox[
   RowBox[{
    SuperscriptBox["h", "\[Prime]",
     MultilineFunction->None], "[", "2", "]"}], "2"]}]], "Output",
 CellChangeTimes->{{3.8751077512264657`*^9, 3.8751077599364605`*^9}},
 CellLabel->"Out[42]=",
 CellID->91266124,ExpressionUUID->"f4e5c669-7804-4cd0-a70b-003f1c21c1f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"D", "[", 
    RowBox[{
     FractionBox[
      RowBox[{"h", "[", "x", "]"}], "x"], ",", "x"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{"x", "->", "2"}], "}"}]}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"h", "[", "2", "]"}], "->", "7"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"h", "'"}], "[", "2", "]"}], "->", 
     RowBox[{"-", "5"}]}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.875107655040024*^9, 3.875107660308551*^9}, {
  3.8751077361744556`*^9, 3.8751077877651553`*^9}},
 CellLabel->"In[44]:=",
 CellID->19796586,ExpressionUUID->"44c9ba86-feea-4752-9180-5c41e5d012e2"],

Cell[BoxData[
 RowBox[{"-", 
  FractionBox["17", "4"]}]], "Output",
 CellChangeTimes->{{3.8751077826896825`*^9, 3.8751077887204485`*^9}},
 CellLabel->"Out[44]=",
 CellID->171422884,ExpressionUUID->"471b25c7-1ccc-426b-bb0c-d30da27b50ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["d/dx h(x)/x", "WolframAlphaLong",
 CellChangeTimes->{{3.875107838636532*^9, 3.875107849581843*^9}},
 CellLabel->"In[45]:=",
 CellID->473565592,ExpressionUUID->"20dd7493-cfea-4aa9-9be6-ce72f9ca45a0"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dx h(x)/x", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}, 
    PodStates -> {"Input__Step-by-step solution"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "2", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[h[x]/x, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   FractionBox[
                    RowBox[{"h", "(", "x", ")"}], "x"], HoldForm], ")"}]}], 
              "\[LongEqual]", 
              FractionBox[
               RowBox[{
                 RowBox[{"x", " ", 
                   RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], "-", 
                 RowBox[{"h", "(", "x", ")"}]}], 
               SuperscriptBox["x", "2"]]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["subpod", {"title" -> "Possible intermediate steps"}, {
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"Possible derivation:\""}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{
                    "\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox[
                    RowBox[{"h", "(", "x", ")"}], "x"], ")"}]}]}, 
                    "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{None}}, "Rows" -> {{0.5}}}], "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Use \"", "\"the \"", "\"quotient \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    FractionBox["u", "v"], ")"}]}], "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"v", " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], "-", 
                    RowBox[{"u", " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "v"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}]}], 
                    SuperscriptBox["v", "2"]], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    TraditionalForm]}], "\",\"", "\" \""}, "RowDefault"], 
                    "\"where \"", 
                    TemplateBox[{
                    RowBox[{"u", "\[LongEqual]", 
                    RowBox[{"h", "(", "x", ")"}]}], "\" \""}, "RowDefault"], 
                    "\"and \"", 
                    TemplateBox[{
                    RowBox[{"v", "\[LongEqual]", "x"}], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FormBox[
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"h", "(", "x", ")"}], " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], ")"}]}], "+", 
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    TagBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"h", "(", "x", ")"}], ")"}]}], HoldForm], 
                    ")"}]}]}], 
                    SuperscriptBox["x", "2"]], TraditionalForm]}, 
                    "RowDefault"]}, "RowDefault"], HoldForm]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"x", " ", 
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"h", "(", "x", ")"}], ")"}]}], TraditionalForm], 
                    ")"}]}], "-", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"h", "(", "x", ")"}]}, "RowDefault"]}], 
                    SuperscriptBox["x", "2"]]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    
                    TemplateBox[{
                    "\"Using \"", "\"the \"", "\"chain \"", "\"rule, \"", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> 
                    RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]], 
                    "\[InvisibleSpace]", 
                    RowBox[{"(", 
                    RowBox[{"h", "(", "x", ")"}], ")"}]}], "\[LongEqual]", 
                    FormBox[
                    TagBox[
                    TagBox[
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", 
                    RowBox[{"h", "(", "u", ")"}]}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], " ", 
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "u"}], 
                    RowBox[{"\[DifferentialD]", "x"}], MultilineFunction -> 
                    None]}], HoldForm], 
                    PolynomialForm[#, TraditionalOrder -> False]& ], 
                    TraditionalForm]}], "\",\"", "\" \""}, "RowDefault"], 
                    "\"where \"", 
                    TemplateBox[{
                    TemplateBox[{",", "\",\"", 
                    RowBox[{"u", "\[LongEqual]", "x"}]}, "RowWithSeparators"],
                     "\" \""}, "RowDefault"], "\"and \"", 
                    TemplateBox[{
                    TagBox[
                    TemplateBox[{",", "\",\"", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"\[DifferentialD]", "\"\""}], 
                    RowBox[{"\[DifferentialD]", "u"}], MultilineFunction -> 
                    None], "\[InvisibleApplication]", 
                    RowBox[{"(", 
                    RowBox[{"h", "(", "u", ")"}], ")"}]}], "\[LongEqual]", 
                    RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]", MultilineFunction -> None], "(", "u", 
                    ")"}]}]}, "RowWithSeparators"], HoldForm], "\":\""}, 
                    "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"h", "(", "x", ")"}]}], "+", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    RowBox[{
                    RowBox[{"(", 
                    FormBox[
                    RowBox[{
                    TagBox[
                    FractionBox["\[DifferentialD]", 
                    
                    RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", 
                    "x"}]], 
                    $CellContext`TagBoxWrapper[
                    "StringBoxes" -> RowBox[{
                    "d/d", "\[InvisibleSpace]", "x"}]]], "\[InvisibleSpace]", 
                    RowBox[{"(", "x", ")"}]}], TraditionalForm], ")"}], " ", 
                    RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}], FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], "x"}, 
                    "RowDefault"]}], 
                    SuperscriptBox["x", "2"]]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, GridBoxAlignment -> {"Columns" -> {{Left}}},
                   AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}, {
                TagBox[
                 GridBox[{{
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"\"The \"", "\"derivative \"", "\"of \"", 
                    TemplateBox[{
                    FormBox["x", TraditionalForm], "\" \""}, "RowDefault"], 
                    "\"is \"", 
                    TemplateBox[{"1", "\":\""}, "RowDefault"]}, "RowDefault"], 
                    GrayLevel[0.3], StripOnInput -> False], {
                    LinebreakAdjustments -> {1, 89, 100, 0, 100}, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}, {
                    FrameBox[
                    TagBox[
                    GridBox[{{
                    StyleBox[
                    TemplateBox[{"\"Answer:\""}, "RowDefault"], FontFamily -> 
                    "Roboto", FontSize -> 12, StripOnInput -> False], 
                    "\[SpanFromLeft]"}, {"\"\"", 
                    TagBox[
                    TemplateBox[{
                    TemplateBox[{"\" \"", "\"\[LongEqual] \"", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"h", "(", "x", ")"}]}], "+", 
                    TemplateBox[{
                    TemplateBox[{
                    FrameBox[
                    "1", FrameStyle -> GrayLevel[0.8], FrameMargins -> 1, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    StripOnInput -> False], "\" \""}, "RowDefault"], 
                    RowBox[{"x", " ", 
                    RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]", MultilineFunction -> None], "(", "x", 
                    ")"}]}]}, "RowDefault"]}], 
                    SuperscriptBox["x", "2"]]}, "RowDefault"]}, "RowDefault"],
                     HoldForm]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {"Columns" -> {2.5, Automatic}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 0, 3}, "Rows" -> {1.5, 1, 2}}, 
                    AllowScriptLevelChange -> False], "Grid"], FrameStyle -> {
                    AbsoluteThickness[1], 
                    RGBColor[0.52, 0.76, 0.86]}, Background -> 
                    RGBColor[0.91, 0.98, 1], RoundingRadius -> 3, 
                    FrameMargins -> 12, StripOnInput -> False]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  AllowScriptLevelChange -> False, DefaultBaseStyle -> 
                  "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxDividers -> {
               "Columns" -> {{False}}, "Rows" -> {False, {True}, False}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{3}}}, FrameStyle -> 
              GrayLevel[0.7]], "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Use the power rule", "delimiters" -> ""}, {
         XMLElement[
         "state", {
          "name" -> "Use the power rule", "input" -> 
           "Input__Use the power rule"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Use the limit definition of the derivative", "input" -> 
           "Input__Use the limit definition of the derivative"}, {}]}], 
       XMLElement[
       "state", {
        "name" -> "Hide steps", "input" -> "Input__Hide steps"}, {}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Expanded form", "scanner" -> "Simplification", "id" -> 
     "ExpandedForm", "position" -> "200", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Expand[(-h[x] + x h'[x])/x^2]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox[
               RowBox[{
                 SuperscriptBox["h", "\[Prime]", MultilineFunction -> None], 
                 "(", "x", ")"}], "x"], "-", 
              FractionBox[
               RowBox[{"h", "(", "x", ")"}], 
               SuperscriptBox["x", "2"]]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedForm__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Series expansion at x = 0", "scanner" -> "Series", 
     "id" -> "SeriesExpansionAtx=0.", "position" -> "300", "error" -> "false",
      "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Series[(-h[x] + x h'[x])/x^2, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{"h", "(", "0", ")"}], 
                    SuperscriptBox["x", "2"]]}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]\[Prime]", MultilineFunction -> None], "(", 
                    "0", ")"}], "2"], "+", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{
                    SuperscriptBox["h", 
                    TagBox[
                    RowBox[{"(", "3", ")"}], Derivative], MultilineFunction -> 
                    None], "(", "0", ")"}], " ", "x"}], "+", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    RowBox[{
                    SuperscriptBox["h", 
                    TagBox[
                    RowBox[{"(", "4", ")"}], Derivative], MultilineFunction -> 
                    None], "(", "0", ")"}], " ", 
                    SuperscriptBox["x", "2"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "3"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, -2, 3, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"h", "[", "0", "]"}]}], ",", "0", ",", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    "h", "\[Prime]\[Prime]", MultilineFunction -> None], "[", 
                    "0", "]"}], "2"], ",", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{
                    SuperscriptBox["h", 
                    TagBox[
                    RowBox[{"(", "3", ")"}], Derivative], MultilineFunction -> 
                    None], "[", "0", "]"}]}], ",", 
                    RowBox[{
                    FractionBox["1", "8"], " ", 
                    RowBox[{
                    SuperscriptBox["h", 
                    TagBox[
                    RowBox[{"(", "4", ")"}], Derivative], MultilineFunction -> 
                    None], "[", "0", "]"}]}]}], "}"}], ",", 
                    RowBox[{"-", "2"}], ",", "3", ",", "1"}], "]"}]}, 
                 "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Laurent series\"", "\[NoBreak]", 
                   "\")\""}], {FontFamily -> "Roboto", FontSize -> 10, 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`aux1$$ = {
   True, False, {False, False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`asyncpods$$ = {}, Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "3", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "0.663", "parsetiming" -> "0.279", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP6441135e8ca90g2h8dhf00000h50731ffehee73e", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "8", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa6442135e8ca90g2h8dhf00000hc4h8ce0i1cc97g3172133347439184749", "version" -> 
    "2.6", "inputstring" -> "d/dx h(x)/x"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 10, 18, 14, 50, 50.7629424`9.458121640182659}, "Line" -> 
    45, "SessionID" -> 20912553927900568855}, Typeset`showpods$$ = {1, 2, 3}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, Typeset`open$$ = False, 
   Typeset`newq$$ = "d/dx h(x)/x"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$}, Typeset`chosen$$, 
        Typeset`open$$, Typeset`elements$$, Typeset`q$$, Typeset`opts$$, 
        Typeset`nonpods$$, Typeset`queryinfo$$, Typeset`sessioninfo$$, 
        Typeset`showpods$$, Typeset`failedpods$$, Typeset`newq$$}]], 
     StandardForm],
    ImageSizeCache->{1362., {438.3544921875, 443.6455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$}], 
       Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.875107850776909*^9},
 CellID->29053615,ExpressionUUID->"fb7dda65-22c4-4148-bfb9-bd11f21a17bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["d/dx 4log(x^2 e^x)", "WolframAlphaLong",
 CellChangeTimes->{{3.8751085543965454`*^9, 3.875108572367059*^9}},
 CellLabel->"In[46]:=",
 CellID->290071369,ExpressionUUID->"06ff98f9-001f-477b-9072-d0cabded1dde"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "d/dx 4log(x^2 e^x)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Derivative", "scanner" -> "Derivative", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1", 
     "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"D[4 Log[x^2 E^x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              RowBox[{
                TagBox[
                 FractionBox["\[DifferentialD]", 
                  RowBox[{"\"\[DifferentialD]\"", "\[InvisibleSpace]", "x"}]], 
                 $CellContext`TagBoxWrapper[
                 "StringBoxes" -> RowBox[{"d/d", "\[InvisibleSpace]", "x"}]]],
                 "\[InvisibleSpace]", 
                RowBox[{"(", 
                  TagBox[
                   RowBox[{"4", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], " ", 
                    SuperscriptBox["\[ExponentialE]", "x"]}], ")"}]}], 
                   HoldForm], ")"}]}], "\[LongEqual]", 
              TagBox[
               RowBox[{
                 FractionBox["8", "x"], "+", "4"}], Identity]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Input__Step-by-step solution", "stepbystep" -> "true"}, {}]}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plotter", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa725226fa20b564f547200004baei4315hd4b4aa8884920455003441207"}, {
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod3$$ = XMLElement[
   "pod", {"title" -> "Alternate form", "scanner" -> "Simplification", "id" -> 
     "AlternateForm", "position" -> "300", "error" -> "false", "numsubpods" -> 
     "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Factor[4 + 8/x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FractionBox[
              RowBox[{"4", " ", 
                RowBox[{"(", 
                  RowBox[{"x", "+", "2"}], ")"}]}], "x"], Identity], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Root", "scanner" -> "Reduce", "id" -> "Root", 
     "position" -> "400", "error" -> "false", "numsubpods" -> "1", "primary" -> 
     "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Reduce[4 + 8/x == 0, x, Reals]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            FormBox[
             FormBox[
              TagBox[
               GridBox[{{
                  PaneBox[
                   RowBox[{"x", "\[LongEqual]", 
                    RowBox[{"-", "2"}]}], BaselinePosition -> Baseline, 
                   ImageSize -> 550]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column",
                 GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
               "Column"], TraditionalForm], TraditionalForm], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "Root__Step-by-step solution", "stepbystep" -> "true"}, {}]}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Properties as a real function", "scanner" -> 
     "FunctionProperties", "id" -> "PropertiesAsARealFunction", "position" -> 
     "500", "error" -> "false", "numsubpods" -> "3"}, {
     XMLElement["subpod", {"title" -> "Domain"}, {
       XMLElement["minput", {}, {"FunctionDomain[D[4 Log[x^2 E^x], x], x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"x", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"x", "\[NotEqual]", "0"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Range"}, {
       XMLElement[
       "minput", {}, {"FunctionRange[D[4 Log[x^2 E^x], x], x, y]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"{\"", 
              RowBox[{"y", "\[Element]", 
                TemplateBox[{}, "Reals"]}], "\" : \"", 
              RowBox[{"y", "\[NotEqual]", "4"}], "\"}\""}, "RowDefault"], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> "Injectivity"}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TemplateBox[{"\"injective \"", 
              StyleBox[
               
               RowBox[{
                "\"(\"", "\[NoBreak]", "\"one\[Hyphen]to\[Hyphen]one\"", 
                 "\[NoBreak]", "\")\""}], {
                GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                LineIndent -> 0}]}, "RowDefault"], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {"plaintext,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "3"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {"text" -> "R is the set of real numbers"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Reals.html", 
           "text" -> "Documentation", "title" -> "Documentation"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/R.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[4 + 8/x, x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"4", "+", 
                    FractionBox["8", "x"]}], ")"}], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    RowBox[{"4", " ", "x"}], "+", 
                    RowBox[{"8", " ", 
                    RowBox[{"log", "(", "x", ")"}]}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontFamily -> "Roboto", 
                    FontSize -> Inherited, 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontFamily -> "Roboto", FontSize -> 10, 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> 
         "true"}, {}]}]}], Typeset`pod7$$ = XMLElement[
   "pod", {"title" -> "Limit", "scanner" -> "GlobalExtrema", "id" -> "Limit", 
     "position" -> "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Limit[4 + 8/x, {x -> -Infinity, x -> Infinity}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              TagBox[
               TemplateBox[{
                 RowBox[{"(", 
                   RowBox[{"4", "+", 
                    FractionBox["8", "x"]}], ")"}], "x", 
                 RowBox[{"\[PlusMinus]", "\[Infinity]"}]}, "Limit2Arg", 
                SyntaxForm -> Limit, DisplayFunction -> (RowBox[{
                   TagBox[
                    UnderscriptBox[
                    StyleBox["\"lim\"", ShowStringCharacters -> False], 
                    RowBox[{#2, "\[Rule]", #3}], LimitsPositioning -> True], 
                    Identity, SyntaxForm -> "\[Limit]", Tooltip -> 
                    "Limit"], #}]& ), 
                InterpretationFunction -> (RowBox[{"Limit", "[", 
                   RowBox[{#, ",", 
                    RowBox[{#2, "->", #3}]}], "]"}]& )], HoldForm], 
              "\[LongEqual]", "4"}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics"}, 
             DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"], DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Differential geometric curves", "scanner" -> "Plotter",
      "id" -> "DifferentialGeometricCurves", "position" -> "800", "error" -> 
     "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa726226fa20b564f54720000678ad326c645b9688884920455003441207"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Differential equation solution curve families", 
     "scanner" -> "Plotter", "id" -> 
     "DifferentialEquationSolutionCurveFamilies", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa727226fa20b564f5472000012g3h8hbi481fg4c8884920455003441207"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Inverse iterations", "scanner" -> "Plotter", "id" -> 
     "InverseIterations", "position" -> "1000", "error" -> "false", 
     "numsubpods" -> "0", "async" -> 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa728226fa20b564f547200003ci16059aebfc3dh8884920455003441207"}, {
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False}, True}, Typeset`aux3$$ = {True, False, {False}, True},
    Typeset`aux4$$ = {True, False, {False}, True}, Typeset`aux5$$ = {
   True, False, {False, False, False}, True}, Typeset`aux6$$ = {
   True, False, {False}, True}, Typeset`aux7$$ = {True, False, {False}, True},
    Typeset`aux8$$ = {True, False, {False}, True}, Typeset`aux9$$ = {
   True, False, {False}, True}, Typeset`aux10$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {{2, 
     Hold[Typeset`pod2$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa725226fa20b564f547200004baei4315hd4b4aa8884920455003441207"}, {8, 
     Hold[Typeset`pod8$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa726226fa20b564f54720000678ad326c645b9688884920455003441207"}, {9, 
     Hold[Typeset`pod9$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa727226fa20b564f5472000012g3h8hbi481fg4c8884920455003441207"}, {10, 
     Hold[Typeset`pod10$$], 
     "https://www6b3.wolframalpha.com/api/v1/asyncPod.jsp?id=\
MSPa728226fa20b564f547200003ci16059aebfc3dh8884920455003441207"}}, 
   Typeset`nonpods$$ = {
    XMLElement["assumptions", {"count" -> "1"}, {
      XMLElement[
      "assumption", {
       "type" -> "Function", "word" -> "log", "template" -> 
        "Assuming \"log\" is the natural logarithm${separator}Use ${desc} \
instead", "count" -> "2", "pulldown" -> "false", "default" -> 
        "{\"FunClash\", \"log\"} -> {\"Log\", \"dflt\"}"}, {
        XMLElement[
        "value", {
         "name" -> "Log", "desc" -> "the natural logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log\"}"}, {}], 
        XMLElement[
        "value", {
         "name" -> "Log10", "desc" -> "the base 10 logarithm", "input" -> 
          "{\"FunClash\", \"log\"} -> {\"Log10\"}"}, {}]}]}]}, 
   Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[False], 
   Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> 
    "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve", 
    "numpods" -> "10", "datatypes" -> "D", "timedout" -> "", "timedoutpods" -> 
    "", "timing" -> "1.452", "parsetiming" -> "0.44", "parsetimedout" -> 
    "false", "recalculate" -> "", "id" -> 
    "MSP723226fa20b564f5472000044d506006dg21d28", "host" -> 
    "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
    "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa724226fa20b564f547200004c4f7abf406324d38884920455003441207", "version" -> 
    "2.6", "inputstring" -> "d/dx 4log(x^2 e^x)"}, Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2022, 10, 18, 15, 2, 54.619813`9.489925050800341}, "Line" -> 
    46, "SessionID" -> 20912553927900568855}, Typeset`showpods$$ = {1, 2, 3, 
   4, 5, 6, 7, 8, 9, 10}, Typeset`failedpods$$ = {}, Typeset`chosen$$ = {}, 
   Typeset`open$$ = False, Typeset`newq$$ = "d/dx 4log(x^2 e^x)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$}, Typeset`chosen$$, Typeset`open$$, 
        Typeset`elements$$, Typeset`q$$, Typeset`opts$$, Typeset`nonpods$$, 
        Typeset`queryinfo$$, Typeset`sessioninfo$$, Typeset`showpods$$, 
        Typeset`failedpods$$, Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1361., {351.8544921875, 357.1455078125}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{
        Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{3.8751085746477375`*^9},
 CellID->494288511,ExpressionUUID->"3e7f7d3f-7e35-4c13-8bf3-84135fa96715"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 747.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules->{
 "ResourceType" -> "ComputationalEssay", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> <||>, "CreationTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "UpdatedTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "CompatibilityTest" -> 
  HoldComplete[
    BinaryDeserialize[
     ByteArray[{56, 67, 58, 120, 156, 133, 143, 205, 78, 131, 64, 20, 133, 
      163, 173, 110, 116, 213, 165, 79, 224, 6, 70, 11, 105, 138, 59, 197, 
      198, 184, 193, 70, 92, 184, 100, 24, 238, 164, 83, 7, 46, 153, 123, 41, 
      229, 237, 29, 140, 186, 193, 196, 245, 249, 249, 206, 209, 115, 90, 164,
       88, 183, 216, 53, 213, 230, 216, 58, 32, 50, 216, 232, 19, 58, 203, 0, 
      42, 202, 175, 95, 129, 176, 115, 10, 242, 129, 24, 234, 212, 26, 104, 
      184, 120, 4, 109, 26, 195, 222, 153, 33, 67, 137, 248, 81, 232, 83, 154,
       229, 192, 62, 25, 252, 25, 217, 58, 115, 144, 12, 133, 69, 89, 253, 24,
       222, 134, 22, 124, 238, 242, 222, 50, 184, 70, 178, 57, 0, 229, 87, 
      227, 156, 142, 229, 216, 46, 237, 134, 72, 14, 191, 133, 139, 169, 70, 
      243, 172, 179, 214, 99, 207, 159, 253, 11, 55, 14, 184, 72, 45, 118, 
      213, 75, 185, 7, 197, 249, 251, 142, 185, 165, 59, 33, 250, 190, 15, 
      123, 180, 218, 201, 90, 141, 122, 168, 176, 22, 88, 238, 133, 251, 110, 
      167, 175, 185, 98, 138, 72, 177, 97, 127, 65, 248, 215, 217, 195, 86, 
      178, 218, 133, 253, 81, 123, 208, 236, 9, 38, 188, 205, 191, 188, 106, 
      149, 68, 55, 75, 121, 27, 64, 164, 203, 32, 6, 41, 131, 36, 134, 117, 
      160, 228, 58, 74, 226, 74, 173, 202, 104, 249, 9, 89, 192, 149, 140}]]],
   "ToolsOpen" -> True, "StatusMessage" -> "", "TryRealOnly" -> False},
CreateCellID->True,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
       CellTags -> {"MainDockedCell"}, CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{39, 5}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    AutoQuoteCharacters -> {}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.458824, 0.458824, 0.458824]], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[
               0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
                1.]]}, StripOnInput -> False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "]]}, {
              FaceForm[
               RGBColor[
               0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
                1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, 
           ImageSize -> {11., 11.}, PlotRange -> {{0., 11.}, {0., 11.}}, 
           AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
           "\"Click for more information\""}, "PrettyTooltipTemplate"], 
         ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ParentCell[
              EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ParentCell[
                EvaluationCell[]], {
               TaggingRules, "AttachedMoreInfoTag"}] === #], CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ParentCell[
                 EvaluationCell[]], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
          "PrettyTooltipTemplate"], ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] === #],
             CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ReleaseHold[#3], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.75], 
                 Thickness[
                  NCache[
                   Rational[2, 45], 0.044444444444444446`]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.5], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], 
                    Graphics[{
                    RGBColor[
                    0.9882352941176471, 0.4196078431372549, 
                    0.20392156862745098`], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]], 
                    "Click to copy to the clipboard"], 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Graphics[{
                    RGBColor[0, 
                    Rational[2, 3], 0], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "Copied"]], UpdateInterval -> 
                    1, TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain", 
           StripOnInput -> False], Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8, StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain"], 
          Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8], "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           ButtonBox[
            StyleBox[
            "\"Insert Code Group\"", "Text", FontFamily -> "Source Sans Pro", 
             FontSize -> 11, StripOnInput -> False], ButtonFunction :> 
            With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
              Quiet[
               
               Block[{$ContextPath = RSNB`$cp$, 
                 ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                 False}, 
                Internal`WithLocalSettings[
                 ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                  Needs["ResourceSystemClient`DefinitionNotebook`"], 
                  ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                  RSNB`nb$, 
                   
                   ComputationalEssayHelpers`Private`\
createComputationalParagraph[]], 
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
            BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue[Enabled], 
               FEPrivate`If[
                CurrentValue["MouseOver"], {
                FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                FontColor -> 
                 RGBColor[
                  0.17960779999999998`, 0.17960779999999998`, 
                   0.17960779999999998`]}], {
               FontColor -> 
                RGBColor[
                 0.5898038999999999, 0.5898038999999999, 
                  0.5898038999999999]}], Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
            Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
            "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
            Evaluator -> Automatic], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Headings\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Section", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "4") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Section"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "5") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsubsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "6") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsubsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], Delimiter, DynamicBox[
               ToBoxes[
                
                Grid[{{"Title", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "1") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Title"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subtitle", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "2") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subtitle"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Chapter", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "3") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Chapter"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Author\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Author"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Abstract\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Abstract"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Text\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Text", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Text"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"CodeText", ((((" (" <> "Shift+") <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "CodeText"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Item\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Item"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             StyleBox[
              
              TemplateBox[{
               "\"Open/Close Groups\"", 
                "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\"\
"}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
              StripOnInput -> False], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {
            "\"Open Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {1 -> RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "ColumnsIndexed" -> {1 -> 0, -1 -> 0}, "Rows" -> {{Automatic}}}, 
         FrameStyle -> GrayLevel[0.75]], "Grid"]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           TagBox[
            GridBox[{{
               GraphicsBox[{{
                  Thickness[0.03333333333333333], {
                   FaceForm[{
                    RGBColor[
                    0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27.,
                     1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                    2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23.,
                     2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.,
                     2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                    5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                    4.}, {11., 3.}, {8., 3.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
                    0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{9.697299999999998, 24.522}, {
                    9.133299999999998, 24.645}, {8.861299999999998, 
                    24.259999999999998`}, {9.313299999999998, 24.092}}, {{
                    9.291299999999998, 23.933}, {8.9683, 
                    24.052999999999997`}, {9.2183, 23.726999999999997`}, {
                    9.587299999999999, 23.601}}, {{9.553299999999998, 
                    23.447}, {9.169299999999998, 23.578}, {8.760299999999999, 
                    23.456999999999997`}, {9.102299999999998, 
                    23.348999999999997`}}, {{9.083299999999998, 22.633}, {
                    9.025299999999998, 23.208}, {8.567299999999998, 23.354}, {
                    8.555299999999999, 22.865}}, {{8.521299999999998, 
                    23.551}, {9.039299999999999, 23.703}, {8.711299999999998, 
                    24.13}, {8.2183, 23.962999999999997`}}, {{8.4073, 
                    23.197}, {8.171299999999999, 22.851}, {8.171299999999999, 
                    22.445}, {8.398299999999999, 22.837}}, {{
                    8.091299999999999, 23.014}, {8.395299999999999, 23.458}, {
                    8.091299999999999, 23.871}, {7.786299999999999, 
                    23.458}}, {{8.010299999999999, 22.851}, {
                    7.773299999999999, 23.197}, {7.782299999999998, 22.837}, {
                    8.010299999999999, 22.445}}, {{7.964299999999999, 
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                    7.141299999999999, 23.703}, {7.659299999999998, 
                    23.551}}, {{7.626299999999999, 22.865}, {
                    7.614299999999998, 23.354}, {7.155299999999999, 23.209}, {
                    7.097299999999999, 22.633999999999997`}}, {{
                    7.078299999999999, 23.348999999999997`}, {
                    7.422299999999998, 23.456999999999997`}, {
                    7.0112999999999985`, 23.578}, {6.6282999999999985`, 
                    23.447}}, {{6.593299999999998, 23.601}, {
                    6.962299999999999, 23.726999999999997`}, {
                    7.214299999999998, 24.054}, {6.889299999999999, 
                    23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                    7.319299999999998, 24.259999999999998`}, {
                    7.0482999999999985`, 24.645}, {6.484299999999998, 
                    24.522}}, {{7.113299999999999, 25.217}, {
                    7.158299999999999, 24.761}, {7.356299999999999, 
                    24.479999999999997`}, {7.344299999999999, 24.904}}, {{
                    7.5032999999999985`, 24.817999999999998`}, {
                    7.518299999999998, 24.279}, {8.010299999999999, 24.113}, {
                    8.010299999999999, 24.637999999999998`}}, {{
                    7.2452999999999985`, 25.302}, {7.4712999999999985`, 
                    24.997}, {7.8622999999999985`, 24.857}, {
                    7.656299999999998, 25.122}}, {{7.800299999999998, 
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                    25.192}, {8.091299999999999, 25.689}}, {{
                    8.171299999999999, 24.637999999999998`}, {
                    8.171299999999999, 24.113}, {8.663299999999998, 24.279}, {
                    8.677299999999999, 24.817999999999998`}}, {{
                    8.836299999999998, 24.904}, {8.8243, 
                    24.479999999999997`}, {9.022299999999998, 24.761}, {
                    9.068299999999999, 25.217}}, {{8.318299999999999, 
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                    25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                    "]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.,
                     25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                    26.}, {11., 26.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {
                    24., 20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 
                    20.}, {18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {
                    10., 19.}, {6., 19.}}, {{11., 19.}, {17., 19.}, {17., 
                    18.}, {11., 18.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                    "]]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                    "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                    "]}]}}}, {
                ImageSize -> {Automatic, 32}, 
                 ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                 Scaled[0.25], AspectRatio -> Automatic, 
                 ImageSize -> {30., 30.}, 
                 PlotRange -> {{0., 30.}, {0., 30.}}}], 
               StyleBox[
                TagBox[
                 GridBox[{{
                    StyleBox[
                    "\"Computational Essay\"", FontFamily -> 
                    "Source Sans Pro", FontWeight -> "SemiBold", StripOnInput -> 
                    False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxDividers -> {
                   "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], FontSize -> 24, FontColor -> GrayLevel[1], 
                StripOnInput -> False]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", "\"\""}, {
           ActionMenuBox[
            TemplateBox[{
              TemplateBox[{
                TemplateBox[{"\"Sample Content\"", 
                  TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                 "RowDefault"], 
                "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\""}, "PrettyTooltipTemplate"], Null& , 
              "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\"", True}, "OrangeButtonTemplate"], {
            "\"Insert Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`insertSampleContent[]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Clear Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    Module[{$CellContext`cells = Flatten[
                    Map[{NotebookFind[
                    ButtonNotebook[], #, All, CellTags, AutoScroll -> False]; 
                    SelectedCells[]}& , {
                    "ExampleTopicSentence", "TopicSentenceButton", 
                    "ExampleCodeText", "ExampleInput", "ExampleOutput", 
                    "EssayStructureExample", "CitationExample", 
                    "SectionMoreInfoYourEssayTitle", 
                    "SectionMoreInfoAuthorInfoButton", 
                    "SectionMoreInfoAbstract", 
                    "SectionMoreInfoSectionHeaderInfoButton"}]]}, 
                    NotebookDelete[$CellContext`cells]]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sample Essay\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    SystemOpen["https://wolfr.am/SampleEssay"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           
           TemplateBox[{
            "\"Open Guidelines\"", SystemOpen[
             "https://wolfr.am/ComputationalEssayGuidelines"]& , "\"\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             TemplateBox[{
               TagBox[
                GridBox[{{"\"Tools\"", 
                   PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{0., 0.65}, {0., -0.65}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None], True -> 
                    GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[-0.1]]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
               "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`ToggleToolbar[
              ButtonNotebook[]]& , "\"Toggle documentation toolbar\"", False},
             "OrangeButtonTemplate"], 
           TagBox[
            
            GridBox[{{"\"\"", "\"\""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxDividers -> {
              "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{2}}},
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
             RGBColor[0.99215, 0.843125, 0.68235]], "Grid"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Check\"", "\"Check notebook for potential errors\""}, 
              "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`CheckDefinitionNotebook[
              ButtonNotebook[]]& , "\"Check notebook for potential errors\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Publish to Cloud\"", 
               "\"Publish your computational essay to the cloud\""}, 
              "PrettyTooltipTemplate"], 
             With[{$CellContext`nb = ButtonNotebook[]}, CreateDialog[
                
                ComputationalEssayHelpers`Private`createSubmissionDialog[$\
CellContext`nb], WindowSize -> {350, 150}, Background -> White, WindowFrame -> 
                "Normal", "Evaluator" -> "System"]; Null]& , 
             "\"Publish your computational essay to the cloud\"", False}, 
            "OrangeButtonTemplate"], 
           ItemBox[
            StyleBox[
             DynamicBox[
              ToBoxes[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
               StandardForm], Evaluator -> "System", 
              Initialization :> (CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
               "")], "Text", 
             GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
            StripOnInput -> False], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Submit to Notebook Archive\"", 
               "\"Submit your essay to the Wolfram Notebook Archive\""}, 
              "PrettyTooltipTemplate"], 
             ComputationalEssayHelpers`Private`submitEssay[]& , 
             "\"Submit your essay to the Wolfram Notebook Archive\"", False}, 
            "OrangeButtonTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
           "Rows" -> {{Center}}}, AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.9843, 0.68625, 0.3647], 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {
            1 -> RGBColor[0.9843, 0.68625, 0.3647], 2 -> 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "Columns" -> {5, {0.9}, 5}, 
           "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 1.55}}, FrameStyle -> 
         RGBColor[0.9843, 0.68625, 0.3647]], "Grid"]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{{
                Thickness[0.03333333333333333], {
                 FaceForm[{
                   RGBColor[
                   0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27., 
                  1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                  2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                 FaceForm[{
                   RGBColor[0.898, 0.898, 0.898], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 
                  2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22., 
                  2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                  5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                  4.}, {11., 3.}, {8., 3.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{9.697299999999998, 24.522}, {9.133299999999998, 
                   24.645}, {8.861299999999998, 24.259999999999998`}, {
                   9.313299999999998, 24.092}}, {{9.291299999999998, 
                   23.933}, {8.9683, 24.052999999999997`}, {9.2183, 
                   23.726999999999997`}, {9.587299999999999, 23.601}}, {{
                   9.553299999999998, 23.447}, {9.169299999999998, 23.578}, {
                   8.760299999999999, 23.456999999999997`}, {
                   9.102299999999998, 23.348999999999997`}}, {{
                   9.083299999999998, 22.633}, {9.025299999999998, 23.208}, {
                   8.567299999999998, 23.354}, {8.555299999999999, 
                   22.865}}, {{8.521299999999998, 23.551}, {9.039299999999999,
                    23.703}, {8.711299999999998, 24.13}, {8.2183, 
                   23.962999999999997`}}, {{8.4073, 23.197}, {
                   8.171299999999999, 22.851}, {8.171299999999999, 22.445}, {
                   8.398299999999999, 22.837}}, {{8.091299999999999, 
                   23.014}, {8.395299999999999, 23.458}, {8.091299999999999, 
                   23.871}, {7.786299999999999, 23.458}}, {{8.010299999999999,
                    22.851}, {7.773299999999999, 23.197}, {7.782299999999998, 
                   22.837}, {8.010299999999999, 22.445}}, {{7.964299999999999,
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                   7.141299999999999, 23.703}, {7.659299999999998, 
                   23.551}}, {{7.626299999999999, 22.865}, {7.614299999999998,
                    23.354}, {7.155299999999999, 23.209}, {7.097299999999999, 
                   22.633999999999997`}}, {{7.078299999999999, 
                   23.348999999999997`}, {7.422299999999998, 
                   23.456999999999997`}, {7.0112999999999985`, 23.578}, {
                   6.6282999999999985`, 23.447}}, {{6.593299999999998, 
                   23.601}, {6.962299999999999, 23.726999999999997`}, {
                   7.214299999999998, 24.054}, {6.889299999999999, 
                   23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                   7.319299999999998, 24.259999999999998`}, {
                   7.0482999999999985`, 24.645}, {6.484299999999998, 
                   24.522}}, {{7.113299999999999, 25.217}, {7.158299999999999,
                    24.761}, {7.356299999999999, 24.479999999999997`}, {
                   7.344299999999999, 24.904}}, {{7.5032999999999985`, 
                   24.817999999999998`}, {7.518299999999998, 24.279}, {
                   8.010299999999999, 24.113}, {8.010299999999999, 
                   24.637999999999998`}}, {{7.2452999999999985`, 25.302}, {
                   7.4712999999999985`, 24.997}, {7.8622999999999985`, 
                   24.857}, {7.656299999999998, 25.122}}, {{7.800299999999998,
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                   25.192}, {8.091299999999999, 25.689}}, {{8.171299999999999,
                    24.637999999999998`}, {8.171299999999999, 24.113}, {
                   8.663299999999998, 24.279}, {8.677299999999999, 
                   24.817999999999998`}}, {{8.836299999999998, 24.904}, {
                   8.8243, 24.479999999999997`}, {9.022299999999998, 
                   24.761}, {9.068299999999999, 25.217}}, {{8.318299999999999,
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                   25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                   "]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11., 
                  25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                  26.}, {11., 26.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {24.,
                   20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 20.}, {
                  18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {10., 19.}, {
                  6., 19.}}, {{11., 19.}, {17., 19.}, {17., 18.}, {11., 
                  18.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                  "]]}, {
                 FaceForm[{
                   RGBColor[0.392, 0.392, 0.392], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                   "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                   "]}]}}}, {
              ImageSize -> 12, AspectRatio -> Automatic, 
               ImageSize -> {30., 30.}, PlotRange -> {{0., 30.}, {0., 30.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
         "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
         Dynamic[
           FEPrivate`If[
            CurrentValue[Enabled], 
            GrayLevel[1], 
            RGBColor[0.8730375, 0.83578125, 0.7955875]], Evaluator -> 
           "System"], StripOnInput -> False], ButtonFunction :> 
        With[{RSNB`nb$ = ButtonNotebook[]}, 
          If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
            ProgressIndicator[Appearance -> "Necklace"]]; 
          With[{RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False}, 
              Internal`WithLocalSettings[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; 
                Needs["ResourceSystemClient`DefinitionNotebook`"], 
                ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                RSNB`nb$, 
                 #2[]], 
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 False; Null]; Null]]]; 
          CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; Null],
         FrameMargins -> {{5, 5}, {0, 0}}, 
        Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1R5n1BhlAEFANlwxXNmaCoem
KIPacD1kBBQBisOVba1zbos1QlMDQUBxoCzEtUAtjRhGQVAj2EAGMCBGGZGm
Ee82In1KfLgREwvExCkA9SYWEg==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Hover" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1Zds2ptsAkFANlwxXNmaCoee
JJP7c4J/r4+FICAbKAIUhyvbWufcn2L6eH4IXA0EAUWA4kBZiGuBWiammqGp
gSCgOFCWAQyIUUakacS7jUifEh9uxMQCMXEKAB4IRIc=
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaNDUxIhCFkQWRlQ6vOz678/PIEgIBuuGK7s6Iz0
X++f/DnY+Ht9LAQB2UARoDhc2c4Wry/Pb/zZVw1XA1W5rxooDpSFuBZk1Nv7
aGogCCgOlGUAA2KUEWka8W4j0qfEhxsxsUBMnAIAq2R1ew==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
        Background -> RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
        Method -> "Queued", ImageSize -> {All, 23}, Enabled -> Dynamic[
          Not[
           TrueQ[ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
          TrackedSymbols :> {
           ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
        Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              AdjustmentBox[
               TemplateBox[{
                 ActionMenuBox[
                  TagBox[
                   PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                   MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                  Method -> "Queued"], "\"View suggestions\""}, 
                "PrettyTooltipTemplate"], BoxBaselineShift -> -0.3]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -1.}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05555555555555555], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh4qXaoYcOfoO
m+a+X37stKZDbP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4PzZRxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA8nn+Z
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.175292500000001, 
             7.416875}, {7.796855000000001, 11.3084375}, {7.796855000000001, 
             13.38}, {10.11998, 13.38}, {10.11998, 11.3084375}, {
             9.741542500000001, 7.416875}, {8.175292500000001, 
             7.416875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cTvZcLf/4oOD6tE1rk/5HNQjDzAkqeL4FsusdsW
1KjgwAAGAg7hCSdehX2Xd5BvfR24Q07QwaZCOJPjjZyDHdf1xQW2Qg56LJYa
iWlyDv2HvmrEzBeG80GmVbmIwvkvtjT6Sb8Qg+t/BLLPUwJuPti6DEm4/WD7
2qTg7gMZJyIm7QBzP4y/zEVob88lJTi/7+dk7hV1ynD9c3LzfPxZVODmr3ro
0futUwVu/0bpbbqnzqjA3Qfjw9wP48P8B9MP8z/MfFj4wOyHhR/MfbDwRQ9/
ACBxmlc=
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.7185389999999999, 0.5009625, 0.266231]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.47902599999999995`, 0.333975, 0.17748733333333333`]], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.854902, 0.396078, 0.145098], 
       RGBColor[
       0.0196078431372549, 0.28627450980392155`, 0.6509803921568628]]]], 
   Cell[
    StyleData["StringTypeLink"], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        DynamicBox[
         If[
          CurrentValue["MouseOver"], 
          ButtonBox[
           
           StyleBox[#, FontColor -> 
            RGBColor[0.9686274509803922, 0.4666666666666667, 0.]], 
           ButtonData -> #2], 
          ButtonBox[#, ButtonData -> #2]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {
     BaseStyle -> {FontColor -> GrayLevel[0.46666667], "Link"}}], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.905882]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, StyleMenuListing -> None, Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.880722, 0.611041, 0.142051], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.9821083, 0.94165615, 0.87130765]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.368417, 0.506779, 0.709798], Background -> 
    RGBColor[0.90526255, 0.92601685, 0.9564697]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.560181, 0.691569, 0.194885], Background -> 
    RGBColor[0.9340271499999999, 0.95373535, 0.87923275]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    RGBColor[0.898039, 0.898039, 0.898039]], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}]}, Visible -> False, 
  FrontEndVersion -> "13.1 for Microsoft Windows (64-bit) (June 16, 2022)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"12cb484d-daa9-4395-b711-027e7b988133"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Examples"->{
  Cell[580, 22, 502, 7, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "Your Essay Title"->{
  Cell[580, 22, 502, 7, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "AuthorName"->{
  Cell[1085, 31, 266, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
   CellTags->"AuthorName",
   CellID->960727095]},
 "Abstract"->{
  Cell[1354, 38, 370, 6, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]},
 "TemplateCell"->{
  Cell[1354, 38, 370, 6, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Examples", 2392303, 43687},
 {"Your Essay Title", 2392489, 43691},
 {"AuthorName", 2392669, 43695},
 {"Abstract", 2392829, 43699},
 {"TemplateCell", 2393011, 43703}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 502, 7, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577],
Cell[1085, 31, 266, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
 CellTags->"AuthorName",
 CellID->960727095],
Cell[1354, 38, 370, 6, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573],
Cell[CellGroupData[{
Cell[1749, 48, 169, 2, 67, "Section",ExpressionUUID->"9bd85d45-8ad7-4d96-98ff-1848a6742313",
 CellID->162740927],
Cell[1921, 52, 326, 6, 35, "Text",ExpressionUUID->"296d84fb-a6cc-403f-b47e-7418c5a7e6af",
 CellID->588262695],
Cell[2250, 60, 5267, 112, 182, "Input",ExpressionUUID->"5dac0e42-3b44-4fa5-bbb6-cfcaf5a37520",
 CellID->48585887],
Cell[7520, 174, 865873, 14228, 231, 755957, 12425, "CachedBoxData", "BoxData", "Input",ExpressionUUID->"b07326b1-ab47-4cea-9633-5b19d115dd9a",
 CellID->107984828],
Cell[CellGroupData[{
Cell[873418, 14406, 814, 19, 31, "Input",ExpressionUUID->"018ebbb6-ef02-4e3c-9c78-be67adc672f1",
 CellID->27476665],
Cell[874235, 14427, 5355, 108, 112, "Output",ExpressionUUID->"89271cc8-386b-4088-a472-087e7ac155ef",
 CellID->944504415]
}, Open  ]],
Cell[CellGroupData[{
Cell[879627, 14540, 400, 11, 31, "Input",ExpressionUUID->"310cfa43-f1e7-4ee1-b15e-33165f5339fe",
 CellID->270584409],
Cell[880030, 14553, 252, 6, 48, "Output",ExpressionUUID->"46c2bb93-d8ce-472d-bb36-4c3e06a3f9a9",
 CellID->765768]
}, Open  ]],
Cell[CellGroupData[{
Cell[880319, 14564, 195, 3, 28, "Input",ExpressionUUID->"daa7a08c-a97d-4b45-b2dd-6e84efba0ae9",
 CellID->107512250],
Cell[880517, 14569, 5812, 117, 122, "Output",ExpressionUUID->"9092df2b-2827-4b27-b206-ec98788b6845",
 CellID->109853918]
}, Open  ]],
Cell[CellGroupData[{
Cell[886366, 14691, 1030, 23, 31, "Input",ExpressionUUID->"5c233680-63e2-4e73-94db-30dfa59284da",
 CellID->384523848],
Cell[887399, 14716, 10091, 181, 112, "Output",ExpressionUUID->"13944631-c7c0-4aa2-a45a-6cc7189a5b50",
 CellID->192784200]
}, Open  ]],
Cell[CellGroupData[{
Cell[897527, 14902, 764, 19, 31, "Input",ExpressionUUID->"c59b58b2-3ae0-41ec-9c77-77fd093e15d6",
 CellID->15521903],
Cell[898294, 14923, 2084, 58, 66, "Output",ExpressionUUID->"0c7e0141-f88a-40f8-9ae4-924cc2486771",
 CellID->268538735]
}, Open  ]],
Cell[CellGroupData[{
Cell[900415, 14986, 196, 3, 28, "Input",ExpressionUUID->"2aeef08d-86e6-4a67-85d6-0a7e4a9c0452",
 CellID->67480101],
Cell[900614, 14991, 12529, 224, 223, "Output",ExpressionUUID->"e7958f0a-a65a-44f3-87ce-3bd1aaf65452",
 CellID->182350874]
}, Open  ]],
Cell[CellGroupData[{
Cell[913180, 15220, 1291, 31, 53, "Input",ExpressionUUID->"630a6e54-8a98-419b-81a5-674b4126a439",
 CellID->223523663],
Cell[914474, 15253, 7819, 147, 127, "Output",ExpressionUUID->"fc7bb820-d2b9-46f9-ad0c-de668991b3f3",
 CellID->909482580]
}, Open  ]],
Cell[CellGroupData[{
Cell[922330, 15405, 816, 22, 31, "Input",ExpressionUUID->"b3c0fbca-f0ab-4ee1-a075-2586d98a0860",
 CellID->198204712],
Cell[923149, 15429, 1055, 30, 72, "Output",ExpressionUUID->"00cee667-a077-4bed-a46a-ca6772ad83f9",
 CellID->29091776]
}, Open  ]],
Cell[CellGroupData[{
Cell[924241, 15464, 197, 3, 28, "Input",ExpressionUUID->"63467ddb-37b2-4203-b6e4-e339fd6a9595",
 CellID->290477810],
Cell[924441, 15469, 9188, 169, 174, "Output",ExpressionUUID->"f65403e0-d4d0-49ee-a186-d6f88e9c1b64",
 CellID->293681875]
}, Open  ]],
Cell[CellGroupData[{
Cell[933666, 15643, 727, 17, 31, "Input",ExpressionUUID->"64e38fea-54a4-4e73-830c-0bbcda5830f8",
 CellID->357717194],
Cell[934396, 15662, 6365, 125, 111, "Output",ExpressionUUID->"43ef038b-60f2-46f5-80ad-f15cc583a31b",
 CellID->46140855]
}, Open  ]],
Cell[CellGroupData[{
Cell[940798, 15792, 438, 11, 31, "Input",ExpressionUUID->"62a7d6f8-71e5-4dd1-a3bd-b55a016d7f99",
 CellID->561695890],
Cell[941239, 15805, 712, 20, 67, "Output",ExpressionUUID->"e96a2d13-8945-4a36-9810-3c201960aced",
 CellID->438760691]
}, Open  ]],
Cell[CellGroupData[{
Cell[941988, 15830, 197, 3, 28, "Input",ExpressionUUID->"100ac583-bb79-4baa-b3f7-8b800c22807d",
 CellID->418455343],
Cell[942188, 15835, 7322, 141, 138, "Output",ExpressionUUID->"0409b20e-46a5-43ec-acb9-7fde1d5e29f6",
 CellID->8745002]
}, Open  ]],
Cell[CellGroupData[{
Cell[949547, 15981, 696, 17, 31, "Input",ExpressionUUID->"1f3b2e7a-96f2-4b23-8927-0b23cd33300c",
 CellID->158953157],
Cell[950246, 16000, 5032, 105, 112, "Output",ExpressionUUID->"c53c0854-48a1-411d-a3e0-98ea3da98565",
 CellID->340151133]
}, Open  ]],
Cell[CellGroupData[{
Cell[955315, 16110, 447, 12, 31, "Input",ExpressionUUID->"1d906d86-de83-4426-bcf7-9e508c04c59a",
 CellID->214458709],
Cell[955765, 16124, 309, 7, 62, "Output",ExpressionUUID->"88286edc-1feb-4d55-b825-0f2aea6a840e",
 CellID->436210643]
}, Open  ]],
Cell[CellGroupData[{
Cell[956111, 16136, 195, 3, 28, "Input",ExpressionUUID->"19241c26-8c67-429e-a6a3-ece9f3d77c90",
 CellID->720785520],
Cell[956309, 16141, 5559, 114, 121, "Output",ExpressionUUID->"e2fcf4b6-43f9-414d-b6ef-d8b64ccec735",
 CellID->15795471]
}, Open  ]],
Cell[CellGroupData[{
Cell[961905, 16260, 760, 19, 53, "Input",ExpressionUUID->"24bf485f-d0e0-4da6-abff-3d4636d896c6",
 CellID->986482082],
Cell[962668, 16281, 5858, 118, 112, "Output",ExpressionUUID->"0f21b4c4-0b93-459b-b356-deaca1ef8dc3",
 CellID->342586736]
}, Open  ]],
Cell[CellGroupData[{
Cell[968563, 16404, 525, 14, 31, "Input",ExpressionUUID->"90da1cdc-a0ad-4e8d-94b3-84536dc8f148",
 CellID->105902790],
Cell[969091, 16420, 504, 15, 67, "Output",ExpressionUUID->"31f3f6bc-d12e-4762-914f-d22179bda7cb",
 CellID->496749734]
}, Open  ]],
Cell[CellGroupData[{
Cell[969632, 16440, 197, 3, 28, "Input",ExpressionUUID->"30cd7206-7047-4f08-be6a-f6dee18e3da7",
 CellID->145514994],
Cell[969832, 16445, 6602, 131, 131, "Output",ExpressionUUID->"99f88ede-a661-4856-8abc-bb55bec05c07",
 CellID->54822361]
}, Open  ]],
Cell[CellGroupData[{
Cell[976471, 16581, 1064, 25, 66, "Input",ExpressionUUID->"8bb674f9-fbb8-4fe6-800f-0af316e93426",
 CellID->120992786],
Cell[977538, 16608, 7032, 135, 116, "Output",ExpressionUUID->"491e54f0-74f5-4d81-a85c-9112b557b0bd",
 CellID->210210784]
}, Open  ]],
Cell[CellGroupData[{
Cell[984607, 16748, 629, 17, 50, "Input",ExpressionUUID->"fe07e3e5-5e53-459f-8ca7-644b45d4b7d5",
 CellID->617443464],
Cell[985239, 16767, 1032, 30, 89, "Output",ExpressionUUID->"8c20606a-b8e2-43ca-8742-5f9e4989c8fb",
 CellID->36595102]
}, Open  ]],
Cell[CellGroupData[{
Cell[986308, 16802, 673, 18, 50, "Input",ExpressionUUID->"d1aa20fd-08e1-4a10-97f1-77ad53f120e2",
 CellID->20483341],
Cell[986984, 16822, 792, 24, 89, "Output",ExpressionUUID->"c502a590-bcf0-4e60-85a2-9c4c991c059a",
 CellID->26973327]
}, Open  ]],
Cell[CellGroupData[{
Cell[987813, 16851, 195, 3, 28, "Input",ExpressionUUID->"5bbc665f-0224-4e8b-bf59-80b1e6f64d18",
 CellID->103645897],
Cell[988011, 16856, 8140, 154, 169, "Output",ExpressionUUID->"dd8fa69a-f9f0-442f-9c6a-ceedf875a1eb",
 CellID->81770927]
}, Open  ]],
Cell[CellGroupData[{
Cell[996188, 17015, 1320, 33, 220, "Input",ExpressionUUID->"dfaf6ecb-c717-40d6-a3e0-fd78843d5831",
 CellID->252773179],
Cell[997511, 17050, 8569, 169, 136, "Output",ExpressionUUID->"5165038f-098f-40ca-9514-a90bcec4fc98",
 CellID->105895004]
}, Open  ]],
Cell[CellGroupData[{
Cell[1006117, 17224, 798, 24, 72, "Input",ExpressionUUID->"c02c9388-ecbd-4364-a94c-11b42a2a6be8",
 CellID->6121009],
Cell[1006918, 17250, 1619, 46, 97, "Output",ExpressionUUID->"86867e77-9539-4d9f-bb76-72357e3de49b",
 CellID->672058100]
}, Open  ]],
Cell[CellGroupData[{
Cell[1008574, 17301, 852, 25, 72, "Input",ExpressionUUID->"334e92cd-6efe-4387-993e-f82be07dfd99",
 CellID->645872114],
Cell[1009429, 17328, 1471, 46, 81, "Output",ExpressionUUID->"aa24b4de-f7c9-476b-a222-f7aeb8785501",
 CellID->31384587]
}, Open  ]],
Cell[CellGroupData[{
Cell[1010937, 17379, 192, 3, 28, "Input",ExpressionUUID->"733065ac-cdf9-4c77-ad68-77c9556453d1",
 CellID->11483923],
Cell[1011132, 17384, 10182, 188, 253, "Output",ExpressionUUID->"be99a0bb-20ba-48a5-89e6-47ca25d221b4",
 CellID->138663844]
}, Open  ]],
Cell[CellGroupData[{
Cell[1021351, 17577, 1377, 30, 123, "Input",ExpressionUUID->"2b299f98-46c2-4434-be03-8cb2fbb4463d",
 CellID->265231833],
Cell[1022731, 17609, 6832, 134, 141, "Output",ExpressionUUID->"279c588c-9484-4425-bfe0-79d96ebf57e7",
 CellID->98619844]
}, Open  ]],
Cell[CellGroupData[{
Cell[1029600, 17748, 694, 19, 63, "Input",ExpressionUUID->"f16f27b1-2a9d-4363-8198-9749878cb50e",
 CellID->257369976],
Cell[1030297, 17769, 1258, 37, 35, "Output",ExpressionUUID->"e3b42e5d-8a3b-4e10-a321-080cea3b6cfa",
 CellID->108457924]
}, Open  ]],
Cell[CellGroupData[{
Cell[1031592, 17811, 776, 22, 63, "Input",ExpressionUUID->"bffa5a15-b83b-41f2-9249-d0a93840540d",
 CellID->102566625],
Cell[1032371, 17835, 1223, 35, 70, "Output",ExpressionUUID->"def8dd92-382b-426a-a579-8a84aa1906c7",
 CellID->396959763]
}, Open  ]],
Cell[CellGroupData[{
Cell[1033631, 17875, 196, 3, 28, "Input",ExpressionUUID->"de0d3950-9e9b-409b-bded-a14fdb0244ad",
 CellID->474758336],
Cell[1033830, 17880, 7771, 153, 204, "Output",ExpressionUUID->"798dd231-48b7-4022-91ad-d699257c673b",
 CellID->2529627]
}, Open  ]],
Cell[CellGroupData[{
Cell[1041638, 18038, 851, 20, 112, "Input",ExpressionUUID->"843f415f-cb50-4299-a6cd-8c2004971c7a",
 CellID->63906574],
Cell[1042492, 18060, 6445, 123, 112, "Output",ExpressionUUID->"ba9b1884-1b4e-4dd1-8a60-998c6b5eec76",
 CellID->610446124]
}, Open  ]],
Cell[CellGroupData[{
Cell[1048974, 18188, 624, 16, 50, "Input",ExpressionUUID->"9b9caf8b-df2c-47cc-bc4a-1c19fff3b813",
 CellID->353548350],
Cell[1049601, 18206, 713, 21, 66, "Output",ExpressionUUID->"b8a35554-18f2-4c5f-be43-7dceb1220bb5",
 CellID->203266047]
}, Open  ]],
Cell[CellGroupData[{
Cell[1050351, 18232, 199, 3, 28, "Input",ExpressionUUID->"c5c843e7-36e7-4ab2-aa23-ba13e80fcb80",
 CellID->991592304],
Cell[1050553, 18237, 7457, 139, 126, "Output",ExpressionUUID->"0b3c19dd-e954-4188-ae5c-9072d6765524",
 CellID->7885916]
}, Open  ]],
Cell[CellGroupData[{
Cell[1058047, 18381, 1022, 24, 139, "Input",ExpressionUUID->"6dbf8552-b8f3-41e0-9b55-d733643e3695",
 CellID->417512614],
Cell[1059072, 18407, 8121, 161, 112, "Output",ExpressionUUID->"4e8011e5-be50-42f7-a58a-0bdffcfe01ca",
 CellID->33267781]
}, Open  ]],
Cell[CellGroupData[{
Cell[1067230, 18573, 655, 18, 66, "Input",ExpressionUUID->"6d68e538-4bd9-4e4c-b756-6cca14f730ac",
 CellID->49704765],
Cell[1067888, 18593, 1103, 32, 69, "Output",ExpressionUUID->"9016d632-6b08-4a10-be80-a7b17e15286e",
 CellID->769244460]
}, Open  ]],
Cell[CellGroupData[{
Cell[1069028, 18630, 197, 3, 28, "Input",ExpressionUUID->"e01dbe96-a44b-4d0e-ae63-1b80cd0b2cd1",
 CellID->471696306],
Cell[1069228, 18635, 9550, 190, 175, "Output",ExpressionUUID->"2c199791-a102-4b63-8e2a-633b893c3a9a",
 CellID->513974534]
}, Open  ]],
Cell[CellGroupData[{
Cell[1078815, 18830, 1080, 28, 180, "Input",ExpressionUUID->"eed2f601-d644-439c-93aa-9ba7acb77984",
 CellID->431444270],
Cell[1079898, 18860, 8096, 164, 138, "Output",ExpressionUUID->"83aba8c8-e8db-42fd-871e-524767507bb8",
 CellID->354493600]
}, Open  ]],
Cell[CellGroupData[{
Cell[1088031, 19029, 724, 21, 67, "Input",ExpressionUUID->"01dcf88d-43ed-4204-8d86-fba828687a44",
 CellID->668127900],
Cell[1088758, 19052, 1291, 42, 74, "Output",ExpressionUUID->"9aa89a25-7ff2-4cc1-9b52-a50e1f6cf5f9",
 CellID->125828504]
}, Open  ]],
Cell[CellGroupData[{
Cell[1090086, 19099, 199, 3, 28, "Input",ExpressionUUID->"c38783a5-aa83-4d4f-a3d9-fe09cd7b9057",
 CellID->113924084],
Cell[1090288, 19104, 9613, 193, 280, "Output",ExpressionUUID->"b6719765-a541-4744-99e7-7fdabc8e83f6",
 CellID->22533797]
}, Open  ]],
Cell[CellGroupData[{
Cell[1099938, 19302, 1280, 33, 148, "Input",ExpressionUUID->"5384125e-90b1-4cd9-b4d8-e93c4b450104",
 CellID->365270134],
Cell[1101221, 19337, 11294, 209, 128, "Output",ExpressionUUID->"5c12b30f-1b9d-4143-8e8a-5c2d9e3cef0a",
 CellID->219106427]
}, Open  ]],
Cell[CellGroupData[{
Cell[1112552, 19551, 771, 23, 48, "Input",ExpressionUUID->"6b51f3f9-0036-43b5-a6a7-66d5d8c73eed",
 CellID->681324460],
Cell[1113326, 19576, 2714, 78, 96, "Output",ExpressionUUID->"f0325813-034f-4a35-9d41-10e37862c98b",
 CellID->148681319]
}, Open  ]],
Cell[CellGroupData[{
Cell[1116077, 19659, 199, 3, 28, "Input",ExpressionUUID->"b4c998d5-15ac-41b8-adaa-b5980b1fd8b5",
 CellID->805797574],
Cell[1116279, 19664, 14829, 273, 263, "Output",ExpressionUUID->"5a8e4bc4-a95e-4d57-b314-5131206fb1df",
 CellID->753464094]
}, Open  ]],
Cell[1131123, 19940, 210, 2, 35, "Text",ExpressionUUID->"9492e6ac-a2fb-43c1-b97e-ecd33bbcbf06",
 CellID->22898690],
Cell[1131336, 19944, 204, 2, 35, "Text",ExpressionUUID->"d2ef9fe5-b345-4576-a6e5-e09f20d3f3b8",
 CellID->807499158],
Cell[1131543, 19948, 4176, 115, 202, "Input",ExpressionUUID->"701c98c5-94bf-47a4-bcad-3adb00a2c98e",
 CellID->294566406],
Cell[CellGroupData[{
Cell[1135744, 20067, 234, 4, 28, "Input",ExpressionUUID->"28a73d3d-9e40-4212-ba56-e134796b081f",
 CellID->353237872],
Cell[1135981, 20073, 275, 6, 32, "Output",ExpressionUUID->"30e5bdb6-ff49-42bc-9418-687bcee77df7",
 CellID->280916613]
}, Open  ]],
Cell[1136271, 20082, 293, 5, 35, "Text",ExpressionUUID->"ef223121-86f9-4a65-b172-49ad242e90ea",
 CellID->362114512],
Cell[1136567, 20089, 457, 13, 35, "Text",ExpressionUUID->"d5a530da-5e4f-4e26-93fa-c819536cc84a",
 CellID->252245795],
Cell[1137027, 20104, 13850, 230, 119, "Input",ExpressionUUID->"2a4b344a-50fa-4f5a-9423-aed7774841df",
 CellID->391291944],
Cell[CellGroupData[{
Cell[1150902, 20338, 224, 4, 28, "Input",ExpressionUUID->"defa8566-0fed-4e81-be24-270c2727b1d0",
 CellID->155814185],
Cell[1151129, 20344, 689, 11, 32, "Output",ExpressionUUID->"c4dd7535-eba5-4317-90e8-e1e22e403229",
 CellID->109552347]
}, Open  ]],
Cell[CellGroupData[{
Cell[1151855, 20360, 1020, 30, 31, "Input",ExpressionUUID->"ac8620a3-60f2-4275-8e9d-e39c5bbe0c62",
 CellID->213431196],
Cell[1152878, 20392, 1768, 51, 86, "Output",ExpressionUUID->"faaf2da8-a5cb-4ac4-91a2-ccb1dff021e1",
 CellID->58209348]
}, Open  ]],
Cell[CellGroupData[{
Cell[1154683, 20448, 989, 30, 31, "Input",ExpressionUUID->"36a9cf91-629d-46b6-8591-d69a79f2d73e",
 CellID->284058788],
Cell[1155675, 20480, 1899, 62, 56, "Output",ExpressionUUID->"92cf51c4-5419-4f91-be54-85919de499bf",
 CellID->446557700]
}, Open  ]],
Cell[CellGroupData[{
Cell[1157611, 20547, 1092, 32, 31, "Input",ExpressionUUID->"a6d06225-7667-43cd-8aec-2b2ecb06562e",
 CellID->398678795],
Cell[1158706, 20581, 455, 12, 67, "Output",ExpressionUUID->"6d794fb8-47f0-4087-804a-a0ed0a87bd2e",
 CellID->30074208]
}, Open  ]],
Cell[CellGroupData[{
Cell[1159198, 20598, 1184, 33, 31, "Input",ExpressionUUID->"412654b3-4da2-4feb-ac77-6c13893af67d",
 CellID->754706430],
Cell[1160385, 20633, 533, 14, 67, "Output",ExpressionUUID->"4b296e22-3941-4060-8d1e-68faa5ff6c2f",
 CellID->619790141]
}, Open  ]],
Cell[1160933, 20650, 195, 2, 35, "Text",ExpressionUUID->"5c4ad465-7c25-4877-8671-d826d513315c",
 CellID->67781306],
Cell[CellGroupData[{
Cell[1161153, 20656, 1246, 35, 31, "Input",ExpressionUUID->"265e4055-5ea4-455e-8f33-c480a22a71c5",
 CellID->118547987],
Cell[1162402, 20693, 460, 13, 67, "Output",ExpressionUUID->"24c797ed-ae34-461b-ad6f-bd94e5029fde",
 CellID->441107373]
}, Open  ]],
Cell[1162877, 20709, 377, 10, 35, "Text",ExpressionUUID->"21dd603e-081e-4021-8425-0f82df63b054",
 CellID->61353467],
Cell[1163257, 20721, 134524, 2209, 207, "Input",ExpressionUUID->"756b6986-4d08-493a-bbcb-a67de2b30c4d",
 CellID->73731485],
Cell[1297784, 22932, 243, 4, 35, "Text",ExpressionUUID->"c177f455-4f93-4dfd-ba1e-52c394271f76",
 CellID->99000448],
Cell[CellGroupData[{
Cell[1298052, 22940, 517, 13, 28, "Input",ExpressionUUID->"f8c66b14-8afd-4266-85e9-b947f32bc66f",
 CellID->400047158],
Cell[1298572, 22955, 225, 5, 32, "Output",ExpressionUUID->"accf4133-0fa0-47d6-acdf-888ce4f0c2f0",
 CellID->6412769]
}, Open  ]],
Cell[CellGroupData[{
Cell[1298834, 22965, 1327, 38, 31, "Input",ExpressionUUID->"9b3c4160-0cad-4dcf-9048-203285cf44d5",
 CellID->316484889],
Cell[1300164, 23005, 4612, 132, 118, "Output",ExpressionUUID->"eebe0750-8af5-4976-92c3-4f188c07f1ad",
 CellID->270995229]
}, Open  ]],
Cell[CellGroupData[{
Cell[1304813, 23142, 1422, 40, 31, "Input",ExpressionUUID->"2d2c42db-1ef2-45de-89ed-6eccb9e08f66",
 CellID->274752554],
Cell[1306238, 23184, 636, 19, 63, "Output",ExpressionUUID->"329c6632-3c78-45d3-b0d7-a356dc2ebfb9",
 CellID->225667379]
}, Open  ]],
Cell[1306889, 23206, 228, 4, 35, "Text",ExpressionUUID->"df57194f-f26b-4ad0-b6a4-e9cae9bdc45f",
 CellID->19738407],
Cell[CellGroupData[{
Cell[1307142, 23214, 1577, 44, 31, "Input",ExpressionUUID->"cd491ffd-cd25-44d7-8c4b-67688afc5fd5",
 CellID->106186386],
Cell[1308722, 23260, 6683, 190, 148, "Output",ExpressionUUID->"767060a1-c8bf-4480-a4e1-6144f82842ae",
 CellID->302702088]
}, Open  ]],
Cell[CellGroupData[{
Cell[1315442, 23455, 1717, 46, 31, "Input",ExpressionUUID->"d10be09e-2568-4ac2-a820-088aa0797497",
 CellID->3758324],
Cell[1317162, 23503, 709, 21, 65, "Output",ExpressionUUID->"12aca722-bfca-425e-8077-d5fff2822690",
 CellID->64563468]
}, Open  ]],
Cell[CellGroupData[{
Cell[1317908, 23529, 397, 11, 31, "Input",ExpressionUUID->"ea992eac-6694-43c0-9424-773bd6da9efe",
 CellID->465434395],
Cell[1318308, 23542, 452, 14, 52, "Output",ExpressionUUID->"f94484db-3f6a-489f-871a-c0dd66455c33",
 CellID->219332291]
}, Open  ]],
Cell[CellGroupData[{
Cell[1318797, 23561, 483, 13, 31, "Input",ExpressionUUID->"d517c824-7721-4383-a4b6-cd1e83ff9470",
 CellID->200298391],
Cell[1319283, 23576, 506, 15, 66, "Output",ExpressionUUID->"6a5a732e-9eea-4dd2-8bb6-5d905aef708d",
 CellID->136109088]
}, Open  ]],
Cell[CellGroupData[{
Cell[1319826, 23596, 481, 13, 31, "Input",ExpressionUUID->"202aad74-6dd0-4a56-ab3c-38bd91a98b8b",
 CellID->139691264],
Cell[1320310, 23611, 408, 12, 65, "Output",ExpressionUUID->"1db74798-8d0f-4fca-8c31-dedd9011a7b8",
 CellID->122710668]
}, Open  ]],
Cell[CellGroupData[{
Cell[1320755, 23628, 461, 12, 31, "Input",ExpressionUUID->"65a79aad-5021-4dde-8943-f12ab1648c2b",
 CellID->99385821],
Cell[1321219, 23642, 516, 13, 49, "Output",ExpressionUUID->"02079e80-8406-4e14-bc21-df48151808d6",
 CellID->181167192]
}, Open  ]],
Cell[CellGroupData[{
Cell[1321772, 23660, 219, 3, 41, "WolframAlphaLong",ExpressionUUID->"d328e080-6c03-4c5b-9f4d-b55d6d937843",
 CellID->346228169],
Cell[1321994, 23665, 31332, 618, 1380, "Print",ExpressionUUID->"7a37e633-0359-4057-8433-d853489218bc",
 CellID->60829790]
}, Open  ]],
Cell[CellGroupData[{
Cell[1353363, 24288, 329, 9, 37, "Input",ExpressionUUID->"f3aff372-6529-4504-bd33-04a867411ab4",
 CellID->135240112],
Cell[1353695, 24299, 275, 7, 52, "Output",ExpressionUUID->"aa8b0e33-347c-4ccd-9f4e-9c7c8264e0a4",
 CellID->66690203]
}, Open  ]],
Cell[1353985, 24309, 360, 9, 31, "Input",ExpressionUUID->"3ed8ebdc-e15a-42f2-8328-4882fa8503a1",
 CellID->156031519],
Cell[1354348, 24320, 310, 7, 31, InheritFromParent,ExpressionUUID->"a0eafa53-59ad-47be-a74f-5e858318e933",
 CellID->113494516],
Cell[CellGroupData[{
Cell[1354683, 24331, 413, 12, 41, "WolframAlphaLong",ExpressionUUID->"afda2874-ae1e-4e9e-82e6-f55590d31cef",
 CellID->382477971],
Cell[1355099, 24345, 425843, 7843, 2942, "Print",ExpressionUUID->"aa52a1e5-48e2-4359-b0bc-2c3560f6d8b8",
 CellID->350288734]
}, Open  ]],
Cell[CellGroupData[{
Cell[1780979, 32193, 235, 7, 37, "Input",ExpressionUUID->"a9c03303-2fd4-4385-aa89-a4370e732e28",
 CellID->278976234],
Cell[1781217, 32202, 252, 7, 52, "Output",ExpressionUUID->"04ec6a60-75dc-4b88-90d0-5d4dc88f6657",
 CellID->331566230]
}, Open  ]],
Cell[CellGroupData[{
Cell[1781506, 32214, 442, 13, 41, "WolframAlphaLong",ExpressionUUID->"270cd65a-e73c-4676-8342-9704d0fb8c6d",
 CellID->464190498],
Cell[1781951, 32229, 435627, 8011, 2916, "Print",ExpressionUUID->"9578509d-057d-4bf5-8527-8ab146ec2480",
 CellID->367417281]
}, Open  ]],
Cell[CellGroupData[{
Cell[2217615, 40245, 294, 7, 45, "Input",ExpressionUUID->"847ff691-7c5a-4e29-b514-5036f9d08011",
 CellID->412925899],
Cell[2217912, 40254, 400, 12, 49, "Output",ExpressionUUID->"14cf1a6c-e619-42ee-9110-82d98f07f95e",
 CellID->343311296]
}, Open  ]],
Cell[CellGroupData[{
Cell[2218349, 40271, 420, 11, 45, "Input",ExpressionUUID->"b7c00856-ceb7-42be-89e1-229f5d6cfe09",
 CellID->826314469],
Cell[2218772, 40284, 401, 11, 48, "Output",ExpressionUUID->"f4e5c669-7804-4cd0-a70b-003f1c21c1f4",
 CellID->91266124]
}, Open  ]],
Cell[CellGroupData[{
Cell[2219210, 40300, 655, 20, 45, "Input",ExpressionUUID->"44c9ba86-feea-4752-9180-5c41e5d012e2",
 CellID->19796586],
Cell[2219868, 40322, 236, 5, 48, "Output",ExpressionUUID->"471b25c7-1ccc-426b-bb0c-d30da27b50ce",
 CellID->171422884]
}, Open  ]],
Cell[CellGroupData[{
Cell[2220141, 40332, 204, 3, 41, "WolframAlphaLong",ExpressionUUID->"20dd7493-cfea-4aa9-9be6-ce72f9ca45a0",
 CellID->473565592],
Cell[2220348, 40337, 31644, 656, 892, "Print",ExpressionUUID->"fb7dda65-22c4-4148-bfb9-bd11f21a17bd",
 CellID->29053615]
}, Open  ]],
Cell[CellGroupData[{
Cell[2252029, 40998, 213, 3, 41, "WolframAlphaLong",ExpressionUUID->"06ff98f9-001f-477b-9072-d0cabded1dde",
 CellID->290071369],
Cell[2252245, 41003, 28528, 565, 719, "Print",ExpressionUUID->"3e7f7d3f-7e35-4c13-8bf3-84135fa96715",
 CellID->494288511]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

