(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1025916,      22462]
NotebookOptionsPosition[    861983,      19183]
NotebookOutlinePosition[    974611,      21330]
CellTagsIndexPosition[    974403,      21321]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Creating Questions", "Title",
 CellChangeTimes->{{3.8746913986729965`*^9, 3.874691402114029*^9}, {
  3.87476439282938*^9, 3.874764395202193*^9}, {3.8747716299888616`*^9, 
  3.8747716322345295`*^9}, {3.8748192452982364`*^9, 3.87481924898717*^9}, {
  3.874831950282841*^9, 3.874831952368229*^9}},
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577,ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Peter", " ", "Cullen", " ", "Burbery"}], "Author"]], "Author",
 CellChangeTimes->{{3.8746961443750143`*^9, 3.874696148507888*^9}},
 CellTags->"AuthorName",
 CellID->960727095,ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c"],

Cell[TextData[{
 "I cover how to write questions in number theory, linear algebra, dates, \
times, and calendars, and more. I also discuss the",
 ButtonBox[" twelvefold way",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Twelvefold_way"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Twelvefold_way"],
 " and combinatorics and how to use my paclet RecreationalMathematics to \
solve random combinatorics word problems."
}], "Abstract",
 CellChangeTimes->{{3.874696359497938*^9, 3.8746963684605875`*^9}, {
  3.8747644009473295`*^9, 3.874764404247607*^9}, {3.874841486123148*^9, 
  3.874841542486541*^9}, {3.8748444953909173`*^9, 3.8748444953909173`*^9}},
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573,ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e"],

Cell[CellGroupData[{

Cell["Creating simple questions", "Section",
 CellChangeTimes->{{3.874831954967911*^9, 3.8748319614796143`*^9}, {
  3.8748327004016943`*^9, 3.874832704509905*^9}},
 CellID->297055934,ExpressionUUID->"68ee1a6a-ca5f-436c-a3bc-baa2926e7043"],

Cell["Create a question for if a number is prime.", "Text",
 CellChangeTimes->{{3.8748350101036015`*^9, 3.8748350186893873`*^9}},
 CellID->408283766,ExpressionUUID->"8530cf4f-d284-4780-9249-2070f8e67913"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primetest", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", "100000", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<True or False: \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", "\"\< is Prime.\>\""}], 
       ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"PrimeQ", "[", "#n", "]"}], "]"}]}], "]"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748319725755796`*^9, 3.874831972712696*^9}},
 CellLabel->"In[446]:=",
 CellID->90433782,ExpressionUUID->"bd7ffdd2-5fa4-4ac5-82a6-a1a75acd8263"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[100000]}, QuestionObject[
   "True or False: " <> ToString[
      Slot["n"]] <> " is Prime.", 
    AssessmentFunction[
     PrimeQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748319665541983`*^9, 3.8748319730958004`*^9}, 
   3.8748329281823015`*^9},
 CellLabel->"Out[446]=",
 CellID->698652991,ExpressionUUID->"9d5175e2-34ba-4882-91bc-ca74f647d5ad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primetest", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748319670761995`*^9, 3.874831969579834*^9}},
 CellLabel->"In[406]:=",
 CellID->5113196,ExpressionUUID->"277b421e-87c0-4bb6-a2d4-fa285d65fb5c"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 15, 15.3093571`8.937531901598119}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 3|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 3, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"True or False: 71989 is Prime.", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{138., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "True or False: 71989 is Prime."], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748319698753867`*^9, 3.8748319740318136`*^9}},
 CellLabel->"Out[406]=",
 CellID->351266580,ExpressionUUID->"ab304271-8f2d-48aa-b988-0d07045922ae"]
}, Open  ]],

Cell["I don't know if 71989 is prime, so I can use Mathematica.", "Text",
 CellChangeTimes->{{3.8748320967793226`*^9, 3.874832109058705*^9}},
 CellID->365794056,ExpressionUUID->"02b8627f-b104-424c-ad7c-f357debd8f89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeQ", "[", "71989", "]"}]], "Input",
 CellChangeTimes->{{3.8748321100943155`*^9, 3.874832113085988*^9}},
 CellLabel->"In[418]:=",
 CellID->146004429,ExpressionUUID->"044e79d4-ef61-4589-8a45-d7bd1017fc35"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8748321133528004`*^9},
 CellLabel->"Out[418]=",
 CellID->108288531,ExpressionUUID->"bb3d0b06-8264-4f02-b8db-ce45a39ced6c"]
}, Open  ]],

Cell["Make a simple test if a number is even:", "Text",
 CellChangeTimes->{{3.8748319879384527`*^9, 3.87483199345735*^9}},
 CellID->31212463,ExpressionUUID->"8291d785-c393-4eae-8842-c3efe614a7e7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eventest", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", "1000000", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<True or False: \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", "\"\< is even.\>\""}], 
       ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"EvenQ", "[", "#n", "]"}], "]"}]}], "]"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748319670761995`*^9, 3.874831996365857*^9}},
 CellLabel->"In[407]:=",
 CellID->478354864,ExpressionUUID->"f5fab380-d244-4790-b977-dcac9af2678e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[1000000]}, QuestionObject[
   "True or False: " <> ToString[
      Slot["n"]] <> " is even.", 
    AssessmentFunction[
     EvenQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748319976728673`*^9},
 CellLabel->"Out[407]=",
 CellID->565849212,ExpressionUUID->"a2f96edd-14c4-4319-a002-e82dc4260ea4"]
}, Open  ]],

Cell["This time the answer is false.", "Text",
 CellChangeTimes->{{3.874835027188822*^9, 3.8748350345815105`*^9}},
 CellID->110720536,ExpressionUUID->"2ccf2051-bf24-4788-8c12-f9a9df6e6dbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eventest", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874831998307565*^9, 3.874831999608467*^9}},
 CellLabel->"In[408]:=",
 CellID->202960248,ExpressionUUID->"537b7f31-9278-4daf-9590-3de800de8020"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 13, 22.741809`9.109399936888162}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"True or False: 201759 is even.", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{138., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "True or False: 201759 is even."], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748319998859615`*^9},
 CellLabel->"Out[408]=",
 CellID->413268153,ExpressionUUID->"6c18784e-173e-4224-8165-94f5071a8871"]
}, Open  ]],

Cell["This time the answer is true.", "Text",
 CellChangeTimes->{{3.8748350373545814`*^9, 3.874835045519789*^9}},
 CellID->233630521,ExpressionUUID->"d822f978-4ba8-4152-af72-778323097857"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"eventest", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748320044293165`*^9, 3.8748320053785224`*^9}},
 CellLabel->"In[412]:=",
 CellID->336076158,ExpressionUUID->"357fadcb-869d-4924-abbd-dffd1ccddb5d"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = True, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> True, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 13, 34.4786875`9.290125621605718}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = True}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"True or False: 260296 is even.", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{True -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{138., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "True or False: 260296 is even."], 
   AssessmentFunction[{True -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748320056442184`*^9, 3.8748320122071533`*^9}},
 CellLabel->"Out[412]=",
 CellID->222755012,ExpressionUUID->"471a36da-527c-441a-a78c-e14ef4892c9e"]
}, Open  ]],

Cell["Make a question about prime gaps:", "Text",
 CellChangeTimes->{{3.874832023784522*^9, 3.874832028698217*^9}},
 CellID->921809795,ExpressionUUID->"7cf782ef-d78b-4168-9c8e-0ff6e5151a4c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primegapquestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomPrime", "[", "100000", "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<What is the gap between the prime \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< and the next prime.\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"NextPrime", "[", "#n", "]"}], "-", "#n", "-", "1"}], "}"}],
         "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{3.8748320366851034`*^9},
 CellLabel->"In[414]:=",
 CellID->480261,ExpressionUUID->"36b409d7-6ad0-4771-8ed9-31622e02728e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomPrime[100000]}, QuestionObject[
   "What is the gap between the prime " <> ToString[
      Slot["n"]] <> " and the next prime.", 
    AssessmentFunction[{NextPrime[
        Slot["n"]] - Slot["n"] - 1}]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748320298789387`*^9, 3.8748320374010243`*^9}},
 CellLabel->"Out[414]=",
 CellID->619713253,ExpressionUUID->"0592235c-28da-4302-8dd2-dfb0d5193278"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"primegapquestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748320380538645`*^9, 3.8748320392185044`*^9}},
 CellLabel->"In[415]:=",
 CellID->21636808,ExpressionUUID->"143e485f-8de4-40ab-b51b-63a27bfd3ec3"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 21, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 21, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 14, 49.0727951`9.443415650845397}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 21}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What is the gap between the prime 3469 and the next prime.", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gap between the prime 3469 and the next prime."|>, 
            "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "What is the gap between the prime 3469 and the next prime."|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{21 -> 1}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{21 -> 1}]]]}, {
         If[
          Or[AssessmentFunction[{21 -> 1}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{21 -> 1}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{21 -> 1}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{264., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, "What is the gap between the prime 3469 and the next prime."], 
   AssessmentFunction[{21 -> 1}]]]], "Output",
 CellChangeTimes->{3.874832040326188*^9},
 CellLabel->"Out[415]=",
 CellID->607427284,ExpressionUUID->"504d0864-ed23-4abd-aa37-6b300fa71844"]
}, Open  ]],

Cell["\<\
I don't know the answer. I can use Mathematica to find the answer.\
\>", "Text",
 CellChangeTimes->{{3.8748320313942213`*^9, 3.8748320658836174`*^9}},
 CellID->194581842,ExpressionUUID->"257f466a-f06c-4120-ac8f-0bf3391ab3de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"PrimeGap", "[", 
   RowBox[{"prime_", "?", "PrimeQ"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"NextPrime", "[", "prime", "]"}], "-", "prime", "-", 
   "1"}]}]], "Input",
 CellChangeTimes->{{3.8748320680946913`*^9, 3.874832080310213*^9}},
 CellLabel->"In[416]:=",
 CellID->216073794,ExpressionUUID->"b86b5db6-5fc9-43b0-a18c-510857f32b2c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PrimeGap", "[", "3469", "]"}]], "Input",
 CellChangeTimes->{{3.8748320813550653`*^9, 3.874832086148945*^9}},
 CellLabel->"In[417]:=",
 CellID->588820731,ExpressionUUID->"2be9714f-3eed-4fc3-80e5-aa1239496334"],

Cell[BoxData["21"], "Output",
 CellChangeTimes->{3.874832086494753*^9},
 CellLabel->"Out[417]=",
 CellID->328489301,ExpressionUUID->"27534b13-624a-4b7b-9bb9-e3b9d34cd9eb"]
}, Open  ]],

Cell["Make a question if a matrix is Hermitian:", "Text",
 CellChangeTimes->{{3.8748321806437483`*^9, 3.874832187142828*^9}, 
   3.874832368372869*^9},
 CellID->66752073,ExpressionUUID->"8598a091-e2d3-44e5-958a-48965b991ed8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hermitianquestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is the matrix \>\"", "<>", 
        RowBox[{"ToString", "@", 
         RowBox[{"TraditionalForm", "[", "#n", "]"}]}], "<>", 
        "\"\< Hermitian?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"HermitianMatrixQ", "[", "#n", "]"}], "]"}]}], "]"}], "&"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.8748321925329046`*^9, 3.8748321936352735`*^9}, {
  3.8748322312372866`*^9, 3.8748322349278145`*^9}, {3.874832265937072*^9, 
  3.874832334768848*^9}},
 CellLabel->"In[432]:=",
 CellID->162292671,ExpressionUUID->"e6981f40-eea7-47f2-913f-ffb15fb3bf48"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{-10, 10}, {3, 3}]}, QuestionObject[
   "Is the matrix " <> ToString[
      TraditionalForm[
       Slot["n"]]] <> " Hermitian?", 
    AssessmentFunction[
     HermitianMatrixQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748322881746793`*^9, 3.8748323352126145`*^9}, 
   3.8748324347865853`*^9},
 CellLabel->"Out[432]=",
 CellID->10661650,ExpressionUUID->"636c44ff-155a-4f65-9452-a04ff1123ec7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hermitianquestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748322900580997`*^9, 3.8748322909915943`*^9}},
 CellLabel->"In[427]:=",
 CellID->4537031,ExpressionUUID->"8c5b534a-58d5-47ce-ac6b-df282155beba"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 19, 21.9426742`9.093864486730828}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"5\"}], \"9\", \"4\"}, {\"0\", \"4\", \
RowBox[{\"-\", \"3\"}]}, {RowBox[{\"-\", \"9\"}], \"5\", \"7\"}}, \
Rule[RowSpacings, 1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
Hermitian?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{167., {59.93359379926696, 64.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"5\"}], \"9\", \"4\"}, {\"0\", \"4\", \
RowBox[{\"-\", \"3\"}]}, {RowBox[{\"-\", \"9\"}], \"5\", \"7\"}}, \
Rule[RowSpacings, 1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
Hermitian?"], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748322914033575`*^9, 3.874832336081685*^9}},
 CellLabel->"Out[427]=",
 CellID->437164944,ExpressionUUID->"55307830-651c-4587-b3c0-c5121189b792"]
}, Open  ]],

Cell["Verify the answer:", "Text",
 CellChangeTimes->{{3.8748323405919824`*^9, 3.8748323447261605`*^9}},
 CellID->92676727,ExpressionUUID->"7cdf07d3-0c9a-4484-9813-5b6dac26d35c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"HermitianMatrixQ", "[", 
  RowBox[{"(", GridBox[{
     {
      RowBox[{"-", "5"}], "9", "4"},
     {"0", "4", 
      RowBox[{"-", "3"}]},
     {
      RowBox[{"-", "9"}], "5", "7"}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748323454438696`*^9, 3.874832358761573*^9}},
 CellLabel->"In[428]:=",
 CellID->133439464,ExpressionUUID->"bafb8a08-310d-45b8-b7f3-9d3025241626"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.874832359114853*^9},
 CellLabel->"Out[428]=",
 CellID->12257223,ExpressionUUID->"f0857202-1ef9-4600-8f7d-f887f11deae1"]
}, Open  ]],

Cell["\<\
One disadvantage is I think most of the time the matrix will not be \
Hermitian, so the question isn't a very good way to quiz if someone can \
calculate if a matrix is Hermitian because I think RandomInteger will \
generate mostly matrices that are Hermitian.\
\>", "Text",
 CellChangeTimes->{{3.8748350581831765`*^9, 3.8748351102892714`*^9}},
 CellID->91320625,ExpressionUUID->"3b5d1e7f-2f12-4de2-97f9-1e9e4e4be480"],

Cell["Make a question if a matrix is symmetric:", "Text",
 CellChangeTimes->{{3.8748321806437483`*^9, 3.874832187142828*^9}, 
   3.874832368372869*^9, {3.8748324104585705`*^9, 3.8748324121167774`*^9}},
 CellID->329437833,ExpressionUUID->"16dfc76c-554d-403a-bc47-d7433ccb4fb4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmmetricMatrixQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is the matrix \>\"", "<>", 
        RowBox[{"ToString", "@", 
         RowBox[{"TraditionalForm", "[", "#n", "]"}]}], "<>", 
        "\"\< symmetric?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"SymmetricMatrixQ", "[", "#n", "]"}], "]"}]}], "]"}], "&"}]}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.8748321925329046`*^9, 3.8748321936352735`*^9}, {
  3.8748322312372866`*^9, 3.8748322349278145`*^9}, {3.874832265937072*^9, 
  3.874832334768848*^9}, {3.8748324136708107`*^9, 3.8748324267575245`*^9}},
 CellLabel->"In[430]:=",
 CellID->325333148,ExpressionUUID->"0cbf6dd0-2545-45c4-bcf7-020259941d87"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{-10, 10}, {3, 3}]}, QuestionObject[
   "Is the matrix " <> ToString[
      TraditionalForm[
       Slot["n"]]] <> " symmetric?", 
    AssessmentFunction[
     SymmetricMatrixQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748322881746793`*^9, 3.8748323352126145`*^9}, {
  3.874832420704362*^9, 3.8748324269495296`*^9}},
 CellLabel->"Out[430]=",
 CellID->74215966,ExpressionUUID->"fdb34c48-25bb-4539-8496-755b92376fcd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"symmmetricMatrixQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748322900580997`*^9, 3.8748322909915943`*^9}, {
  3.874832429358493*^9, 3.8748324311870265`*^9}},
 CellLabel->"In[431]:=",
 CellID->547475352,ExpressionUUID->"d03c65a2-bad7-4fe2-9813-dc7ae197ecfd"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 10, 20, 39.7805327`9.352245477238906}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"1\"}], \"8\", RowBox[{\"-\", \"10\"}]}, \
{RowBox[{\"-\", \"1\"}], \"5\", \"7\"}, {RowBox[{\"-\", \"7\"}], \
RowBox[{\"-\", \"9\"}], RowBox[{\"-\", \"6\"}]}}, Rule[RowSpacings, 1], \
Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
symmetric?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{179., {59.93359379926696, 64.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"1\"}], \"8\", RowBox[{\"-\", \"10\"}]}, \
{RowBox[{\"-\", \"1\"}], \"5\", \"7\"}, {RowBox[{\"-\", \"7\"}], \
RowBox[{\"-\", \"9\"}], RowBox[{\"-\", \"6\"}]}}, Rule[RowSpacings, 1], \
Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
symmetric?"], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748322914033575`*^9, 3.874832336081685*^9}, 
   3.8748324314625196`*^9},
 CellLabel->"Out[431]=",
 CellID->76130598,ExpressionUUID->"95479851-29b3-4f6d-94dd-24b04e6a918a"]
}, Open  ]],

Cell["Verify the answer:", "Text",
 CellChangeTimes->{{3.8748323405919824`*^9, 3.8748323447261605`*^9}},
 CellID->197591961,ExpressionUUID->"d73950f1-86a2-4d68-8f3a-7a305eed3627"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SymmetricMatrixQ", "[", 
  RowBox[{"(", GridBox[{
     {
      RowBox[{"-", "1"}], "8", 
      RowBox[{"-", "10"}]},
     {
      RowBox[{"-", "1"}], "5", "7"},
     {
      RowBox[{"-", "7"}], 
      RowBox[{"-", "9"}], 
      RowBox[{"-", "6"}]}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748323454438696`*^9, 3.874832358761573*^9}, {
  3.8748324444029417`*^9, 3.8748324636417236`*^9}},
 CellLabel->"In[433]:=",
 CellID->56525868,ExpressionUUID->"dab7f6ac-635d-4693-877c-485e22882fc7"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.874832359114853*^9, 3.8748324641330185`*^9},
 CellLabel->"Out[433]=",
 CellID->153597847,ExpressionUUID->"acbd1003-53e5-468a-a9f4-a4e3f4200249"]
}, Open  ]],

Cell["Make a question if a matrix is positive semidefinite:", "Text",
 CellChangeTimes->{{3.8748321806437483`*^9, 3.874832187142828*^9}, 
   3.874832368372869*^9, {3.8748324104585705`*^9, 3.8748324121167774`*^9}, {
   3.8748324977861457`*^9, 3.874832501257583*^9}},
 CellID->136354319,ExpressionUUID->"ae2cd002-4cb7-458b-a9b6-41a54ecaf202"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positiveSemidefiniteMatrixQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is the matrix \>\"", "<>", 
        RowBox[{"ToString", "@", 
         RowBox[{"TraditionalForm", "[", "#n", "]"}]}], "<>", 
        "\"\< explicitly positive semidefinite?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"PositiveSemidefiniteMatrixQ", "[", "#n", "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748321925329046`*^9, 3.8748321936352735`*^9}, {
  3.8748322312372866`*^9, 3.8748322349278145`*^9}, {3.874832265937072*^9, 
  3.874832334768848*^9}, {3.8748324136708107`*^9, 3.8748324267575245`*^9}, {
  3.874832511231057*^9, 3.87483253062663*^9}, {3.8748325882751365`*^9, 
  3.8748325938188763`*^9}},
 CellLabel->"In[437]:=",
 CellID->4439118,ExpressionUUID->"2ad36b42-81f4-43d7-ba09-e1b4da301a47"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{-10, 10}, {3, 3}]}, QuestionObject[
   "Is the matrix " <> ToString[
      TraditionalForm[
       Slot["n"]]] <> " explicitly positive semidefinite?", 
    AssessmentFunction[
     PositiveSemidefiniteMatrixQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748322881746793`*^9, 3.8748323352126145`*^9}, {
   3.874832420704362*^9, 3.8748324269495296`*^9}, 3.874832531001053*^9, 
   3.8748325942256727`*^9},
 CellLabel->"Out[437]=",
 CellID->187522815,ExpressionUUID->"71535307-335a-494d-b74e-472f2fc91b2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"positiveSemidefiniteMatrixQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748322900580997`*^9, 3.8748322909915943`*^9}, {
  3.874832429358493*^9, 3.8748324311870265`*^9}, {3.874832598666151*^9, 
  3.874832600496092*^9}},
 CellLabel->"In[438]:=",
 CellID->44938902,ExpressionUUID->"94e43f29-1e8c-41f8-9f97-d2927c71a34a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = "", 
   QuestionFramework`Private`result$$ = "", 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 0, 
   QuestionFramework`Private`submittedvalue$$ = ""}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"5\"}], RowBox[{\"-\", \"6\"}], \"5\"}, {\"6\", \
RowBox[{\"-\", \"8\"}], \"6\"}, {\"9\", \"10\", RowBox[{\"-\", \"10\"}]}}, \
Rule[RowSpacings, 1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
explicitly positive semidefinite?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{256., {59.93359379926696, 64.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{RowBox[{\"-\", \"5\"}], RowBox[{\"-\", \"6\"}], \"5\"}, {\"6\", \
RowBox[{\"-\", \"8\"}], \"6\"}, {\"9\", \"10\", RowBox[{\"-\", \"10\"}]}}, \
Rule[RowSpacings, 1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
explicitly positive semidefinite?"], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748322914033575`*^9, 3.874832336081685*^9}, 
   3.8748324314625196`*^9, 3.8748325320741243`*^9, 3.8748326008346744`*^9},
 CellLabel->"Out[438]=",
 CellID->100655857,ExpressionUUID->"928007ce-b105-486b-95e3-c041b46b0cb9"]
}, Open  ]],

Cell["Verify the answer:", "Text",
 CellChangeTimes->{{3.8748323405919824`*^9, 3.8748323447261605`*^9}},
 CellID->565312492,ExpressionUUID->"174ff86e-b8d2-46ec-804b-dd8c6428eda0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositiveSemidefiniteMatrixQ", "[", 
  RowBox[{"(", GridBox[{
     {
      RowBox[{"-", "5"}], 
      RowBox[{"-", "6"}], "5"},
     {"6", 
      RowBox[{"-", "8"}], "6"},
     {"9", "10", 
      RowBox[{"-", "10"}]}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748323454438696`*^9, 3.874832358761573*^9}, {
  3.8748324444029417`*^9, 3.8748324636417236`*^9}, {3.874832535401843*^9, 
  3.874832548691106*^9}, {3.8748326056448402`*^9, 3.874832625453866*^9}},
 CellLabel->"In[439]:=",
 CellID->584413782,ExpressionUUID->"ba65d2df-c111-408f-b24e-5814be2471c7"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.874832359114853*^9, 3.8748324641330185`*^9, 
  3.8748325490979176`*^9, 3.8748326259142933`*^9},
 CellLabel->"Out[439]=",
 CellID->691135565,ExpressionUUID->"674422ee-beca-4668-b13e-5c67eb9aaaa8"]
}, Open  ]],

Cell["Negative semidefinite:", "Text",
 CellChangeTimes->{{3.8748325780523176`*^9, 3.8748325823839808`*^9}},
 CellID->220269512,ExpressionUUID->"6ed2bee0-5c6b-42df-9b46-8ccdfa68dda3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"negativeSemidefiniteMatrixQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"3", ",", "3"}], "}"}]}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is the matrix \>\"", "<>", 
        RowBox[{"ToString", "@", 
         RowBox[{"TraditionalForm", "[", "#n", "]"}]}], "<>", 
        "\"\< explicitly negative semidefinite?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"NegativeSemidefiniteMatrixQ", "[", "#n", "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874832633576771*^9, 3.8748326443092937`*^9}},
 CellLabel->"In[551]:=",
 CellID->33086702,ExpressionUUID->"60ab6cd5-730e-43ae-a508-26eeba2ba805"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{-10, 10}, {3, 3}]}, QuestionObject[
   "Is the matrix " <> ToString[
      TraditionalForm[
       Slot["n"]]] <> " explicitly negative semidefinite?", 
    AssessmentFunction[
     NegativeSemidefiniteMatrixQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874832644891779*^9, 3.874835134326145*^9},
 CellLabel->"Out[551]=",
 CellID->177525169,ExpressionUUID->"4e506ff7-ab7a-449a-adf1-8f97d1752f3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"negativeSemidefiniteMatrixQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748326470824347`*^9, 3.874832648122727*^9}, {
  3.8748328435277634`*^9, 3.874832845265868*^9}, {3.8748351288301706`*^9, 
  3.874835129626623*^9}},
 CellLabel->"In[552]:=",
 CellID->275049321,ExpressionUUID->"dee41731-85d7-4756-8c80-b441613629d8"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 5, 42.7397356`9.383406705772517}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", \
GridBox[{{\"4\", RowBox[{\"-\", \"6\"}], RowBox[{\"-\", \"3\"}]}, \
{RowBox[{\"-\", \"4\"}], RowBox[{\"-\", \"7\"}], RowBox[{\"-\", \"7\"}]}, \
{RowBox[{\"-\", \"7\"}], \"10\", RowBox[{\"-\", \"3\"}]}}, Rule[RowSpacings, \
1], Rule[ColumnSpacings, 1], Rule[RowAlignments, Baseline], \
Rule[ColumnAlignments, Center]], \"\[NoBreak]\", \")\"}], TraditionalForm]\) \
explicitly negative semidefinite?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{255., {59.93359379926696, 64.06640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "Is the matrix \!\(\*FormBox[RowBox[{\"(\", \"\[NoBreak]\", GridBox[{{\"4\
\", RowBox[{\"-\", \"6\"}], RowBox[{\"-\", \"3\"}]}, {RowBox[{\"-\", \"4\"}], \
RowBox[{\"-\", \"7\"}], RowBox[{\"-\", \"7\"}]}, {RowBox[{\"-\", \"7\"}], \
\"10\", RowBox[{\"-\", \"3\"}]}}, Rule[RowSpacings, 1], Rule[ColumnSpacings, \
1], Rule[RowAlignments, Baseline], Rule[ColumnAlignments, Center]], \"\
\[NoBreak]\", \")\"}], TraditionalForm]\) explicitly negative semidefinite?"], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.8748326484125004`*^9, {3.874835130007838*^9, 3.8748351371454363`*^9}},
 CellLabel->"Out[552]=",
 CellID->439729726,ExpressionUUID->"822259ef-4dc7-4d4b-b2d2-ba8aad0d440a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NegativeSemidefiniteMatrixQ", "[", 
  RowBox[{"(", GridBox[{
     {"4", 
      RowBox[{"-", "6"}], 
      RowBox[{"-", "3"}]},
     {
      RowBox[{"-", "4"}], 
      RowBox[{"-", "7"}], 
      RowBox[{"-", "7"}]},
     {
      RowBox[{"-", "7"}], "10", 
      RowBox[{"-", "3"}]}
    }], ")"}], "]"}]], "Input",
 CellChangeTimes->{{3.874832650979368*^9, 3.874832671370885*^9}, {
  3.874835146186248*^9, 3.8748351630919333`*^9}},
 CellLabel->"In[553]:=",
 CellID->80694643,ExpressionUUID->"77c56f6c-b6ab-48e7-9545-eeb825ca45e5"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{3.8748326717743683`*^9, 3.874835163492799*^9},
 CellLabel->"Out[553]=",
 CellID->37916526,ExpressionUUID->"6c3399ab-1309-455c-a567-0329fea3e1d6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Dates", "Section",
 CellChangeTimes->{{3.874835758364051*^9, 3.874835759154419*^9}},
 CellID->85707803,ExpressionUUID->"77bcefa0-007c-43f7-a73d-226998ad2cc9"],

Cell["Ask if a year is a leap year:", "Text",
 CellChangeTimes->{{3.874833251652342*^9, 3.8748332540179996`*^9}, {
  3.8748357603967896`*^9, 3.8748357668017073`*^9}},
 CellID->315669447,ExpressionUUID->"4a7a4ab3-697a-4ebb-9196-eddd34f3ae82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leapYearQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", 
        RowBox[{"RandomInteger", "[", 
         RowBox[{"{", 
          RowBox[{"1940", ",", "2040"}], "}"}], "]"}], "}"}], "]"}]}], "}"}], 
    ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<Is the year \>\"", "<>", 
        RowBox[{"DateString", "@", "#n"}], "<>", "\"\< a leap year?\>\""}], 
       ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"LeapYearQ", "[", "#n", "]"}], "]"}]}], "]"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8748332617372637`*^9, 3.8748332804545393`*^9}, {
  3.874833370983173*^9, 3.874833494632854*^9}, {3.874833529744091*^9, 
  3.874833535835493*^9}, {3.874834045759692*^9, 3.8748340470686874`*^9}, {
  3.874835168938472*^9, 3.874835192043689*^9}, {3.8748352265956335`*^9, 
  3.874835410420701*^9}},
 CellLabel->"In[573]:=",
 CellID->38925346,ExpressionUUID->"8e9d4b15-d210-487f-abd2-5ef4e29281d0"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> DateObject[{
       RandomInteger[{1940, 2040}]}]}, QuestionObject[
   "Is the year " <> DateString[
      Slot["n"]] <> " a leap year?", 
    AssessmentFunction[
     LeapYearQ[
      Slot["n"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874833435892357*^9, 3.874833440653512*^9}, {
   3.8748334872447586`*^9, 3.8748334949682255`*^9}, 3.874833536000245*^9, {
   3.8748340478459325`*^9, 3.8748340514815702`*^9}, 3.8748352362078376`*^9, {
   3.8748352689649673`*^9, 3.8748353421848145`*^9}, {3.8748354018523865`*^9, 
   3.874835410790496*^9}},
 CellLabel->"Out[573]=",
 CellID->218240842,ExpressionUUID->"1475c5f5-1996-4eb5-afea-8a496e01d3f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"leapYearQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748334428270664`*^9, 3.874833443896827*^9}, {
  3.874833497781935*^9, 3.874833498334648*^9}},
 CellLabel->"In[574]:=",
 CellID->427212564,ExpressionUUID->"20f325e4-44fd-42d8-88db-10a65714867f"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = True, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> True, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 10, 19.5976646`9.044779258093191}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = True}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Is the year 1952 a leap year?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{True -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{135., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Is the year 1952 a leap year?"], 
   AssessmentFunction[{True -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.8748334986118565`*^9, 3.8748335377681437`*^9, 3.874834052968399*^9, 
   3.8748352401804495`*^9, {3.8748352816434355`*^9, 3.8748353169186797`*^9}, {
   3.8748354052145476`*^9, 3.874835411659067*^9}},
 CellLabel->"Out[574]=",
 CellID->247073058,ExpressionUUID->"3c89610b-fe5e-4ea7-9b99-fd2e151b69d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LeapYearQ", "[", 
  RowBox[{"DateObject", "[", 
   RowBox[{"{", "1952", "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874833544748528*^9, 3.8748335542728853`*^9}, {
  3.8748340586600437`*^9, 3.8748340588266797`*^9}, {3.8748354160424876`*^9, 
  3.87483541696709*^9}},
 CellLabel->"In[575]:=",
 CellID->13920349,ExpressionUUID->"8c3e7326-52de-4365-858d-5e6fc4ee1350"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.8748335481162663`*^9, 3.8748335545861826`*^9}, 
   3.8748340595447793`*^9, 3.8748354172740088`*^9},
 CellLabel->"Out[575]=",
 CellID->9771588,ExpressionUUID->"62fbdf36-5c03-4099-9187-485d88ba8d33"]
}, Open  ]],

Cell["Ask what day of the week it will be in n days:", "Text",
 CellChangeTimes->{{3.8748357723848114`*^9, 3.874835783900008*^9}},
 CellID->559467932,ExpressionUUID->"91d333a7-67ec-4735-a422-27e7f9ead925"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayOfTheWeekQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", "100000", "}"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<What day of the week will it be \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< days from now?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DayName", "[", 
         RowBox[{"Today", "+", 
          RowBox[{"#n", 
           TemplateBox[{
             InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
             "\"Days\""},
            "Quantity"]}]}], "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874833623015909*^9, 3.874833742926753*^9}, 
   3.8748337738208323`*^9, {3.874834426904336*^9, 3.8748344282688637`*^9}},
 CellLabel->"In[576]:=",
 CellID->545692450,ExpressionUUID->"18ff0151-dae2-4d2c-ac09-6584b4e200fd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{100000}]}, QuestionObject[
   "What day of the week will it be " <> ToString[
      Slot["n"]] <> " days from now?", 
    AssessmentFunction[
     DayName[Today + Slot["n"] Quantity[1, "Days"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.87483374336693*^9, 3.874833774798602*^9, 
  3.874834440748761*^9, 3.874835423131759*^9},
 CellLabel->"Out[576]=",
 CellID->11863418,ExpressionUUID->"7af8e289-0a71-4ed5-8946-01c31be96b3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayOfTheWeekQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748337450772004`*^9, 3.874833746642151*^9}},
 CellLabel->"In[577]:=",
 CellID->107795911,ExpressionUUID->"5235e84d-82cf-4bf1-954b-3a2df338c1e9"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Friday, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> Friday, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 10, 36.926714`9.319915553746808}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = Friday}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What day of the week will it be 81290 days from now?", 
         SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will it be 81290 days from now?"|>, 
            "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will it be 81290 days from now?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Friday -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Friday -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{Friday -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{Friday -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{Friday -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{237., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, "What day of the week will it be 81290 days from now?"], 
   AssessmentFunction[{Friday -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748337469105825`*^9, 3.8748337765456815`*^9}, 
   3.8748340278447933`*^9, 3.874834443027489*^9, 3.874835427781334*^9},
 CellLabel->"Out[577]=",
 CellID->256440883,ExpressionUUID->"45b9fa63-eb95-420c-ae57-1dd6baaea3a4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayName", "[", 
  RowBox[{"Today", "+", 
   RowBox[{"81920", 
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.874833779937863*^9, 3.874833787767172*^9}, {
  3.8748340324055166`*^9, 3.8748340343673353`*^9}, {3.874834445889121*^9, 
  3.874834450690505*^9}, {3.874835430725277*^9, 3.874835432495654*^9}},
 CellLabel->"In[578]:=",
 CellID->522098002,ExpressionUUID->"9362506f-8f9b-468f-bf8e-9526e9cf6867"],

Cell[BoxData["Friday"], "Output",
 CellChangeTimes->{3.874833789633661*^9, 3.874834034772832*^9, 
  3.874834451127541*^9, 3.874835432803378*^9},
 CellLabel->"Out[578]=",
 CellID->283074110,ExpressionUUID->"28ebced3-a409-45f4-9370-baa1ee942071"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Weekends and Weekdays", "Subsection",
 CellChangeTimes->{{3.874835854706258*^9, 3.874835860169014*^9}},
 CellID->192764471,ExpressionUUID->"1dd3fe05-1f83-4821-97b2-652927dafb2e"],

Cell["Ask a question if a day was a weekend.", "Text",
 CellChangeTimes->{{3.87483382996748*^9, 3.8748338733432217`*^9}, {
  3.874833982732291*^9, 3.8748339834285164`*^9}},
 CellID->255391093,ExpressionUUID->"2d4a308b-a52a-4587-819c-c7a1457a6688"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weekend", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"DateObject", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ResourceFunction", "[", "\"\<RandomDate\>\"", "]"}], "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "1940", "}"}], "]"}], ",", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], "]"}], ",", 
        "\"\<Day\>\""}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"\"\<Is the day \>\"", "<>", 
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{"DateString", "[", 
             RowBox[{"#n", ",", "\"\<Date\>\""}], "]"}], ",", 
            RowBox[{
            "\"\<Monday\>\"", "|", "\"\<Tuesday\>\"", "|", 
             "\"\<Wednesday\>\"", "|", "\"\<Thursday\>\"", "|", 
             "\"\<Friday\>\"", "|", "\"\<Saturday\>\"", "|", 
             "\"\<Sunday\>\""}]}], "]"}], "<>", "\"\< a week end?\>\""}], ",", 
         RowBox[{"\"\<  \>\"", "->", "\"\< \>\""}]}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DayMatchQ", "[", 
         RowBox[{"#n", ",", "\"\<Weekend\>\""}], "]"}], "]"}]}], "]"}], 
     "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748338758503456`*^9, 3.874833944869872*^9}, {
  3.8748339928889875`*^9, 3.8748340171626253`*^9}, {3.874834102930357*^9, 
  3.8748342219243574`*^9}, {3.874834252857933*^9, 3.874834274850939*^9}, {
  3.874835489553368*^9, 3.8748356204182043`*^9}},
 CellLabel->"In[595]:=",
 CellID->276431584,ExpressionUUID->"60ba4593-365d-453e-ae9d-175a58281fb1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> DateObject[
      ResourceFunction["RandomDate"][{
        DateObject[{1940}], 
        DateObject[{2040}]}], "Day"]}, QuestionObject[
    StringReplace["Is the day " <> StringDelete[
       DateString[
        Slot["n"], "Date"], 
       Alternatives[
       "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", 
        "Sunday"]] <> " a week end?", "  " -> " "], 
    AssessmentFunction[
     DayMatchQ[
      Slot["n"], "Weekend"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874833898008857*^9, 3.874833945237912*^9}, {
   3.874834002903405*^9, 3.874834017980647*^9}, {3.8748340755365024`*^9, 
   3.874834114343929*^9}, 3.874834146652505*^9, {3.8748341917081037`*^9, 
   3.8748342225574274`*^9}, {3.8748342532021613`*^9, 
   3.8748342753014116`*^9}, {3.8748354987262125`*^9, 3.874835573337453*^9}, {
   3.8748356050574417`*^9, 3.874835622495253*^9}},
 CellLabel->"Out[595]=",
 CellID->67148289,ExpressionUUID->"0113e808-5bef-44ab-be2c-f008f01f2a3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weekend", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874833905845966*^9, 3.8748339068441596`*^9}, {
  3.874833996447649*^9, 3.874833997065956*^9}},
 CellLabel->"In[600]:=",
 CellID->21530314,ExpressionUUID->"94e2e215-f67a-4279-8172-e7b729233903"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = False, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> False, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 14, 1.0135455`7.758418236210712}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = False}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Is the day 12 December 1984 a week end?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{False -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{False -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{False -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{189., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Is the day 12 December 1984 a week end?"], 
   AssessmentFunction[{False -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874833907105466*^9, 3.8748339464487543`*^9}, {
  3.8748340041185284`*^9, 3.8748340209292808`*^9}, {3.874834078107802*^9, 
  3.874834115358466*^9}, {3.8748341477487493`*^9, 3.8748341590065823`*^9}, {
  3.874834193344315*^9, 3.874834223472335*^9}, {3.8748342542987175`*^9, 
  3.8748342796372766`*^9}, {3.874835499778058*^9, 3.8748355741820993`*^9}, {
  3.8748356062022004`*^9, 3.874835628640741*^9}},
 CellLabel->"Out[600]=",
 CellID->87147453,ExpressionUUID->"2d2b1fe0-42c0-4222-8549-02cf5bc0ee21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayMatchQ", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", "\"\<12 December 1984\>\"", "]"}], ",", 
   "\"\<Weekend\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748339510721784`*^9, 3.874833968284482*^9}, {
  3.874834082524494*^9, 3.874834094740117*^9}, {3.874834244752334*^9, 
  3.874834247443997*^9}, {3.8748342832719965`*^9, 3.8748342865848207`*^9}, {
  3.874835632399293*^9, 3.874835637933648*^9}},
 CellLabel->"In[601]:=",
 CellID->99555948,ExpressionUUID->"b56d973c-5310-467b-a422-d53ce47272ff"],

Cell[BoxData["False"], "Output",
 CellChangeTimes->{
  3.8748339685975046`*^9, {3.874834091711871*^9, 3.874834095001254*^9}, 
   3.8748342477721386`*^9, 3.874834287049887*^9, 3.874835638269929*^9},
 CellLabel->"Out[601]=",
 CellID->152353495,ExpressionUUID->"3e2468db-f1f9-4761-9d36-afbbd2a40bd8"]
}, Open  ]],

Cell["Ask if a day was a weekday:", "Text",
 CellChangeTimes->{{3.874835871054963*^9, 3.8748358760784483`*^9}},
 CellID->515976200,ExpressionUUID->"3b696cbd-b6f7-439c-81e6-092e8807dbf1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weekday", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"DateObject", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ResourceFunction", "[", "\"\<RandomDate\>\"", "]"}], "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "1940", "}"}], "]"}], ",", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], "]"}], ",", 
        "\"\<Day\>\""}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{
         RowBox[{"\"\<Is the day \>\"", "<>", 
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{"DateString", "[", 
             RowBox[{"#n", ",", "\"\<Date\>\""}], "]"}], ",", 
            RowBox[{
            "\"\<Monday\>\"", "|", "\"\<Tuesday\>\"", "|", 
             "\"\<Wednesday\>\"", "|", "\"\<Thursday\>\"", "|", 
             "\"\<Friday\>\"", "|", "\"\<Saturday\>\"", "|", 
             "\"\<Sunday\>\""}]}], "]"}], "<>", "\"\< a week day?\>\""}], ",", 
         RowBox[{"\"\<  \>\"", "->", "\"\< \>\""}]}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DayMatchQ", "[", 
         RowBox[{"#n", ",", "\"\<Weekday\>\""}], "]"}], "]"}]}], "]"}], 
     "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748343031502075`*^9, 3.874834310950938*^9}, {
  3.874835648650134*^9, 3.874835668204343*^9}},
 CellLabel->"In[602]:=",
 CellID->411808107,ExpressionUUID->"a576dbb1-51f0-4715-9628-b46d120cc0de"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> DateObject[
      ResourceFunction["RandomDate"][{
        DateObject[{1940}], 
        DateObject[{2040}]}], "Day"]}, QuestionObject[
    StringReplace["Is the day " <> StringDelete[
       DateString[
        Slot["n"], "Date"], 
       Alternatives[
       "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", 
        "Sunday"]] <> " a week day?", "  " -> " "], 
    AssessmentFunction[
     DayMatchQ[
      Slot["n"], "Weekday"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874834311955738*^9, 3.874835669572219*^9},
 CellLabel->"Out[602]=",
 CellID->148351346,ExpressionUUID->"5d94ee96-7662-4d4e-be8d-5e1d98a23a60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"weekday", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874834313467121*^9, 3.8748343142886114`*^9}},
 CellLabel->"In[603]:=",
 CellID->55408251,ExpressionUUID->"e26f18fd-2a1a-4663-bf42-180f73d2327d"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = True, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> True, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 14, 51.1015685`9.461009080531962}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = True}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{"Is the day 1 September 1995 a week day?", SpanFromLeft}, {
         RadioButtonBar[
          Dynamic[QuestionFramework`Private`input$$], {
          True -> "True", False -> "False"}, Appearance -> "Vertical"], 
         QuestionFramework`Private`generalquestionTest[
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$, 
          AssessmentFunction[{True -> <|"Score" -> 1|>}]]}, {
         If[
          Or[
          AssessmentFunction[{True -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = 
            AssessmentFunction[{True -> <|"Score" -> 1|>}][
             QuestionFramework`Private`input$$, "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, Background -> GrayLevel[1], 
      If[
       MatchQ[
        CurrentValue[
         EvaluationNotebook[], TaggingRules], 
        KeyValuePattern["FormNotebook" -> Blank[List]]], 
       ImageSize -> {Full, Automatic}, ImageSize -> Automatic], BaseStyle -> 
      "Panel"], StandardForm],
    ImageSizeCache->{186., {45.933593799266966`, 50.066406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[Automatic, "Is the day 1 September 1995 a week day?"], 
   AssessmentFunction[{True -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748343145504365`*^9, 3.8748356758217497`*^9},
 CellLabel->"Out[603]=",
 CellID->239295058,ExpressionUUID->"c1e2be79-9e3f-4981-bf8d-50807e294389"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayMatchQ", "[", 
  RowBox[{"\"\<1 September 1995\>\"", ",", "\"\<Weekday\>\""}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.874834316887099*^9, 3.8748343254430113`*^9}, {
  3.874835679668171*^9, 3.87483568818102*^9}},
 CellLabel->"In[604]:=",
 CellID->101246404,ExpressionUUID->"75a2d84c-ef76-4f3f-afef-b8217e685254"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{3.8748343258069677`*^9, 3.8748356884564724`*^9},
 CellLabel->"Out[604]=",
 CellID->100467336,ExpressionUUID->"3fcd09c9-99b1-4d73-a4c5-e2f21a1ca280"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["First and last days of months", "Subsection",
 CellChangeTimes->{{3.8748358992402205`*^9, 3.8748359081976795`*^9}},
 CellID->213528801,ExpressionUUID->"e0f6c80a-5a83-4fce-b809-c884d47dc3a4"],

Cell["Ask what day of the week the start of the month will be:", "Text",
 CellChangeTimes->{{3.8748343694360166`*^9, 3.8748343802897234`*^9}},
 CellID->359833808,ExpressionUUID->"5a0848c9-0f7e-4c7a-b97e-e6b5951395d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FirstDayOfTheMonthDayOfTheWeekQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", "100000", "}"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<What day of the week will the last day of the month be \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< days from today?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DayName", "[", 
         RowBox[{"NextDate", "[", 
          RowBox[{
           RowBox[{"Evaluate", "[", 
            RowBox[{"Today", "+", 
             RowBox[{"#n", 
              TemplateBox[{
                InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days",
                 "\"Days\""},
               "Quantity"]}]}], "]"}], ",", "\"\<MonthFirstDay\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874834415490351*^9, 3.87483441732435*^9}, {
  3.8748344660894103`*^9, 3.874834673318571*^9}, {3.8748359834473605`*^9, 
  3.874836003838842*^9}},
 CellLabel->"In[610]:=",
 CellID->266077691,ExpressionUUID->"5c4ce7e9-b198-4b2f-bca1-fee0b9e35cb4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{100000}]}, QuestionObject[
   "What day of the week will the last day of the month be " <> ToString[
      Slot["n"]] <> " days from today?", 
    AssessmentFunction[
     DayName[
      NextDate[
       Evaluate[Today + Slot["n"] Quantity[1, "Days"]], "MonthFirstDay"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874834493552402*^9, 3.874834509526778*^9}, {
  3.8748345444048185`*^9, 3.8748345817829638`*^9}, {3.8748346167288017`*^9, 
  3.8748346748034987`*^9}, {3.874835997018717*^9, 3.874836004681918*^9}},
 CellLabel->"Out[610]=",
 CellID->589123883,ExpressionUUID->"f3c98044-4fa1-4024-b4fb-4e5411005cc1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"FirstDayOfTheMonthDayOfTheWeekQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874834554294281*^9, 3.8748345570362177`*^9}},
 CellLabel->"In[611]:=",
 CellID->371005559,ExpressionUUID->"949297e9-44f6-4afe-b9c6-ced3b5bb60b6"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Saturday, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> Saturday, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 20, 17.5735384`8.997434157495993}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = Saturday}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What day of the week will the last day of the month be 71223 days \
from today?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will the last day of the month be 71223 \
days from today?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will the last day of the month be 71223 \
days from today?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Saturday -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Saturday -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{Saturday -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{Saturday -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{Saturday -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{338., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What day of the week will the last day of the month be 71223 days from \
today?"], 
   AssessmentFunction[{Saturday -> <|"Score" -> 1|>}]]]], "Input",
 CellChangeTimes->{3.8748360154622693`*^9},
 CellLabel->"",
 CellID->26411676,ExpressionUUID->"7d18611f-ae8e-4001-830b-61818d29cab5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextDate", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"Today", "+", 
     RowBox[{"71223", 
      TemplateBox[{
        InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
        "\"Days\""},
       "Quantity"]}]}], "]"}], ",", "\"\<MonthFirstDay\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748346859357266`*^9, 3.874834687552908*^9}, {
  3.87483570728935*^9, 3.8748357195108137`*^9}, {3.874836010909051*^9, 
  3.8748360115790005`*^9}},
 CellLabel->"In[612]:=",
 CellID->88712965,ExpressionUUID->"9b45200e-63a5-42ce-986a-36094b725a56"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\"Sat 1 Nov 2217\""}], 
   RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2217", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
     "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{3.874834601395757*^9, 3.8748346879069433`*^9, 
  3.874835719887019*^9, 3.8748360118833065`*^9},
 CellLabel->"Out[612]=",
 CellID->360006111,ExpressionUUID->"440ddb3a-82dc-4392-b8ad-1bef338361d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayName", "[", 
  RowBox[{"NextDate", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"Today", "+", 
      RowBox[{"71223", 
       TemplateBox[{
         InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
         "\"Days\""},
        "Quantity"]}]}], "]"}], ",", "\"\<MonthFirstDay\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8748357204564123`*^9, 3.874835724600559*^9}, {
  3.8748360208806677`*^9, 3.874836021595374*^9}},
 CellLabel->"In[614]:=",
 CellID->290156576,ExpressionUUID->"92929835-dbff-4e09-a904-ceb78ae82b0c"],

Cell[BoxData["Saturday"], "Output",
 CellChangeTimes->{3.874835724978072*^9, 3.8748360219074974`*^9},
 CellLabel->"Out[614]=",
 CellID->431670163,ExpressionUUID->"079ab59c-7ca1-47bc-a85f-52c06628b2e1"]
}, Open  ]],

Cell["Ask what day of the week the end of the month will be:", "Text",
 CellChangeTimes->{{3.8748343694360166`*^9, 3.8748343802897234`*^9}, {
  3.8748359295319786`*^9, 3.874835930188095*^9}},
 CellID->34212102,ExpressionUUID->"4ad1ff7f-0f4e-48f7-b6fd-45cb12c0cd46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LastDayOfTheMonthDayOfTheWeekQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", "100000", "}"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<What day of the week will the last day of the month be \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< days from today?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DayName", "[", 
         RowBox[{"NextDate", "[", 
          RowBox[{
           RowBox[{"Evaluate", "[", 
            RowBox[{"Today", "+", 
             RowBox[{"#n", 
              TemplateBox[{
                InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days",
                 "\"Days\""},
               "Quantity"]}]}], "]"}], ",", "\"\<MonthLastDay\>\""}], "]"}], 
         "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874834415490351*^9, 3.87483441732435*^9}, {
  3.8748344660894103`*^9, 3.874834673318571*^9}, {3.8748359347980027`*^9, 
  3.8748359701550374`*^9}, {3.874836025624612*^9, 3.8748360321865983`*^9}, {
  3.874836066050846*^9, 3.8748360685085344`*^9}},
 CellLabel->"In[621]:=",
 CellID->124388410,ExpressionUUID->"3472aa80-8de2-4d04-a931-5fb962663184"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{100000}]}, QuestionObject[
   "What day of the week will the last day of the month be " <> ToString[
      Slot["n"]] <> " days from today?", 
    AssessmentFunction[
     DayName[
      NextDate[
       Evaluate[Today + Slot["n"] Quantity[1, "Days"]], "MonthLastDay"]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874834493552402*^9, 3.874834509526778*^9}, {
   3.8748345444048185`*^9, 3.8748345817829638`*^9}, {3.8748346167288017`*^9, 
   3.8748346748034987`*^9}, {3.874836027647175*^9, 3.874836032503516*^9}, 
   3.874836068810562*^9},
 CellLabel->"Out[621]=",
 CellID->549218233,ExpressionUUID->"d7210d48-c9ad-47ce-9e82-7c57973c677d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LastDayOfTheMonthDayOfTheWeekQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874834554294281*^9, 3.8748345570362177`*^9}, {
  3.8748360360585756`*^9, 3.8748360365666447`*^9}},
 CellLabel->"In[622]:=",
 CellID->363537714,ExpressionUUID->"5e88a331-f14c-42df-aca9-fea85507039a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = Saturday, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> Saturday, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 21, 36.3423286`9.312987641836633}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Item", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = Saturday}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What day of the week will the last day of the month be 42030 days \
from today?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will the last day of the month be 42030 \
days from today?"|>, "Interpreter"], String, Expression], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
             "What day of the week will the last day of the month be 42030 \
days from today?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Saturday -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{Saturday -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{Saturday -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{Saturday -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{Saturday -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{338., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What day of the week will the last day of the month be 42030 days from \
today?"], 
   AssessmentFunction[{Saturday -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874834557506186*^9, 3.874834583043619*^9}, {
   3.874834619061542*^9, 3.874834676432624*^9}, 3.8748357141064177`*^9, 
   3.8748360368629427`*^9, 3.8748360722782907`*^9},
 CellLabel->"Out[622]=",
 CellID->998619139,ExpressionUUID->"2f619045-0368-4bfa-a607-345aa57c461f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextDate", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"Today", "+", 
     RowBox[{"42030", 
      TemplateBox[{
        InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
        "\"Days\""},
       "Quantity"]}]}], "]"}], ",", "\"\<MonthLastDay\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748346859357266`*^9, 3.874834687552908*^9}, {
  3.87483570728935*^9, 3.8748357195108137`*^9}, {3.8748360428132043`*^9, 
  3.874836086031193*^9}},
 CellLabel->"In[626]:=",
 CellID->451844696,ExpressionUUID->"c16fb5df-40b2-454e-82d4-059ccbbad569"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\"Sat 30 Nov 2137\""}], 
   RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2137", ",", "11", ",", "30"}], "}"}], ",", "\"Day\""}], 
     "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{
  3.874834601395757*^9, 3.8748346879069433`*^9, 3.874835719887019*^9, {
   3.8748360449539456`*^9, 3.8748360918398757`*^9}},
 CellLabel->"Out[626]=",
 CellID->103041546,ExpressionUUID->"213cf48a-9717-4d71-b094-645a0628fa13"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayName", "[", 
  RowBox[{"NextDate", "[", 
   RowBox[{
    RowBox[{"Evaluate", "[", 
     RowBox[{"Today", "+", 
      RowBox[{"42030", 
       TemplateBox[{
         InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
         "\"Days\""},
        "Quantity"]}]}], "]"}], ",", "\"\<MonthLastDay\>\""}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8748357204564123`*^9, 3.874835724600559*^9}, {
  3.874836050590413*^9, 3.8748360890231094`*^9}},
 CellLabel->"In[625]:=",
 CellID->333576978,ExpressionUUID->"f3268c96-432c-476d-9159-3f961e636bbf"],

Cell[BoxData["Saturday"], "Output",
 CellChangeTimes->{
  3.874835724978072*^9, {3.8748360510058126`*^9, 3.87483608954638*^9}},
 CellLabel->"Out[625]=",
 CellID->870649907,ExpressionUUID->"b67c71b0-7643-4ff6-b1b8-9aa3916a1947"]
}, Open  ]],

Cell["Ask when the next Monday will be:", "Text",
 CellChangeTimes->{{3.874836169075946*^9, 3.8748361811278973`*^9}},
 CellID->272809172,ExpressionUUID->"069bf009-85e4-40d0-98c7-ffba437cc461"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateNextMondayQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", "100000", "}"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<What will the date of the following Monday be \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< days from today? Enter like Monday 18 November 2137\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"NextDate", "[", 
           RowBox[{
            RowBox[{"Evaluate", "[", 
             RowBox[{"Today", "+", 
              RowBox[{"#n", 
               TemplateBox[{
                 InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", 
                 "days", "\"Days\""},
                "Quantity"]}]}], "]"}], ",", "Monday"}], "]"}], ",", 
          "\"\<Date\>\""}], "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874834415490351*^9, 3.87483441732435*^9}, {
  3.8748344660894103`*^9, 3.874834673318571*^9}, {3.8748359347980027`*^9, 
  3.8748359701550374`*^9}, {3.874836025624612*^9, 3.8748360321865983`*^9}, {
  3.874836066050846*^9, 3.8748360685085344`*^9}, {3.874836194267127*^9, 
  3.8748362157138577`*^9}, {3.8748362477710667`*^9, 3.874836297197137*^9}, {
  3.8748363320372715`*^9, 3.874836344788931*^9}},
 CellLabel->"In[639]:=",
 CellID->503440717,ExpressionUUID->"e5d0fbf2-bf4e-4ed9-abde-dd28dc42a2d1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{100000}]}, QuestionObject[
   "What will the date of the following Monday be " <> ToString[
      Slot["n"]] <> " days from today? Enter like Monday 18 November 2137", 
    AssessmentFunction[
     DateString[
      NextDate[
       Evaluate[Today + Slot["n"] Quantity[1, "Days"]], Monday], "Date"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874834493552402*^9, 3.874834509526778*^9}, {
   3.8748345444048185`*^9, 3.8748345817829638`*^9}, {3.8748346167288017`*^9, 
   3.8748346748034987`*^9}, {3.874836027647175*^9, 3.874836032503516*^9}, 
   3.874836068810562*^9, {3.874836282104368*^9, 3.874836298196905*^9}, 
   3.8748363451356444`*^9},
 CellLabel->"Out[639]=",
 CellID->121370888,ExpressionUUID->"3359bfe3-8bd8-4b27-8fba-9819e0ba19eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateNextMondayQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874834554294281*^9, 3.8748345570362177`*^9}, {
  3.8748360360585756`*^9, 3.8748360365666447`*^9}, {3.874836289034649*^9, 
  3.874836291614208*^9}},
 CellLabel->"In[640]:=",
 CellID->149147736,ExpressionUUID->"91607750-3b92-419a-8090-718dd7ed8bef"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 
   "Monday 14 December 2178", QuestionFramework`Private`interpreter$$ = 
   Identity, QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> "Monday 14 December 2178", "Explanation" -> None, 
     "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 26, 10.7264543`8.78303114867588}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "String", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = "Monday 14 December 2178"}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What will the date of the following Monday be 57032 days from today? \
Enter like Monday 18 November 2137", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> String, "MinAnswers" -> 1, "Prompt" -> 
             "What will the date of the following Monday be 57032 days from \
today? Enter like Monday 18 November 2137"|>, "Interpreter"], String, String], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> String, "MinAnswers" -> 1, "Prompt" -> 
             "What will the date of the following Monday be 57032 days from \
today? Enter like Monday 18 November 2137"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            "Monday 14 December 2178" -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            "Monday 14 December 2178" -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{"Monday 14 December 2178" -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               "Monday 14 December 2178" -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               "Monday 14 December 2178" -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{458., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What will the date of the following Monday be 57032 days from today? \
Enter like Monday 18 November 2137"], 
   AssessmentFunction[{
    "Monday 14 December 2178" -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874834557506186*^9, 3.874834583043619*^9}, {
   3.874834619061542*^9, 3.874834676432624*^9}, 3.8748357141064177`*^9, 
   3.8748360368629427`*^9, 3.8748360722782907`*^9, {3.8748362920119762`*^9, 
   3.874836299885273*^9}, 3.8748363459982047`*^9},
 CellLabel->"Out[640]=",
 CellID->14141915,ExpressionUUID->"08033f4b-ffe4-4e44-8ef9-b4d289d59292"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Evaluate", "[", 
  RowBox[{"Today", "+", 
   RowBox[{"57032", 
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
      "\"Days\""},
     "Quantity"]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8748346859357266`*^9, 3.874834687552908*^9}, {
   3.87483570728935*^9, 3.8748357195108137`*^9}, {3.8748360428132043`*^9, 
   3.874836086031193*^9}, 3.8748362335682573`*^9, {3.874836306253668*^9, 
   3.8748363070725555`*^9}, {3.874836351089847*^9, 3.8748363518454447`*^9}},
 CellLabel->"In[641]:=",
 CellID->363319479,ExpressionUUID->"73e664dc-12fd-488d-8e46-a3cddf8692a2"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\"Tue 8 Dec 2178\""}], 
   RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2178", ",", "12", ",", "8"}], "}"}], ",", "\"Day\""}], 
     "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{
  3.874834601395757*^9, 3.8748346879069433`*^9, 3.874835719887019*^9, {
   3.8748360449539456`*^9, 3.8748360918398757`*^9}, 3.8748362347438235`*^9, 
   3.874836307461968*^9, 3.8748363521742883`*^9},
 CellLabel->"Out[641]=",
 CellID->609551380,ExpressionUUID->"d569a8d5-42c4-4e85-bdaa-bed8c1dfabc3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextDate", "[", 
  RowBox[{
   RowBox[{"Evaluate", "[", 
    RowBox[{"Today", "+", 
     RowBox[{"57032", 
      TemplateBox[{
        InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
        "\"Days\""},
       "Quantity"]}]}], "]"}], ",", "Monday"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748357204564123`*^9, 3.874835724600559*^9}, {
  3.874836050590413*^9, 3.8748360890231094`*^9}, {3.874836221427745*^9, 
  3.8748362257000914`*^9}, {3.8748363113849688`*^9, 3.874836312234082*^9}, {
  3.8748363569634094`*^9, 3.874836357791531*^9}},
 CellLabel->"In[642]:=",
 CellID->217266423,ExpressionUUID->"816d396c-d60c-4ae1-9ce2-b769761654e8"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\"Mon 14 Dec 2178\""}], 
   RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2178", ",", "12", ",", "14"}], "}"}], ",", "\"Day\""}], 
     "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{
  3.874835724978072*^9, {3.8748360510058126`*^9, 3.87483608954638*^9}, 
   3.8748362260260925`*^9, 3.8748363127014704`*^9, 3.8748363581422453`*^9},
 CellLabel->"Out[642]=",
 CellID->818602930,ExpressionUUID->"f4b316ea-6c34-48c6-b274-2f4bc570be4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateString", "[", 
  RowBox[{
   RowBox[{"NextDate", "[", 
    RowBox[{
     RowBox[{"Evaluate", "[", 
      RowBox[{"Today", "+", 
       RowBox[{"57032", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
          "\"Days\""},
         "Quantity"]}]}], "]"}], ",", "Monday"}], "]"}], ",", 
   "\"\<Date\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748362651559076`*^9, 3.8748362681429496`*^9}, 
   3.8748363177637463`*^9, {3.874836362868499*^9, 3.874836363661293*^9}},
 CellLabel->"In[643]:=",
 CellID->545546360,ExpressionUUID->"f072042c-b989-453f-84f6-9c2e9977e445"],

Cell[BoxData["\<\"Monday 14 December 2178\"\>"], "Output",
 CellChangeTimes->{3.8748362684922185`*^9, 3.874836318101751*^9, 
  3.8748363639701233`*^9},
 CellLabel->"Out[643]=",
 CellID->579678371,ExpressionUUID->"f3e0752b-f3f4-4cc0-86da-bc23fa5e089a"]
}, Open  ]],

Cell["\<\
Ask when the next business day will be. This takes into account holiday \
calendars like Easter, 4th of July, Thanksgiving, Christmas.\
\>", "Text",
 CellChangeTimes->{{3.8748364241734715`*^9, 3.874836456416978*^9}},
 CellID->389085423,ExpressionUUID->"75458bfb-a684-44c9-93f5-f1dbac150edc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BusinessDayQuestionGenerator", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"{", "100000", "}"}], "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<What will the date of the following business day be \>\"", "<>", 
        RowBox[{"ToString", "[", "#n", "]"}], "<>", 
        "\"\< days from today? Enter like Monday 18 November 2137\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"NextDate", "[", 
           RowBox[{
            RowBox[{"Evaluate", "[", 
             RowBox[{"Today", "+", 
              RowBox[{"#n", 
               TemplateBox[{
                 InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", 
                 "days", "\"Days\""},
                "Quantity"]}]}], "]"}], ",", "\"\<BusinessDay\>\""}], "]"}], 
          ",", "\"\<Date\>\""}], "]"}], "]"}]}], "]"}], "&"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.874834415490351*^9, 3.87483441732435*^9}, {
  3.8748344660894103`*^9, 3.874834673318571*^9}, {3.8748359347980027`*^9, 
  3.8748359701550374`*^9}, {3.874836025624612*^9, 3.8748360321865983`*^9}, {
  3.874836066050846*^9, 3.8748360685085344`*^9}, {3.874836194267127*^9, 
  3.8748362157138577`*^9}, {3.8748362477710667`*^9, 3.874836297197137*^9}, {
  3.8748363320372715`*^9, 3.874836344788931*^9}, {3.874836470033523*^9, 
  3.874836495202937*^9}},
 CellLabel->"In[646]:=",
 CellID->198027979,ExpressionUUID->"f8e48f32-a4c8-4da0-9f9b-36df30190a48"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> RandomInteger[{100000}]}, QuestionObject[
   "What will the date of the following business day be " <> ToString[
      Slot["n"]] <> " days from today? Enter like Monday 18 November 2137", 
    AssessmentFunction[
     DateString[
      NextDate[
       Evaluate[Today + Slot["n"] Quantity[1, "Days"]], "BusinessDay"], 
      "Date"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874834493552402*^9, 3.874834509526778*^9}, {
   3.8748345444048185`*^9, 3.8748345817829638`*^9}, {3.8748346167288017`*^9, 
   3.8748346748034987`*^9}, {3.874836027647175*^9, 3.874836032503516*^9}, 
   3.874836068810562*^9, {3.874836282104368*^9, 3.874836298196905*^9}, 
   3.8748363451356444`*^9, {3.874836483790473*^9, 3.874836495563594*^9}},
 CellLabel->"Out[646]=",
 CellID->55528738,ExpressionUUID->"9bf3994b-4b5d-4f39-be66-344c06d1bec3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"BusinessDayQuestionGenerator", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748364978620615`*^9, 3.874836499163736*^9}},
 CellLabel->"In[647]:=",
 CellID->415388188,ExpressionUUID->"a449521e-372d-43ef-8f70-ae2aadc7b9b1"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 
   "Monday 27 March 2186", QuestionFramework`Private`interpreter$$ = Identity,
    QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> "Monday 27 March 2186", "Explanation" -> None, 
     "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 29, 0.333462`7.27562133976456}, "Instant", 
       "Gregorian", -4.], "AssessmentOptions" -> {}, "AnswerComparisonMethod" -> 
     "String", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = "Monday 27 March 2186"}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "What will the date of the following business day be 59695 days from \
today? Enter like Monday 18 November 2137", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> String, "MinAnswers" -> 1, "Prompt" -> 
             "What will the date of the following business day be 59695 days \
from today? Enter like Monday 18 November 2137"|>, "Interpreter"], String, 
           String], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> String, "MinAnswers" -> 1, "Prompt" -> 
             "What will the date of the following business day be 59695 days \
from today? Enter like Monday 18 November 2137"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{"Monday 27 March 2186" -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            "Monday 27 March 2186" -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{"Monday 27 March 2186" -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{"Monday 27 March 2186" -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               "Monday 27 March 2186" -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{476., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "What will the date of the following business day be 59695 days from \
today? Enter like Monday 18 November 2137"], 
   AssessmentFunction[{
    "Monday 27 March 2186" -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874836499613386*^9},
 CellLabel->"Out[647]=",
 CellID->288422744,ExpressionUUID->"6d0bc984-2d96-451e-a985-f6916b8fc225"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NextDate", "[", 
  RowBox[{
   RowBox[{"Today", "+", 
    RowBox[{"59695", 
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
       "\"Days\""},
      "Quantity"]}]}], ",", "\"\<BusinessDay\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748363825560303`*^9, 3.874836393527859*^9}, {
  3.8748365081251826`*^9, 3.874836514003725*^9}},
 CellLabel->"In[649]:=",
 CellID->344916666,ExpressionUUID->"666872c1-1bb0-458a-9a5f-c44e9d52f0fc"],

Cell[BoxData[
 TemplateBox[{
   RowBox[{"\"Mon 27 Mar 2186\""}], 
   RowBox[{"DateObject", "[", 
     RowBox[{
       RowBox[{"{", 
         RowBox[{"2186", ",", "3", ",", "27"}], "}"}], ",", "\"Day\""}], 
     "]"}]},
  "DateObject",
  Editable->False]], "Output",
 CellChangeTimes->{
  3.8748364029178348`*^9, {3.8748365161854672`*^9, 3.8748365205345736`*^9}},
 CellLabel->"Out[649]=",
 CellID->517160443,ExpressionUUID->"1a887b89-ca03-4aee-b5d2-c08bcec7e7cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateString", "[", 
  RowBox[{
   RowBox[{"NextDate", "[", 
    RowBox[{
     RowBox[{"Today", "+", 
      RowBox[{"59695", 
       TemplateBox[{
         InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
         "\"Days\""},
        "Quantity"]}]}], ",", "\"\<BusinessDay\>\""}], "]"}], ",", 
   "\"\<Date\>\""}], "]"}]], "Input",
 CellLabel->"In[652]:=",
 CellID->319167979,ExpressionUUID->"4a83e7c7-2327-41a1-9859-c2474a8eec96"],

Cell[BoxData["\<\"Monday 27 March 2186\"\>"], "Output",
 CellChangeTimes->{3.8748365368416443`*^9},
 CellLabel->"Out[652]=",
 CellID->443748173,ExpressionUUID->"3afecb5a-a360-4205-ac4f-810e2803bb1f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"CopyToClipboard", "[", 
  RowBox[{"DateString", "[", 
   RowBox[{
    RowBox[{"NextDate", "[", 
     RowBox[{
      RowBox[{"Today", "+", 
       RowBox[{"59695", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], "\"days\"", "days", 
          "\"Days\""},
         "Quantity"]}]}], ",", "\"\<BusinessDay\>\""}], "]"}], ",", 
    "\"\<Date\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748365209785595`*^9, 3.874836530913726*^9}},
 CellLabel->"In[653]:=",
 CellID->864606707,ExpressionUUID->"69e40ed1-4a64-4af4-9b4a-a47ace3c1b3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Days Between Dates", "Subsection",
 CellChangeTimes->{{3.8748366424158893`*^9, 3.874836645078834*^9}},
 CellID->360648399,ExpressionUUID->"bd609c1e-d213-4f23-84ce-89e4d6c6874d"],

Cell["Ask how many days are between dates:", "Text",
 CellChangeTimes->{{3.874836647090642*^9, 3.874836658355448*^9}},
 CellID->44306504,ExpressionUUID->"b805214f-c8c5-46bb-8ad8-f6775b3156c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PersistResourceFunction", "[", "\"\<RandomDate\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.874836660607335*^9, 3.874836663377405*^9}},
 CellLabel->"In[654]:=",
 CellID->497790157,ExpressionUUID->"338e8620-360c-4d86-93d8-2c0f1d00b099"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Success",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Successfully stored RandomDate as an initialization \
symbol.\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"PersistenceLocation\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["PersistenceLocation", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Base: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"file:///C:/Users/peter/AppData/Roaming/Wolfram/Objects/\
Persistence\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   PersistenceLocation[
                   "Local", 
                    "file:///C:/Users/peter/AppData/Roaming/Wolfram/Objects/\
Persistence", 
                    Hold[Persistence`Data`a19497003455842226379$7]], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[Checkmark]\"", 
              Directive[
               RGBColor[
               0.3607843137254902, 0.596078431372549, 0.3803921568627451], 
               25], StripOnInput -> False], ContentPadding -> False, 
             FrameStyle -> None, FrameMargins -> {{0, 0}, {0, 0}}, 
             StripOnInput -> False], 
            GridBox[{{
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Message\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                 "\"Successfully stored RandomDate as an initialization \
symbol.\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  
                  TemplateBox[{"\"PersistenceLocation\"", "\": \""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  InterpretationBox[
                   RowBox[{
                    TagBox["PersistenceLocation", "SummaryHead"], "[", 
                    
                    DynamicModuleBox[{
                    Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
                    TemplateBox[{
                    PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxOpener"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SummaryBoxCloser"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                    "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{
                    Thickness[0.04081632653061224], {
                    FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigAFlBwht7oCLr7ihKGNir7nDlhNl++ZLKUHF
LaC0Ihr/hz2Mv6FksgRL2Dt7VPkH9jDzYHxU+2D8D/Yw/oHvwY+Xzr5jj2oe
DPxA5TfAzGFgiEqxvu/Pa+GAKm/hADMPxkexD843dYDxIe41dUA1z8wB1T4o
n0EVzvcx73RMeKqMJq/scN+/d3peEYIP8z8AUyhEVw==
                    "]]}, {
                    RGBColor[1., 1., 1.], 
                    Opacity[1.], 
                    CapForm["Round"], 
                    JoinForm["Round"], 
                    
                    JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIFIGYC4pASlen/AwwcGMBAxAHM/4Dg7zOYqSWx1dCh
1t40bpeniMP9B9yTVzYZOlhuOVG2T17KIWz+6rU34g0dKl+qGXLoyDkcv7O1
pUbA0OHF75UfL/UqOBx1Wpt576O+gwpb41RnbiWHP6ffnTx8SNchSSDCckuH
skOeScN2BydtB441MlEp1ipw/qdLvkkCEmoOZkBu0yJtiP7TGg6SasGsi4V0
Hc5/D3689LaGw6L0za+KTXUdWl8H7pBr1XXYd1BcLdhV10EeJDBP30Fo6d6D
4mm6UP8YOVx0ufHhC5cGnM/k28Lrv14Jzg8z0FopfEEJrr+oq+/Jp/tKcPPB
7mdShtv/oBCooEgF7r5lQOvULqvA3Q/jw/wHdn+QEtz/geunpHYoK8DDh69w
TfftF9Lw8Hs3dRNP4RopePiuSQgJUleQgoe/V8AfieJwSXj83BL65Hg+TQYe
f2D+MznU+EWKbwBI8b86
                    "], CurveClosed -> {1}]}}, AspectRatio -> Automatic, 
                    ImageSize -> {25., 25.}, 
                    PlotRange -> {{0., 24.5}, {0., 24.5}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Local\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Base: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"file:///C:/Users/peter/AppData/Roaming/Wolfram/Objects/\
Persistence\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Top}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[Typeset`open$$], ImageSize -> Automatic]}, 
                    "SummaryPanel"], DynamicModuleValues :> {}], "]"}], 
                   PersistenceLocation[
                   "Local", 
                    "file:///C:/Users/peter/AppData/Roaming/Wolfram/Objects/\
Persistence", 
                    Hold[Persistence`Data`a19497003455842226379$7]], 
                   Selectable -> False, Editable -> False, SelectWithContents -> 
                   True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Tag\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["\"InstalledResourceFunction\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Success[
  "InstalledResourceFunction", <|
   "MessageTemplate" :> 
    "Successfully stored `symName` as an initialization symbol.", 
    "MessageParameters" -> <|"symName" -> "RandomDate"|>, 
    "PersistenceLocation" -> 
    PersistenceLocation[
     "Local", "file:///C:/Users/peter/AppData/Roaming/Wolfram/Objects/\
Persistence", 
      Hold[Persistence`Data`a19497003455842226379$7]]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874836663714115*^9},
 CellLabel->"Out[654]=",
 CellID->231726372,ExpressionUUID->"7dfe1f6b-ba96-47c0-9fb5-637b15d82584"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomDate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", "1940", "}"}], "]"}], ",", 
     RowBox[{"DateObject", "[", 
      RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748366648687506`*^9, 3.874836689409751*^9}},
 CellLabel->"In[657]:=",
 CellID->202241763,ExpressionUUID->"667ce53a-0445-44cf-bc28-f2f724a75f45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Mon 26 Nov 1990 00:06:19\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"1990", ",", "11", ",", "26", ",", "0", ",", "6", ",", 
             "19.864871978759766`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Mon 13 Aug 2035 01:14:06\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"2035", ",", "8", ",", "13", ",", "1", ",", "14", ",", 
             "6.8880414962768555`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.8748366793128767`*^9, 3.87483668971513*^9}},
 CellLabel->"Out[657]=",
 CellID->526956691,ExpressionUUID->"1d3ad6ac-1b1f-4387-bf76-7726519541f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"SortBy", "[", "AbsoluteTime", "]"}], "[", 
  RowBox[{"RandomDate", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", 
       RowBox[{"{", "1940", "}"}], "]"}], ",", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8748366938288107`*^9, 3.8748367155615635`*^9}},
 CellLabel->"In[659]:=",
 CellID->253099656,ExpressionUUID->"15807319-8bc0-4a6d-ab8c-1d416667f648"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Thu 30 Jun 1977 10:53:36\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"1977", ",", "6", ",", "30", ",", "10", ",", "53", ",", 
             "36.80375576019287`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Thu 1 Apr 1999 02:33:08\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"1999", ",", "4", ",", "1", ",", "2", ",", "33", ",", 
             "8.031990051269531`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.874836696423066*^9, 3.874836715923032*^9}},
 CellLabel->"Out[659]=",
 CellID->206848443,ExpressionUUID->"161c19bd-dc45-478d-85b9-b56c6556812e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateDifference", "@@", 
  RowBox[{
   RowBox[{"SortBy", "[", "AbsoluteTime", "]"}], "[", 
   RowBox[{"RandomDate", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", "1940", "}"}], "]"}], ",", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.874836719561383*^9, 3.87483672231629*^9}},
 CellLabel->"In[660]:=",
 CellID->214285083,ExpressionUUID->"457bbfcf-e3f7-4dc9-97fb-6193c3c40342"],

Cell[BoxData[
 TemplateBox[{"5036.946584630851`", "\"days\"", "days", "\"Days\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.87483672261965*^9},
 CellLabel->"Out[660]=",
 CellID->292248309,ExpressionUUID->"1f07240a-3d5d-41d4-b252-23b03cb9a797"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Floor", "[", 
  RowBox[{"DateDifference", "@@", 
   RowBox[{
    RowBox[{"SortBy", "[", "AbsoluteTime", "]"}], "[", 
    RowBox[{"RandomDate", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "1940", "}"}], "]"}], ",", 
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}], 
    "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.874836729661034*^9, 3.874836730734714*^9}},
 CellLabel->"In[662]:=",
 CellID->416537676,ExpressionUUID->"79c21afc-32eb-485b-89d0-637b652101be"],

Cell[BoxData[
 TemplateBox[{"1277", "\"days\"", "days", "\"Days\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8748367310603795`*^9},
 CellLabel->"Out[662]=",
 CellID->2467889,ExpressionUUID->"dc26200e-a2a6-4fb2-aae7-e7e2e8bce9e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"daysBetweenDatesQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{
       RowBox[{"SortBy", "[", "AbsoluteTime", "]"}], "[", 
       RowBox[{"RandomDate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "1940", "}"}], "]"}], ",", 
           RowBox[{"DateObject", "[", 
            RowBox[{"{", "2040", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<How many days are between \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\<? Enter the floor of the numerical result you get.\>\""}], 
       ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"Floor", "[", 
         RowBox[{
          RowBox[{"DateDifference", "@@", "#n"}], "//", "QuantityMagnitude"}],
          "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.87483674152623*^9, 3.874836872080138*^9}, {
  3.8748369737842727`*^9, 3.8748369823900404`*^9}},
 CellLabel->"In[675]:=",
 CellID->396097841,ExpressionUUID->"68e42d2e-69ae-4030-bd57-e5bea9fecd18"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> SortBy[AbsoluteTime][
      $CellContext`RandomDate[{
        DateObject[{1940}], 
        DateObject[{2040}]}, 2]]}, QuestionObject[
   "How many days are between " <> DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> 
    "? Enter the floor of the numerical result you get.", 
    AssessmentFunction[
     Floor[
      QuantityMagnitude[
       Apply[DateDifference, 
        Slot["n"]]]]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748368451210284`*^9, 3.8748368739591465`*^9}, 
   3.874836982918375*^9},
 CellLabel->"Out[675]=",
 CellID->897306820,ExpressionUUID->"5bf3da20-b79e-40fb-94f6-c5f5b459cae8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"daysBetweenDatesQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874836846696656*^9, 3.874836847704142*^9}},
 CellLabel->"In[676]:=",
 CellID->32521073,ExpressionUUID->"9dbacc80-8fcd-4c45-a917-17cd978af649"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 8153, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 8153, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 36, 50.7623209`9.458116323003235}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 8153}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many days are between Friday 8 June 2001 and Wednesday 4 October \
2023? Enter the floor of the numerical result you get.", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many days are between Friday 8 June 2001 and Wednesday 4 \
October 2023? Enter the floor of the numerical result you get."|>, 
            "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many days are between Friday 8 June 2001 and Wednesday 4 \
October 2023? Enter the floor of the numerical result you get."|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{8153 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{8153 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{8153 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{8153 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{8153 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{533., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many days are between Friday 8 June 2001 and Wednesday 4 October \
2023? Enter the floor of the numerical result you get."], 
   AssessmentFunction[{8153 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748368479814444`*^9, 3.87483687476324*^9}, 
   3.8748369838867216`*^9},
 CellLabel->"Out[676]=",
 CellID->10365728,ExpressionUUID->"b5645e41-e209-4225-9bcf-97c9d36c7637"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Floor", "[", 
   RowBox[{"DateDifference", "@@", 
    RowBox[{
     RowBox[{"SortBy", "[", "AbsoluteTime", "]"}], "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", "\"\<Friday 8 June 2001\>\"", "]"}], ",", 
       RowBox[{"DateObject", "[", "\"\<Wednesday 4 October 2023\>\"", "]"}]}],
       "}"}], "]"}]}], "]"}], "//", "QuantityMagnitude"}]], "Input",
 CellChangeTimes->{{3.874836889753488*^9, 3.874836952422907*^9}, {
  3.874836988885024*^9, 3.8748370186031265`*^9}},
 CellLabel->"In[679]:=",
 CellID->79913242,ExpressionUUID->"5875e257-195a-4dad-af03-57bfe3f140db"],

Cell[BoxData["8153"], "Output",
 CellChangeTimes->{{3.8748369202352047`*^9, 3.8748369527532854`*^9}, {
  3.874836997*^9, 3.8748370188109417`*^9}},
 CellLabel->"Out[679]=",
 CellID->44008449,ExpressionUUID->"ea1fc2b1-f6f5-4a0e-a180-35c8c7fb29c1"]
}, Open  ]],

Cell["\<\
Project Euler Question #19 is How many Sundays fell on the first of the month \
during the twentieth century (1 Jan 1901 to 31 Dec 2000)?\
\>", "Text",
 CellChangeTimes->{{3.8748370514648657`*^9, 3.874837061334648*^9}},
 CellID->58058591,ExpressionUUID->"2c9666c4-8473-4bf3-8f23-7562bfa20c0b"],

Cell["Make a function to generate similar questions:", "Text",
 CellChangeTimes->{{3.874837063695833*^9, 3.8748370709518213`*^9}},
 CellID->466496898,ExpressionUUID->"cedb97c4-1c57-4724-9b29-e2680bdf6e55"],

Cell["Solve the problem:", "Text",
 CellChangeTimes->{{3.8748370751429124`*^9, 3.874837081616311*^9}},
 CellID->336942071,ExpressionUUID->"625eb441-a5bc-47dd-a56e-b605760d6901"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateRange", "[", 
  RowBox[{
   RowBox[{"DateObject", "[", "\"\<1 January 1901\>\"", "]"}], ",", 
   RowBox[{"DateObject", "[", "\"\<31 December 2000\>\"", "]"}], ",", 
   "\"\<Day\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8748370831502657`*^9, 3.8748371087780523`*^9}},
 CellLabel->"In[681]:=",
 CellID->45732300,ExpressionUUID->"491a3170-035c-4722-b2a1-19a5e6dace9b"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         TemplateBox[{
           RowBox[{"\"Tue 1 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "1"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Wed 2 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "2"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Thu 3 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "3"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Fri 4 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "4"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sat 5 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "5"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sun 6 Jan 1901\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"1901", ",", "1", ",", "6"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{"36513"}, "OutputSizeLimit`Skeleton"], ",", 
         TemplateBox[{
           RowBox[{"\"Tue 26 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "26"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Wed 27 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "27"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Thu 28 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "28"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Fri 29 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "29"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sat 30 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "30"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sun 31 Dec 2000\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2000", ",", "12", ",", "31"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False]}], "}"}],
      Short[#, 5]& ], "line" -> 681, "sessionID" -> 19497003455842226379, 
   "byteCount" -> 7597280, "size" -> 5, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{{3.874837106334284*^9, 3.8748371252537446`*^9}},
 CellLabel->"Out[681]=",
 CellID->371273284,ExpressionUUID->"dec7c820-3623-40e8-b378-48f2725c7ea4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DayName", "[", "#", "]"}], "==", "Sunday"}], "&"}], "]"}], "@*", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "\"\<BeginningOfMonth\>\""}], "]"}], "&"}], "]"}]}], 
   ")"}], "[", 
  RowBox[{"DateRange", "[", 
   RowBox[{
    RowBox[{"DateObject", "[", "\"\<1 January 1901\>\"", "]"}], ",", 
    RowBox[{"DateObject", "[", "\"\<31 December 2000\>\"", "]"}], ",", 
    "\"\<Day\>\""}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748371359111404`*^9, 3.874837186216208*^9}},
 CellLabel->"In[682]:=",
 CellID->323269883,ExpressionUUID->"9ac84c63-fe1e-454e-9fc0-bd60bc128804"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1901\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1901", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1901\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1901", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1902\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1902", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1903\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1903", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1903\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1903", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1903\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1903", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1904\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1904", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1905\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1905", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1905\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1905", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1906\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1906", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1906\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1906", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1907\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1907", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1907\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1907", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1908\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1908", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1908\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1908", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1909\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1909", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1910\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1910", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1911\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1911", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1911\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1911", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1912\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1912", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1912\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1912", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1913\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1913", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1914\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1914", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1914\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1914", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1914\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1914", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1915\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1915", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1916\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1916", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1917\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1917", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1917\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1917", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1918\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1918", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1918\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1918", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1919\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1919", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1920\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1920", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1920\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1920", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1921\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1921", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1922\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1922", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1922\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1922", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1923\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1923", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1923\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1923", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1924\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1924", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1925\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1925", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1925\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1925", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1925\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1925", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1926\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1926", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1927\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1927", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1928\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1928", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1928\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1928", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1928\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1928", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1929\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1929", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1929\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1929", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1930\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1930", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1931\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1931", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1931\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1931", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1931\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1931", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1932\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1932", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1933\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1933", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1933\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1933", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1934\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1934", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1934\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1934", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1935\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1935", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1935\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1935", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1936\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1936", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1936\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1936", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1937\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1937", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1938\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1938", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1939\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1939", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1939\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1939", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1940\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1940", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1940\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1940", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1941\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1941", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1942\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1942", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1942\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1942", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1942\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1942", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1943\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1943", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1944\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1944", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1945\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1945", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1945\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1945", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1946\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1946", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1946\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1946", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1947\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1947", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1948\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1948", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1948\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1948", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1949\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1949", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1950\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1950", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1950\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1950", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1951\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1951", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1951\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1951", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1952\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1952", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1953\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1953", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1953\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1953", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1953\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1953", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1954\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1954", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1955\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1955", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1956\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1956", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1956\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1956", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1956\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1956", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1957\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1957", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1957\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1957", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1958\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1958", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1959\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1959", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1959\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1959", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1959\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1959", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1960\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1960", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1961\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1961", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1961\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1961", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1962\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1962", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1962\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1962", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1963\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1963", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1963\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1963", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1964\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1964", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1964\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1964", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1965\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1965", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1966\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1966", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1967\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1967", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1967\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1967", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1968\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1968", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1968\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1968", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1969\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1969", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1970\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1970", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1970\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1970", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1970\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1970", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1971\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1971", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1972\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1972", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1973\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1973", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1973\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1973", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1974\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1974", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1974\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1974", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1975\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1975", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1976\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1976", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1976\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1976", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1977\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1977", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1978\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1978", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1978\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1978", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1979\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1979", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1979\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1979", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1980\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1980", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1981\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1981", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1981\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1981", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1981\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1981", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1982\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1982", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1983\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1983", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1984\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1984", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1984\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1984", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1984\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1984", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1985\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1985", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1985\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1985", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1986\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1986", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1987\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1987", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1987\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1987", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1987\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1987", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1988\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1988", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1989\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1989", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1989\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1989", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Apr 1990\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1990", ",", "4", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jul 1990\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1990", ",", "7", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1991\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1991", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1991\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1991", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1992\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1992", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1992\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1992", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1993\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1993", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 May 1994\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1994", ",", "5", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jan 1995\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1995", ",", "1", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 1995\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1995", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Sep 1996\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1996", ",", "9", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Dec 1996\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1996", ",", "12", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Jun 1997\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1997", ",", "6", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Feb 1998\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1998", ",", "2", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Mar 1998\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1998", ",", "3", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Nov 1998\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1998", ",", "11", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Aug 1999\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1999", ",", "8", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 1 Oct 2000\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"2000", ",", "10", ",", "1"}], "}"}], ",", "\"Day\""}], 
       "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.874837190632868*^9},
 CellLabel->"Out[682]=",
 CellID->9097926,ExpressionUUID->"85373f5d-88e9-4e49-9e05-36e09e6bb638"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%682", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[684]:=",
 CellID->380267166,ExpressionUUID->"9332df61-f060-41c6-905c-07e94a28963d"],

Cell[BoxData["171"], "Output",
 CellChangeTimes->{3.8748371972153516`*^9},
 CellLabel->"Out[684]=",
 CellID->11061938,ExpressionUUID->"34103c97-b962-47cf-b083-d6a7a4973b90"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "%682", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[683]:=",
 CellID->239791575,ExpressionUUID->"0e145c3c-901a-4b21-9638-109b21a31b88"],

Cell[BoxData["171"], "Output",
 CellChangeTimes->{3.874837196967381*^9},
 CellLabel->"Out[683]=",
 CellID->546210613,ExpressionUUID->"4aaee5bb-a008-48b6-b749-01b825739c05"]
}, Open  ]],

Cell["\<\
How many Sundays fell on the first of the month during the twentieth century \
(1 Jan 1901 to 31 Dec 2000)?\
\>", "Text",
 CellChangeTimes->{{3.8748372101882467`*^9, 3.8748372122916293`*^9}},
 CellID->263942513,ExpressionUUID->"84b9974e-ae49-479c-a2c8-3fe9fada5b23"],

Cell[BoxData[
 RowBox[{"QuestionGenerator", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\"\<n\>\"", ":>", 
     RowBox[{"RandomDate", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "1900", "}"}], "]"}], ",", 
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"QuestionObject", "[", 
     RowBox[{
      RowBox[{
      "\"\<What will the date of the following business day be \>\"", "<>", 
       RowBox[{"ToString", "[", "#n", "]"}], "<>", 
       "\"\< days from today? Enter like Monday 18 November 2137\>\""}], ",", 
      RowBox[{"AssessmentFunction", "[", 
       RowBox[{"DateString", "[", 
        RowBox[{
         RowBox[{"NextDate", "[", 
          RowBox[{
           RowBox[{"Evaluate", "[", 
            RowBox[{"Today", "+", 
             RowBox[{"#n", " ", 
              RowBox[{"Quantity", "[", 
               RowBox[{"1", ",", "\"\<Days\>\""}], "]"}]}]}], "]"}], ",", 
           "\"\<BusinessDay\>\""}], "]"}], ",", "\"\<Date\>\""}], "]"}], 
       "]"}]}], "]"}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8748372630645747`*^9, 3.8748372931458025`*^9}},
 CellID->254508650,ExpressionUUID->"f9817358-ac11-4f27-9c9b-fb89a89f698f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomDate", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"{", "1900", "}"}], "]"}], ",", 
     RowBox[{"DateObject", "[", 
      RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.874837299845248*^9, 3.8748373077632627`*^9}},
 CellLabel->"In[688]:=",
 CellID->262929551,ExpressionUUID->"207baebc-c356-4ab1-94d3-414a26cb1112"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Sun 16 Apr 1944 06:32:16\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"1944", ",", "4", ",", "16", ",", "6", ",", "32", ",", 
             "16.284783363342285`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Tue 5 Mar 1968 18:04:24\"", 
       StyleBox[
        RowBox[{"\"GMT\"", "\[InvisibleSpace]", 
          StyleBox[
           RowBox[{"-", "4"}], NumberMarks -> False, StripOnInput -> False]}],
         FontColor -> GrayLevel[0.5]]}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           
           RowBox[{"1968", ",", "3", ",", "5", ",", "18", ",", "4", ",", 
             "24.431706428527832`"}], "}"}], ",", "\"Instant\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{{3.874837297169088*^9, 3.8748373081789*^9}},
 CellLabel->"Out[688]=",
 CellID->439459778,ExpressionUUID->"91bdb742-8e59-4886-890c-4b85db45bbeb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DateObject", "[", 
    RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
  RowBox[{"RandomDate", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", 
       RowBox[{"{", "1900", "}"}], "]"}], ",", 
      RowBox[{"DateObject", "[", 
       RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.874837317948841*^9, 3.8748373255436974`*^9}},
 CellLabel->"In[689]:=",
 CellID->390296473,ExpressionUUID->"fcf5d359-2906-4112-8177-5a0bfdeb560d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Wed 18 Nov 1936\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1936", ",", "11", ",", "18"}], "}"}], ",", "\"Day\"", ",",
          "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Sun 29 Aug 1920\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"1920", ",", "8", ",", "29"}], "}"}], ",", "\"Day\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.874837325855293*^9},
 CellLabel->"Out[689]=",
 CellID->132031938,ExpressionUUID->"b44d7e20-784b-4670-a5b2-2bc11459da52"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"DateObject", "[", 
     RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
   RowBox[{"RandomDate", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"{", "1900", "}"}], "]"}], ",", 
       RowBox[{"DateObject", "[", 
        RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8748373435263233`*^9, 3.8748373448112144`*^9}},
 CellLabel->"In[690]:=",
 CellID->20348444,ExpressionUUID->"8049950c-2678-45ee-a416-210ddcb14a3c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
     RowBox[{"\"Thu 13 Jan 2005\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"2005", ",", "1", ",", "13"}], "}"}], ",", "\"Day\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False], ",", 
   TemplateBox[{
     RowBox[{"\"Wed 18 Mar 2026\""}], 
     RowBox[{"DateObject", "[", 
       RowBox[{
         RowBox[{"{", 
           RowBox[{"2026", ",", "3", ",", "18"}], "}"}], ",", "\"Day\"", ",", 
         "\"Gregorian\"", ",", 
         RowBox[{"-", "4.`"}]}], "]"}]},
    "DateObject",
    Editable->False]}], "}"}]], "Output",
 CellChangeTimes->{3.8748373452398195`*^9},
 CellLabel->"Out[690]=",
 CellID->210231711,ExpressionUUID->"b693a982-e707-4c6b-8386-fc587fec1547"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DayRange", "@@", 
  RowBox[{"Sort", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"DateObject", "[", 
      RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
    RowBox[{"RandomDate", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "1900", "}"}], "]"}], ",", 
        RowBox[{"DateObject", "[", 
         RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.874837353418394*^9, 3.874837371766292*^9}},
 CellLabel->"In[692]:=",
 CellID->81758676,ExpressionUUID->"acd20f7f-1666-469a-9935-9f5b627b2dc7"],

Cell[BoxData[
 TemplateBox[<|"shortenedBoxes" -> TagBox[
     RowBox[{"{", 
       RowBox[{
         TemplateBox[{
           RowBox[{"\"Fri 18 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "18"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sat 19 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "19"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Sun 20 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "20"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Mon 21 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "21"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Tue 22 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "22"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Wed 23 Feb 2028\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2028", ",", "2", ",", "23"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{"15221"}, "OutputSizeLimit`Skeleton"], ",", 
         TemplateBox[{
           RowBox[{"\"Sun 27 Oct 2069\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2069", ",", "10", ",", "27"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Mon 28 Oct 2069\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2069", ",", "10", ",", "28"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Tue 29 Oct 2069\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2069", ",", "10", ",", "29"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Wed 30 Oct 2069\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2069", ",", "10", ",", "30"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False], ",", 
         TemplateBox[{
           RowBox[{"\"Thu 31 Oct 2069\""}], 
           RowBox[{"DateObject", "[", 
             RowBox[{
               RowBox[{"{", 
                 RowBox[{"2069", ",", "10", ",", "31"}], "}"}], ",", 
               "\"Day\""}], "]"}]}, "DateObject", Editable -> False]}], "}"}],
      Short[#, 5]& ], "line" -> 692, "sessionID" -> 19497003455842226379, 
   "byteCount" -> 3168336, "size" -> 5, "stored" -> False, "expr" -> 
   Missing["NotStored"], "wrap" -> OutputSizeLimit`Defer, "version" -> 1|>,
  "OutputSizeLimitTemplate"]], "Output",
 CellChangeTimes->{{3.874837365548459*^9, 3.8748373792350388`*^9}},
 CellLabel->"Out[692]=",
 CellID->4270511,ExpressionUUID->"c8ffa1bb-5742-4da6-bb7d-a231878bed22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CountsBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"DayName", "[", "#", "]"}], "==", "Sunday"}], "&&", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], "]"}], 
   "[", 
   RowBox[{"DayRange", "@@", 
    RowBox[{"Sort", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"DateObject", "[", 
        RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
      RowBox[{"RandomDate", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"DateObject", "[", 
           RowBox[{"{", "1900", "}"}], "]"}], ",", 
          RowBox[{"DateObject", "[", 
           RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
     "]"}]}], "]"}], "[", "True", "]"}]], "Input",
 CellChangeTimes->{{3.8748374029178963`*^9, 3.874837423468913*^9}, {
  3.874837468992667*^9, 3.8748374697448206`*^9}},
 CellLabel->"In[695]:=",
 CellID->162809961,ExpressionUUID->"3221f355-5d3b-4212-bb4c-6d7dd3fd20f8"],

Cell[BoxData["151"], "Output",
 CellChangeTimes->{3.8748374327111063`*^9, 3.8748374745911045`*^9},
 CellLabel->"Out[695]=",
 CellID->37675002,ExpressionUUID->"80ff471a-f942-456d-a737-90a3c2deef59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfSundays", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
        RowBox[{"RandomDate", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "1900", "}"}], "]"}], ",", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<How many Sundays on the first day of the month are there between \
\>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\<?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CountsBy", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"DayName", "[", "#", "]"}], "==", "Sunday"}], "&&", 
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], 
           "]"}], "[", 
          RowBox[{"DayRange", "@@", "#n"}], "]"}], "[", "True", "]"}], 
        "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748374947877097`*^9, 3.8748375524043236`*^9}, {
  3.874837680835204*^9, 3.874837697514254*^9}},
 CellLabel->"In[715]:=",
 CellID->267795973,ExpressionUUID->"cb147e6b-a7d3-403a-8045-a61e6bc116cd"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> Sort[
      Map[DateObject[#, "Day"]& , 
       $CellContext`RandomDate[{
         DateObject[{1900}], 
         DateObject[{2100}]}, 2]]]}, QuestionObject[
   "How many Sundays on the first day of the month are there between " <> 
    DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> "?", 
    AssessmentFunction[
     CountsBy[And[DayName[#] == Sunday, 
       DayMatchQ[#, "MonthFirstDay"]]& ][
      Apply[DayRange, 
       Slot["n"]]][True]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874837539576412*^9, 3.874837552671508*^9}, 
   3.8748376983084245`*^9, 3.874838017204402*^9},
 CellLabel->"Out[715]=",
 CellID->103814418,ExpressionUUID->"e0a496a6-7305-42d7-a303-8b3513dcab91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfSundays", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748375535606127`*^9, 3.8748375545763235`*^9}},
 CellLabel->"In[717]:=",
 CellID->124693249,ExpressionUUID->"601d2c66-5092-4474-b422-186ebf5aba64"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 112, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 112, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 54, 14.8916195`8.925516881880982}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 112}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many Sundays on the first day of the month are there between \
Friday 25 March 1904 and Friday 26 December 1969?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Sundays on the first day of the month are there \
between Friday 25 March 1904 and Friday 26 December 1969?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Sundays on the first day of the month are there \
between Friday 25 March 1904 and Friday 26 December 1969?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{112 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{112 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{112 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{112 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{112 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{505., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many Sundays on the first day of the month are there between Friday \
25 March 1904 and Friday 26 December 1969?"], 
   AssessmentFunction[{112 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.874837559132273*^9, 3.8748377022192693`*^9, {3.874838019808921*^9, 
   3.874838027639948*^9}},
 CellLabel->"Out[717]=",
 CellID->20705334,ExpressionUUID->"c4e2e4e9-1a61-45a4-b715-13f4cbc9b7ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CountsBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"DayName", "[", "#", "]"}], "==", "Sunday"}], "&&", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], "]"}], 
   "[", 
   RowBox[{"DayRange", "@@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", "\"\<Friday 25 March 1904\>\"", "]"}], ",", 
      RowBox[{"DateObject", "[", "\"\<Friday 26 December 1969\>\"", "]"}]}], 
     "}"}]}], "]"}], "[", "True", "]"}]], "Input",
 CellChangeTimes->{{3.874837573826193*^9, 3.874837595699082*^9}, {
  3.8748380308626237`*^9, 3.8748380487202616`*^9}},
 CellLabel->"In[718]:=",
 CellID->140469563,ExpressionUUID->"1a53d37b-5626-460d-912e-6723424e4cb7"],

Cell[BoxData["112"], "Output",
 CellChangeTimes->{3.874837600479333*^9, 3.8748380525803003`*^9},
 CellLabel->"Out[718]=",
 CellID->22716745,ExpressionUUID->"2ae57d61-fc72-405f-8761-7babe4ed152c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[" Saturdays", "Subsubsection",
 CellChangeTimes->{{3.874838353062455*^9, 3.8748383587940397`*^9}},
 CellID->459187779,ExpressionUUID->"2bd2adbd-cb2a-4b73-bb43-c5370589f6cc"],

Cell["Try counting Saturdays:", "Text",
 CellChangeTimes->{{3.874838068166953*^9, 3.874838092363698*^9}, {
  3.874838270232852*^9, 3.874838271855002*^9}},
 CellID->124316703,ExpressionUUID->"acb6fb4a-378e-482c-9924-609797da1eff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfSaturdays", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
        RowBox[{"RandomDate", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "1900", "}"}], "]"}], ",", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<How many Saturdays on the first day of the month are there \
between \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\<?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CountsBy", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"DayName", "[", "#", "]"}], "==", "Saturday"}], "&&", 
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], 
           "]"}], "[", 
          RowBox[{"DayRange", "@@", "#n"}], "]"}], "[", "True", "]"}], 
        "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748380820178895`*^9, 3.8748381017204404`*^9}, {
  3.8748382743886456`*^9, 3.8748382895317917`*^9}},
 CellLabel->"In[726]:=",
 CellID->251108312,ExpressionUUID->"becfee20-4625-4daa-9542-27f54026817d"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> Sort[
      Map[DateObject[#, "Day"]& , 
       $CellContext`RandomDate[{
         DateObject[{1900}], 
         DateObject[{2100}]}, 2]]]}, QuestionObject[
   "How many Saturdays on the first day of the month are there between " <> 
    DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> "?", 
    AssessmentFunction[
     CountsBy[And[DayName[#] == Saturday, 
       DayMatchQ[#, "MonthFirstDay"]]& ][
      Apply[DayRange, 
       Slot["n"]]][True]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874838099387701*^9, 3.8748381020308857`*^9}, {
  3.8748382834169483`*^9, 3.8748382898968716`*^9}},
 CellLabel->"Out[726]=",
 CellID->540267293,ExpressionUUID->"b6bea58d-337f-44d9-982b-df9a2b6867fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfSaturdays", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874838105101387*^9, 3.8748381093206472`*^9}, {
  3.874838293625579*^9, 3.8748382953631735`*^9}},
 CellLabel->"In[727]:=",
 CellID->94968892,ExpressionUUID->"228b3a61-bbe1-4f3e-9e52-53f2a70a12ee"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 66, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 66, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 58, 58.7513793`9.521592897912926}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 66}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many Saturdays on the first day of the month are there between \
Sunday 6 May 2001 and Tuesday 5 July 2039?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Saturdays on the first day of the month are there \
between Sunday 6 May 2001 and Tuesday 5 July 2039?"|>, "Interpreter"], String,
            Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Saturdays on the first day of the month are there \
between Sunday 6 May 2001 and Tuesday 5 July 2039?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{66 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{66 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{66 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{66 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{66 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{481., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many Saturdays on the first day of the month are there between \
Sunday 6 May 2001 and Tuesday 5 July 2039?"], 
   AssessmentFunction[{66 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874838114208827*^9, 3.8748382976476994`*^9},
 CellLabel->"Out[727]=",
 CellID->32732332,ExpressionUUID->"9dfeafdb-2bf9-43e6-864c-8d619d4dd237"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CountsBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"DayName", "[", "#", "]"}], "==", "Saturday"}], "&&", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], "]"}], 
   "[", 
   RowBox[{"DayRange", "@@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", "\"\<Sunday 6 May 2001\>\"", "]"}], ",", 
      RowBox[{"DateObject", "[", "\"\<Tuesday 5 July 2039\>\"", "]"}]}], 
     "}"}]}], "]"}], "[", "True", "]"}]], "Input",
 CellChangeTimes->{{3.874838310581306*^9, 3.8748383338105717`*^9}},
 CellLabel->"In[728]:=",
 CellID->87572382,ExpressionUUID->"15dbb575-47b2-4d61-b3b8-e0589866dd3f"],

Cell[BoxData["66"], "Output",
 CellChangeTimes->{3.8748383362375007`*^9},
 CellLabel->"Out[728]=",
 CellID->437312624,ExpressionUUID->"179a2e23-9569-4e04-9fe4-5c417d87093a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Mondays", "Subsubsection",
 CellChangeTimes->{{3.8748383470050893`*^9, 3.874838347925435*^9}},
 CellID->215722975,ExpressionUUID->"b0eced43-90e7-4e71-8170-c5202985efdf"],

Cell["Try counting Mondays:", "Text",
 CellChangeTimes->{{3.874838068166953*^9, 3.874838092363698*^9}},
 CellID->95313850,ExpressionUUID->"fa53b9f1-bc0a-4027-b031-c42f1d852c22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfMondays", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
        RowBox[{"RandomDate", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "1900", "}"}], "]"}], ",", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<How many Mondays on the first day of the month are there between \
\>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\<?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CountsBy", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"DayName", "[", "#", "]"}], "==", "Monday"}], "&&", 
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], 
           "]"}], "[", 
          RowBox[{"DayRange", "@@", "#n"}], "]"}], "[", "True", "]"}], 
        "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748380820178895`*^9, 3.8748381017204404`*^9}},
 CellLabel->"In[720]:=",
 CellID->272244166,ExpressionUUID->"f08586e4-1b62-4ee7-afee-56a8e7283b49"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> Sort[
      Map[DateObject[#, "Day"]& , 
       $CellContext`RandomDate[{
         DateObject[{1900}], 
         DateObject[{2100}]}, 2]]]}, QuestionObject[
   "How many Mondays on the first day of the month are there between " <> 
    DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> "?", 
    AssessmentFunction[
     CountsBy[And[DayName[#] == Monday, 
       DayMatchQ[#, "MonthFirstDay"]]& ][
      Apply[DayRange, 
       Slot["n"]]][True]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.874838099387701*^9, 3.8748381020308857`*^9}},
 CellLabel->"Out[720]=",
 CellID->769981151,ExpressionUUID->"8c53f516-c5ed-49ca-9f79-f9bd11e89d4b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfMondays", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874838105101387*^9, 3.8748381093206472`*^9}},
 CellLabel->"In[721]:=",
 CellID->671875270,ExpressionUUID->"d64c37ea-d292-4a3a-bf47-5a9d61ed0419"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 154, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 154, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 11, 56, 33.5279228`9.27798154699001}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 2|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 2, 
   QuestionFramework`Private`submittedvalue$$ = 154}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many Mondays on the first day of the month are there between \
Saturday 16 July 1921 and Tuesday 11 January 2011?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Mondays on the first day of the month are there \
between Saturday 16 July 1921 and Tuesday 11 January 2011?"|>, "Interpreter"],
            String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many Mondays on the first day of the month are there \
between Saturday 16 July 1921 and Tuesday 11 January 2011?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{154 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{154 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{154 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{154 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{154 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{507., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many Mondays on the first day of the month are there between \
Saturday 16 July 1921 and Tuesday 11 January 2011?"], 
   AssessmentFunction[{154 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874838114208827*^9},
 CellLabel->"Out[721]=",
 CellID->6081291,ExpressionUUID->"ea4029b0-7737-45ab-a974-a829d4fe1a4c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"CountsBy", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"DayName", "[", "#", "]"}], "==", "Monday"}], "&&", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}], "]"}], 
   "[", 
   RowBox[{"DayRange", "@@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"DateObject", "[", "\"\<Saturday 16 July 1921\>\"", "]"}], ",", 
      RowBox[{"DateObject", "[", "\"\<Tuesday 11 January 2011\>\"", "]"}]}], 
     "}"}]}], "]"}], "[", "True", "]"}]], "Input",
 CellChangeTimes->{{3.8748381211085553`*^9, 3.874838184006191*^9}},
 CellLabel->"In[724]:=",
 CellID->112758048,ExpressionUUID->"93a602a2-19c3-47ca-aef0-22596d34bde1"],

Cell[BoxData["154"], "Output",
 CellChangeTimes->{{3.874838147180317*^9, 3.8748381892897224`*^9}},
 CellLabel->"Out[724]=",
 CellID->261037973,ExpressionUUID->"f760f33b-33fc-4f8b-899a-624062f79107"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Business Days", "Subsubsection",
 CellChangeTimes->{{3.874838249952431*^9, 3.8748382547647667`*^9}, {
  3.8748383765763707`*^9, 3.874838379031766*^9}},
 CellID->561218296,ExpressionUUID->"efa5991a-1dc1-4dbf-927f-f29da20004ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfBusinessDays", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
        RowBox[{"RandomDate", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "1900", "}"}], "]"}], ",", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
       "\"\<How many business days on the first day of the month are there \
between \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\<?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"CountsBy", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}], "&&", 
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "\"\<BusinessDay\>\""}], "]"}]}], "&"}], 
           "]"}], "[", 
          RowBox[{"DayRange", "@@", "#n"}], "]"}], "[", "True", "]"}], 
        "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874838394228812*^9, 3.8748384200613527`*^9}},
 CellLabel->"In[729]:=",
 CellID->419956798,ExpressionUUID->"91d9d056-7e19-44ee-aebd-348084e719b1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> Sort[
      Map[DateObject[#, "Day"]& , 
       $CellContext`RandomDate[{
         DateObject[{1900}], 
         DateObject[{2100}]}, 2]]]}, QuestionObject[
   "How many business days on the first day of the month are there between " <> 
    DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> "?", 
    AssessmentFunction[
     CountsBy[And[
       DayMatchQ[#, "MonthFirstDay"], 
       DayMatchQ[#, "BusinessDay"]]& ][
      Apply[DayRange, 
       Slot["n"]]][True]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748384239481316`*^9},
 CellLabel->"Out[729]=",
 CellID->655571778,ExpressionUUID->"0ba88555-cf10-4b42-8cf6-fcf3f861976e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numberOfBusinessDays", "[", "]"}]], "Input",
 CellChangeTimes->{{3.87483842639284*^9, 3.874838427794731*^9}},
 CellLabel->"In[730]:=",
 CellID->504153840,ExpressionUUID->"5451569f-df18-46ed-b350-412bc1f44633"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 319, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 319, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 4, 3.7665555`8.328519352099786}, "Instant",
        "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 319}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many business days on the first day of the month are there \
between Monday 14 January 2058 and Thursday 9 July 2099?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many business days on the first day of the month are there \
between Monday 14 January 2058 and Thursday 9 July 2099?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many business days on the first day of the month are there \
between Monday 14 January 2058 and Thursday 9 July 2099?"|>, 
            "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{319 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{319 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{319 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{319 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{319 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{522., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many business days on the first day of the month are there between \
Monday 14 January 2058 and Thursday 9 July 2099?"], 
   AssessmentFunction[{319 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748384320198317`*^9},
 CellLabel->"Out[730]=",
 CellID->174380073,ExpressionUUID->"5da9dda2-4396-4103-ad8f-8f30d6d69b7d"]
}, Open  ]],

Cell["Make a function to count days:", "Text",
 CellChangeTimes->{{3.874838440356454*^9, 3.874838445443592*^9}},
 CellID->153513979,ExpressionUUID->"8c8f3bd9-7a78-48ef-aba6-5eaf7a99e090"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DateCountsBy", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"beginning_", ",", "ending_"}], "}"}], ",", "crit_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"CountsBy", "[", "crit", "]"}], "[", 
    RowBox[{"DayRange", "@@", 
     RowBox[{"{", 
      RowBox[{"beginning", ",", "ending"}], "}"}]}], "]"}], "[", "True", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.874838446272698*^9, 3.8748385162508388`*^9}},
 CellLabel->"In[731]:=",
 CellID->288293686,ExpressionUUID->"5bc33d2a-bac9-4092-941a-8b4fb0b5290b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Monday 14 January 2058\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Thursday 9 July 2099\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "\"\<BusinessDay\>\""}], "]"}], "&&", 
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.874838519021547*^9, 3.87483856631466*^9}},
 CellLabel->"In[732]:=",
 CellID->59394718,ExpressionUUID->"5a679810-88a7-4c92-888a-e45372949ab7"],

Cell[BoxData["319"], "Output",
 CellChangeTimes->{3.8748386334921937`*^9},
 CellLabel->"Out[732]=",
 CellID->228661226,ExpressionUUID->"f91a369a-8fe7-4de0-a7a3-631e65e0d3a9"]
}, Open  ]],

Cell["\<\
Use boolean quantifiers to make the question harder. How many days were a \
Monday, Wednesday, or Friday?\
\>", "Text",
 CellChangeTimes->{{3.874838669425877*^9, 3.8748387222418256`*^9}, 
   3.8748417776179504`*^9},
 CellID->75858361,ExpressionUUID->"b72b8ac3-6dca-45fd-8c80-31d756367747"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Monday 14 January 2058\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Thursday 9 July 2099\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "Monday"}], "]"}], "\[Or]", 
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "Wednesday"}], "]"}], "\[Or]", 
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "Friday"}], "]"}]}], "&"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.874838723978795*^9, 3.8748387974390163`*^9}},
 CellLabel->"In[734]:=",
 CellID->142774518,ExpressionUUID->"3ccba271-cc64-40cd-8d1e-ccda7a765440"],

Cell[BoxData["6494"], "Output",
 CellChangeTimes->{3.8748388043617086`*^9},
 CellLabel->"Out[734]=",
 CellID->10518263,ExpressionUUID->"858290df-1df0-462b-9027-20783203bcd7"]
}, Open  ]],

Cell["Add a constraint on the date too:", "Text",
 CellChangeTimes->{{3.8748388281161137`*^9, 3.874838833246105*^9}},
 CellID->29231320,ExpressionUUID->"beefd9fa-d7cd-4997-a01a-b6d5f5b79cec"],

Cell["\<\
I have to add parentheses because and \[And]/&& has higher precedence than or \
\[Or]/||:\
\>", "CodeText",
 CellChangeTimes->{{3.8748388651282215`*^9, 3.874838893914076*^9}},
 CellID->26905428,ExpressionUUID->"33247da2-e243-43fa-9759-aa8cd8ef64a0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Monday 14 January 2058\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Thursday 9 July 2099\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Monday"}], "]"}], "\[Or]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Wednesday"}], "]"}], "\[Or]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Friday"}], "]"}]}], ")"}], "&&", 
     RowBox[{"DayMatchQ", "[", 
      RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], "&"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.874838723978795*^9, 3.8748387974390163`*^9}, {
  3.8748388339782715`*^9, 3.8748388561285963`*^9}},
 CellLabel->"In[736]:=",
 CellID->209885365,ExpressionUUID->"684fc7a4-2bd9-4657-bb7b-a297a19b411f"],

Cell[BoxData["213"], "Output",
 CellChangeTimes->{{3.8748388485443754`*^9, 3.874838863740486*^9}},
 CellLabel->"Out[736]=",
 CellID->129696077,ExpressionUUID->"0b3eb310-ad24-4110-89aa-6ed57b62db29"]
}, Open  ]],

Cell["\<\
I want days that are either the first day and a Monday or a Wednesday or a \
Friday and a month last day. \
\>", "Text",
 CellChangeTimes->{{3.874839002267234*^9, 3.874839068329496*^9}},
 CellID->343155998,ExpressionUUID->"1050e588-e381-474c-a2ff-c5311c8be4c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Monday 14 January 2058\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Thursday 9 July 2099\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Monday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "Wednesday"}], "]"}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Friday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthLastDay\>\""}], "]"}]}], ")"}]}], "&"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.874838723978795*^9, 3.8748387974390163`*^9}, {
   3.8748388339782715`*^9, 3.8748388561285963`*^9}, {3.8748389039986844`*^9, 
   3.874838995537098*^9}, {3.8748390267125874`*^9, 3.8748390307289934`*^9}, 
   3.8748390744798565`*^9},
 CellLabel->"In[739]:=",
 CellID->338826343,ExpressionUUID->"bb452439-fe22-441e-a189-3299d65d451a"],

Cell[BoxData["2307"], "Output",
 CellChangeTimes->{3.8748390172041264`*^9, 3.874839050968631*^9, 
  3.8748390842137747`*^9},
 CellLabel->"Out[739]=",
 CellID->159591966,ExpressionUUID->"78e3261c-18b0-421b-993e-fd5ec847c51b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hardDateQuestion", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<n\>\"", ":>", 
      RowBox[{"Sort", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"DateObject", "[", 
          RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
        RowBox[{"RandomDate", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "1900", "}"}], "]"}], ",", 
            RowBox[{"DateObject", "[", 
             RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}], 
       "]"}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{"\"\<How days between \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< and \>\"", "<>", 
        RowBox[{"DateString", "[", 
         RowBox[{
          RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
        "<>", "\"\< are either a Monday on the first day of the month or a \
Wednesday or a Friday on the last day of the month?\>\""}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{"DateCountsBy", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"First", "[", "#n", "]"}], ",", 
            RowBox[{"Last", "[", "#n", "]"}]}], "}"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DayMatchQ", "[", 
               RowBox[{"#", ",", "Monday"}], "]"}], "\[And]", 
              RowBox[{"DayMatchQ", "[", 
               RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], ")"}], 
            "\[Or]", 
            RowBox[{"(", 
             RowBox[{"DayMatchQ", "[", 
              RowBox[{"#", ",", "Wednesday"}], "]"}], ")"}], "\[Or]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"DayMatchQ", "[", 
               RowBox[{"#", ",", "Friday"}], "]"}], "\[And]", 
              RowBox[{"DayMatchQ", "[", 
               RowBox[{"#", ",", "\"\<MonthLastDay\>\""}], "]"}]}], ")"}]}], 
           "&"}]}], "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874839102042326*^9, 3.8748391854224453`*^9}},
 CellLabel->"In[740]:=",
 CellID->378151718,ExpressionUUID->"0cdd64e8-a3e7-402a-a40d-955d771a3553"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{"n" :> Sort[
      Map[DateObject[#, "Day"]& , 
       $CellContext`RandomDate[{
         DateObject[{1900}], 
         DateObject[{2100}]}, 2]]]}, QuestionObject[
   "How days between " <> DateString[
      First[
       Slot["n"]], "Date"] <> " and " <> DateString[
      Last[
       Slot["n"]], "Date"] <> 
    " are either a Monday on the first day of the month or a Wednesday or a \
Friday on the last day of the month?", 
    AssessmentFunction[
     $CellContext`DateCountsBy[{
       First[
        Slot["n"]], 
       Last[
        Slot["n"]]}, Or[
       And[
        DayMatchQ[#, Monday], 
        DayMatchQ[#, "MonthFirstDay"]], 
       DayMatchQ[#, Wednesday], 
       And[
        DayMatchQ[#, Friday], 
        DayMatchQ[#, "MonthLastDay"]]]& ]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874839190290841*^9},
 CellLabel->"Out[740]=",
 CellID->89509286,ExpressionUUID->"d9bc5021-bd4d-4357-855f-b84e47a1ced3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"hardDateQuestion", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748391943582954`*^9, 3.8748391952636547`*^9}},
 CellLabel->"In[741]:=",
 CellID->31893901,ExpressionUUID->"ce2c4aa2-19c6-466b-831e-8c8201563688"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 7784, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 7784, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 14, 47.7893499`9.43190598362406}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 7784}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How days between Wednesday 4 April 1906 and Tuesday 27 March 2046 \
are either a Monday on the first day of the month or a Wednesday or a Friday \
on the last day of the month?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How days between Wednesday 4 April 1906 and Tuesday 27 March \
2046 are either a Monday on the first day of the month or a Wednesday or a \
Friday on the last day of the month?"|>, "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How days between Wednesday 4 April 1906 and Tuesday 27 March \
2046 are either a Monday on the first day of the month or a Wednesday or a \
Friday on the last day of the month?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{7784 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{7784 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{7784 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{7784 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{7784 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{741., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How days between Wednesday 4 April 1906 and Tuesday 27 March 2046 are \
either a Monday on the first day of the month or a Wednesday or a Friday on \
the last day of the month?"], 
   AssessmentFunction[{7784 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874839222255123*^9},
 CellLabel->"Out[741]=",
 CellID->521757920,ExpressionUUID->"5d786921-e0bf-4c01-8c4d-dc23687712a1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Wednesday 4 April 1906\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Tuesday 27 March 2046\>\"", "]"}]}], 
    "}"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Monday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "Wednesday"}], "]"}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Friday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthLastDay\>\""}], "]"}]}], ")"}]}], "&"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.874839232576812*^9, 3.874839253505467*^9}},
 CellLabel->"In[742]:=",
 CellID->87159538,ExpressionUUID->"404ac168-3cba-47fd-b11c-c4ab687529c5"],

Cell[BoxData["7784"], "Output",
 CellChangeTimes->{3.8748392824542046`*^9},
 CellLabel->"Out[742]=",
 CellID->1246925,ExpressionUUID->"20124dbf-5e11-4f18-9d6b-c35e56db1a70"]
}, Open  ]],

Cell["Deploy the hard question to the cloud:", "Text",
 CellChangeTimes->{{3.8748417869992723`*^9, 3.8748417927333007`*^9}},
 CellID->176795912,ExpressionUUID->"f0e2bd37-d961-4b93-afdf-c26496c46998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"deployedHardQuestion", "=", 
  RowBox[{
   RowBox[{"ResourceFunction", "[", "\"\<QuestionDeploy\>\"", "]"}], "[", 
   RowBox[{"QuestionGenerator", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"Sort", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"DateObject", "[", 
           RowBox[{"#", ",", "\"\<Day\>\""}], "]"}], "&"}], "/@", 
         RowBox[{"RandomDate", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"DateObject", "[", 
              RowBox[{"{", "1900", "}"}], "]"}], ",", 
             RowBox[{"DateObject", "[", 
              RowBox[{"{", "2100", "}"}], "]"}]}], "}"}], ",", "2"}], "]"}]}],
         "]"}]}], "}"}], ",", 
     RowBox[{
      RowBox[{"QuestionObject", "[", 
       RowBox[{
        RowBox[{"\"\<How days between \>\"", "<>", 
         RowBox[{"DateString", "[", 
          RowBox[{
           RowBox[{"First", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
         "<>", "\"\< and \>\"", "<>", 
         RowBox[{"DateString", "[", 
          RowBox[{
           RowBox[{"Last", "[", "#n", "]"}], ",", "\"\<Date\>\""}], "]"}], 
         "<>", "\"\< are either a Monday on the first day of the month or a \
Wednesday or a Friday on the last day of the month?\>\""}], ",", 
        RowBox[{"AssessmentFunction", "[", 
         RowBox[{"DateCountsBy", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"First", "[", "#n", "]"}], ",", 
             RowBox[{"Last", "[", "#n", "]"}]}], "}"}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"DayMatchQ", "[", 
                RowBox[{"#", ",", "Monday"}], "]"}], "\[And]", 
               RowBox[{"DayMatchQ", "[", 
                RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], ")"}], 
             "\[Or]", 
             RowBox[{"(", 
              RowBox[{"DayMatchQ", "[", 
               RowBox[{"#", ",", "Wednesday"}], "]"}], ")"}], "\[Or]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"DayMatchQ", "[", 
                RowBox[{"#", ",", "Friday"}], "]"}], "\[And]", 
               RowBox[{"DayMatchQ", "[", 
                RowBox[{"#", ",", "\"\<MonthLastDay\>\""}], "]"}]}], ")"}]}], 
            "&"}]}], "]"}], "]"}]}], "]"}], "&"}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748417941496706`*^9, 3.874841809223674*^9}},
 CellLabel->"In[849]:=",
 CellID->19194800,ExpressionUUID->"95b6ef5b-d54a-44f2-b498-1482c384fc82"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"QuestionGenerator\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{
      TagBox["QuestionGenerator",
       "SummaryHead"], "[", 
      DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
       "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               GridBox[{{
                  RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Cloud Deployed\"", "SummaryItem"]}], 
                  "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"QuestionID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               GridBox[{{
                  RowBox[{
                    TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Cloud Deployed\"", "SummaryItem"]}], 
                  "\[SpanFromLeft]"}, {
                  RowBox[{
                    TagBox["\"QuestionID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["None", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]},
        "SummaryPanel"],
       DynamicModuleValues:>{}], "]"}],
     QuestionGenerator[{
       CloudObject[
       "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], None}],
     Editable->False,
     SelectWithContents->True,
     Selectable->False]}], ",", 
   RowBox[{"\<\"CloudObject\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{"CloudObject", "[", 
      TemplateBox[{
       "\"https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374\"", 
        "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"},
       "HyperlinkURL"], "]"}],
     CloudObject[
     "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-f2eb00e10374"],
     SelectWithContents->True]}], ",", 
   RowBox[{"\<\"Website\"\>", "\[Rule]", 
    InterpretationBox[
     RowBox[{"CloudObject", "[", 
      TemplateBox[{
       "\"https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374/index.nb\"", 
        "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374/index.nb"},
       "HyperlinkURL"], "]"}],
     CloudObject[
     "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-f2eb00e10374/\
index.nb"],
     SelectWithContents->True]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.874841813209716*^9},
 CellLabel->"Out[849]=",
 CellID->499115748,ExpressionUUID->"22bd6b86-7e28-41d9-97c1-62be098c35f6"]
}, Open  ]],

Cell["Get the deployed generator:", "Text",
 CellChangeTimes->{{3.8748418294045787`*^9, 3.8748418407794476`*^9}},
 CellID->361474820,ExpressionUUID->"6153f3e0-6cf2-4920-a75f-d1f96773e97d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gen", "=", 
  RowBox[{
  "deployedHardQuestion", "[", "\"\<QuestionGenerator\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.874841841339447*^9, 3.8748418470483465`*^9}},
 CellLabel->"In[850]:=",
 CellID->60754022,ExpressionUUID->"e24e6c22-7ed3-4bcd-83a6-a9bc8e26d253"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Cloud Deployed\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"QuestionID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"Cloud Deployed\"", "SummaryItem"]}], 
               "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"QuestionID: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["None", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
    CloudObject[
    "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-f2eb00e10374"], 
    None}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748418473680058`*^9},
 CellLabel->"Out[850]=",
 CellID->553535299,ExpressionUUID->"52fc61cb-bcc2-4ceb-8f8a-01c542a7404b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"question", "=", 
  RowBox[{"gen", "[", "]"}]}]], "Input",
 CellChangeTimes->{{3.8748418494440155`*^9, 3.874841851901579*^9}},
 CellLabel->"In[852]:=",
 CellID->55796540,ExpressionUUID->"83243629-0615-4aaf-978e-da53fa6b4e29"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1305, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[{<|
     "QuestionID" -> "bd3f5410-fb28-481d-bbf8-a492a148c735", "Score" -> 1, 
      "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
      "GivenAnswer" -> 1305, "Explanation" -> None, "Timestamp" -> 
      DateObject[{2022, 10, 15, 12, 59, 23.353552`8.120927927603772}, 
        "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
      "AnswerComparisonMethod" -> "Number"|>}, <|
    "AllowedSymbols" -> {
      AssessmentFunction, List, Rule, CountsBy, Function, Or, And, DayMatchQ, 
       Slot, Monday, Wednesday, Friday, DayRange, True, Association, 
       Automatic}, "ScoreSummary" -> 1.|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = None, 
   QuestionFramework`Private`submittedvalue$$ = 1305}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How days between Friday 17 December 1920 and Monday 12 June 1944 are \
either a Monday on the first day of the month or a Wednesday or a Friday on \
the last day of the month?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How days between Friday 17 December 1920 and Monday 12 June \
1944 are either a Monday on the first day of the month or a Wednesday or a \
Friday on the last day of the month?"|>, "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How days between Friday 17 December 1920 and Monday 12 June \
1944 are either a Monday on the first day of the month or a Wednesday or a \
Friday on the last day of the month?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{
             CloudObject[
             "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], "bd3f5410-fb28-481d-bbf8-a492a148c735"}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{
             CloudObject[
             "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], "bd3f5410-fb28-481d-bbf8-a492a148c735"}]]]}, {
         If[
          Or[AssessmentFunction[{
              CloudObject[
              "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], "bd3f5410-fb28-481d-bbf8-a492a148c735"}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{
                CloudObject[
                "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], "bd3f5410-fb28-481d-bbf8-a492a148c735"}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{
                CloudObject[
                "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-\
f2eb00e10374"], "bd3f5410-fb28-481d-bbf8-a492a148c735"}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{739., {44.433593799266966`, 48.566406200733034`}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   "ShortAnswer", <|
    "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
     "How days between Friday 17 December 1920 and Monday 12 June 1944 are \
either a Monday on the first day of the month or a Wednesday or a Friday on \
the last day of the month?"|>], 
   AssessmentFunction[{
     CloudObject[
     "https://www.wolframcloud.com/obj/6013c119-939e-4944-b678-f2eb00e10374"],
      "bd3f5410-fb28-481d-bbf8-a492a148c735"}], "QuestionID" -> 
   "bd3f5410-fb28-481d-bbf8-a492a148c735"]]], "Output",
 CellChangeTimes->{{3.8748418731114154`*^9, 3.8748418872825165`*^9}},
 CellLabel->"Out[852]=",
 CellID->1656595,ExpressionUUID->"a4ca5d4e-a4ea-40fb-9433-296b703717de"]
}, Open  ]],

Cell["Find the answer with my DateCountsBy function:", "CodeText",
 CellChangeTimes->{{3.874841928037039*^9, 3.874841939588521*^9}},
 CellID->413689066,ExpressionUUID->"ee31627e-0c37-4bce-a451-3c482ecff224"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateCountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"DateObject", "[", "\"\<Friday 17 December 1920\>\"", "]"}], ",", 
     RowBox[{"DateObject", "[", "\"\<Monday 12 June 1944\>\"", "]"}]}], "}"}],
    ",", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Monday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthFirstDay\>\""}], "]"}]}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{"DayMatchQ", "[", 
       RowBox[{"#", ",", "Wednesday"}], "]"}], ")"}], "\[Or]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "Friday"}], "]"}], "\[And]", 
       RowBox[{"DayMatchQ", "[", 
        RowBox[{"#", ",", "\"\<MonthLastDay\>\""}], "]"}]}], ")"}]}], "&"}]}],
   "]"}]], "Input",
 CellChangeTimes->{{3.8748419127411227`*^9, 3.874841950967553*^9}},
 CellLabel->"In[853]:=",
 CellID->17529743,ExpressionUUID->"709bc5a1-e991-4a8e-be9e-5417711c77e2"],

Cell[BoxData["1305"], "Output",
 CellChangeTimes->{3.87484195667261*^9},
 CellLabel->"Out[853]=",
 CellID->30961503,ExpressionUUID->"5504331d-c8a2-4800-8cb5-183a4a1a995b"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Combinatorics Questions", "Section",
 CellChangeTimes->{{3.874839730839264*^9, 3.8748397339259167`*^9}},
 CellID->280488966,ExpressionUUID->"f2da6292-f6e5-4466-be9c-cd8f5f3f82d2"],

Cell[TextData[{
 "I can create 12 questions with the ",
 ButtonBox["twelve-fold way",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://en.wikipedia.org/wiki/Twelvefold_way"], None},
  ButtonNote->"https://en.wikipedia.org/wiki/Twelvefold_way"],
 ":"
}], "Text",
 CellChangeTimes->{{3.8748397357926083`*^9, 3.8748397583288946`*^9}, {
  3.874844525911858*^9, 3.874844529563386*^9}},
 CellID->220209319,ExpressionUUID->"ae3b8453-7cfb-4d91-9905-8e526790006b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PacletInstall", "[", "\"\<PeterBurbery/RecreationalMathematics\>\"",
   "]"}]], "Input",
 CellChangeTimes->{{3.874839764087613*^9, 3.874839764088595*^9}},
 CellLabel->"In[743]:=",
 CellID->459594605,ExpressionUUID->"f81acf98-e0ba-4d04-9613-8e663a888925"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PacletObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"PeterBurbery/RecreationalMathematics\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.24.0\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.0416667], {
               FaceForm[{
                 RGBColor[0.961, 0.961, 0.961], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.5454, 
                22.5972}, {7.5464, 20.5002}, {2.5454, 18.4022}, {2.5454, 
                12.5982}, {2.5454, 12.5972}, {2.5454, 6.7952}, {7.5454, 
                4.6962}, {7.546, 4.6972}, {12.5454, 2.5992}, {17.5454, 
                4.6972}, {17.5454, 4.6962}, {22.5454, 6.7952}, {22.5454, 
                12.5972}, {22.5454, 12.5982}, {22.5454, 18.4022}}}]}, {
               FaceForm[{
                 RGBColor[0.898, 0.898, 0.898], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 8.3359}, {17.125, 
                14.0569}, {16.875, 14.0569}, {16.875, 8.3359}, {17., 
                8.1169}, {21.952, 6.0399}, {22.049, 6.2709}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 8.3359}, {7.125, 14.0569}, {
                6.875, 14.0569}, {6.875, 8.3359}, {1.952, 6.2709}, {2.048, 
                6.0399}, {7., 8.1169}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8745, 6.2383}, {6.9515, 4.1733}, {7.0475, 
                3.9423}, {11.9995, 6.0193}, {16.9515, 3.9423}, {17.0475, 
                4.1733}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{17.125, 14.1392}, {17.125, 
                19.8602}, {16.875, 19.8602}, {16.875, 14.1392}, {17., 
                13.9202}, {21.952, 11.8432}, {22.049, 12.0742}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}}}, {{{7.125, 14.1392}, {7.125, 19.8602}, {
                6.875, 19.8602}, {6.875, 14.1392}, {1.952, 12.0742}, {2.048, 
                11.8432}, {7., 13.9202}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.8746, 21.3633}, {11.8746, 18.3563}, {
                11.9996, 18.3033}, {12.1246, 18.3563}, {12.1246, 21.3633}, {
                11.9996, 21.4153}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}}}, {{{8.292, 19.8594}, {12., 21.4154}, {15.707, 
                 19.8594}, {12., 18.3034}}, {{17.5, 19.5274}, {17.5, 
                 20.1924}, {12., 22.5004}, {6.5, 20.1924}, {6.5, 19.5284}, {
                 12., 17.2194}, {12., 17.2194}, {15.7, 18.7724}, {17.5, 
                 19.5274}}}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{11.5, 8.5156}, {11.5, 6.4876}, {11.5, 
                5.4026}, {12.5, 5.8226}, {12.5, 8.5156}, {12., 8.3056}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{21.5, 6.4873}, {17.5, 4.8083}, {17.5, 
                 9.5283}, {21.5, 11.2073}}, {{21.5, 12.7113}, {21.5, 
                 12.2913}, {17., 10.4033}, {16.5, 10.6133}, {16.5, 10.1943}, {
                 15.707, 9.8613}, {16.5, 9.5283}, {16.5, 4.8083}, {16.5, 
                 4.8093}, {16.5, 4.3903}, {15.707, 4.0573}, {17., 3.5143}, {
                 22.5, 5.8223}, {22.5, 12.2913}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{6.5, 4.8086}, {2.5, 6.4876}, {2.5, 
                 11.2066}, {6.5, 9.5286}}, {{7.5, 9.1096}, {7.5, 9.1096}, {
                 7.5, 9.5286}, {8.292, 9.8616}, {7.5, 10.1936}, {7.5, 
                 10.6136}, {7., 10.4036}, {2.5, 12.2906}, {2.5, 12.7106}, {
                 1.5, 12.2916}, {1.5, 5.8226}, {7., 3.5146}, {8.293, 
                 4.0576}, {7.5, 4.3906}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{3.2925, 17.7622}, {7.0005, 
                 19.3182}, {10.7075, 17.7622}, {7.0005, 16.2062}}, {{6.5005, 
                 10.6122}, {2.5005, 12.2912}, {2.5005, 17.0102}, {6.5005, 
                 15.3322}}, {{7.5005, 10.1932}, {7.5005, 10.6122}, {7.5005, 
                 15.3322}, {12.0005, 17.2202}, {12.5005, 17.0102}, {12.5005, 
                 18.0952}, {7.0005, 20.4032}, {1.5005, 18.0952}, {1.5005, 
                 11.6262}, {7.0005, 9.3182}, {8.2935, 9.8612}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{21.5, 12.291}, {17.5, 10.612}, {
                 17.5, 15.332}, {21.5, 17.01}}, {{13.293, 17.762}, {17., 
                 19.318}, {20.708, 17.762}, {17., 16.207}}, {{17., 20.403}, {
                 11.5, 18.095}, {11.5, 17.01}, {12., 17.22}, {16.5, 15.332}, {
                 16.5, 10.612}, {16.5, 10.194}, {15.706, 9.861}, {17., 
                 9.318}, {22.5, 11.626}, {22.5, 18.095}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}}}, {{{16.4995, 4.3906}, {12.4995, 
                 2.7116}, {12.4995, 7.4316}, {16.4995, 9.1096}}, {{11.4995, 
                 2.7116}, {7.4995, 4.3906}, {7.4995, 9.1096}, {11.4995, 
                 7.4316}}, {{16.4995, 10.6136}, {16.4995, 10.1946}, {11.9995, 
                 8.3056}, {8.2915, 9.8616}, {7.4995, 10.1936}, {7.4995, 
                 10.6146}, {6.4995, 10.1946}, {6.4995, 3.7256}, {11.9995, 
                 1.4176}, {17.4995, 3.7256}, {17.4995, 10.1946}}}]}, {
               FaceForm[{
                 RGBColor[0.965, 0.765, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}}}, {{{12., 17.6616}, {16.945, 15.5856}, {16.945, 
                9.9376}, {12., 7.8636}, {7.055, 9.9376}, {7.055, 
                15.5856}}}]}, {
               FaceForm[{
                 RGBColor[0.91, 0.655, 0.635], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.125, 
                17.7627}, {11.875, 17.7627}, {11.875, 12.0407}, {6.952, 
                9.9757}, {7.048, 9.7447}, {12., 11.8227}, {16.952, 9.7447}, {
                17.048, 9.9757}, {12.125, 12.0407}}}]}, {
               FaceForm[{
                 RGBColor[0.867, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {{{12.5, 8.5146}, {12.5, 13.2336}, {16.5, 14.9116}, {
                 16.5, 10.1926}}, {{7.5, 14.9116}, {11.5, 13.2336}, {11.5, 
                 8.5146}, {7.5, 10.1926}}, {{15.708, 15.6636}, {12., 
                 14.1086}, {8.292, 15.6636}, {12., 17.2206}}, {{12., 
                 18.3046}, {6.5, 15.9956}, {6.5, 9.5286}, {12., 7.2206}, {
                 17.5, 9.5286}, {17.5, 15.9956}}}]}}, AspectRatio -> 
             Automatic, ImageSize -> {24., 24.}, 
             PlotRange -> {{0., 24.}, {0., 24.}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Name: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"PeterBurbery/RecreationalMathematics\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Version: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"1.24.0\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Location: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                 "\"C:\\\\Users\\\\peter\\\\AppData\\\\Roaming\\\\Mathematica\
\\\\Paclets\\\\Repository\\\\PeterBurbery__RecreationalMathematics-1.24.0\"", 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Description: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                  "\"This paclet is for recreational mathematics and math \
puzzles\"", Short], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PacletObject[<|
   "Name" -> "PeterBurbery/RecreationalMathematics", "Description" -> 
    "This paclet is for recreational mathematics and math puzzles", "Creator" -> 
    "Peter Cullen Burbery", "License" -> "MIT", "PublisherID" -> 
    "PeterBurbery", "Version" -> "1.24.0", "WolframVersion" -> "13.1+", 
    "Extensions" -> {{
      "Kernel", "Root" -> "Kernel", 
       "Context" -> {{
         "PeterBurbery`RecreationalMathematics`", 
          "RecreationalMathematics.wl"}}, 
       "Symbols" -> {
        "PeterBurbery`RecreationalMathematics`AllBalancedGroupingSymbols", 
         "PeterBurbery`RecreationalMathematics`BalancedTernary", 
         "PeterBurbery`RecreationalMathematics`CatalanUnrank", 
         "PeterBurbery`RecreationalMathematics`CombinatoricsDataset", 
         "PeterBurbery`RecreationalMathematics`ConicProperties", 
         "PeterBurbery`RecreationalMathematics`Derangements", 
         "PeterBurbery`RecreationalMathematics`DiagonalWalkPlot", 
         "PeterBurbery`RecreationalMathematics`DyckPaths", 
         "PeterBurbery`RecreationalMathematics`EulerLinePoints", 
         "PeterBurbery`RecreationalMathematics`EvenPermutations", 
         "PeterBurbery`RecreationalMathematics`\
FindCombinatoricsWordProblemSolutions", 
         "PeterBurbery`RecreationalMathematics`\
FindRegularPolygonTriangulations", 
         "PeterBurbery`RecreationalMathematics`FivePointConic", 
         "PeterBurbery`RecreationalMathematics`FullBinaryTrees", 
         "PeterBurbery`RecreationalMathematics`\
GenerateCombinatoricsWordProblems", 
         "PeterBurbery`RecreationalMathematics`IntegralNumberQ", 
         "PeterBurbery`RecreationalMathematics`Multichoose", 
         "PeterBurbery`RecreationalMathematics`NinePointCubic", 
         "PeterBurbery`RecreationalMathematics`NinePointQuadric", 
         "PeterBurbery`RecreationalMathematics`ParenthesizedExpressions", 
         "PeterBurbery`RecreationalMathematics`PermutationGraph"}}, {
      "Documentation", "Language" -> "English"}}, "Location" -> 
    "C:\\Users\\peter\\AppData\\Roaming\\Mathematica\\Paclets\\Repository\\\
PeterBurbery__RecreationalMathematics-1.24.0"|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748397731285267`*^9},
 CellLabel->"Out[743]=",
 CellID->523861758,ExpressionUUID->"f16fe40b-b366-44e0-95bf-8aa8d1859b0f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Needs", "[", "\"\<PeterBurbery`RecreationalMathematics`\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.874839767240081*^9, 3.874839767243082*^9}},
 CellLabel->"In[744]:=",
 CellID->29064933,ExpressionUUID->"c2697d7d-257d-40bb-a05d-60205eca252f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CombinatoricsDataset", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<k\>\"", "->", "13"}], ",", 
    RowBox[{"\"\<n\>\"", "->", "23"}], ",", 
    RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
    RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
    RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
    RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.874839780743181*^9, 3.874839795835473*^9}},
 CellLabel->"In[746]:=",
 CellID->217847407,ExpressionUUID->"bd7e76ee-59cf-416c-b3b2-6c101e320851"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "Distinct f" -> <|
        "any f" -> <|
          "question" -> 
           "How many ways can you place 23 marked\n   marbles into 13 marked \
urns\n   with no rules on placement?", "solution" -> 
           41753905413413116367045797|>, 
         "injective f" -> <|
          "question" -> 
           "How many ways can you place 23 marked marbles\n   into 13 marked \
urns\n   with at most one marble per urn?", "solution" -> 0|>, 
         "surjective f" -> <|
          "question" -> 
           "How many ways can you place 23 marked marbles\n   into 13 marked \
urns\n   with at least one marble per urn?", "solution" -> 
           2498794849923090630912000|>|>, 
       "N orbits" -> <|
        "any f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked \n  marbles into 13 \
marked urns\n   with no rules on placement?", "solution" -> 834451800|>, 
         "injective f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked marbles \n  into 13 \
marked urns\n   with at most one marble per urn?", "solution" -> 0|>, 
         "surjective f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked marbles \n  into 13 \
marked urns\n   with at least one marble per urn?", "solution" -> 646646|>|>, 
       "K orbits" -> <|
        "any f" -> <|
          "question" -> 
           "How many ways can you place 23 marked\n   marbles into marked 13 \
urns\n   with no rules on placement?", "solution" -> 44074082550176545|>, 
         "injective f" -> <|
          "question" -> 
           "How many ways can you place 23 marked marbles\n   into 13 \
unmarked urns\n   with at most one marble per urn?", "solution" -> 0|>, 
         "surjective f" -> <|
          "question" -> 
           "How many ways can you place 23 marked marbles\n   into 13 \
unmarked urns\n   with at least one marble per urn?", "solution" -> 
           401282560341390|>|>, 
       "N K orbits" -> <|
        "any f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked \n  marbles into 13 \
unmarked urns\n   with no rules on placement?", "solution" -> 1158|>, 
         "injective f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked marbles\n   into 13 \
unmarked urns\n   with at most one marble per urn?", "solution" -> 0|>, 
         "surjective f" -> <|
          "question" -> 
           "How many ways can you place 23 unmarked marbles\n   into 13 \
unmarked urns\n   with at least one marble per urn?", "solution" -> 
           1158|>|>|>, "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 
        1, {All, "any f"} -> <|{All, "any f", "question"} -> 
          1, {All, "any f", "solution"} -> 1|>, {
         All, "injective f"} -> <|{All, "injective f", "question"} -> 
          1, {All, "injective f", "solution"} -> 1|>, {
         All, "surjective f"} -> <|{All, "surjective f", "question"} -> 
          1, {All, "surjective f", "solution"} -> 1|>|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[112.00000000000001`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "any f" -> TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> 
                 TypeSystem`PackageScope`AtomShape[448.00000000000006`], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "any f"}], "injective f" -> 
             TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> TypeSystem`PackageScope`AtomShape[537.6], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "injective f"}], "surjective f" -> 
             TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> TypeSystem`PackageScope`AtomShape[537.6], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "surjective f"}]|>], 
           DirectedInfinity[1], 3, {All}]]], 4, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"any f", "injective f", "surjective f"}, {
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}]}], 4], "Meta" -> <||>, "RowTarget" -> 
     20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, 
          TypeSystem`PackageScope`KeyDummy[1]} -> 
        1, {All, "any f"} -> <|{All, "any f", "question"} -> 
          1, {All, "any f", "solution"} -> 1|>, {
         All, "injective f"} -> <|{All, "injective f", "question"} -> 
          1, {All, "injective f", "solution"} -> 1|>, {
         All, "surjective f"} -> <|{All, "surjective f", "question"} -> 
          1, {All, "surjective f", "solution"} -> 1|>|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`KeyValueShape[
          TypeSystem`PackageScope`AtomShape[112.00000000000001`], 
          TypeSystem`PackageScope`Limited[
           
           TypeSystem`PackageScope`RowShape[<|
            "any f" -> TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> 
                 TypeSystem`PackageScope`AtomShape[448.00000000000006`], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "any f"}], "injective f" -> 
             TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> TypeSystem`PackageScope`AtomShape[537.6], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "injective f"}], "surjective f" -> 
             TypeSystem`PackageScope`Limited[
               
               TypeSystem`PackageScope`RowShape[<|
                "question" -> TypeSystem`PackageScope`AtomShape[537.6], 
                 "solution" -> TypeSystem`PackageScope`AtomShape[34]|>], 
               DirectedInfinity[1], 2, {All, "surjective f"}]|>], 
           DirectedInfinity[1], 3, {All}]]], 4, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[String], 
       TypeSystem`Struct[{"any f", "injective f", "surjective f"}, {
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}], 
         TypeSystem`Struct[{"question", "solution"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Atom[Integer]}]}], 4], "Path" -> {}, 
     "DisplayedRowCount" -> 4, "DisplayedColumnCount" -> 3, "DataRowCount" -> 
     4, "DataColumnCount" -> 3, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               Mouseover[
                
                Graphics[{}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]], 
                Graphics[{
                  GrayLevel[0.6], 
                  
                  Polygon[{{2^Rational[-1, 2], -2^Rational[-1, 2]}, {
                    2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], 2^
                    Rational[-1, 2]}, {-2^Rational[-1, 2], -2^
                    Rational[-1, 2]}}]}, ImageSize -> 6, BaselinePosition -> 
                 Scaled[-0.15]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, Keys}, "KeyDummy", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["any f", 
                  Style[
                  "any f", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "any f"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "any f"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["injective f", 
                  Style[
                  "injective f", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "injective f"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "injective f"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], SpanFromLeft, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["surjective f", 
                  Style[
                  "surjective f", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "surjective f"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "surjective f"}, "ColumnHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Center, Baseline}], 
            SpanFromLeft}, {SpanFromAbove, 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["question", 
                  Style[
                  "question", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "any f", "question"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "any f", "question"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["solution", 
                  Style[
                  "solution", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "any f", "solution"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "any f", "solution"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["question", 
                  Style[
                  "question", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "injective f", "question"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "injective f", "question"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["solution", 
                  Style[
                  "solution", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "injective f", "solution"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "injective f", "solution"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["question", 
                  Style[
                  "question", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "surjective f", "question"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "surjective f", "question"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["solution", 
                  Style[
                  "solution", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "surjective f", "solution"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "surjective f", "solution"}, "ColumnHeader", True], 
               "Mouse"], ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Distinct f", 
                  Style[
                  "Distinct f", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["Distinct f"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked\n   marbles into 13 \
marked urns\n   with no rules on placement?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["any f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{448.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41753905413413116367045797"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["any f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked marbles\n   into 13 \
marked urns\n   with at most one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["injective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["injective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked marbles\n   into 13 \
marked urns\n   with at least one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["surjective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2498794849923090630912000"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["Distinct f"], 
                 Key["surjective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["N orbits", 
                  Style[
                  "N orbits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["N orbits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked \n  marbles into 13 \
marked urns\n   with no rules on placement?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["any f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{448.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["834451800"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["any f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked marbles \n  into 13 \
marked urns\n   with at most one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["injective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["injective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked marbles \n  into 13 \
marked urns\n   with at least one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["surjective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["646646"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N orbits"], 
                 Key["surjective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["K orbits", 
                  Style[
                  "K orbits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["K orbits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked\n   marbles into marked \
13 urns\n   with no rules on placement?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["any f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{448.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["44074082550176545"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["any f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked marbles\n   into 13 \
unmarked urns\n   with at most one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["injective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["injective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked marbles\n   into 13 \
unmarked urns\n   with at least one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["surjective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["401282560341390"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["K orbits"], 
                 Key["surjective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["N K orbits", 
                  Style[
                  "N K orbits", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["N K orbits"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{112.00000000000001`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked \n  marbles into 13 \
unmarked urns\n   with no rules on placement?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["any f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{448.00000000000006`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1158"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["any f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked marbles\n   into 13 \
unmarked urns\n   with at most one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["injective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["injective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 unmarked marbles\n   into 13 \
unmarked urns\n   with at least one marble per urn?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["surjective f"], 
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{537.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1158"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["N K orbits"], 
                 Key["surjective f"], 
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1795., {174.63403328722342`, 180.36596671277658`}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1795., {174.63403328722342`, 180.36596671277658`}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8748397920438557`*^9, 3.874839796222454*^9}},
 CellLabel->"Out[746]=",
 CellID->339700835,ExpressionUUID->"2689b31f-1a18-4b9d-80b9-e57dc0b20e22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CombinatoricsDataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<k\>\"", "->", "13"}], ",", 
     RowBox[{"\"\<n\>\"", "->", "23"}], ",", 
     RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
     RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
     RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
     RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], "]"}], 
  "[", 
  RowBox[{"1", ",", "1"}], "]"}]], "Input",
 CellChangeTimes->{{3.874839780743181*^9, 3.874839812494874*^9}},
 CellLabel->"In[747]:=",
 CellID->346323831,ExpressionUUID->"450ff0c3-015e-4eff-be5a-1c8ed84f25db"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      "question" -> 
       "How many ways can you place 23 marked\n   marbles into 13 marked urns\
\n   with no rules on placement?", "solution" -> 41753905413413116367045797|>,
      "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"question"} -> 
        TypeSystem`PackageScope`AtomShape[414.40000000000003`], {"solution"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "InitialType" -> 
     TypeSystem`Struct[{"question", "solution"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer]}], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`DocumentShape[<|{"question"} -> 
        TypeSystem`PackageScope`AtomShape[414.40000000000003`], {"solution"} -> 
        TypeSystem`PackageScope`AtomShape[34]|>, 1], "Type" -> 
     TypeSystem`Struct[{"question", "solution"}, {
        TypeSystem`Atom[String], 
        TypeSystem`Atom[Integer]}], "Path" -> {}, "DisplayedRowCount" -> 20, 
     "DisplayedColumnCount" -> 10, "DataRowCount" -> 2, "DataColumnCount" -> 
     1, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["question", 
                  Style[
                  "question", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["question"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["question"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
              "How many ways can you place 23 marked\n   marbles into 13 \
marked urns\n   with no rules on placement?", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["question"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["solution", 
                  Style[
                  "solution", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key["solution"]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["solution"]}, "RowHeader", False], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["41753905413413116367045797"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key["solution"]}, "Item", False], "Mouse"], 
              ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{484., {54.63403328722343, 60.36596671277657}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{484., {54.63403328722343, 60.36596671277657}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748398128954678`*^9},
 CellLabel->"Out[747]=",
 CellID->53003802,ExpressionUUID->"78f9bffc-079e-4d5b-9bf0-0421837b76ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"CombinatoricsDataset", "[", 
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<k\>\"", "->", "13"}], ",", 
     RowBox[{"\"\<n\>\"", "->", "23"}], ",", 
     RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
     RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
     RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
     RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], "]"}], 
  "[", 
  RowBox[{"1", ",", "1", ",", "\"\<question\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.874839780743181*^9, 3.8748398187972107`*^9}},
 CellLabel->"In[748]:=",
 CellID->44875747,ExpressionUUID->"5b7e67da-5c19-4a95-846b-177ed3784058"],

Cell[BoxData["\<\"How many ways can you place 23 marked\\n   marbles into 13 \
marked urns\\n   with no rules on placement?\"\>"], "Output",
 CellChangeTimes->{3.874839819206337*^9},
 CellLabel->"Out[748]=",
 CellID->48138080,ExpressionUUID->"1e0c6046-1c21-40d3-b9b4-97ef4b8c7a26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctAnyF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"1", ",", "1", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"1", ",", "1", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748398326394215`*^9, 3.8748399174790354`*^9}, {
  3.8748400653494387`*^9, 3.874840066853631*^9}, {3.874841072004304*^9, 
  3.874841075836406*^9}},
 CellID->582194507,ExpressionUUID->"a97976e6-c306-4717-90ed-089b6ae181fa"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 1, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 1, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8748399191028624`*^9, 3.874840067150549*^9},
 CellLabel->"Out[757]=",
 CellID->198187064,ExpressionUUID->"2537b46a-fe0a-4a52-965a-390bc928b341"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctAnyF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748399220984974`*^9, 3.8748399230409374`*^9}},
 CellLabel->"In[758]:=",
 CellID->320145710,ExpressionUUID->"11a59795-630d-4f05-aa9b-84329f91b416"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 
   1925904380037276068854119113162752, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1925904380037276068854119113162752, "Explanation" -> 
     None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 28, 13.4586645`8.88157692079238}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 
   1925904380037276068854119113162752}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 23 marked\n   marbles into 28 marked \
urns\n   with no rules on placement?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 23 marked\n   marbles into 28 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 23 marked\n   marbles into 28 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            1925904380037276068854119113162752 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            1925904380037276068854119113162752 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{
             1925904380037276068854119113162752 -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               1925904380037276068854119113162752 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               1925904380037276068854119113162752 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {66.43359379926696, 70.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 23 marked\n   marbles into 28 marked urns\n  \
 with no rules on placement?"], 
   AssessmentFunction[{
    1925904380037276068854119113162752 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.8748399233394585`*^9, 3.874840069336097*^9},
 CellLabel->"Out[758]=",
 CellID->271961015,ExpressionUUID->"76160f5a-25f9-4a64-b6e2-2abac544cf5c"]
}, Open  ]],

Cell["\<\
I can use the function I created FindCombinatoricsWordProblemSolutions:\
\>", "Text",
 CellChangeTimes->{{3.8748399541099095`*^9, 3.8748399683703957`*^9}},
 CellID->50015265,ExpressionUUID->"91bfc223-9159-4dfb-8af8-966ba3db1cc4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
  RowBox[{"23", ",", "28"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748399371195216`*^9, 3.87483994472766*^9}, {
  3.8748400799519787`*^9, 3.874840081357551*^9}},
 CellLabel->"In[760]:=",
 CellID->198389095,ExpressionUUID->"b1fa775a-c84d-4cb0-94fd-a09c582a9f90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1925904380037276068854119113162752", ",", "2540736205097615504179200000",
      ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"108043253365600", ",", "98280", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"44152005855084346", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1255", ",", "1", ",", "1255"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.874839945901846*^9, 3.874840088397025*^9},
 CellLabel->"Out[760]=",
 CellID->263618188,ExpressionUUID->"45299050-25f0-45a3-9a63-181e8b936139"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"23", ",", "28"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748399371195216`*^9, 3.874839948367888*^9}, {
  3.8748400830485077`*^9, 3.874840086726906*^9}},
 CellLabel->"In[759]:=",
 CellID->203453875,ExpressionUUID->"59badfae-4b6f-45b7-88b7-9b289ba58896"],

Cell[BoxData["1925904380037276068854119113162752"], "Output",
 CellChangeTimes->{3.874839948676938*^9, 3.8748400872896786`*^9},
 CellLabel->"Out[759]=",
 CellID->42214857,ExpressionUUID->"865ad722-060f-4797-9c0c-cfce8e8d1407"]
}, Open  ]],

Cell["Try another question:", "Text",
 CellChangeTimes->{{3.8748401013983865`*^9, 3.874840104612462*^9}},
 CellID->176124911,ExpressionUUID->"8ecee4d6-f995-4c4b-8d15-5a20c29e4f7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctAnyF", "[", "]"}]], "Input",
 CellLabel->"In[761]:=",
 CellID->15145336,ExpressionUUID->"13c70ae1-1716-4c39-9f3d-3e8087554c3a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1000000000000000000, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1000000000000000000, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 28, 59.0970327`9.524140503459302}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 1000000000000000000}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 18 marked\n   marbles into 10 marked \
urns\n   with no rules on placement?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 18 marked\n   marbles into 10 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 18 marked\n   marbles into 10 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 18 marked\n   marbles into 10 marked urns\n  \
 with no rules on placement?"], 
   AssessmentFunction[{1000000000000000000 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874840108585512*^9},
 CellLabel->"Out[761]=",
 CellID->1220852,ExpressionUUID->"df497aff-4a81-40aa-8217-1913698244f7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"18", ",", "10"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874840129825449*^9, 3.874840134810241*^9}},
 CellLabel->"In[762]:=",
 CellID->79405243,ExpressionUUID->"b992c46d-6ab3-4956-80b4-b971719dcc8c"],

Cell[BoxData["1000000000000000000"], "Output",
 CellChangeTimes->{3.8748401351138964`*^9},
 CellLabel->"Out[762]=",
 CellID->17582766,ExpressionUUID->"7563aca0-6ea2-40cc-b9fb-518b96ce361f"]
}, Open  ]],

Cell["\<\
I added two examples for each question for one where there were more marbles \
than urns and one for when there were more urns than marbles for the \
injective and surjective cases because many of the answers were 0 or 1 which \
is not very interesting.\
\>", "Text",
 CellChangeTimes->{{3.874841360883909*^9, 3.8748414207444897`*^9}},
 CellID->1467588,ExpressionUUID->"02f5842b-5687-43c1-af32-44f4e05bc2e0"],

Cell["\<\
I only included two subsections for Marked marbles and marked urns because \
the example above is the missing example and I don't want to repeat the \
information.\
\>", "Text",
 CellChangeTimes->{{3.8748414315967703`*^9, 3.874841469772803*^9}},
 CellID->129607409,ExpressionUUID->"5649a349-0286-464f-953b-43495fa34e0d"],

Cell[CellGroupData[{

Cell["Marked Marbles & Marked Urns", "Subsection",
 CellChangeTimes->{{3.874840246100719*^9, 3.8748402474737425`*^9}, {
  3.874840452978881*^9, 3.8748404682054987`*^9}},
 CellID->550014195,ExpressionUUID->"9a38ee7a-199a-4ca4-ab13-7222cf72e35c"],

Cell[CellGroupData[{

Cell["At most one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9},
 CellID->86746585,ExpressionUUID->"3f49e925-ef49-4457-9515-285a74b3973d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctInjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"1", ",", "2", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"1", ",", "2", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.874841078215827*^9, 3.8748410799924684`*^9}},
 CellID->553977139,ExpressionUUID->"45c74e7d-006f-46ad-bbd0-ec276b354f76"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 2, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 2, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840290383774*^9},
 CellLabel->"Out[763]=",
 CellID->402825059,ExpressionUUID->"95204877-400e-4b1c-96a4-a45c4a1c8d0c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}},
 CellLabel->"In[764]:=",
 CellID->70776183,ExpressionUUID->"82bba5ee-b54f-438f-9cf9-bcad735cdfdc"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 31, 48.8196294`9.441169336512129}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 29 marked marbles\n   into 22 marked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 29 marked marbles\n   into 22 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 29 marked marbles\n   into 22 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 29 marked marbles\n   into 22 marked urns\n  \
 with at most one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9},
 CellLabel->"Out[764]=",
 CellID->408608790,ExpressionUUID->"5c378c4d-3787-49e1-900f-7ac58abb7e48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"29", ",", "22"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}},
 CellLabel->"In[765]:=",
 CellID->17451888,ExpressionUUID->"40358473-71d8-482e-8200-00244540b7f4"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.874840305005082*^9},
 CellLabel->"Out[765]=",
 CellID->236834778,ExpressionUUID->"1248dd55-9bf7-41cc-8263-ea5a6872ba8f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840313542257*^9, 3.87484031874608*^9}},
 CellLabel->"In[767]:=",
 CellID->77651592,ExpressionUUID->"33c7db5b-814c-4b38-978b-df789b8d4d64"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 213127200, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 213127200, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 32, 14.8680796`8.92482982850908}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 213127200}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 6 marked marbles\n   into 27 marked urns\
\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 6 marked marbles\n   into 27 marked \
urns\n   with at most one marble per urn?"|>, "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 6 marked marbles\n   into 27 marked \
urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{213127200 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{213127200 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{213127200 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{213127200 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{213127200 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 6 marked marbles\n   into 27 marked urns\n   \
with at most one marble per urn?"], 
   AssessmentFunction[{213127200 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748403191583204`*^9, 3.8748403230975695`*^9}},
 CellLabel->"Out[767]=",
 CellID->148517924,ExpressionUUID->"ba6dda64-611b-495d-8f2a-dff6916083c3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"6", ",", "27"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748403288880005`*^9, 3.874840330823983*^9}},
 CellLabel->"In[768]:=",
 CellID->262272014,ExpressionUUID->"e447b27e-e68c-49e3-86bc-e1639146dac3"],

Cell[BoxData["213127200"], "Output",
 CellChangeTimes->{3.8748403314321823`*^9},
 CellLabel->"Out[768]=",
 CellID->79865338,ExpressionUUID->"6dbcf2fc-a279-48ce-8eb5-c318e4e3fea3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At least one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.874840342617344*^9, 3.8748403467831345`*^9}},
 CellID->1918117,ExpressionUUID->"e79de305-afc7-4e8b-b0bc-f9d782c2b2e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctSurjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"1", ",", "3", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"1", ",", "3", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840362994949*^9, 3.8748403701085033`*^9}, {
  3.8748410811174064`*^9, 3.874841082690734*^9}},
 CellID->258021181,ExpressionUUID->"aeef3980-d404-43ed-b339-c3158823e85e"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 3, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][1, 3, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840370651744*^9},
 CellLabel->"Out[769]=",
 CellID->393665868,ExpressionUUID->"a2ae0cd6-3944-4cd1-80d5-bbb928e31195"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403725883317`*^9, 3.874840379693527*^9}},
 CellLabel->"In[770]:=",
 CellID->13160346,ExpressionUUID->"1215d4e8-cc7e-4dde-8dca-8289db5157ce"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 33, 12.2619681`8.841135138387836}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 21 marked marbles\n   into 26 marked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 marked marbles\n   into 26 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 marked marbles\n   into 26 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 21 marked marbles\n   into 26 marked urns\n  \
 with at least one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.874840381116954*^9},
 CellLabel->"Out[770]=",
 CellID->99816033,ExpressionUUID->"7b333a14-483e-43c3-a327-963abb274de0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"21", ",", "26"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874840383709847*^9, 3.8748403883841443`*^9}},
 CellLabel->"In[771]:=",
 CellID->303322809,ExpressionUUID->"b9244e40-5c3a-44b2-9b49-c0b9610686f5"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8748403887247977`*^9},
 CellLabel->"Out[771]=",
 CellID->58440218,ExpressionUUID->"1b0acdfc-65d2-4b6d-96b9-bad645af0f57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionDistinctSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403951411285`*^9, 3.874840398351242*^9}},
 CellLabel->"In[774]:=",
 CellID->21770926,ExpressionUUID->"31f206ea-528d-4667-af58-a6bce58bac5b"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 
   25318834534115601022210867200000, QuestionFramework`Private`interpreter$$ =
    Identity, QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 25318834534115601022210867200000, "Explanation" -> None,
      "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 33, 38.9026621`9.342554206525458}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 
   25318834534115601022210867200000}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 27 marked marbles\n   into 21 marked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 27 marked marbles\n   into 21 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 27 marked marbles\n   into 21 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            25318834534115601022210867200000 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           
           AssessmentFunction[{
            25318834534115601022210867200000 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{
             25318834534115601022210867200000 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              
              AssessmentFunction[{
               25318834534115601022210867200000 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              
              AssessmentFunction[{
               25318834534115601022210867200000 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {66.43359379926696, 70.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 27 marked marbles\n   into 21 marked urns\n  \
 with at least one marble per urn?"], 
   AssessmentFunction[{
    25318834534115601022210867200000 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874840398661457*^9, 3.874840405837736*^9}},
 CellLabel->"Out[774]=",
 CellID->79487548,ExpressionUUID->"13f272e4-0398-4b7a-b2c0-b3da0226eaa5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"27", ",", "21"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748404121220484`*^9, 3.874840415043504*^9}},
 CellLabel->"In[775]:=",
 CellID->32658434,ExpressionUUID->"04f0c81a-1960-4816-883c-0aa136d8ecb8"],

Cell[BoxData["25318834534115601022210867200000"], "Output",
 CellChangeTimes->{3.8748404155990252`*^9},
 CellLabel->"Out[775]=",
 CellID->621088641,ExpressionUUID->"a21f0838-a41b-44d2-94f0-004babc90bd1"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["UnMarked Marbles & Marked Urns", "Subsection",
 CellChangeTimes->{{3.874840446729685*^9, 3.874840485012172*^9}},
 CellID->157816412,ExpressionUUID->"284d5c1c-3a95-4298-b48a-05e225a7b5e2"],

Cell[CellGroupData[{

Cell["No restrictions on the # of marbles placed in each urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9, {3.8748405180438557`*^9, 3.87484052887253*^9}},
 CellID->251236292,ExpressionUUID->"493bcc38-bfa6-4cf3-9c3c-926be9d96916"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsAnyF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"2", ",", "1", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"2", ",", "1", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.874840533724181*^9, 3.874840584000837*^9}, {3.874841084899743*^9, 
  3.8748410865558095`*^9}},
 CellID->79848108,ExpressionUUID->"ac57be3b-e0e8-4a3f-b95e-79c08ff04548"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 1, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 1, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.874840290383774*^9, {3.8748405700358543`*^9, 3.8748405844182124`*^9}},
 CellLabel->"Out[777]=",
 CellID->187249832,ExpressionUUID->"e30e0f03-da54-497d-af80-e6af197655e5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsAnyF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, {
  3.874840575892653*^9, 3.8748405886475945`*^9}},
 CellLabel->"In[778]:=",
 CellID->37338404,ExpressionUUID->"70310237-72b0-4741-b45f-504fe99101d1"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 66, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 66, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 36, 47.3516837`9.427910286937223}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 66}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 10 unmarked \n  marbles into 3 marked \
urns\n   with no rules on placement?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 10 unmarked \n  marbles into 3 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 10 unmarked \n  marbles into 3 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{66 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{66 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{66 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{66 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{66 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 10 unmarked \n  marbles into 3 marked urns\n \
  with no rules on placement?"], 
   AssessmentFunction[{66 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.8748405892774134`*^9},
 CellLabel->"Out[778]=",
 CellID->48395592,ExpressionUUID->"1fafd8c9-4c86-49c4-9c63-a3fff6ed7aaa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"10", ",", "3"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.874840598258551*^9, 3.874840603765188*^9}},
 CellLabel->"In[779]:=",
 CellID->161955797,ExpressionUUID->"e5094518-9d6a-4667-8544-e9837a94855d"],

Cell[BoxData["66"], "Output",
 CellChangeTimes->{3.874840305005082*^9, 3.8748406043838964`*^9},
 CellLabel->"Out[779]=",
 CellID->675798771,ExpressionUUID->"7638c715-a6aa-4acb-a70c-94dd30a8ec88"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At most one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9},
 CellID->11521707,ExpressionUUID->"64c902cc-c346-4104-b505-47615af459b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsInjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"2", ",", "2", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"2", ",", "2", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.8748406397739315`*^9, 3.8748406462154*^9}, {3.874841088107843*^9, 
  3.874841089910423*^9}},
 CellID->658848556,ExpressionUUID->"e81c5126-b0fd-4d6e-ac32-c11b832b6d22"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 2, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 2, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840290383774*^9, 3.8748406471494093`*^9},
 CellLabel->"Out[780]=",
 CellID->296927765,ExpressionUUID->"4741fdc5-051d-4db2-a832-c0cdb1d1b470"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, 
   3.8748407244007287`*^9},
 CellLabel->"In[791]:=",
 CellID->324368912,ExpressionUUID->"10a5c745-9083-4e7b-a00f-c044a0b13840"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 38, 59.3383151`9.525910038683655}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 21 unmarked marbles \n  into 8 marked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 unmarked marbles \n  into 8 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 unmarked marbles \n  into 8 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 21 unmarked marbles \n  into 8 marked urns\n \
  with at most one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.874840649850202*^9, 
  3.8748407254266715`*^9},
 CellLabel->"Out[791]=",
 CellID->14846465,ExpressionUUID->"aa425886-7082-4fe3-a372-638d673d0229"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"21", ",", "8"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.8748406540088024`*^9, 3.8748406576999474`*^9}, {3.874840734708787*^9, 
  3.874840736343896*^9}},
 CellLabel->"In[793]:=",
 CellID->396223728,ExpressionUUID->"45f8cb6f-8416-4cab-b5b8-8f05b4fa5e58"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.874840305005082*^9, 3.874840658977378*^9, {3.8748407292785974`*^9, 
   3.874840737193334*^9}},
 CellLabel->"Out[793]=",
 CellID->392889196,ExpressionUUID->"00004eca-3cb0-4a63-b616-fc0c934b6186"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840313542257*^9, 3.87484031874608*^9}, 
   3.874840667827445*^9, 3.8748407451859055`*^9},
 CellLabel->"In[797]:=",
 CellID->116447583,ExpressionUUID->"68ce0da3-7e6b-49b3-b9d4-fac753d78834"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 888030, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 888030, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 39, 30.4155943`9.235671214034337}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 888030}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 7 unmarked marbles \n  into 27 marked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 7 unmarked marbles \n  into 27 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 7 unmarked marbles \n  into 27 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{888030 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{888030 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{888030 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{888030 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{888030 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 7 unmarked marbles \n  into 27 marked urns\n \
  with at most one marble per urn?"], 
   AssessmentFunction[{888030 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748403191583204`*^9, 3.8748403230975695`*^9}, {
  3.874840668714265*^9, 3.8748406805921125`*^9}, {3.874840746225684*^9, 
  3.8748407618073645`*^9}},
 CellLabel->"Out[797]=",
 CellID->30162575,ExpressionUUID->"de2c3110-619a-4873-bb8f-74c3e55af876"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"7", ",", "27"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748403288880005`*^9, 3.874840330823983*^9}, {
  3.874840686868271*^9, 3.874840689815693*^9}, {3.8748407562366486`*^9, 
  3.874840766582038*^9}},
 CellLabel->"In[798]:=",
 CellID->66656576,ExpressionUUID->"0a906f1a-7cbe-4050-bef2-37684ed07a34"],

Cell[BoxData["888030"], "Output",
 CellChangeTimes->{
  3.8748403314321823`*^9, 3.8748406905886154`*^9, {3.87484075898134*^9, 
   3.8748407672111187`*^9}},
 CellLabel->"Out[798]=",
 CellID->110920463,ExpressionUUID->"1fa13020-d91e-4b36-8e19-d5a1744117c4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At least one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.874840342617344*^9, 3.8748403467831345`*^9}},
 CellID->110319188,ExpressionUUID->"65bf6181-c97e-4852-a55b-35d3587f439f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsSurjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"2", ",", "3", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"2", ",", "3", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840362994949*^9, 3.8748403701085033`*^9}, {
  3.874840778543831*^9, 3.8748407871803865`*^9}, {3.8748410922570133`*^9, 
  3.874841094159754*^9}},
 CellID->541382621,ExpressionUUID->"59401962-e090-4617-902b-3096d282710a"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 3, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][2, 3, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840370651744*^9, 3.8748407932111197`*^9},
 CellLabel->"Out[799]=",
 CellID->91274067,ExpressionUUID->"bc52c7f9-5995-4196-b1b2-979036dc7e95"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403725883317`*^9, 3.874840379693527*^9}, {
  3.874840790306022*^9, 3.8748408010115037`*^9}},
 CellLabel->"In[801]:=",
 CellID->576722173,ExpressionUUID->"9ee85277-5e5c-491c-8198-e7b83f558e01"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 2002, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 2002, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 40, 30.2461687`9.233245277468717}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 2002}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 15 unmarked marbles \n  into 10 marked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 15 unmarked marbles \n  into 10 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 15 unmarked marbles \n  into 10 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{2002 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{2002 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{2002 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{2002 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{2002 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 15 unmarked marbles \n  into 10 marked urns\n\
   with at least one marble per urn?"], 
   AssessmentFunction[{2002 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.874840381116954*^9, {3.874840794450381*^9, 3.874840801500128*^9}},
 CellLabel->"Out[801]=",
 CellID->83522786,ExpressionUUID->"5e014f82-cc30-4909-ad4a-fa659bec8c9e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"15", ",", "10"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874840383709847*^9, 3.8748403883841443`*^9}, {
  3.8748408071459503`*^9, 3.8748408218075542`*^9}},
 CellLabel->"In[805]:=",
 CellID->100062650,ExpressionUUID->"76a84c57-aa23-4666-9625-15f816a6009e"],

Cell[BoxData["2002"], "Output",
 CellChangeTimes->{
  3.8748403887247977`*^9, {3.8748408118738337`*^9, 3.8748408271929455`*^9}},
 CellLabel->"Out[805]=",
 CellID->582980978,ExpressionUUID->"41378da7-2d02-4d83-b949-7c7185b36cee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403951411285`*^9, 3.874840398351242*^9}, 
   3.8748408387382565`*^9},
 CellLabel->"In[810]:=",
 CellID->97828176,ExpressionUUID->"15468ced-fb04-4e3c-8dd2-199efdfaac45"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 41, 5.8097802`8.516734677666022}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 26 unmarked marbles \n  into 29 marked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 26 unmarked marbles \n  into 29 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 26 unmarked marbles \n  into 29 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 26 unmarked marbles \n  into 29 marked urns\n\
   with at least one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874840398661457*^9, 3.874840405837736*^9}, {
  3.874840840528898*^9, 3.874840849473064*^9}},
 CellLabel->"Out[810]=",
 CellID->41812015,ExpressionUUID->"ae597cde-4372-461b-8fa4-ae160a3245eb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"26", ",", "29"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748404121220484`*^9, 3.874840415043504*^9}, {
  3.8748408536698904`*^9, 3.8748408589376802`*^9}},
 CellLabel->"In[811]:=",
 CellID->505869776,ExpressionUUID->"61a441b5-5614-4f68-9e04-54050286665f"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{3.8748404155990252`*^9, 3.8748408598178225`*^9},
 CellLabel->"Out[811]=",
 CellID->183520780,ExpressionUUID->"674d7ef1-a351-4423-ad07-19114ad4e71e"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Marked Marbles & UnMarked Urns", "Subsection",
 CellChangeTimes->{{3.874840446729685*^9, 3.874840485012172*^9}, {
  3.874840909392249*^9, 3.874840912014282*^9}},
 CellID->216377081,ExpressionUUID->"51768c2f-6975-423a-89f4-c3928c08e8ae"],

Cell[CellGroupData[{

Cell["No restrictions on the # of marbles placed in each urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9, {3.8748405180438557`*^9, 3.87484052887253*^9}},
 CellID->266400327,ExpressionUUID->"739d2782-e190-4dc7-9ac0-ebad7b8f173f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsAnyF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"3", ",", "1", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"3", ",", "1", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.874840533724181*^9, 3.874840584000837*^9}, {3.8748409171233387`*^9, 
  3.8748409258428197`*^9}, {3.8748410957212267`*^9, 3.8748410971687145`*^9}},
 CellID->18891699,ExpressionUUID->"b5e9311e-4724-4ea2-9908-ab17fbe396d5"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 1, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 1, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.874840290383774*^9, {3.8748405700358543`*^9, 3.8748405844182124`*^9}, 
   3.8748409304106345`*^9},
 CellLabel->"Out[812]=",
 CellID->110545880,ExpressionUUID->"84ab23eb-a886-4f91-af9c-f1eeea98f519"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsAnyF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, {
   3.874840575892653*^9, 3.8748405886475945`*^9}, 3.874840928631178*^9},
 CellLabel->"In[813]:=",
 CellID->394676025,ExpressionUUID->"5ac3e3f7-b950-40e1-889d-b875858c2644"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 190899322, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 190899322, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 42, 24.1669429`9.135796639657883}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 190899322}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 14 marked\n   marbles into marked 27 \
urns\n   with no rules on placement?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 14 marked\n   marbles into marked \
27 urns\n   with no rules on placement?"|>, "Interpreter"], String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 14 marked\n   marbles into marked \
27 urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{190899322 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{190899322 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{190899322 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{190899322 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{190899322 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 14 marked\n   marbles into marked 27 urns\n  \
 with no rules on placement?"], 
   AssessmentFunction[{190899322 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.8748405892774134`*^9, 
  3.874840932138935*^9},
 CellLabel->"Out[813]=",
 CellID->64128639,ExpressionUUID->"ad29adc3-efbb-465f-a0ff-6b87e422adc9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"14", ",", "27"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.874840598258551*^9, 3.874840603765188*^9}, {3.8748409363834963`*^9, 
  3.874840939942135*^9}},
 CellLabel->"In[814]:=",
 CellID->344176799,ExpressionUUID->"3c734224-9aef-4a3f-857a-ff6099fe617c"],

Cell[BoxData["190899322"], "Output",
 CellChangeTimes->{3.874840305005082*^9, 3.8748406043838964`*^9, 
  3.874840940280868*^9},
 CellLabel->"Out[814]=",
 CellID->749942,ExpressionUUID->"f7387878-176f-4b7d-8630-b80c95551496"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At most one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9},
 CellID->194007677,ExpressionUUID->"403633bb-1a02-4912-81c3-b41ffc2d0b0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsInjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"3", ",", "2", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"3", ",", "2", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.8748406397739315`*^9, 3.8748406462154*^9}, {3.8748409522062535`*^9, 
  3.874840956018753*^9}, {3.8748410994786468`*^9, 3.8748411009933767`*^9}},
 CellID->62148502,ExpressionUUID->"57853622-7b14-4ac0-9f09-4b4168b01201"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 30}], "k" :> RandomInteger[{3, 30}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 2, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 2, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840290383774*^9, 3.8748406471494093`*^9, 
  3.874840956672536*^9},
 CellLabel->"Out[815]=",
 CellID->62934561,ExpressionUUID->"91731bee-a7c6-4161-92a6-614ef3fcd939"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, 
   3.8748407244007287`*^9, 3.8748409649334016`*^9},
 CellLabel->"In[816]:=",
 CellID->552836405,ExpressionUUID->"5ef0483d-4730-4131-af6e-737ffe2e0444"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 42, 58.1138431`9.516854427481606}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 1}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 10 marked marbles\n   into 18 unmarked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 10 marked marbles\n   into 18 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
            Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 10 marked marbles\n   into 18 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{1 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{1 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 10 marked marbles\n   into 18 unmarked urns\n\
   with at most one marble per urn?"], 
   AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.874840649850202*^9, 
  3.8748407254266715`*^9, 3.8748409653020344`*^9},
 CellLabel->"Out[816]=",
 CellID->449229649,ExpressionUUID->"d4d659f6-255a-4ecd-80a6-e9fc8f8efc67"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"10", ",", "18"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.8748406540088024`*^9, 3.8748406576999474`*^9}, {3.874840734708787*^9, 
  3.874840736343896*^9}, {3.874840969556405*^9, 3.8748409746945896`*^9}},
 CellLabel->"In[817]:=",
 CellID->484339519,ExpressionUUID->"209f4f41-59c3-4b86-b0bc-071a39c79f92"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.874840305005082*^9, 3.874840658977378*^9, {3.8748407292785974`*^9, 
   3.874840737193334*^9}, 3.874840975174556*^9},
 CellLabel->"Out[817]=",
 CellID->223372309,ExpressionUUID->"73c8e9f5-a3ef-4be8-9fd1-f1d3000bb266"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840313542257*^9, 3.87484031874608*^9}, 
   3.874840667827445*^9, 3.8748407451859055`*^9, 3.87484098199711*^9},
 CellLabel->"In[820]:=",
 CellID->34501811,ExpressionUUID->"c387d7e3-41f2-4d10-9157-b0e1d9d0567e"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 43, 28.3769929`9.205541284314716}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 21 marked marbles\n   into 11 unmarked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 marked marbles\n   into 11 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
            Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 21 marked marbles\n   into 11 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 21 marked marbles\n   into 11 unmarked urns\n\
   with at most one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748403191583204`*^9, 3.8748403230975695`*^9}, {
  3.874840668714265*^9, 3.8748406805921125`*^9}, {3.874840746225684*^9, 
  3.8748407618073645`*^9}, {3.8748409823393555`*^9, 3.8748410000895863`*^9}},
 CellLabel->"Out[820]=",
 CellID->217665593,ExpressionUUID->"fa4fd9f6-5d37-42b1-b54b-b40d219e0db0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"21", ",", "11"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748403288880005`*^9, 3.874840330823983*^9}, {
  3.874840686868271*^9, 3.874840689815693*^9}, {3.8748407562366486`*^9, 
  3.874840766582038*^9}, {3.8748409910406556`*^9, 3.874841004630698*^9}},
 CellLabel->"In[821]:=",
 CellID->292718337,ExpressionUUID->"9f6576b0-4a18-482f-9a82-08ceda8f4452"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.8748403314321823`*^9, 3.8748406905886154`*^9, {3.87484075898134*^9, 
   3.8748407672111187`*^9}, {3.8748409951559324`*^9, 3.8748410054306717`*^9}},
 CellLabel->"Out[821]=",
 CellID->115194965,ExpressionUUID->"900cf71d-bcfc-4242-9fee-c16f05a28763"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At least one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.874840342617344*^9, 3.8748403467831345`*^9}},
 CellID->65337144,ExpressionUUID->"28dea8a1-2473-42e2-993a-e2fbd336a8a7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsSurjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"3", ",", "3", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"3", ",", "3", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840362994949*^9, 3.8748403701085033`*^9}, {
  3.874840778543831*^9, 3.8748407871803865`*^9}, {3.8748410169940825`*^9, 
  3.874841020790434*^9}, {3.8748411028008757`*^9, 3.874841103992881*^9}},
 CellLabel->"In[824]:=",
 CellID->216273149,ExpressionUUID->"af928347-34f5-4d6d-8715-28b4d62a1df1"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 40}], "k" :> RandomInteger[{3, 40}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 3, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][3, 3, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840370651744*^9, 3.8748407932111197`*^9, 
  3.8748410214310584`*^9, 3.8748411102099237`*^9},
 CellLabel->"Out[824]=",
 CellID->53596951,ExpressionUUID->"29debcbb-c426-46a1-8cf5-e250942eadbb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403725883317`*^9, 3.874840379693527*^9}, {
   3.874840790306022*^9, 3.8748408010115037`*^9}, 3.8748410265887117`*^9},
 CellLabel->"In[825]:=",
 CellID->215715357,ExpressionUUID->"bd99e0c4-7ba6-4abc-8e3b-a83a1708e041"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 768305500780164501, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 768305500780164501, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 45, 25.7828637`9.163906073711246}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 768305500780164501}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 32 marked marbles\n   into 4 unmarked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 32 marked marbles\n   into 4 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 32 marked marbles\n   into 4 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}] === 
           None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 32 marked marbles\n   into 4 unmarked urns\n \
  with at least one marble per urn?"], 
   AssessmentFunction[{768305500780164501 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.874840381116954*^9, {3.874840794450381*^9, 3.874840801500128*^9}, 
   3.874841026931898*^9, 3.874841113843644*^9},
 CellLabel->"Out[825]=",
 CellID->140873329,ExpressionUUID->"f66cd86f-d2ba-487f-ae46-69a36b4aaa2d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"32", ",", "4"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874840383709847*^9, 3.8748403883841443`*^9}, {
  3.8748408071459503`*^9, 3.8748408218075542`*^9}, {3.8748410329079432`*^9, 
  3.874841035031931*^9}, {3.8748411176567297`*^9, 3.8748411219451876`*^9}},
 CellLabel->"In[826]:=",
 CellID->178276494,ExpressionUUID->"a1400a1b-839b-414f-b048-85b5c9d7f660"],

Cell[BoxData["768305500780164501"], "Output",
 CellChangeTimes->{
  3.8748403887247977`*^9, {3.8748408118738337`*^9, 3.8748408271929455`*^9}, 
   3.8748411222890368`*^9},
 CellLabel->"Out[826]=",
 CellID->205794709,ExpressionUUID->"bc5eb568-f820-44fd-9994-f9ccab82ff65"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionKOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403951411285`*^9, 3.874840398351242*^9}, 
   3.8748408387382565`*^9, 3.874841132487276*^9},
 CellLabel->"In[827]:=",
 CellID->56068008,ExpressionUUID->"ef92c22a-1270-4072-9d54-659cabcb06be"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 45, 45.3892106`9.40952749606758}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 12 marked marbles\n   into 30 unmarked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 12 marked marbles\n   into 30 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 12 marked marbles\n   into 30 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 12 marked marbles\n   into 30 unmarked urns\n\
   with at least one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874840398661457*^9, 3.874840405837736*^9}, {
   3.874840840528898*^9, 3.874840849473064*^9}, 3.8748411328133683`*^9},
 CellLabel->"Out[827]=",
 CellID->3936528,ExpressionUUID->"0f2f5089-e8f3-41cd-ac7c-9ef7d184b090"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"12", ",", "30"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748404121220484`*^9, 3.874840415043504*^9}, {
  3.8748408536698904`*^9, 3.8748408589376802`*^9}, {3.874841137858233*^9, 
  3.8748411420644283`*^9}},
 CellLabel->"In[829]:=",
 CellID->174264303,ExpressionUUID->"9733a046-9230-429d-9aa4-298e594aaf12"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.8748404155990252`*^9, 3.8748408598178225`*^9, {3.874841139634509*^9, 
   3.874841142577198*^9}},
 CellLabel->"Out[829]=",
 CellID->410064228,ExpressionUUID->"ac996a6c-a355-4d75-aa66-5d9e60a6a192"]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["UnMarked Marbles & UnMarked Urns", "Subsection",
 CellChangeTimes->{{3.874840446729685*^9, 3.874840485012172*^9}, {
  3.874840909392249*^9, 3.874840912014282*^9}, {3.8748411675326943`*^9, 
  3.8748411677787*^9}},
 CellID->104819028,ExpressionUUID->"264cb069-1f7c-425a-bddd-142e05ab363e"],

Cell[CellGroupData[{

Cell["No restrictions on the # of marbles placed in each urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9, {3.8748405180438557`*^9, 3.87484052887253*^9}},
 CellID->690037286,ExpressionUUID->"e929a3dd-6e9a-4a55-8f37-5436198e722b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsAnyF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"4", ",", "1", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"4", ",", "1", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.874840533724181*^9, 3.874840584000837*^9}, {3.8748409171233387`*^9, 
  3.8748409258428197`*^9}, {3.8748410957212267`*^9, 3.8748410971687145`*^9}, {
  3.874841175106465*^9, 3.8748411968040953`*^9}},
 CellLabel->"In[830]:=",
 CellID->526812421,ExpressionUUID->"fba2045c-77c4-44eb-9197-6badb072adc4"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 40}], "k" :> RandomInteger[{3, 40}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 1, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 1, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.874840290383774*^9, {3.8748405700358543`*^9, 3.8748405844182124`*^9}, 
   3.8748409304106345`*^9, 3.874841197269964*^9},
 CellLabel->"Out[830]=",
 CellID->506746943,ExpressionUUID->"e1227090-a357-4289-ae21-9350968d8db0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsAnyF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, {
   3.874840575892653*^9, 3.8748405886475945`*^9}, 3.874840928631178*^9, 
   3.874841200941493*^9},
 CellLabel->"In[831]:=",
 CellID->24018368,ExpressionUUID->"cf2cb9b0-590f-47fc-8bac-09adc375c8f9"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 4563, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 4563, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 46, 52.2239708`9.470444737239067}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 4563}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 29 unmarked \n  marbles into 27 unmarked \
urns\n   with no rules on placement?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 29 unmarked \n  marbles into 27 \
unmarked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
           Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 29 unmarked \n  marbles into 27 \
unmarked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{4563 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{4563 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{4563 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{4563 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{4563 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 29 unmarked \n  marbles into 27 unmarked \
urns\n   with no rules on placement?"], 
   AssessmentFunction[{4563 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.8748405892774134`*^9, 
  3.874840932138935*^9, 3.874841201259715*^9},
 CellLabel->"Out[831]=",
 CellID->212456667,ExpressionUUID->"de74a4ba-8144-451f-9431-21a12f21b2c7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"29", ",", "27"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"4", ",", "1"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.874840598258551*^9, 3.874840603765188*^9}, {3.8748409363834963`*^9, 
  3.874840939942135*^9}, {3.874841205567318*^9, 3.874841208804167*^9}},
 CellLabel->"In[832]:=",
 CellID->199698284,ExpressionUUID->"5e9ed57f-479c-46df-ad05-10b277d10441"],

Cell[BoxData["4563"], "Output",
 CellChangeTimes->{3.874840305005082*^9, 3.8748406043838964`*^9, 
  3.874840940280868*^9, 3.874841209271426*^9},
 CellLabel->"Out[832]=",
 CellID->322215268,ExpressionUUID->"61d6d2bf-f68c-48fb-8b6d-001da2de0a96"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At most one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.8748402675088444`*^9, 3.8748402732318563`*^9}, 
   3.8748403489295306`*^9},
 CellID->79167425,ExpressionUUID->"2e542cc3-7fd3-4a68-b9df-63a4bbc9de92"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsInjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"4", ",", "2", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"4", ",", "2", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840284258563*^9, 3.8748402890714707`*^9}, {
  3.8748406397739315`*^9, 3.8748406462154*^9}, {3.8748409522062535`*^9, 
  3.874840956018753*^9}, {3.8748410994786468`*^9, 3.8748411009933767`*^9}, {
  3.874841217470003*^9, 3.8748412243428245`*^9}},
 CellLabel->"In[833]:=",
 CellID->10952130,ExpressionUUID->"134eb659-b4a2-4fa6-a3c6-de9058adc7c7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 40}], "k" :> RandomInteger[{3, 40}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 2, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 2, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840290383774*^9, 3.8748406471494093`*^9, 
  3.874840956672536*^9, 3.8748412246726713`*^9},
 CellLabel->"Out[833]=",
 CellID->155097394,ExpressionUUID->"afaacccf-8ff2-4736-b18f-d46ba15e7ea9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840292703229*^9, 3.874840295228121*^9}, 
   3.8748407244007287`*^9, 3.8748409649334016`*^9, 3.874841229558384*^9},
 CellLabel->"In[834]:=",
 CellID->281284510,ExpressionUUID->"33474847-c198-447f-99d6-accf467411a5"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 47, 21.803268`9.09109652493584}, "Instant",
        "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 1}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 4 unmarked marbles\n   into 37 unmarked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 4 unmarked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
            Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 4 unmarked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{1 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{1 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 4 unmarked marbles\n   into 37 unmarked urns\
\n   with at most one marble per urn?"], 
   AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{3.87484029560489*^9, 3.874840649850202*^9, 
  3.8748407254266715`*^9, 3.8748409653020344`*^9, 3.8748412298826942`*^9},
 CellLabel->"Out[834]=",
 CellID->1021546,ExpressionUUID->"601713e9-9c40-42f9-af97-6cc2245e667d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"4", ",", "37"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"4", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748402986045184`*^9, 3.874840304662995*^9}, {
  3.8748406540088024`*^9, 3.8748406576999474`*^9}, {3.874840734708787*^9, 
  3.874840736343896*^9}, {3.874840969556405*^9, 3.8748409746945896`*^9}, {
  3.874841234123028*^9, 3.8748412387262373`*^9}},
 CellLabel->"In[836]:=",
 CellID->240429343,ExpressionUUID->"b0a7df7a-63eb-43ab-b01e-8bbb440e6bfc"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{
  3.874840305005082*^9, 3.874840658977378*^9, {3.8748407292785974`*^9, 
   3.874840737193334*^9}, 3.874840975174556*^9, {3.8748412362673635`*^9, 
   3.874841239306638*^9}},
 CellLabel->"Out[836]=",
 CellID->96282155,ExpressionUUID->"771fce03-c373-4608-a6a6-67fd60b2b67f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsInjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.874840313542257*^9, 3.87484031874608*^9}, 
   3.874840667827445*^9, 3.8748407451859055`*^9, 3.87484098199711*^9, 
   3.8748412653466344`*^9},
 CellLabel->"In[840]:=",
 CellID->348498909,ExpressionUUID->"7165f275-1993-4ffd-870d-62c977242c32"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 48, 8.3564919`8.674598963890679}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 0}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 37 unmarked marbles\n   into 16 unmarked \
urns\n   with at most one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 37 unmarked marbles\n   into 16 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
            Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 37 unmarked marbles\n   into 16 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{0 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 37 unmarked marbles\n   into 16 unmarked \
urns\n   with at most one marble per urn?"], 
   AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.8748403191583204`*^9, 3.8748403230975695`*^9}, {
  3.874840668714265*^9, 3.8748406805921125`*^9}, {3.874840746225684*^9, 
  3.8748407618073645`*^9}, {3.8748409823393555`*^9, 3.8748410000895863`*^9}, {
  3.8748412657476177`*^9, 3.874841275969615*^9}},
 CellLabel->"Out[840]=",
 CellID->152559892,ExpressionUUID->"b56729b7-f0a1-4db0-a0d0-4d432a3993b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"37", ",", "16"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"4", ",", "2"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748403288880005`*^9, 3.874840330823983*^9}, {
  3.874840686868271*^9, 3.874840689815693*^9}, {3.8748407562366486`*^9, 
  3.874840766582038*^9}, {3.8748409910406556`*^9, 3.874841004630698*^9}, {
  3.874841279344798*^9, 3.8748412844412217`*^9}},
 CellLabel->"In[841]:=",
 CellID->506502241,ExpressionUUID->"dbdb195e-e5d6-47cd-a3b4-f12f12a8acf8"],

Cell[BoxData["0"], "Output",
 CellChangeTimes->{
  3.8748403314321823`*^9, 3.8748406905886154`*^9, {3.87484075898134*^9, 
   3.8748407672111187`*^9}, {3.8748409951559324`*^9, 3.8748410054306717`*^9}, 
   3.8748412848912067`*^9},
 CellLabel->"Out[841]=",
 CellID->313791231,ExpressionUUID->"e5c4fd7f-0138-4580-ab77-863090f4be46"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["At least one marble per urn", "Subsubsection",
 CellChangeTimes->{{3.874840342617344*^9, 3.8748403467831345`*^9}},
 CellID->90505967,ExpressionUUID->"c30f2882-a173-403c-8631-57387a66c345"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsSurjectiveF", "=", 
  RowBox[{"QuestionGenerator", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<n\>\"", ":>", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}], ",", 
      RowBox[{"\"\<k\>\"", "\[RuleDelayed]", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"{", 
         RowBox[{"3", ",", "40"}], "}"}], "]"}]}]}], "}"}], ",", 
    RowBox[{
     RowBox[{"QuestionObject", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"CombinatoricsDataset", "[", 
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
           RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
           RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
           RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
           RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
           RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
         "]"}], "[", 
        RowBox[{"4", ",", "3", ",", "\"\<question\>\""}], "]"}], ",", 
       RowBox[{"AssessmentFunction", "[", 
        RowBox[{
         RowBox[{"CombinatoricsDataset", "[", 
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
            RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
            RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
            RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
            RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
            RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}], 
          "]"}], "[", 
         RowBox[{"4", ",", "3", ",", "\"\<solution\>\""}], "]"}], "]"}]}], 
      "]"}], "&"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874840362994949*^9, 3.8748403701085033`*^9}, {
  3.874840778543831*^9, 3.8748407871803865`*^9}, {3.8748410169940825`*^9, 
  3.874841020790434*^9}, {3.8748411028008757`*^9, 3.874841103992881*^9}, {
  3.874841292911017*^9, 3.874841298259133*^9}},
 CellLabel->"In[842]:=",
 CellID->36683236,ExpressionUUID->"9e52141a-929f-4cf8-baf9-9d1d621c2c98"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuestionGenerator",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            GridBox[{{
               RowBox[{
                 TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuestionGenerator[{
   "n" :> RandomInteger[{3, 40}], "k" :> RandomInteger[{3, 40}]}, 
   QuestionObject[
    PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
     "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
      "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 3, "question"], 
    AssessmentFunction[
     PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
      "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns", 
       "distinct" -> "marked", "orbit" -> "unmarked"|>][4, 3, "solution"]]]& ],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.874840370651744*^9, 3.8748407932111197`*^9, 
  3.8748410214310584`*^9, 3.8748411102099237`*^9, 3.8748412990754194`*^9},
 CellLabel->"Out[842]=",
 CellID->788733357,ExpressionUUID->"f3e77b5d-2843-4a8d-8798-3cf4eb353578"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403725883317`*^9, 3.874840379693527*^9}, {
   3.874840790306022*^9, 3.8748408010115037`*^9}, 3.8748410265887117`*^9, 
   3.874841301982297*^9},
 CellLabel->"In[843]:=",
 CellID->92779399,ExpressionUUID->"5d36a3d1-18a8-4138-aa36-6f3d68fe905a"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1556, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1556, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 48, 34.85592`9.294851446576383}, "Instant",
        "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 1556}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 24 unmarked marbles\n   into 18 unmarked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 24 unmarked marbles\n   into 18 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 24 unmarked marbles\n   into 18 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1556 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1556 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{1556 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{1556 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{1556 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 24 unmarked marbles\n   into 18 unmarked \
urns\n   with at least one marble per urn?"], 
   AssessmentFunction[{1556 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{
  3.874840381116954*^9, {3.874840794450381*^9, 3.874840801500128*^9}, 
   3.874841026931898*^9, 3.874841113843644*^9, 3.874841302311161*^9},
 CellLabel->"Out[843]=",
 CellID->139544545,ExpressionUUID->"d7120d3c-b5f2-4233-a712-70a0fae9e285"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"24", ",", "18"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"4", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.874840383709847*^9, 3.8748403883841443`*^9}, {
  3.8748408071459503`*^9, 3.8748408218075542`*^9}, {3.8748410329079432`*^9, 
  3.874841035031931*^9}, {3.8748411176567297`*^9, 3.8748411219451876`*^9}, {
  3.874841306163209*^9, 3.8748413107777047`*^9}},
 CellLabel->"In[844]:=",
 CellID->330085578,ExpressionUUID->"ecedcd2b-a5a3-4d92-af82-97ed81d41f37"],

Cell[BoxData["1556"], "Output",
 CellChangeTimes->{
  3.8748403887247977`*^9, {3.8748408118738337`*^9, 3.8748408271929455`*^9}, 
   3.8748411222890368`*^9, 3.874841311188058*^9},
 CellLabel->"Out[844]=",
 CellID->703850162,ExpressionUUID->"70db2895-799f-49c3-869e-f35a2486be9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"combinatoricsQuestionNKOrbitsSurjectiveF", "[", "]"}]], "Input",
 CellChangeTimes->{{3.8748403951411285`*^9, 3.874840398351242*^9}, 
   3.8748408387382565`*^9, 3.874841132487276*^9, 3.8748413200442944`*^9},
 CellLabel->"In[846]:=",
 CellID->47191972,ExpressionUUID->"b1322d24-10d5-401d-8c95-117e880d4936"],

Cell[BoxData[
 InterpretationBox[
  DynamicModuleBox[{QuestionFramework`Private`input$$ = 1958, 
   QuestionFramework`Private`interpreter$$ = Identity, 
   QuestionFramework`Private`result$$ = 
   AssessmentResultObject[<|
    "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> True, 
     "GivenAnswer" -> 1958, "Explanation" -> None, "Timestamp" -> 
     DateObject[{2022, 10, 15, 12, 49, 3.1250233`8.247428240745041}, 
       "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
     "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
   QuestionFramework`Private`buttonenabled$$ = True, 
   QuestionFramework`Private`submissionCount$$ = 1, 
   QuestionFramework`Private`submittedvalue$$ = 1958}, 
   DynamicBox[ToBoxes[
     Framed[
      Grid[{{
        "How many ways can you place 25 unmarked marbles\n   into 34 unmarked \
urns\n   with at least one marble per urn?", SpanFromLeft}, {
         InputField[
          Dynamic[QuestionFramework`Private`input$$], 
          If[
           
           KeyExistsQ[<|
            "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 25 unmarked marbles\n   into 34 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
           String, Number], 
          Apply[Sequence, 
           
           Lookup[<|"FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
             "How many ways can you place 25 unmarked marbles\n   into 34 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
         If[
          TrueQ[QuestionFramework`Private`$qointerpretersupport], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1958 -> <|"Score" -> 1|>}], 
           QuestionFramework`Private`interpreter$$], 
          QuestionFramework`Private`generalquestionTest[
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$, 
           AssessmentFunction[{1958 -> <|"Score" -> 1|>}]]]}, {
         If[
          Or[
          AssessmentFunction[{1958 -> <|"Score" -> 1|>}] === None, 
           CurrentValue[
             EvaluationNotebook[], {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "GroupSubmissionFlag"}] === True], "", 
          QuestionFramework`Private`submitButton[
          QuestionFramework`Private`result$$ = If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              AssessmentFunction[{1958 -> <|"Score" -> 1|>}][
               Interpreter[QuestionFramework`Private`interpreter$$][
               QuestionFramework`Private`input$$], "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$], 
              AssessmentFunction[{1958 -> <|"Score" -> 1|>}][
              QuestionFramework`Private`input$$, "SubmissionCount" -> 
               QuestionFramework`Private`submissionCount$$]]; 
           QuestionFramework`Private`submittedvalue$$ = 
            QuestionFramework`Private`input$$; 
           QuestionFramework`Private`submissionCount$$ = 
            QuestionFramework`Private`getSubmissionCount[
             QuestionFramework`Private`result$$]; 
           QuestionFramework`Private`buttonenabled$$ = If[
              QuestionFramework`Private`reachedMaxSubmissionsQ[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`submissionCount$$], False, True, 
              True]]], 
         If[
         Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
          Row[{
            If[Head[
               QuestionFramework`Private`result$$["Explanation"]] === String, 
             QuestionFramework`Private`result$$["Explanation"], ""]}, 
           Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
       Spacings -> {1, 1}], ImageSize -> If[
        MatchQ[
         CurrentValue[
          EvaluationNotebook[], TaggingRules], 
         KeyValuePattern["FormNotebook" -> Blank[List]]], {Full, Automatic}, 
        Automatic], Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
     StandardForm],
    ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
    TrackedSymbols:>{
     QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
      QuestionFramework`Private`submittedvalue$$}],
   DynamicModuleValues:>{}],
  QuestionObject[
   QuestionInterface[
   Automatic, 
    "How many ways can you place 25 unmarked marbles\n   into 34 unmarked \
urns\n   with at least one marble per urn?"], 
   AssessmentFunction[{1958 -> <|"Score" -> 1|>}]]]], "Output",
 CellChangeTimes->{{3.874840398661457*^9, 3.874840405837736*^9}, {
   3.874840840528898*^9, 3.874840849473064*^9}, 3.8748411328133683`*^9, {
   3.874841320369062*^9, 3.874841325442836*^9}},
 CellLabel->"Out[846]=",
 CellID->157774519,ExpressionUUID->"d3ad6839-bddb-428a-9869-e2f749344898"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"25", ",", "34"}], "]"}], "[", 
  RowBox[{"[", 
   RowBox[{"4", ",", "3"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8748404121220484`*^9, 3.874840415043504*^9}, {
  3.8748408536698904`*^9, 3.8748408589376802`*^9}, {3.874841137858233*^9, 
  3.8748411420644283`*^9}, {3.874841328836971*^9, 3.8748413377410946`*^9}},
 CellLabel->"In[848]:=",
 CellID->60873039,ExpressionUUID->"975098bc-1e8c-4556-a565-a40205c4f7b5"],

Cell[BoxData["1958"], "Output",
 CellChangeTimes->{
  3.8748404155990252`*^9, 3.8748408598178225`*^9, {3.874841139634509*^9, 
   3.874841142577198*^9}, {3.874841333364994*^9, 3.8748413382420335`*^9}},
 CellLabel->"Out[848]=",
 CellID->364356271,ExpressionUUID->"689a3421-4cc0-4073-872d-7b598bfa9243"]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Putting it all together", "Subsection",
 CellChangeTimes->{{3.874842981472621*^9, 3.8748429845961723`*^9}},
 CellID->559631972,ExpressionUUID->"f66bc6fd-25e6-4d3e-bd51-b5b427918a2c"],

Cell["I make a function to put all the questions together:", "Text",
 CellChangeTimes->{{3.8748433713352623`*^9, 3.8748433826134787`*^9}},
 CellID->221835197,ExpressionUUID->"0a0e3347-f762-4745-8d95-f7257a249b50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"twelvefoldwayquestiongenerator", "=", 
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "k"}], "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"QuestionGenerator", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<n\>\"", ":>", "n"}], ",", 
           RowBox[{"\"\<k\>\"", "\[RuleDelayed]", "k"}]}], "}"}], ",", 
         RowBox[{
          RowBox[{"QuestionObject", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"CombinatoricsDataset", "[", 
              RowBox[{"<|", 
               RowBox[{
                RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
                RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
                RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
                RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
                RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
                RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], "|>"}],
               "]"}], "[", 
             RowBox[{"s", ",", "t", ",", "\"\<question\>\""}], "]"}], ",", 
            RowBox[{"AssessmentFunction", "[", 
             RowBox[{
              RowBox[{"CombinatoricsDataset", "[", 
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
                 RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
                 RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
                 RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
                 RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
                 RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], 
                "|>"}], "]"}], "[", 
              RowBox[{"s", ",", "t", ",", "\"\<solution\>\""}], "]"}], 
             "]"}]}], "]"}], "&"}]}], "]"}], "[", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", "1", ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "1", ",", "3"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.874843014045478*^9, 3.874843092452729*^9}, {
  3.874843148985655*^9, 3.8748432477172213`*^9}},
 CellLabel->"In[884]:=",
 CellID->208689184,ExpressionUUID->"4cd9a319-6558-416a-8503-a766a0be1b32"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", ",", "k"}], "}"}], ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["QuestionGenerator",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       QuestionGenerator[{"n" :> $CellContext`n, "k" :> $CellContext`k}, 
        QuestionObject[
         PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
          "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns",
            "distinct" -> "marked", "orbit" -> 
           "unmarked"|>][$CellContext`s, $CellContext`t, "question"], 
         AssessmentFunction[
          
          PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
           "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> 
            "urns", "distinct" -> "marked", "orbit" -> 
            "unmarked"|>][$CellContext`s, $CellContext`t, "solution"]]]& ],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"s", ",", "1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "1", ",", "3"}], "}"}]}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{{3.874843028253138*^9, 3.8748430931657505`*^9}, {
   3.8748431871128163`*^9, 3.874843199771374*^9}, 3.8748432486347466`*^9},
 CellLabel->"Out[884]=",
 CellID->283331542,ExpressionUUID->"c0e47908-8e74-4bbe-a2f1-a65d88c3227f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"twelvefoldwayquestiongenerator", "@@", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "40"}], "}"}], ",", "2"}], "]"}]}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.8748432509863377`*^9, 3.8748433517432623`*^9}},
 CellLabel->"In[892]:=",
 CellID->181464897,ExpressionUUID->"a5e0a61f-dac4-4c55-993e-7195e375012e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       177917621779460413, QuestionFramework`Private`interpreter$$ = Identity,
        QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 177917621779460413, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 23, 32.7985321`9.268429309153627}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 177917621779460413}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked\n   marbles into 37 \
marked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked\n   marbles into 37 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked\n   marbles into 37 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{177917621779460413 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                177917621779460413 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{177917621779460413 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{177917621779460413 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   177917621779460413 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked\n   marbles into 37 marked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{177917621779460413 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 34128550732953600,
        QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 34128550732953600, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 23, 55.7657708`9.498942548585068}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 34128550732953600}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{34128550732953600 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                34128550732953600 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{34128550732953600 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{34128550732953600 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{34128550732953600 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked marbles\n   into 37 marked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{34128550732953600 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 15.7610034`8.950158810969802}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked marbles\n   into 37 marked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 17417133617, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 17417133617, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 23, 42.2184908`9.378077578967412}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 17417133617}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked \n  marbles into 37 \
marked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked \n  marbles into 37 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked \n  marbles into 37 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked \n  marbles into 37 marked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{17417133617 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 854992152, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 854992152, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 0.5876528`7.5216957989440365}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 854992152}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{854992152 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{854992152 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{854992152 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{854992152 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{854992152 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked marbles \n  into 37 marked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{854992152 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 16.3914827`8.967193185197601}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles \n  into 37 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked marbles \n  into 37 marked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 678570, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 678570, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 23, 48.0096152`9.433903083324836}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 678570}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked\n   marbles into \
marked 37 urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked\n   marbles into \
marked 37 urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked\n   marbles into \
marked 37 urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{678570 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{678570 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{678570 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{678570 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{678570 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked\n   marbles into marked 37 \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{678570 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 1, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 6.3108345`8.552661763858598}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 1}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked marbles\n   into 37 unmarked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{1 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 17.0447087`8.984164526176535}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 marked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 marked marbles\n   into 37 unmarked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 56, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 56, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 23, 51.5685637`9.464959885557077}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 56}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked \n  marbles into 37 \
unmarked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked \n  marbles into 37 \
unmarked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked \n  marbles into 37 \
unmarked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{56 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{56 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{56 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{56 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{56 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked \n  marbles into 37 unmarked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{56 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 1, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 6.9717745`8.595918304332347}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 1}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked marbles\n   into 37 unmarked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{1 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 56, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 56, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 24, 14.2926115`8.907686539906733}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 56}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 11 unmarked marbles\n   into 37 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{56 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{56 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{56 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{56 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{56 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 11 unmarked marbles\n   into 37 unmarked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{56 -> <|"Score" -> 1|>}]]]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8748432668776965`*^9, 3.874843305878128*^9}, {
  3.8748433523953037`*^9, 3.8748433610285635`*^9}},
 CellLabel->"Out[892]//TableForm=",
 CellID->64251354,ExpressionUUID->"5c465228-a5c0-40be-a4cd-2c379c34df9f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"11", ",", "37"}], "]"}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{{3.8748433870068493`*^9, 3.874843407047552*^9}},
 CellLabel->"In[894]:=",
 CellID->30188068,ExpressionUUID->"23ef23b6-f46d-4fd0-8ccf-6200eca46355"],

Cell[BoxData[
 TagBox[GridBox[{
    {"177917621779460413", "34128550732953600", "0"},
    {"17417133617", "854992152", "0"},
    {"678570", "1", "0"},
    {"56", "1", "56"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8748434040289884`*^9, 3.8748434075430765`*^9}},
 CellLabel->"Out[894]//TableForm=",
 CellID->717910417,ExpressionUUID->"caaadabf-cde4-42b7-85f5-9610397d91b2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["TwentyFoldWayTable", "Subsection",
 CellChangeTimes->{{3.874843492741912*^9, 3.8748434967784824`*^9}},
 CellID->545212479,ExpressionUUID->"f7014363-9970-45bf-a0b1-d6602c19d889"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"twentyfoldwayquestiongenerator", "=", 
  RowBox[{"Function", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", "k"}], "}"}], ",", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"QuestionGenerator", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<n\>\"", ":>", "n"}], ",", 
           RowBox[{"\"\<k\>\"", "\[RuleDelayed]", "k"}]}], "}"}], ",", 
         RowBox[{
          RowBox[{"QuestionObject", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"CombinatoricsDataset", "[", 
              RowBox[{
               RowBox[{"<|", 
                RowBox[{
                 RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
                 RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
                 RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
                 RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
                 RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
                 RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], 
                "|>"}], ",", "\"\<twenty-fold-way\>\""}], "]"}], "[", 
             RowBox[{"s", ",", "t", ",", "\"\<question\>\""}], "]"}], ",", 
            RowBox[{"AssessmentFunction", "[", 
             RowBox[{
              RowBox[{"CombinatoricsDataset", "[", 
               RowBox[{
                RowBox[{"<|", 
                 RowBox[{
                  RowBox[{"\"\<k\>\"", "->", "#k"}], ",", 
                  RowBox[{"\"\<n\>\"", "->", "#n"}], ",", 
                  RowBox[{"\"\<N\>\"", "->", "\"\<marbles\>\""}], ",", 
                  RowBox[{"\"\<K\>\"", "->", "\"\<urns\>\""}], ",", 
                  RowBox[{"\"\<distinct\>\"", "->", "\"\<marked\>\""}], ",", 
                  RowBox[{"\"\<orbit\>\"", "->", "\"\<unmarked\>\""}]}], 
                 "|>"}], ",", "\"\<twenty-fold-way\>\""}], "]"}], "[", 
              RowBox[{"s", ",", "t", ",", "\"\<solution\>\""}], "]"}], 
             "]"}]}], "]"}], "&"}]}], "]"}], "[", "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"s", ",", "1", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8748435073123317`*^9, 3.8748435282145267`*^9}, {
  3.8748438747355185`*^9, 3.8748438753715997`*^9}},
 CellLabel->"In[900]:=",
 CellID->63858673,ExpressionUUID->"aece51b7-7170-46fa-a7d8-7d8cc125ec96"],

Cell[BoxData[
 RowBox[{"Function", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"n", ",", "k"}], "}"}], ",", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["QuestionGenerator",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{
           PaneSelectorBox[{False -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 GridBox[{{
                    RowBox[{
                    TagBox["\"Parameter Count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}], "\[SpanFromLeft]"}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}},
                AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       QuestionGenerator[{"n" :> $CellContext`n, "k" :> $CellContext`k}, 
        QuestionObject[
         PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
          "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> "urns",
            "distinct" -> "marked", "orbit" -> "unmarked"|>, 
          "twenty-fold-way"][$CellContext`s, $CellContext`t, "question"], 
         AssessmentFunction[
          
          PeterBurbery`RecreationalMathematics`CombinatoricsDataset[<|
           "k" -> Slot["k"], "n" -> Slot["n"], "N" -> "marbles", "K" -> 
            "urns", "distinct" -> "marked", "orbit" -> "unmarked"|>, 
           "twenty-fold-way"][$CellContext`s, $CellContext`t, "solution"]]]& ],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], "[", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"s", ",", "1", ",", "10"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "1", ",", "2"}], "}"}]}], "]"}]}], "]"}]], "Output",
 CellChangeTimes->{3.874843529905168*^9, 3.8748438760366907`*^9},
 CellLabel->"Out[900]=",
 CellID->119678389,ExpressionUUID->"378aa8cf-6b3c-407e-91d9-c60c2f42bc57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"twentyfoldwayquestiongenerator", "@@", 
   RowBox[{"RandomInteger", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"4", ",", "52"}], "}"}], ",", "2"}], "]"}]}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.8748435343345356`*^9, 3.8748435796369686`*^9}, {
  3.874843981725785*^9, 3.87484399878113*^9}, {3.8748440769357767`*^9, 
  3.8748440786367254`*^9}},
 CellLabel->"In[910]:=",
 CellID->287856503,ExpressionUUID->"07162173-0651-48b7-bce1-c275917a2a54"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       1267650600228229401496703205376, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 1267650600228229401496703205376, 
         "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 35, 35.7342972`9.305660138783011}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 
       1267650600228229401496703205376}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked\n   marbles into 32 \
marked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked\n   marbles into 32 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked\n   marbles into 32 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                1267650600228229401496703205376 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                1267650600228229401496703205376 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{
                 1267650600228229401496703205376 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  
                  AssessmentFunction[{
                   1267650600228229401496703205376 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   1267650600228229401496703205376 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {66.43359379926696, 70.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked\n   marbles into 32 marked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{
        1267650600228229401496703205376 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 51724158235372, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 51724158235372, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 51.5563853`9.464857310729272}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 51724158235372}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked\n   marbles into 32 \
unmarked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked\n   marbles into 32 \
unmarked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked\n   marbles into 32 \
unmarked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked\n   marbles into 32 unmarked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{51724158235372 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       549331853867906767257600000, QuestionFramework`Private`interpreter$$ = 
       Identity, QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 549331853867906767257600000, "Explanation" -> 
         None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 38, 2.8183434`8.202568892151389}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 
       549331853867906767257600000}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                549331853867906767257600000 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                549331853867906767257600000 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{
                 549331853867906767257600000 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  
                  AssessmentFunction[{
                   549331853867906767257600000 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   549331853867906767257600000 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked marbles\n   into 32 marked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{
        549331853867906767257600000 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = "", 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 0, 
       QuestionFramework`Private`submittedvalue$$ = ""}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{222., {58.933593799266966`, 63.066406200733034`}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked marbles\n   into 32 unmarked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 38, 48.6200568`9.43939032010727}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at least one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
marked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked marbles\n   into 32 marked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 9.0303846`8.708281211725337}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked marbles\n  \n into 32 \
unmarked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n  \n into 32 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n  \n into 32 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {67.93359379926696, 72.06640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked marbles\n  \n into 32 unmarked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       2432902008176640000, QuestionFramework`Private`interpreter$$ = 
       Identity, QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 2432902008176640000, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 38, 13.6682741`8.888288633144263}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 2432902008176640000}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place\n 20 marked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place\n 20 marked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place\n 20 marked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{2432902008176640000 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                2432902008176640000 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{2432902008176640000 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  
                  AssessmentFunction[{
                   2432902008176640000 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   2432902008176640000 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {67.93359379926696, 72.06640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place\n 20 marked marbles\n   into 32 marked \
urns\n   with exactly one marble per urn?"], 
       AssessmentFunction[{2432902008176640000 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 8.3583717`8.674696647819193}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked marbles\n   into 32 unmarked \
urns\n   with exactly one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       188635435829605873227261542400000, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 188635435829605873227261542400000, 
         "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 16.8689078`8.979661910041703}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 3|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 3, 
       QuestionFramework`Private`submittedvalue$$ = 
       188635435829605873227261542400000}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked ordered \n   marbles \
into 32 marked urns\n  \n with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered \n   marbles \
into 32 marked urns\n  \n with no rules on placement?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered \n   marbles \
into 32 marked urns\n  \n with no rules on placement?"|>, 
                "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                188635435829605873227261542400000 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                188635435829605873227261542400000 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{
                 188635435829605873227261542400000 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  
                  AssessmentFunction[{
                   188635435829605873227261542400000 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   188635435829605873227261542400000 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {73.93359379926696, 78.06640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked ordered \n   marbles into 32 \
marked urns\n  \n with no rules on placement?"], 
       AssessmentFunction[{
        188635435829605873227261542400000 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 
       327697927886085654441, QuestionFramework`Private`interpreter$$ = 
       Identity, QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 327697927886085654441, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 18.5939968`9.021947691945893}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 327697927886085654441}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 ordered marked\n   marbles \
into 32 unmarked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 ordered marked\n   marbles \
into 32 unmarked urns\n   with no rules on placement?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 ordered marked\n   marbles \
into 32 unmarked urns\n   with no rules on placement?"|>, 
                "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                327697927886085654441 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                327697927886085654441 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{327697927886085654441 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  
                  AssessmentFunction[{
                   327697927886085654441 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  
                  AssessmentFunction[{
                   327697927886085654441 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 ordered marked\n   marbles into 32 \
unmarked urns\n   with no rules on placement?"], 
       AssessmentFunction[{327697927886085654441 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 20.3990565`9.062185015450961}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 2|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 2, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked ordered marbles\n   \
into 32 marked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered marbles\n   \
into 32 marked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered marbles\n   \
into 32 marked urns\n   with at least one marble per urn?"|>, 
                "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{256., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked ordered marbles\n   into 32 \
marked urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 51.7362793`9.466370042554335}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 2|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 2, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 marked ordered marbles\n   \
into 32 unmarked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered marbles\n   \
into 32 unmarked urns\n   with at least one marble per urn?"|>, 
                "Interpreter"], String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 marked ordered marbles\n   \
into 32 unmarked urns\n   with at least one marble per urn?"|>, 
                "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{256., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 marked ordered marbles\n   into 32 \
unmarked urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 77535155627160, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 77535155627160, "Explanation" -> None, 
         "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 28.5942961`9.208854322864033}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 77535155627160}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked \n  marbles into 32 \
marked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked \n  marbles into 32 \
marked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked \n  marbles into 32 \
marked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}] === 
               None, CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked \n  marbles into 32 marked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{77535155627160 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 16061, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 16061, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 29.1555706`9.217296455424433}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 16061}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked \n  marbles into 32 \
unmarked urns\n   with no rules on placement?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked \n  marbles into 32 \
unmarked urns\n   with no rules on placement?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked \n  marbles into 32 \
unmarked urns\n   with no rules on placement?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{16061 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{16061 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{16061 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{16061 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{16061 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{231., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked \n  marbles into 32 unmarked \
urns\n   with no rules on placement?"], 
       AssessmentFunction[{16061 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 225792840, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 225792840, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 35.9497895`9.308271245459656}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 225792840}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   with at most one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{225792840 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{225792840 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{225792840 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{225792840 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{225792840 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles \n  into 32 marked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{225792840 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 1, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 1, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 46.6972842`9.421866487487748}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 2|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 2, 
       QuestionFramework`Private`submittedvalue$$ = 1}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at most one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at most one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at most one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{1 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{1 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles \n  into 32 unmarked \
urns\n   with at most one marble per urn?"], 
       AssessmentFunction[{1 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 39.4249104`9.34834559777824}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   \nwith at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   \nwith at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
marked urns\n   \nwith at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {67.93359379926696, 72.06640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles \n  into 32 marked \
urns\n   \nwith at least one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 627, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 627, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 35.67924`9.304990488634763}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 627}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at least one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at least one marble per urn?"|>, "Interpreter"], 
               String, Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles \n  into 32 \
unmarked urns\n   with at least one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{627 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{627 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{627 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{627 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{627 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{235., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles \n  into 32 unmarked \
urns\n   with at least one marble per urn?"], 
       AssessmentFunction[{627 -> <|"Score" -> 1|>}]]]},
    {
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 39, 40.2089129`9.356897211607006}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 1|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 1, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?"|>, "Interpreter"], String, 
               Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles\n   into 32 \
marked urns\n   with exactly one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles\n   into 32 marked \
urns\n   with exactly one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]], 
     InterpretationBox[
      DynamicModuleBox[{QuestionFramework`Private`input$$ = 0, 
       QuestionFramework`Private`interpreter$$ = Identity, 
       QuestionFramework`Private`result$$ = 
       AssessmentResultObject[<|
        "Score" -> 1, "MaxScore" -> 1, "MinScore" -> 0, "AnswerCorrect" -> 
         True, "GivenAnswer" -> 0, "Explanation" -> None, "Timestamp" -> 
         DateObject[{2022, 10, 15, 13, 40, 59.4469091`9.526704106942974}, 
           "Instant", "Gregorian", -4.], "AssessmentOptions" -> {}, 
         "AnswerComparisonMethod" -> "Number", "SubmissionCount" -> 2|>], 
       QuestionFramework`Private`buttonenabled$$ = True, 
       QuestionFramework`Private`submissionCount$$ = 2, 
       QuestionFramework`Private`submittedvalue$$ = 0}, 
       DynamicBox[ToBoxes[
         Framed[
          
          Grid[{{"How many ways can you place 20 unmarked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?", SpanFromLeft}, {
             InputField[
              Dynamic[QuestionFramework`Private`input$$], 
              If[
               
               KeyExistsQ[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?"|>, "Interpreter"], String,
                Number], 
              Apply[Sequence, 
               
               Lookup[<|
                "FieldType" -> Number, "MinAnswers" -> 1, "Prompt" -> 
                 "How many ways can you place 20 unmarked marbles\n   into 32 \
unmarked urns\n   with exactly one marble per urn?"|>, "FieldOptions", {}]]], 
             If[
              TrueQ[QuestionFramework`Private`$qointerpretersupport], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}], 
               QuestionFramework`Private`interpreter$$], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}, {
             If[
              Or[
              AssessmentFunction[{0 -> <|"Score" -> 1|>}] === None, 
               CurrentValue[
                 EvaluationNotebook[], {
                 TaggingRules, "FormNotebook", "SubmissionOptions", 
                  "GroupSubmissionFlag"}] === True], "", 
              QuestionFramework`Private`submitButton[
              QuestionFramework`Private`result$$ = If[
                  TrueQ[QuestionFramework`Private`$qointerpretersupport], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                   Interpreter[QuestionFramework`Private`interpreter$$][
                   QuestionFramework`Private`input$$], "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$], 
                  AssessmentFunction[{0 -> <|"Score" -> 1|>}][
                  QuestionFramework`Private`input$$, "SubmissionCount" -> 
                   QuestionFramework`Private`submissionCount$$]]; 
               QuestionFramework`Private`submittedvalue$$ = 
                QuestionFramework`Private`input$$; 
               QuestionFramework`Private`submissionCount$$ = 
                QuestionFramework`Private`getSubmissionCount[
                 QuestionFramework`Private`result$$]; 
               QuestionFramework`Private`buttonenabled$$ = If[
                  QuestionFramework`Private`reachedMaxSubmissionsQ[
                  QuestionFramework`Private`result$$, 
                   QuestionFramework`Private`submissionCount$$], False, True, 
                  True]]], 
             If[
             Head[QuestionFramework`Private`result$$] === 
              AssessmentResultObject, 
              Row[{
                If[Head[
                   QuestionFramework`Private`result$$["Explanation"]] === 
                 String, 
                 QuestionFramework`Private`result$$["Explanation"], ""]}, 
               Spacer[5]], ""], SpanFromLeft}}, Alignment -> Left, 
           Spacings -> {1, 1}], ImageSize -> If[
            MatchQ[
             CurrentValue[
              EvaluationNotebook[], TaggingRules], 
             KeyValuePattern["FormNotebook" -> Blank[List]]], {
            Full, Automatic}, Automatic], Background -> GrayLevel[1], 
          FrameStyle -> 
          RGBColor[
           0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
          RoundingRadius -> 5, FrameMargins -> 10, BaseStyle -> "Panel"], 
         StandardForm],
        ImageSizeCache->{232., {60.43359379926696, 64.56640620073304}},
        TrackedSymbols:>{
         QuestionFramework`Private`result$$, 
          QuestionFramework`Private`input$$, 
          QuestionFramework`Private`submittedvalue$$}],
       DynamicModuleValues:>{}],
      QuestionObject[
       QuestionInterface[
       Automatic, 
        "How many ways can you place 20 unmarked marbles\n   into 32 unmarked \
urns\n   with exactly one marble per urn?"], 
       AssessmentFunction[{0 -> <|"Score" -> 1|>}]]]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.874843551953927*^9, 3.874843580448244*^9}, {
  3.874843978881051*^9, 3.874844010353921*^9}, {3.8748440810216284`*^9, 
  3.874844115598281*^9}},
 CellLabel->"Out[910]//TableForm=",
 CellID->259688427,ExpressionUUID->"4d0dc4b2-94e7-4797-b014-377edfdbbf07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCombinatoricsWordProblemSolutions", "[", 
   RowBox[{"20", ",", "32", ",", "\"\<twenty-fold-way\>\""}], "]"}], "//", 
  "TableForm"}]], "Input",
 CellChangeTimes->{{3.874843789103609*^9, 3.874843813011574*^9}, {
  3.8748441243485603`*^9, 3.874844125060559*^9}, {3.874844229390539*^9, 
  3.874844231338502*^9}},
 CellLabel->"In[913]:=",
 CellID->708172565,ExpressionUUID->"a0544161-18a4-46cc-8850-0cbbb78c5d7f"],

Cell[BoxData[
 TagBox[GridBox[{
    {"1267650600228229401496703205376", "51724158235372"},
    {"549331853867906767257600000", "1"},
    {"0", "0"},
    {"2432902008176640000", "0"},
    {"188635435829605873227261542400000", "327697927886085654441"},
    {"0", "0"},
    {"77535155627160", "16061"},
    {"225792840", "1"},
    {"0", "627"},
    {"0", "0"}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{{3.8748437967056427`*^9, 3.8748438136851845`*^9}, 
   3.8748442589162507`*^9},
 CellLabel->"Out[913]//TableForm=",
 CellID->110222582,ExpressionUUID->"8f24500d-2f28-4b5d-9b0a-b23f540293a0"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152., 585.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules->{
 "ResourceType" -> "ComputationalEssay", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> <||>, "CreationTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "UpdatedTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "CompatibilityTest" -> 
  HoldComplete[
    BinaryDeserialize[
     ByteArray[{56, 67, 58, 120, 156, 133, 143, 205, 78, 131, 64, 20, 133, 
      163, 173, 110, 116, 213, 165, 79, 224, 6, 70, 11, 105, 138, 59, 197, 
      198, 184, 193, 70, 92, 184, 100, 24, 238, 164, 83, 7, 46, 153, 123, 41, 
      229, 237, 29, 140, 186, 193, 196, 245, 249, 249, 206, 209, 115, 90, 164,
       88, 183, 216, 53, 213, 230, 216, 58, 32, 50, 216, 232, 19, 58, 203, 0, 
      42, 202, 175, 95, 129, 176, 115, 10, 242, 129, 24, 234, 212, 26, 104, 
      184, 120, 4, 109, 26, 195, 222, 153, 33, 67, 137, 248, 81, 232, 83, 154,
       229, 192, 62, 25, 252, 25, 217, 58, 115, 144, 12, 133, 69, 89, 253, 24,
       222, 134, 22, 124, 238, 242, 222, 50, 184, 70, 178, 57, 0, 229, 87, 
      227, 156, 142, 229, 216, 46, 237, 134, 72, 14, 191, 133, 139, 169, 70, 
      243, 172, 179, 214, 99, 207, 159, 253, 11, 55, 14, 184, 72, 45, 118, 
      213, 75, 185, 7, 197, 249, 251, 142, 185, 165, 59, 33, 250, 190, 15, 
      123, 180, 218, 201, 90, 141, 122, 168, 176, 22, 88, 238, 133, 251, 110, 
      167, 175, 185, 98, 138, 72, 177, 97, 127, 65, 248, 215, 217, 195, 86, 
      178, 218, 133, 253, 81, 123, 208, 236, 9, 38, 188, 205, 191, 188, 106, 
      149, 68, 55, 75, 121, 27, 64, 164, 203, 32, 6, 41, 131, 36, 134, 117, 
      160, 228, 58, 74, 226, 74, 173, 202, 104, 249, 9, 89, 192, 149, 140}]]],
   "ToolsOpen" -> True, "StatusMessage" -> "", "TryRealOnly" -> False},
CreateCellID->True,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
       CellTags -> {"MainDockedCell"}, CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{39, 5}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    AutoQuoteCharacters -> {}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.458824, 0.458824, 0.458824]], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[
               0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
                1.]]}, StripOnInput -> False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "]]}, {
              FaceForm[
               RGBColor[
               0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
                1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, 
           ImageSize -> {11., 11.}, PlotRange -> {{0., 11.}, {0., 11.}}, 
           AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
           "\"Click for more information\""}, "PrettyTooltipTemplate"], 
         ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ParentCell[
              EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ParentCell[
                EvaluationCell[]], {
               TaggingRules, "AttachedMoreInfoTag"}] === #], CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ParentCell[
                 EvaluationCell[]], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
          "PrettyTooltipTemplate"], ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] === #],
             CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ReleaseHold[#3], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.75], 
                 Thickness[
                  NCache[
                   Rational[2, 45], 0.044444444444444446`]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.5], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], 
                    Graphics[{
                    RGBColor[
                    0.9882352941176471, 0.4196078431372549, 
                    0.20392156862745098`], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]], 
                    "Click to copy to the clipboard"], 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Graphics[{
                    RGBColor[0, 
                    Rational[2, 3], 0], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "Copied"]], UpdateInterval -> 
                    1, TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain", 
           StripOnInput -> False], Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8, StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain"], 
          Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8], "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           ButtonBox[
            StyleBox[
            "\"Insert Code Group\"", "Text", FontFamily -> "Source Sans Pro", 
             FontSize -> 11, StripOnInput -> False], ButtonFunction :> 
            With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
              Quiet[
               
               Block[{$ContextPath = RSNB`$cp$, 
                 ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                 False}, 
                Internal`WithLocalSettings[
                 ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                  Needs["ResourceSystemClient`DefinitionNotebook`"], 
                  ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                  RSNB`nb$, 
                   
                   ComputationalEssayHelpers`Private`\
createComputationalParagraph[]], 
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
            BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue[Enabled], 
               FEPrivate`If[
                CurrentValue["MouseOver"], {
                FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                FontColor -> 
                 RGBColor[
                  0.17960779999999998`, 0.17960779999999998`, 
                   0.17960779999999998`]}], {
               FontColor -> 
                RGBColor[
                 0.5898038999999999, 0.5898038999999999, 
                  0.5898038999999999]}], Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
            Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
            "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
            Evaluator -> Automatic], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Headings\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Section", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "4") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Section"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "5") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsubsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "6") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsubsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], Delimiter, DynamicBox[
               ToBoxes[
                
                Grid[{{"Title", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "1") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Title"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subtitle", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "2") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subtitle"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Chapter", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "3") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Chapter"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Author\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Author"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Abstract\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Abstract"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Text\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Text", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Text"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"CodeText", ((((" (" <> "Shift+") <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "CodeText"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Item\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Item"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             StyleBox[
              
              TemplateBox[{
               "\"Open/Close Groups\"", 
                "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\"\
"}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
              StripOnInput -> False], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {
            "\"Open Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {1 -> RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "ColumnsIndexed" -> {1 -> 0, -1 -> 0}, "Rows" -> {{Automatic}}}, 
         FrameStyle -> GrayLevel[0.75]], "Grid"]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           TagBox[
            GridBox[{{
               GraphicsBox[{{
                  Thickness[0.03333333333333333], {
                   FaceForm[{
                    RGBColor[
                    0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27.,
                     1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                    2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23.,
                     2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.,
                     2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                    5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                    4.}, {11., 3.}, {8., 3.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
                    0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{9.697299999999998, 24.522}, {
                    9.133299999999998, 24.645}, {8.861299999999998, 
                    24.259999999999998`}, {9.313299999999998, 24.092}}, {{
                    9.291299999999998, 23.933}, {8.9683, 
                    24.052999999999997`}, {9.2183, 23.726999999999997`}, {
                    9.587299999999999, 23.601}}, {{9.553299999999998, 
                    23.447}, {9.169299999999998, 23.578}, {8.760299999999999, 
                    23.456999999999997`}, {9.102299999999998, 
                    23.348999999999997`}}, {{9.083299999999998, 22.633}, {
                    9.025299999999998, 23.208}, {8.567299999999998, 23.354}, {
                    8.555299999999999, 22.865}}, {{8.521299999999998, 
                    23.551}, {9.039299999999999, 23.703}, {8.711299999999998, 
                    24.13}, {8.2183, 23.962999999999997`}}, {{8.4073, 
                    23.197}, {8.171299999999999, 22.851}, {8.171299999999999, 
                    22.445}, {8.398299999999999, 22.837}}, {{
                    8.091299999999999, 23.014}, {8.395299999999999, 23.458}, {
                    8.091299999999999, 23.871}, {7.786299999999999, 
                    23.458}}, {{8.010299999999999, 22.851}, {
                    7.773299999999999, 23.197}, {7.782299999999998, 22.837}, {
                    8.010299999999999, 22.445}}, {{7.964299999999999, 
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                    7.141299999999999, 23.703}, {7.659299999999998, 
                    23.551}}, {{7.626299999999999, 22.865}, {
                    7.614299999999998, 23.354}, {7.155299999999999, 23.209}, {
                    7.097299999999999, 22.633999999999997`}}, {{
                    7.078299999999999, 23.348999999999997`}, {
                    7.422299999999998, 23.456999999999997`}, {
                    7.0112999999999985`, 23.578}, {6.6282999999999985`, 
                    23.447}}, {{6.593299999999998, 23.601}, {
                    6.962299999999999, 23.726999999999997`}, {
                    7.214299999999998, 24.054}, {6.889299999999999, 
                    23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                    7.319299999999998, 24.259999999999998`}, {
                    7.0482999999999985`, 24.645}, {6.484299999999998, 
                    24.522}}, {{7.113299999999999, 25.217}, {
                    7.158299999999999, 24.761}, {7.356299999999999, 
                    24.479999999999997`}, {7.344299999999999, 24.904}}, {{
                    7.5032999999999985`, 24.817999999999998`}, {
                    7.518299999999998, 24.279}, {8.010299999999999, 24.113}, {
                    8.010299999999999, 24.637999999999998`}}, {{
                    7.2452999999999985`, 25.302}, {7.4712999999999985`, 
                    24.997}, {7.8622999999999985`, 24.857}, {
                    7.656299999999998, 25.122}}, {{7.800299999999998, 
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                    25.192}, {8.091299999999999, 25.689}}, {{
                    8.171299999999999, 24.637999999999998`}, {
                    8.171299999999999, 24.113}, {8.663299999999998, 24.279}, {
                    8.677299999999999, 24.817999999999998`}}, {{
                    8.836299999999998, 24.904}, {8.8243, 
                    24.479999999999997`}, {9.022299999999998, 24.761}, {
                    9.068299999999999, 25.217}}, {{8.318299999999999, 
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                    25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                    "]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.,
                     25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                    26.}, {11., 26.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {
                    24., 20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 
                    20.}, {18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {
                    10., 19.}, {6., 19.}}, {{11., 19.}, {17., 19.}, {17., 
                    18.}, {11., 18.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                    "]]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                    "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                    "]}]}}}, {
                ImageSize -> {Automatic, 32}, 
                 ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                 Scaled[0.25], AspectRatio -> Automatic, 
                 ImageSize -> {30., 30.}, 
                 PlotRange -> {{0., 30.}, {0., 30.}}}], 
               StyleBox[
                TagBox[
                 GridBox[{{
                    StyleBox[
                    "\"Computational Essay\"", FontFamily -> 
                    "Source Sans Pro", FontWeight -> "SemiBold", StripOnInput -> 
                    False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxDividers -> {
                   "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], FontSize -> 24, FontColor -> GrayLevel[1], 
                StripOnInput -> False]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", "\"\""}, {
           ActionMenuBox[
            TemplateBox[{
              TemplateBox[{
                TemplateBox[{"\"Sample Content\"", 
                  TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                 "RowDefault"], 
                "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\""}, "PrettyTooltipTemplate"], Null& , 
              "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\"", True}, "OrangeButtonTemplate"], {
            "\"Insert Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`insertSampleContent[]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Clear Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    Module[{$CellContext`cells = Flatten[
                    Map[{NotebookFind[
                    ButtonNotebook[], #, All, CellTags, AutoScroll -> False]; 
                    SelectedCells[]}& , {
                    "ExampleTopicSentence", "TopicSentenceButton", 
                    "ExampleCodeText", "ExampleInput", "ExampleOutput", 
                    "EssayStructureExample", "CitationExample", 
                    "SectionMoreInfoYourEssayTitle", 
                    "SectionMoreInfoAuthorInfoButton", 
                    "SectionMoreInfoAbstract", 
                    "SectionMoreInfoSectionHeaderInfoButton"}]]}, 
                    NotebookDelete[$CellContext`cells]]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sample Essay\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    SystemOpen["https://wolfr.am/SampleEssay"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           
           TemplateBox[{
            "\"Open Guidelines\"", SystemOpen[
             "https://wolfr.am/ComputationalEssayGuidelines"]& , "\"\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             TemplateBox[{
               TagBox[
                GridBox[{{"\"Tools\"", 
                   PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{0., 0.65}, {0., -0.65}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None], True -> 
                    GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[-0.1]]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
               "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`ToggleToolbar[
              ButtonNotebook[]]& , "\"Toggle documentation toolbar\"", False},
             "OrangeButtonTemplate"], 
           TagBox[
            
            GridBox[{{"\"\"", "\"\""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxDividers -> {
              "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{2}}},
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
             RGBColor[0.99215, 0.843125, 0.68235]], "Grid"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Check\"", "\"Check notebook for potential errors\""}, 
              "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`CheckDefinitionNotebook[
              ButtonNotebook[]]& , "\"Check notebook for potential errors\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Publish to Cloud\"", 
               "\"Publish your computational essay to the cloud\""}, 
              "PrettyTooltipTemplate"], 
             With[{$CellContext`nb = ButtonNotebook[]}, CreateDialog[
                
                ComputationalEssayHelpers`Private`createSubmissionDialog[$\
CellContext`nb], WindowSize -> {350, 150}, Background -> White, WindowFrame -> 
                "Normal", "Evaluator" -> "System"]; Null]& , 
             "\"Publish your computational essay to the cloud\"", False}, 
            "OrangeButtonTemplate"], 
           ItemBox[
            StyleBox[
             DynamicBox[
              ToBoxes[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
               StandardForm], Evaluator -> "System", 
              Initialization :> (CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
               "")], "Text", 
             GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
            StripOnInput -> False], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Submit to Notebook Archive\"", 
               "\"Submit your essay to the Wolfram Notebook Archive\""}, 
              "PrettyTooltipTemplate"], 
             ComputationalEssayHelpers`Private`submitEssay[]& , 
             "\"Submit your essay to the Wolfram Notebook Archive\"", False}, 
            "OrangeButtonTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
           "Rows" -> {{Center}}}, AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.9843, 0.68625, 0.3647], 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {
            1 -> RGBColor[0.9843, 0.68625, 0.3647], 2 -> 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "Columns" -> {5, {0.9}, 5}, 
           "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 1.55}}, FrameStyle -> 
         RGBColor[0.9843, 0.68625, 0.3647]], "Grid"]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{{
                Thickness[0.03333333333333333], {
                 FaceForm[{
                   RGBColor[
                   0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27., 
                  1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                  2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                 FaceForm[{
                   RGBColor[0.898, 0.898, 0.898], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 
                  2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22., 
                  2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                  5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                  4.}, {11., 3.}, {8., 3.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{9.697299999999998, 24.522}, {9.133299999999998, 
                   24.645}, {8.861299999999998, 24.259999999999998`}, {
                   9.313299999999998, 24.092}}, {{9.291299999999998, 
                   23.933}, {8.9683, 24.052999999999997`}, {9.2183, 
                   23.726999999999997`}, {9.587299999999999, 23.601}}, {{
                   9.553299999999998, 23.447}, {9.169299999999998, 23.578}, {
                   8.760299999999999, 23.456999999999997`}, {
                   9.102299999999998, 23.348999999999997`}}, {{
                   9.083299999999998, 22.633}, {9.025299999999998, 23.208}, {
                   8.567299999999998, 23.354}, {8.555299999999999, 
                   22.865}}, {{8.521299999999998, 23.551}, {9.039299999999999,
                    23.703}, {8.711299999999998, 24.13}, {8.2183, 
                   23.962999999999997`}}, {{8.4073, 23.197}, {
                   8.171299999999999, 22.851}, {8.171299999999999, 22.445}, {
                   8.398299999999999, 22.837}}, {{8.091299999999999, 
                   23.014}, {8.395299999999999, 23.458}, {8.091299999999999, 
                   23.871}, {7.786299999999999, 23.458}}, {{8.010299999999999,
                    22.851}, {7.773299999999999, 23.197}, {7.782299999999998, 
                   22.837}, {8.010299999999999, 22.445}}, {{7.964299999999999,
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                   7.141299999999999, 23.703}, {7.659299999999998, 
                   23.551}}, {{7.626299999999999, 22.865}, {7.614299999999998,
                    23.354}, {7.155299999999999, 23.209}, {7.097299999999999, 
                   22.633999999999997`}}, {{7.078299999999999, 
                   23.348999999999997`}, {7.422299999999998, 
                   23.456999999999997`}, {7.0112999999999985`, 23.578}, {
                   6.6282999999999985`, 23.447}}, {{6.593299999999998, 
                   23.601}, {6.962299999999999, 23.726999999999997`}, {
                   7.214299999999998, 24.054}, {6.889299999999999, 
                   23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                   7.319299999999998, 24.259999999999998`}, {
                   7.0482999999999985`, 24.645}, {6.484299999999998, 
                   24.522}}, {{7.113299999999999, 25.217}, {7.158299999999999,
                    24.761}, {7.356299999999999, 24.479999999999997`}, {
                   7.344299999999999, 24.904}}, {{7.5032999999999985`, 
                   24.817999999999998`}, {7.518299999999998, 24.279}, {
                   8.010299999999999, 24.113}, {8.010299999999999, 
                   24.637999999999998`}}, {{7.2452999999999985`, 25.302}, {
                   7.4712999999999985`, 24.997}, {7.8622999999999985`, 
                   24.857}, {7.656299999999998, 25.122}}, {{7.800299999999998,
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                   25.192}, {8.091299999999999, 25.689}}, {{8.171299999999999,
                    24.637999999999998`}, {8.171299999999999, 24.113}, {
                   8.663299999999998, 24.279}, {8.677299999999999, 
                   24.817999999999998`}}, {{8.836299999999998, 24.904}, {
                   8.8243, 24.479999999999997`}, {9.022299999999998, 
                   24.761}, {9.068299999999999, 25.217}}, {{8.318299999999999,
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                   25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                   "]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11., 
                  25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                  26.}, {11., 26.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {24.,
                   20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 20.}, {
                  18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {10., 19.}, {
                  6., 19.}}, {{11., 19.}, {17., 19.}, {17., 18.}, {11., 
                  18.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                  "]]}, {
                 FaceForm[{
                   RGBColor[0.392, 0.392, 0.392], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                   "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                   "]}]}}}, {
              ImageSize -> 12, AspectRatio -> Automatic, 
               ImageSize -> {30., 30.}, PlotRange -> {{0., 30.}, {0., 30.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
         "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
         Dynamic[
           FEPrivate`If[
            CurrentValue[Enabled], 
            GrayLevel[1], 
            RGBColor[0.8730375, 0.83578125, 0.7955875]], Evaluator -> 
           "System"], StripOnInput -> False], ButtonFunction :> 
        With[{RSNB`nb$ = ButtonNotebook[]}, 
          If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
            ProgressIndicator[Appearance -> "Necklace"]]; 
          With[{RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False}, 
              Internal`WithLocalSettings[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; 
                Needs["ResourceSystemClient`DefinitionNotebook`"], 
                ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                RSNB`nb$, 
                 #2[]], 
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 False; Null]; Null]]]; 
          CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; Null],
         FrameMargins -> {{5, 5}, {0, 0}}, 
        Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1R5n1BhlAEFANlwxXNmaCoem
KIPacD1kBBQBisOVba1zbos1QlMDQUBxoCzEtUAtjRhGQVAj2EAGMCBGGZGm
Ee82In1KfLgREwvExCkA9SYWEg==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Hover" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1Zds2ptsAkFANlwxXNmaCoee
JJP7c4J/r4+FICAbKAIUhyvbWufcn2L6eH4IXA0EAUWA4kBZiGuBWiammqGp
gSCgOFCWAQyIUUakacS7jUifEh9uxMQCMXEKAB4IRIc=
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaNDUxIhCFkQWRlQ6vOz678/PIEgIBuuGK7s6Iz0
X++f/DnY+Ht9LAQB2UARoDhc2c4Wry/Pb/zZVw1XA1W5rxooDpSFuBZk1Nv7
aGogCCgOlGUAA2KUEWka8W4j0qfEhxsxsUBMnAIAq2R1ew==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
        Background -> RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
        Method -> "Queued", ImageSize -> {All, 23}, Enabled -> Dynamic[
          Not[
           TrueQ[ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
          TrackedSymbols :> {
           ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
        Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              AdjustmentBox[
               TemplateBox[{
                 ActionMenuBox[
                  TagBox[
                   PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                   MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                  Method -> "Queued"], "\"View suggestions\""}, 
                "PrettyTooltipTemplate"], BoxBaselineShift -> -0.3]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -1.}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05555555555555555], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh4qXaoYcOfoO
m+a+X37stKZDbP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4PzZRxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA8nn+Z
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.175292500000001, 
             7.416875}, {7.796855000000001, 11.3084375}, {7.796855000000001, 
             13.38}, {10.11998, 13.38}, {10.11998, 11.3084375}, {
             9.741542500000001, 7.416875}, {8.175292500000001, 
             7.416875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cTvZcLf/4oOD6tE1rk/5HNQjDzAkqeL4FsusdsW
1KjgwAAGAg7hCSdehX2Xd5BvfR24Q07QwaZCOJPjjZyDHdf1xQW2Qg56LJYa
iWlyDv2HvmrEzBeG80GmVbmIwvkvtjT6Sb8Qg+t/BLLPUwJuPti6DEm4/WD7
2qTg7gMZJyIm7QBzP4y/zEVob88lJTi/7+dk7hV1ynD9c3LzfPxZVODmr3ro
0futUwVu/0bpbbqnzqjA3Qfjw9wP48P8B9MP8z/MfFj4wOyHhR/MfbDwRQ9/
ACBxmlc=
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.7185389999999999, 0.5009625, 0.266231]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.47902599999999995`, 0.333975, 0.17748733333333333`]], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.854902, 0.396078, 0.145098], 
       RGBColor[
       0.0196078431372549, 0.28627450980392155`, 0.6509803921568628]]]], 
   Cell[
    StyleData["StringTypeLink"], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        DynamicBox[
         If[
          CurrentValue["MouseOver"], 
          ButtonBox[
           
           StyleBox[#, FontColor -> 
            RGBColor[0.9686274509803922, 0.4666666666666667, 0.]], 
           ButtonData -> #2], 
          ButtonBox[#, ButtonData -> #2]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {
     BaseStyle -> {FontColor -> GrayLevel[0.46666667], "Link"}}], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.905882]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, StyleMenuListing -> None, Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.880722, 0.611041, 0.142051], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.9821083, 0.94165615, 0.87130765]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.368417, 0.506779, 0.709798], Background -> 
    RGBColor[0.90526255, 0.92601685, 0.9564697]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.560181, 0.691569, 0.194885], Background -> 
    RGBColor[0.9340271499999999, 0.95373535, 0.87923275]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    RGBColor[0.898039, 0.898039, 0.898039]], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}]}, Visible -> False, 
  FrontEndVersion -> "13.1 for Microsoft Windows (64-bit) (June 16, 2022)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"5336134a-0f1b-4856-8dad-8b74f63b1f45"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Examples"->{
  Cell[580, 22, 420, 6, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "Your Essay Title"->{
  Cell[580, 22, 420, 6, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "AuthorName"->{
  Cell[1003, 30, 266, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
   CellTags->"AuthorName",
   CellID->960727095]},
 "Abstract"->{
  Cell[1272, 37, 811, 15, 85, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]},
 "TemplateCell"->{
  Cell[1272, 37, 811, 15, 85, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Examples", 973507, 21298},
 {"Your Essay Title", 973693, 21302},
 {"AuthorName", 973873, 21306},
 {"Abstract", 974033, 21310},
 {"TemplateCell", 974216, 21314}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 420, 6, 98, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577],
Cell[1003, 30, 266, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
 CellTags->"AuthorName",
 CellID->960727095],
Cell[1272, 37, 811, 15, 85, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573],
Cell[CellGroupData[{
Cell[2108, 56, 238, 3, 67, "Section",ExpressionUUID->"68ee1a6a-ca5f-436c-a3bc-baa2926e7043",
 CellID->297055934],
Cell[2349, 61, 204, 2, 35, "Text",ExpressionUUID->"8530cf4f-d284-4780-9249-2070f8e67913",
 CellID->408283766],
Cell[CellGroupData[{
Cell[2578, 67, 715, 18, 48, "Input",ExpressionUUID->"bd7ffdd2-5fa4-4ac5-82a6-a1a75acd8263",
 CellID->90433782],
Cell[3296, 87, 2736, 59, 52, "Output",ExpressionUUID->"9d5175e2-34ba-4882-91bc-ca74f647d5ad",
 CellID->698652991]
}, Open  ]],
Cell[CellGroupData[{
Cell[6069, 151, 223, 4, 28, "Input",ExpressionUUID->"277b421e-87c0-4bb6-a2d4-fa285d65fb5c",
 CellID->5113196],
Cell[6295, 157, 3687, 73, 115, "Output",ExpressionUUID->"ab304271-8f2d-48aa-b988-0d07045922ae",
 CellID->351266580]
}, Open  ]],
Cell[9997, 233, 216, 2, 35, "Text",ExpressionUUID->"02b8627f-b104-424c-ad7c-f357debd8f89",
 CellID->365794056],
Cell[CellGroupData[{
Cell[10238, 239, 231, 4, 28, "Input",ExpressionUUID->"044e79d4-ef61-4589-8a45-d7bd1017fc35",
 CellID->146004429],
Cell[10472, 245, 176, 3, 32, "Output",ExpressionUUID->"bb3d0b06-8264-4f02-b8db-ce45a39ced6c",
 CellID->108288531]
}, Open  ]],
Cell[10663, 251, 196, 2, 35, "Text",ExpressionUUID->"8291d785-c393-4eae-8842-c3efe614a7e7",
 CellID->31212463],
Cell[CellGroupData[{
Cell[10884, 257, 714, 18, 48, "Input",ExpressionUUID->"f5fab380-d244-4790-b977-dcac9af2678e",
 CellID->478354864],
Cell[11601, 277, 2681, 58, 52, "Output",ExpressionUUID->"a2f96edd-14c4-4319-a002-e82dc4260ea4",
 CellID->565849212]
}, Open  ]],
Cell[14297, 338, 189, 2, 35, "Text",ExpressionUUID->"2ccf2051-bf24-4788-8c12-f9a9df6e6dbb",
 CellID->110720536],
Cell[CellGroupData[{
Cell[14511, 344, 222, 4, 28, "Input",ExpressionUUID->"537b7f31-9278-4daf-9590-3de800de8020",
 CellID->202960248],
Cell[14736, 350, 3660, 73, 115, "Output",ExpressionUUID->"6c18784e-173e-4224-8165-94f5071a8871",
 CellID->413268153]
}, Open  ]],
Cell[18411, 426, 188, 2, 35, "Text",ExpressionUUID->"d822f978-4ba8-4152-af72-778323097857",
 CellID->233630521],
Cell[CellGroupData[{
Cell[18624, 432, 226, 4, 28, "Input",ExpressionUUID->"357fadcb-869d-4924-abbd-dffd1ccddb5d",
 CellID->336076158],
Cell[18853, 438, 3680, 73, 115, "Output",ExpressionUUID->"471a36da-527c-441a-a78c-e14ef4892c9e",
 CellID->222755012]
}, Open  ]],
Cell[22548, 514, 190, 2, 35, "Text",ExpressionUUID->"7cf782ef-d78b-4168-9c8e-0ff6e5151a4c",
 CellID->921809795],
Cell[CellGroupData[{
Cell[22763, 520, 804, 20, 105, "Input",ExpressionUUID->"36b409d7-6ad0-4771-8ed9-31622e02728e",
 CellID->480261],
Cell[23570, 542, 2752, 57, 52, "Output",ExpressionUUID->"0592235c-28da-4302-8dd2-dfb0d5193278",
 CellID->619713253]
}, Open  ]],
Cell[CellGroupData[{
Cell[26359, 604, 233, 4, 28, "Input",ExpressionUUID->"143e485f-8de4-40ab-b51b-63a27bfd3ec3",
 CellID->21636808],
Cell[26595, 610, 4786, 97, 112, "Output",ExpressionUUID->"504d0864-ed23-4abd-aa37-6b300fa71844",
 CellID->607427284]
}, Open  ]],
Cell[31396, 710, 235, 4, 35, "Text",ExpressionUUID->"257f466a-f06c-4120-ac8f-0bf3391ab3de",
 CellID->194581842],
Cell[31634, 716, 369, 9, 28, "Input",ExpressionUUID->"b86b5db6-5fc9-43b0-a18c-510857f32b2c",
 CellID->216073794],
Cell[CellGroupData[{
Cell[32028, 729, 232, 4, 28, "Input",ExpressionUUID->"2be9714f-3eed-4fc3-80e5-aa1239496334",
 CellID->588820731],
Cell[32263, 735, 171, 3, 32, "Output",ExpressionUUID->"27534b13-624a-4b7b-9bb9-e3b9d34cd9eb",
 CellID->328489301]
}, Open  ]],
Cell[32449, 741, 225, 3, 35, "Text",ExpressionUUID->"8598a091-e2d3-44e5-958a-48965b991ed8",
 CellID->66752073],
Cell[CellGroupData[{
Cell[32699, 748, 1052, 27, 105, "Input",ExpressionUUID->"e6981f40-eea7-47f2-913f-ffb15fb3bf48",
 CellID->162292671],
Cell[33754, 777, 2781, 60, 52, "Output",ExpressionUUID->"636c44ff-155a-4f65-9452-a04ff1123ec7",
 CellID->10661650]
}, Open  ]],
Cell[CellGroupData[{
Cell[36572, 842, 233, 4, 28, "Input",ExpressionUUID->"8c5b534a-58d5-47ce-ac6b-df282155beba",
 CellID->4537031],
Cell[36808, 848, 4367, 86, 143, "Output",ExpressionUUID->"55307830-651c-4587-b3c0-c5121189b792",
 CellID->437164944]
}, Open  ]],
Cell[41190, 937, 178, 2, 35, "Text",ExpressionUUID->"7cdf07d3-0c9a-4484-9813-5b6dac26d35c",
 CellID->92676727],
Cell[CellGroupData[{
Cell[41393, 943, 404, 12, 61, "Input",ExpressionUUID->"bafb8a08-310d-45b8-b7f3-9d3025241626",
 CellID->133439464],
Cell[41800, 957, 173, 3, 32, "Output",ExpressionUUID->"f0857202-1ef9-4600-8f7d-f887f11deae1",
 CellID->12257223]
}, Open  ]],
Cell[41988, 963, 428, 7, 104, "Text",ExpressionUUID->"3b5d1e7f-2f12-4de2-97f9-1e9e4e4be480",
 CellID->91320625],
Cell[42419, 972, 276, 3, 35, "Text",ExpressionUUID->"16dfc76c-554d-403a-bc47-d7433ccb4fb4",
 CellID->329437833],
Cell[CellGroupData[{
Cell[42720, 979, 1109, 27, 105, "Input",ExpressionUUID->"0cbf6dd0-2545-45c4-bcf7-020259941d87",
 CellID->325333148],
Cell[43832, 1008, 2804, 60, 52, "Output",ExpressionUUID->"fdb34c48-25bb-4539-8496-755b92376fcd",
 CellID->74215966]
}, Open  ]],
Cell[CellGroupData[{
Cell[46673, 1073, 293, 5, 28, "Input",ExpressionUUID->"d03c65a2-bad7-4fe2-9813-dc7ae197ecfd",
 CellID->547475352],
Cell[46969, 1080, 4502, 89, 143, "Output",ExpressionUUID->"95479851-29b3-4f6d-94dd-24b04e6a918a",
 CellID->76130598]
}, Open  ]],
Cell[51486, 1172, 179, 2, 35, "Text",ExpressionUUID->"d73950f1-86a2-4d68-8f3a-7a305eed3627",
 CellID->197591961],
Cell[CellGroupData[{
Cell[51690, 1178, 523, 16, 61, "Input",ExpressionUUID->"dab7f6ac-635d-4693-877c-485e22882fc7",
 CellID->56525868],
Cell[52216, 1196, 198, 3, 32, "Output",ExpressionUUID->"acbd1003-53e5-468a-a9f4-a4e3f4200249",
 CellID->153597847]
}, Open  ]],
Cell[52429, 1202, 340, 4, 35, "Text",ExpressionUUID->"ae2cd002-4cb7-458b-a9b6-41a54ecaf202",
 CellID->136354319],
Cell[CellGroupData[{
Cell[52794, 1210, 1255, 29, 124, "Input",ExpressionUUID->"2ad36b42-81f4-43d7-ba09-e1b4da301a47",
 CellID->4439118],
Cell[54052, 1241, 2890, 61, 52, "Output",ExpressionUUID->"71535307-335a-494d-b74e-472f2fc91b2d",
 CellID->187522815]
}, Open  ]],
Cell[CellGroupData[{
Cell[56979, 1307, 351, 6, 28, "Input",ExpressionUUID->"94e43f29-1e8c-41f8-9f97-d2927c71a34a",
 CellID->44938902],
Cell[57333, 1315, 4145, 81, 143, "Output",ExpressionUUID->"928007ce-b105-486b-95e3-c041b46b0cb9",
 CellID->100655857]
}, Open  ]],
Cell[61493, 1399, 179, 2, 35, "Text",ExpressionUUID->"174ff86e-b8d2-46ec-804b-dd8c6428eda0",
 CellID->565312492],
Cell[CellGroupData[{
Cell[61697, 1405, 589, 15, 61, "Input",ExpressionUUID->"ba65d2df-c111-408f-b24e-5814be2471c7",
 CellID->584413782],
Cell[62289, 1422, 249, 4, 32, "Output",ExpressionUUID->"674422ee-beca-4668-b13e-5c67eb9aaaa8",
 CellID->691135565]
}, Open  ]],
Cell[62553, 1429, 183, 2, 35, "Text",ExpressionUUID->"6ed2bee0-5c6b-42df-9b46-8ccdfa68dda3",
 CellID->220269512],
Cell[CellGroupData[{
Cell[62761, 1435, 1001, 25, 124, "Input",ExpressionUUID->"60ab6cd5-730e-43ae-a508-26eeba2ba805",
 CellID->33086702],
Cell[63765, 1462, 2782, 59, 52, "Output",ExpressionUUID->"4e506ff7-ab7a-449a-adf1-8f97d1752f3e",
 CellID->177525169]
}, Open  ]],
Cell[CellGroupData[{
Cell[66584, 1526, 352, 6, 28, "Input",ExpressionUUID->"dee41731-85d7-4756-8c80-b441613629d8",
 CellID->275049321],
Cell[66939, 1534, 4579, 88, 143, "Output",ExpressionUUID->"822259ef-4dc7-4d4b-b2d2-ba8aad0d440a",
 CellID->439729726]
}, Open  ]],
Cell[CellGroupData[{
Cell[71555, 1627, 552, 17, 61, "Input",ExpressionUUID->"77c56f6c-b6ab-48e7-9545-eeb825ca45e5",
 CellID->80694643],
Cell[72110, 1646, 197, 3, 32, "Output",ExpressionUUID->"6c3399ab-1309-455c-a567-0329fea3e1d6",
 CellID->37916526]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[72356, 1655, 164, 2, 67, "Section",ExpressionUUID->"77bcefa0-007c-43f7-a73d-226998ad2cc9",
 CellID->85707803],
Cell[72523, 1659, 241, 3, 35, "Text",ExpressionUUID->"4a7a4ab3-697a-4ebb-9196-eddd34f3ae82",
 CellID->315669447],
Cell[CellGroupData[{
Cell[72789, 1666, 1108, 27, 105, "Input",ExpressionUUID->"8e9d4b15-d210-487f-abd2-5ef4e29281d0",
 CellID->38925346],
Cell[73900, 1695, 2997, 63, 52, "Output",ExpressionUUID->"1475c5f5-1996-4eb5-afea-8a496e01d3f9",
 CellID->218240842]
}, Open  ]],
Cell[CellGroupData[{
Cell[76934, 1763, 281, 5, 28, "Input",ExpressionUUID->"20f325e4-44fd-42d8-88db-10a65714867f",
 CellID->427212564],
Cell[77218, 1770, 3831, 76, 115, "Output",ExpressionUUID->"3c89610b-fe5e-4ea7-9b99-fd2e151b69d8",
 CellID->247073058]
}, Open  ]],
Cell[CellGroupData[{
Cell[81086, 1851, 396, 8, 28, "Input",ExpressionUUID->"8c3e7326-52de-4365-858d-5e6fc4ee1350",
 CellID->13920349],
Cell[81485, 1861, 251, 4, 32, "Output",ExpressionUUID->"62fbdf36-5c03-4099-9187-485d88ba8d33",
 CellID->9771588]
}, Open  ]],
Cell[81751, 1868, 205, 2, 35, "Text",ExpressionUUID->"91d333a7-67ec-4735-a422-27e7f9ead925",
 CellID->559467932],
Cell[CellGroupData[{
Cell[81981, 1874, 1058, 25, 130, "Input",ExpressionUUID->"18ff0151-dae2-4d2c-ac09-6584b4e200fd",
 CellID->545692450],
Cell[83042, 1901, 2793, 58, 52, "Output",ExpressionUUID->"7af8e289-0a71-4ed5-8946-01c31be96b3f",
 CellID->11863418]
}, Open  ]],
Cell[CellGroupData[{
Cell[85872, 1964, 236, 4, 28, "Input",ExpressionUUID->"5235e84d-82cf-4bf1-954b-3a2df338c1e9",
 CellID->107795911],
Cell[86111, 1970, 5020, 100, 112, "Output",ExpressionUUID->"45b9fa63-eb95-420c-ae57-1dd6baaea3a4",
 CellID->256440883]
}, Open  ]],
Cell[CellGroupData[{
Cell[91168, 2075, 545, 12, 37, "Input",ExpressionUUID->"9362506f-8f9b-468f-bf8e-9526e9cf6867",
 CellID->522098002],
Cell[91716, 2089, 244, 4, 32, "Output",ExpressionUUID->"28ebced3-a409-45f4-9370-baa1ee942071",
 CellID->283074110]
}, Open  ]],
Cell[CellGroupData[{
Cell[91997, 2098, 184, 2, 54, "Subsection",ExpressionUUID->"1dd3fe05-1f83-4821-97b2-652927dafb2e",
 CellID->192764471],
Cell[92184, 2102, 247, 3, 35, "Text",ExpressionUUID->"2d4a308b-a52a-4587-819c-c7a1457a6688",
 CellID->255391093],
Cell[CellGroupData[{
Cell[92456, 2109, 1810, 42, 202, "Input",ExpressionUUID->"60ba4593-365d-453e-ae9d-175a58281fb1",
 CellID->276431584],
Cell[94269, 2153, 3322, 70, 52, "Output",ExpressionUUID->"0113e808-5bef-44ab-be2c-f008f01f2a3e",
 CellID->67148289]
}, Open  ]],
Cell[CellGroupData[{
Cell[97628, 2228, 271, 5, 28, "Input",ExpressionUUID->"94e2e215-f67a-4279-8172-e7b729233903",
 CellID->21530314],
Cell[97902, 2235, 4054, 78, 115, "Output",ExpressionUUID->"2d2b1fe0-42c0-4222-8549-02cf5bc0ee21",
 CellID->87147453]
}, Open  ]],
Cell[CellGroupData[{
Cell[101993, 2318, 528, 10, 28, "Input",ExpressionUUID->"b56d973c-5310-467b-a422-d53ce47272ff",
 CellID->99555948],
Cell[102524, 2330, 297, 5, 32, "Output",ExpressionUUID->"3e2468db-f1f9-4761-9d36-afbbd2a40bd8",
 CellID->152353495]
}, Open  ]],
Cell[102836, 2338, 186, 2, 35, "Text",ExpressionUUID->"3b696cbd-b6f7-439c-81e6-092e8807dbf1",
 CellID->515976200],
Cell[CellGroupData[{
Cell[103047, 2344, 1658, 40, 202, "Input",ExpressionUUID->"a576dbb1-51f0-4715-9628-b46d120cc0de",
 CellID->411808107],
Cell[104708, 2386, 2989, 65, 52, "Output",ExpressionUUID->"5d94ee96-7662-4d4e-be8d-5e1d98a23a60",
 CellID->148351346]
}, Open  ]],
Cell[CellGroupData[{
Cell[107734, 2456, 222, 4, 28, "Input",ExpressionUUID->"e26f18fd-2a1a-4663-bf42-180f73d2327d",
 CellID->55408251],
Cell[107959, 2462, 3696, 73, 115, "Output",ExpressionUUID->"c1e2be79-9e3f-4981-bf8d-50807e294389",
 CellID->239295058]
}, Open  ]],
Cell[CellGroupData[{
Cell[111692, 2540, 341, 7, 28, "Input",ExpressionUUID->"75a2d84c-ef76-4f3f-afef-b8217e685254",
 CellID->101246404],
Cell[112036, 2549, 199, 3, 32, "Output",ExpressionUUID->"3fcd09c9-99b1-4d73-a4c5-e2f21a1ca280",
 CellID->100467336]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[112284, 2558, 196, 2, 54, "Subsection",ExpressionUUID->"e0f6c80a-5a83-4fce-b809-c884d47dc3a4",
 CellID->213528801],
Cell[112483, 2562, 217, 2, 35, "Text",ExpressionUUID->"5a0848c9-0f7e-4c7a-b97e-e6b5951395d3",
 CellID->359833808],
Cell[CellGroupData[{
Cell[112725, 2568, 1299, 31, 204, "Input",ExpressionUUID->"5c4ce7e9-b198-4b2f-bca1-fee0b9e35cb4",
 CellID->266077691],
Cell[114027, 2601, 2979, 61, 52, "Output",ExpressionUUID->"f3c98044-4fa1-4024-b4fb-4e5411005cc1",
 CellID->589123883]
}, Open  ]],
Cell[117021, 2665, 254, 4, 28, "Input",ExpressionUUID->"949297e9-44f6-4afe-b9c6-ced3b5bb60b6",
 CellID->371005559],
Cell[117278, 2671, 5007, 101, 108, "Input",ExpressionUUID->"7d18611f-ae8e-4001-830b-61818d29cab5",
 CellID->26411676],
Cell[CellGroupData[{
Cell[122310, 2776, 591, 14, 37, "Input",ExpressionUUID->"9b45200e-63a5-42ce-986a-36094b725a56",
 CellID->88712965],
Cell[122904, 2792, 479, 13, 42, "Output",ExpressionUUID->"440ddb3a-82dc-4392-b8ad-1bef338361d6",
 CellID->360006111]
}, Open  ]],
Cell[CellGroupData[{
Cell[123420, 2810, 587, 15, 37, "Input",ExpressionUUID->"92929835-dbff-4e09-a904-ceb78ae82b0c",
 CellID->290156576],
Cell[124010, 2827, 201, 3, 32, "Output",ExpressionUUID->"079ab59c-7ca1-47bc-a85f-52c06628b2e1",
 CellID->431670163]
}, Open  ]],
Cell[124226, 2833, 265, 3, 35, "Text",ExpressionUUID->"4ad1ff7f-0f4e-48f7-b6fd-45cb12c0cd46",
 CellID->34212102],
Cell[CellGroupData[{
Cell[124516, 2840, 1398, 32, 111, "Input",ExpressionUUID->"3472aa80-8de2-4d04-a931-5fb962663184",
 CellID->124388410],
Cell[125917, 2874, 3006, 62, 52, "Output",ExpressionUUID->"d7210d48-c9ad-47ce-9e82-7c57973c677d",
 CellID->549218233]
}, Open  ]],
Cell[CellGroupData[{
Cell[128960, 2941, 306, 5, 28, "Input",ExpressionUUID->"5e88a331-f14c-42df-aca9-fea85507039a",
 CellID->363537714],
Cell[129269, 2948, 5166, 103, 112, "Output",ExpressionUUID->"2f619045-0368-4bfa-a607-345aa57c461f",
 CellID->998619139]
}, Open  ]],
Cell[CellGroupData[{
Cell[134472, 3056, 591, 14, 37, "Input",ExpressionUUID->"c16fb5df-40b2-454e-82d4-059ccbbad569",
 CellID->451844696],
Cell[135066, 3072, 511, 14, 42, "Output",ExpressionUUID->"213cf48a-9717-4d71-b094-645a0628fa13",
 CellID->103041546]
}, Open  ]],
Cell[CellGroupData[{
Cell[135614, 3091, 586, 15, 64, "Input",ExpressionUUID->"f3268c96-432c-476d-9159-3f961e636bbf",
 CellID->333576978],
Cell[136203, 3108, 227, 4, 32, "Output",ExpressionUUID->"b67c71b0-7643-4ff6-b1b8-9aa3916a1947",
 CellID->870649907]
}, Open  ]],
Cell[136445, 3115, 192, 2, 35, "Text",ExpressionUUID->"069bf009-85e4-40d0-98c7-ffba437cc461",
 CellID->272809172],
Cell[CellGroupData[{
Cell[136662, 3121, 1591, 34, 223, "Input",ExpressionUUID->"e5d0fbf2-bf4e-4ed9-abde-dd28dc42a2d1",
 CellID->503440717],
Cell[138256, 3157, 3109, 63, 52, "Output",ExpressionUUID->"3359bfe3-8bd8-4b27-8fba-9819e0ba19eb",
 CellID->121370888]
}, Open  ]],
Cell[CellGroupData[{
Cell[141402, 3225, 340, 6, 28, "Input",ExpressionUUID->"91607750-3b92-419a-8090-718dd7ed8bef",
 CellID->149147736],
Cell[141745, 3233, 5610, 114, 129, "Output",ExpressionUUID->"08033f4b-ffe4-4e44-8ef9-b4d289d59292",
 CellID->14141915]
}, Open  ]],
Cell[CellGroupData[{
Cell[147392, 3352, 627, 13, 37, "Input",ExpressionUUID->"73e664dc-12fd-488d-8e46-a3cddf8692a2",
 CellID->363319479],
Cell[148022, 3367, 583, 15, 42, "Output",ExpressionUUID->"d569a8d5-42c4-4e85-bdaa-bed8c1dfabc3",
 CellID->609551380]
}, Open  ]],
Cell[CellGroupData[{
Cell[148642, 3387, 677, 15, 37, "Input",ExpressionUUID->"816d396c-d60c-4ae1-9ce2-b769761654e8",
 CellID->217266423],
Cell[149322, 3404, 534, 14, 42, "Output",ExpressionUUID->"f4b316ea-6c34-48c6-b274-2f4bc570be4c",
 CellID->818602930]
}, Open  ]],
Cell[CellGroupData[{
Cell[149893, 3423, 644, 16, 64, "Input",ExpressionUUID->"f072042c-b989-453f-84f6-9c2e9977e445",
 CellID->545546360],
Cell[150540, 3441, 251, 4, 32, "Output",ExpressionUUID->"f3e0752b-f3f4-4cc0-86da-bc23fa5e089a",
 CellID->579678371]
}, Open  ]],
Cell[150806, 3448, 301, 5, 58, "Text",ExpressionUUID->"75458bfb-a684-44c9-93f5-f1dbac150edc",
 CellID->389085423],
Cell[CellGroupData[{
Cell[151132, 3457, 1677, 37, 223, "Input",ExpressionUUID->"f8e48f32-a4c8-4da0-9f9b-36df30190a48",
 CellID->198027979],
Cell[152812, 3496, 3174, 64, 52, "Output",ExpressionUUID->"9bf3994b-4b5d-4f39-be66-344c06d1bec3",
 CellID->55528738]
}, Open  ]],
Cell[CellGroupData[{
Cell[156023, 3565, 244, 4, 28, "Input",ExpressionUUID->"a449521e-372d-43ef-8f70-ae2aadc7b9b1",
 CellID->415388188],
Cell[156270, 3571, 5336, 108, 129, "Output",ExpressionUUID->"6d0bc984-2d96-451e-a985-f6916b8fc225",
 CellID->288422744]
}, Open  ]],
Cell[CellGroupData[{
Cell[161643, 3684, 498, 12, 37, "Input",ExpressionUUID->"666872c1-1bb0-458a-9a5f-c44e9d52f0fc",
 CellID->344916666],
Cell[162144, 3698, 462, 13, 42, "Output",ExpressionUUID->"1a887b89-ca03-4aee-b5d2-c08bcec7e7cf",
 CellID->517160443]
}, Open  ]],
Cell[CellGroupData[{
Cell[162643, 3716, 469, 13, 64, "Input",ExpressionUUID->"4a83e7c7-2327-41a1-9859-c2474a8eec96",
 CellID->319167979],
Cell[163115, 3731, 199, 3, 32, "Output",ExpressionUUID->"3afecb5a-a360-4205-ac4f-810e2803bb1f",
 CellID->443748173]
}, Open  ]],
Cell[163329, 3737, 589, 15, 92, "Input",ExpressionUUID->"69e40ed1-4a64-4af4-9b4a-a47ace3c1b3e",
 CellID->864606707]
}, Open  ]],
Cell[CellGroupData[{
Cell[163955, 3757, 183, 2, 54, "Subsection",ExpressionUUID->"bd609c1e-d213-4f23-84ce-89e4d6c6874d",
 CellID->360648399],
Cell[164141, 3761, 192, 2, 35, "Text",ExpressionUUID->"b805214f-c8c5-46bb-8ad8-f6775b3156c9",
 CellID->44306504],
Cell[CellGroupData[{
Cell[164358, 3767, 259, 4, 28, "Input",ExpressionUUID->"338e8620-360c-4d86-93d8-2c0f1d00b099",
 CellID->497790157],
Cell[164620, 3773, 21940, 431, 130, "Output",ExpressionUUID->"7dfe1f6b-ba96-47c0-9fb5-637b15d82584",
 CellID->231726372]
}, Open  ]],
Cell[CellGroupData[{
Cell[186597, 4209, 443, 11, 28, "Input",ExpressionUUID->"667ce53a-0445-44cf-bc28-f2f724a75f45",
 CellID->202241763],
Cell[187043, 4222, 1458, 39, 43, "Output",ExpressionUUID->"1d3ad6ac-1b1f-4387-bf76-7726519541f2",
 CellID->526956691]
}, Open  ]],
Cell[CellGroupData[{
Cell[188538, 4266, 527, 14, 48, "Input",ExpressionUUID->"15807319-8bc0-4a6d-ab8c-1d416667f648",
 CellID->253099656],
Cell[189068, 4282, 1454, 39, 43, "Output",ExpressionUUID->"161c19bd-dc45-478d-85b9-b56c6556812e",
 CellID->206848443]
}, Open  ]],
Cell[CellGroupData[{
Cell[190559, 4326, 569, 15, 67, "Input",ExpressionUUID->"457bbfcf-e3f7-4dc9-97fb-6193c3c40342",
 CellID->214285083],
Cell[191131, 4343, 249, 5, 41, "Output",ExpressionUUID->"1f07240a-3d5d-41d4-b252-23b03cb9a797",
 CellID->292248309]
}, Open  ]],
Cell[CellGroupData[{
Cell[191417, 4353, 613, 16, 67, "Input",ExpressionUUID->"79c21afc-32eb-485b-89d0-637b652101be",
 CellID->416537676],
Cell[192033, 4371, 236, 5, 41, "Output",ExpressionUUID->"dc26200e-a2a6-4fb2-aae7-e7e2e8bce9e7",
 CellID->2467889]
}, Open  ]],
Cell[CellGroupData[{
Cell[192306, 4381, 1524, 38, 219, "Input",ExpressionUUID->"68e42d2e-69ae-4030-bd57-e5bea9fecd18",
 CellID->396097841],
Cell[193833, 4421, 3032, 68, 52, "Output",ExpressionUUID->"5bf3da20-b79e-40fb-94f6-c5f5b459cae8",
 CellID->897306820]
}, Open  ]],
Cell[CellGroupData[{
Cell[196902, 4494, 237, 4, 28, "Input",ExpressionUUID->"9dbacc80-8fcd-4c45-a917-17cd978af649",
 CellID->32521073],
Cell[197142, 4500, 5232, 104, 129, "Output",ExpressionUUID->"b5645e41-e209-4225-9bcf-97c9d36c7637",
 CellID->10365728]
}, Open  ]],
Cell[CellGroupData[{
Cell[202411, 4609, 629, 14, 105, "Input",ExpressionUUID->"5875e257-195a-4dad-af03-57bfe3f140db",
 CellID->79913242],
Cell[203043, 4625, 245, 4, 32, "Output",ExpressionUUID->"ea1fc2b1-f6f5-4a0e-a180-35c8c7fb29c1",
 CellID->44008449]
}, Open  ]],
Cell[203303, 4632, 303, 5, 58, "Text",ExpressionUUID->"2c9666c4-8473-4bf3-8f23-7562bfa20c0b",
 CellID->58058591],
Cell[203609, 4639, 205, 2, 35, "Text",ExpressionUUID->"cedb97c4-1c57-4724-9b29-e2680bdf6e55",
 CellID->466496898],
Cell[203817, 4643, 177, 2, 35, "Text",ExpressionUUID->"625eb441-a5bc-47dd-a56e-b605760d6901",
 CellID->336942071],
Cell[CellGroupData[{
Cell[204019, 4649, 398, 8, 48, "Input",ExpressionUUID->"491a3170-035c-4722-b2a1-19a5e6dace9b",
 CellID->45732300],
Cell[204420, 4659, 4221, 95, 202, "Output",ExpressionUUID->"dec7c820-3623-40e8-b378-48f2725c7ea4",
 CellID->371273284]
}, Open  ]],
Cell[CellGroupData[{
Cell[208678, 4759, 756, 20, 86, "Input",ExpressionUUID->"9ac84c63-fe1e-454e-9fc0-bd60bc128804",
 CellID->323269883],
Cell[209437, 4781, 45211, 1544, 1252, "Output",ExpressionUUID->"85373f5d-88e9-4e49-9e05-36e09e6bb638",
 CellID->9097926]
}, Open  ]],
Cell[CellGroupData[{
Cell[254685, 6330, 183, 4, 28, "Input",ExpressionUUID->"9332df61-f060-41c6-905c-07e94a28963d",
 CellID->380267166],
Cell[254871, 6336, 173, 3, 32, "Output",ExpressionUUID->"34103c97-b962-47cf-b083-d6a7a4973b90",
 CellID->11061938]
}, Open  ]],
Cell[CellGroupData[{
Cell[255081, 6344, 183, 4, 28, "Input",ExpressionUUID->"0e145c3c-901a-4b21-9638-109b21a31b88",
 CellID->239791575],
Cell[255267, 6350, 172, 3, 32, "Output",ExpressionUUID->"4aaee5bb-a008-48b6-b749-01b825739c05",
 CellID->546210613]
}, Open  ]],
Cell[255454, 6356, 276, 5, 58, "Text",ExpressionUUID->"84b9974e-ae49-479c-a2c8-3fe9fada5b23",
 CellID->263942513],
Cell[255733, 6363, 1296, 32, 200, "Input",ExpressionUUID->"f9817358-ac11-4f27-9c9b-fb89a89f698f",
 CellID->254508650],
Cell[CellGroupData[{
Cell[257054, 6399, 443, 11, 28, "Input",ExpressionUUID->"207baebc-c356-4ab1-94d3-414a26cb1112",
 CellID->262929551],
Cell[257500, 6412, 1453, 39, 43, "Output",ExpressionUUID->"91bdb742-8e59-4886-890c-4b85db45bbeb",
 CellID->439459778]
}, Open  ]],
Cell[CellGroupData[{
Cell[258990, 6456, 569, 16, 48, "Input",ExpressionUUID->"fcf5d359-2906-4112-8177-5a0bfdeb560d",
 CellID->390296473],
Cell[259562, 6474, 848, 25, 43, "Output",ExpressionUUID->"b44d7e20-784b-4670-a5b2-2bc11459da52",
 CellID->132031938]
}, Open  ]],
Cell[CellGroupData[{
Cell[260447, 6504, 611, 17, 48, "Input",ExpressionUUID->"8049950c-2678-45ee-a416-210ddcb14a3c",
 CellID->20348444],
Cell[261061, 6523, 849, 25, 43, "Output",ExpressionUUID->"b693a982-e707-4c6b-8386-fc587fec1547",
 CellID->210231711]
}, Open  ]],
Cell[CellGroupData[{
Cell[261947, 6553, 651, 18, 67, "Input",ExpressionUUID->"acd20f7f-1666-469a-9935-9f5b627b2dc7",
 CellID->81758676],
Cell[262601, 6573, 3927, 88, 202, "Output",ExpressionUUID->"c8ffa1bb-5742-4da6-bb7d-a231878bed22",
 CellID->4270511]
}, Open  ]],
Cell[CellGroupData[{
Cell[266565, 6666, 1040, 29, 124, "Input",ExpressionUUID->"3221f355-5d3b-4212-bb4c-6d7dd3fd20f8",
 CellID->162809961],
Cell[267608, 6697, 197, 3, 32, "Output",ExpressionUUID->"80ff471a-f942-456d-a737-90a3c2deef59",
 CellID->37675002]
}, Open  ]],
Cell[CellGroupData[{
Cell[267842, 6705, 1892, 50, 276, "Input",ExpressionUUID->"cb147e6b-a7d3-403a-8045-a61e6bc116cd",
 CellID->267795973],
Cell[269737, 6757, 3108, 69, 52, "Output",ExpressionUUID->"e0a496a6-7305-42d7-a303-8b3513dcab91",
 CellID->103814418]
}, Open  ]],
Cell[CellGroupData[{
Cell[272882, 6831, 233, 4, 28, "Input",ExpressionUUID->"601d2c66-5092-4474-b422-186ebf5aba64",
 CellID->124693249],
Cell[273118, 6837, 5198, 104, 129, "Output",ExpressionUUID->"c4e2e4e9-1a61-45a4-b715-13f4cbc9b7ee",
 CellID->20705334]
}, Open  ]],
Cell[CellGroupData[{
Cell[278353, 6946, 779, 20, 86, "Input",ExpressionUUID->"1a53d37b-5626-460d-912e-6723424e4cb7",
 CellID->140469563],
Cell[279135, 6968, 195, 3, 32, "Output",ExpressionUUID->"2ae57d61-fc72-405f-8761-7babe4ed152c",
 CellID->22716745]
}, Open  ]],
Cell[CellGroupData[{
Cell[279367, 6976, 178, 2, 45, "Subsubsection",ExpressionUUID->"2bd2adbd-cb2a-4b73-bb43-c5370589f6cc",
 CellID->459187779],
Cell[279548, 6980, 229, 3, 35, "Text",ExpressionUUID->"acb6fb4a-378e-482c-9924-609797da1eff",
 CellID->124316703],
Cell[CellGroupData[{
Cell[279802, 6987, 1902, 50, 276, "Input",ExpressionUUID->"becfee20-4625-4daa-9542-27f54026817d",
 CellID->251108312],
Cell[281707, 7039, 3117, 69, 52, "Output",ExpressionUUID->"b6bea58d-337f-44d9-982b-df9a2b6867fb",
 CellID->540267293]
}, Open  ]],
Cell[CellGroupData[{
Cell[284861, 7113, 283, 5, 28, "Input",ExpressionUUID->"228b3a61-bbe1-4f3e-9e52-53f2a70a12ee",
 CellID->94968892],
Cell[285147, 7120, 5103, 101, 129, "Output",ExpressionUUID->"9dfeafdb-2bf9-43e6-864c-8d619d4dd237",
 CellID->32732332]
}, Open  ]],
Cell[CellGroupData[{
Cell[290287, 7226, 722, 19, 86, "Input",ExpressionUUID->"15dbb575-47b2-4d61-b3b8-e0589866dd3f",
 CellID->87572382],
Cell[291012, 7247, 173, 3, 32, "Output",ExpressionUUID->"179a2e23-9569-4e04-9fe4-5c417d87093a",
 CellID->437312624]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[291234, 7256, 175, 2, 37, "Subsubsection",ExpressionUUID->"b0eced43-90e7-4e71-8170-c5202985efdf",
 CellID->215722975],
Cell[291412, 7260, 177, 2, 35, "Text",ExpressionUUID->"fa53b9f1-bc0a-4027-b031-c42f1d852c22",
 CellID->95313850],
Cell[CellGroupData[{
Cell[291614, 7266, 1843, 49, 276, "Input",ExpressionUUID->"f08586e4-1b62-4ee7-afee-56a8e7283b49",
 CellID->272244166],
Cell[293460, 7317, 3060, 68, 52, "Output",ExpressionUUID->"8c53f516-c5ed-49ca-9f79-f9bd11e89d4b",
 CellID->769981151]
}, Open  ]],
Cell[CellGroupData[{
Cell[296557, 7390, 231, 4, 28, "Input",ExpressionUUID->"d64c37ea-d292-4a3a-bf47-5a9d61ed0419",
 CellID->671875270],
Cell[296791, 7396, 5123, 102, 129, "Output",ExpressionUUID->"ea4029b0-7737-45ab-a974-a829d4fe1a4c",
 CellID->6081291]
}, Open  ]],
Cell[CellGroupData[{
Cell[301951, 7503, 729, 19, 86, "Input",ExpressionUUID->"93a602a2-19c3-47ca-aef0-22596d34bde1",
 CellID->112758048],
Cell[302683, 7524, 198, 3, 32, "Output",ExpressionUUID->"f760f33b-33fc-4f8b-899a-624062f79107",
 CellID->261037973]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[302930, 7533, 232, 3, 37, "Subsubsection",ExpressionUUID->"efa5991a-1dc1-4dbf-927f-f29da20004ba",
 CellID->561218296],
Cell[CellGroupData[{
Cell[303187, 7540, 1866, 49, 276, "Input",ExpressionUUID->"91d9d056-7e19-44ee-aebd-348084e719b1",
 CellID->419956798],
Cell[305056, 7591, 3057, 69, 52, "Output",ExpressionUUID->"0ba88555-cf10-4b42-8cf6-fcf3f861976e",
 CellID->655571778]
}, Open  ]],
Cell[CellGroupData[{
Cell[308150, 7665, 233, 4, 28, "Input",ExpressionUUID->"5451569f-df18-46ed-b350-412bc1f44633",
 CellID->504153840],
Cell[308386, 7671, 5142, 102, 112, "Output",ExpressionUUID->"5da9dda2-4396-4103-ad8f-8f30d6d69b7d",
 CellID->174380073]
}, Open  ]],
Cell[313543, 7776, 187, 2, 35, "Text",ExpressionUUID->"8c8f3bd9-7a78-48ef-aba6-5eaf7a99e090",
 CellID->153513979],
Cell[313733, 7780, 554, 15, 28, "Input",ExpressionUUID->"5bc33d2a-bac9-4092-941a-8b4fb0b5290b",
 CellID->288293686],
Cell[CellGroupData[{
Cell[314312, 7799, 660, 17, 48, "Input",ExpressionUUID->"5a679810-88a7-4c92-888a-e45372949ab7",
 CellID->59394718],
Cell[314975, 7818, 174, 3, 32, "Output",ExpressionUUID->"f91a369a-8fe7-4de0-a7a3-631e65e0d3a9",
 CellID->228661226]
}, Open  ]],
Cell[315164, 7824, 299, 6, 35, "Text",ExpressionUUID->"b72b8ac3-6dca-45fd-8c80-31d756367747",
 CellID->75858361],
Cell[CellGroupData[{
Cell[315488, 7834, 724, 18, 48, "Input",ExpressionUUID->"3ccba271-cc64-40cd-8d1e-ccda7a765440",
 CellID->142774518],
Cell[316215, 7854, 174, 3, 32, "Output",ExpressionUUID->"858290df-1df0-462b-9027-20783203bcd7",
 CellID->10518263]
}, Open  ]],
Cell[316404, 7860, 191, 2, 35, "Text",ExpressionUUID->"beefd9fa-d7cd-4997-a01a-b6d5f5b79cec",
 CellID->29231320],
Cell[316598, 7864, 259, 5, 38, "CodeText",ExpressionUUID->"33247da2-e243-43fa-9759-aa8cd8ef64a0",
 CellID->26905428],
Cell[CellGroupData[{
Cell[316882, 7873, 932, 24, 105, "Input",ExpressionUUID->"684fc7a4-2bd9-4657-bb7b-a297a19b411f",
 CellID->209885365],
Cell[317817, 7899, 198, 3, 32, "Output",ExpressionUUID->"0b3eb310-ad24-4110-89aa-6ed57b62db29",
 CellID->129696077]
}, Open  ]],
Cell[318030, 7905, 271, 5, 58, "Text",ExpressionUUID->"1050e588-e381-474c-a2ff-c5311c8be4c1",
 CellID->343155998],
Cell[CellGroupData[{
Cell[318326, 7914, 1242, 31, 105, "Input",ExpressionUUID->"bb452439-fe22-441e-a189-3299d65d451a",
 CellID->338826343],
Cell[319571, 7947, 224, 4, 32, "Output",ExpressionUUID->"78e3261c-18b0-421b-993e-fd5ec847c51b",
 CellID->159591966]
}, Open  ]],
Cell[CellGroupData[{
Cell[319832, 7956, 2443, 61, 333, "Input",ExpressionUUID->"0cdd64e8-a3e7-402a-a40d-955d771a3553",
 CellID->378151718],
Cell[322278, 8019, 3270, 77, 52, "Output",ExpressionUUID->"d9bc5021-bd4d-4357-855f-b84e47a1ced3",
 CellID->89509286]
}, Open  ]],
Cell[CellGroupData[{
Cell[325585, 8101, 233, 4, 28, "Input",ExpressionUUID->"ce2c4aa2-19c6-466b-831e-8c8201563688",
 CellID->31893901],
Cell[325821, 8107, 5357, 105, 112, "Output",ExpressionUUID->"5d786921-e0bf-4c01-8c4d-dc23687712a1",
 CellID->521757920]
}, Open  ]],
Cell[CellGroupData[{
Cell[331215, 8217, 1056, 28, 48, "Input",ExpressionUUID->"404ac168-3cba-47fd-b11c-c4ab687529c5",
 CellID->87159538],
Cell[332274, 8247, 173, 3, 32, "Output",ExpressionUUID->"20124dbf-5e11-4f18-9d6b-c35e56db1a70",
 CellID->1246925]
}, Open  ]],
Cell[332462, 8253, 199, 2, 35, "Text",ExpressionUUID->"f0e2bd37-d961-4b93-afdf-c26496c46998",
 CellID->176795912],
Cell[CellGroupData[{
Cell[332686, 8259, 2595, 63, 162, "Input",ExpressionUUID->"95b6ef5b-d54a-44f2-b498-1482c384fc82",
 CellID->19194800],
Cell[335284, 8324, 4377, 97, 118, "Output",ExpressionUUID->"22bd6b86-7e28-41d9-97c1-62be098c35f6",
 CellID->499115748]
}, Open  ]],
Cell[339676, 8424, 188, 2, 35, "Text",ExpressionUUID->"6153f3e0-6cf2-4920-a75f-d1f96773e97d",
 CellID->361474820],
Cell[CellGroupData[{
Cell[339889, 8430, 292, 6, 28, "Input",ExpressionUUID->"e24e6c22-7ed3-4bcd-83a6-a9bc8e26d253",
 CellID->60754022],
Cell[340184, 8438, 3079, 66, 64, "Output",ExpressionUUID->"52fc61cb-bcc2-4ceb-8f8a-01c542a7404b",
 CellID->553535299]
}, Open  ]],
Cell[CellGroupData[{
Cell[343300, 8509, 248, 5, 28, "Input",ExpressionUUID->"83243629-0615-4aaf-978e-da53fa6b4e29",
 CellID->55796540],
Cell[343551, 8516, 6548, 129, 112, "Output",ExpressionUUID->"a4ca5d4e-a4ea-40fb-9433-296b703717de",
 CellID->1656595]
}, Open  ]],
Cell[350114, 8648, 207, 2, 38, "CodeText",ExpressionUUID->"ee31627e-0c37-4bce-a451-3c482ecff224",
 CellID->413689066],
Cell[CellGroupData[{
Cell[350346, 8654, 1056, 28, 48, "Input",ExpressionUUID->"709bc5a1-e991-4a8e-be9e-5417711c77e2",
 CellID->17529743],
Cell[351405, 8684, 171, 3, 32, "Output",ExpressionUUID->"5504331d-c8a2-4800-8cb5-183a4a1a995b",
 CellID->30961503]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[351649, 8695, 185, 2, 67, "Section",ExpressionUUID->"f2da6292-f6e5-4466-be9c-cd8f5f3f82d2",
 CellID->280488966],
Cell[351837, 8699, 465, 11, 35, "Text",ExpressionUUID->"ae3b8453-7cfb-4d91-9905-8e526790006b",
 CellID->220209319],
Cell[CellGroupData[{
Cell[352327, 8714, 278, 5, 28, "Input",ExpressionUUID->"f81acf98-e0ba-4d04-9613-8e663a888925",
 CellID->459594605],
Cell[352608, 8721, 24348, 429, 64, "Output",ExpressionUUID->"f16fe40b-b366-44e0-95bf-8aa8d1859b0f",
 CellID->523861758]
}, Open  ]],
Cell[376971, 9153, 270, 5, 28, "Input",ExpressionUUID->"c2697d7d-257d-40bb-a05d-60205eca252f",
 CellID->29064933],
Cell[CellGroupData[{
Cell[377266, 9162, 601, 13, 28, "Input",ExpressionUUID->"bd7e76ee-59cf-416c-b3b2-6c101e320851",
 CellID->217847407],
Cell[377870, 9177, 64763, 1227, 374, "Output",ExpressionUUID->"2689b31f-1a18-4b9d-80b9-e57dc0b20e22",
 CellID->339700835]
}, Open  ]],
Cell[CellGroupData[{
Cell[442670, 10409, 660, 15, 28, "Input",ExpressionUUID->"450ff0c3-015e-4eff-be5a-1c8ed84f25db",
 CellID->346323831],
Cell[443333, 10426, 24331, 426, 134, "Output",ExpressionUUID->"78f9bffc-079e-4d5b-9bf0-0421837b76ff",
 CellID->53003802]
}, Open  ]],
Cell[CellGroupData[{
Cell[467701, 10857, 686, 15, 28, "Input",ExpressionUUID->"5b7e67da-5c19-4a95-846b-177ed3784058",
 CellID->44875747],
Cell[468390, 10874, 281, 4, 71, "Output",ExpressionUUID->"1e0c6046-1c21-40d3-b9b4-97ef4b8c7a26",
 CellID->48138080]
}, Open  ]],
Cell[CellGroupData[{
Cell[468708, 10883, 2029, 46, 105, "Input",ExpressionUUID->"a97976e6-c306-4717-90ed-089b6ae181fa",
 CellID->582194507],
Cell[470740, 10931, 3076, 62, 52, "Output",ExpressionUUID->"2537b46a-fe0a-4a52-965a-390bc928b341",
 CellID->198187064]
}, Open  ]],
Cell[CellGroupData[{
Cell[473853, 10998, 251, 4, 28, "Input",ExpressionUUID->"11a59795-630d-4f05-aa9b-84329f91b416",
 CellID->320145710],
Cell[474107, 11004, 5512, 115, 156, "Output",ExpressionUUID->"76160f5a-25f9-4a64-b6e2-2abac544cf5c",
 CellID->271961015]
}, Open  ]],
Cell[479634, 11122, 239, 4, 35, "Text",ExpressionUUID->"91bfc223-9159-4dfb-8af8-966ba3db1cc4",
 CellID->50015265],
Cell[CellGroupData[{
Cell[479898, 11130, 333, 6, 28, "Input",ExpressionUUID->"b1fa775a-c84d-4cb0-94fd-a09c582a9f90",
 CellID->198389095],
Cell[480234, 11138, 604, 15, 52, "Output",ExpressionUUID->"45299050-25f0-45a3-9a63-181e8b936139",
 CellID->263618188]
}, Open  ]],
Cell[CellGroupData[{
Cell[480875, 11158, 410, 9, 28, "Input",ExpressionUUID->"59badfae-4b6f-45b7-88b7-9b289ba58896",
 CellID->203453875],
Cell[481288, 11169, 226, 3, 32, "Output",ExpressionUUID->"865ad722-060f-4797-9c0c-cfce8e8d1407",
 CellID->42214857]
}, Open  ]],
Cell[481529, 11175, 180, 2, 35, "Text",ExpressionUUID->"8ecee4d6-f995-4c4b-8d15-5a20c29e4f7e",
 CellID->176124911],
Cell[CellGroupData[{
Cell[481734, 11181, 180, 3, 28, "Input",ExpressionUUID->"13c70ae1-1716-4c39-9f3d-3e8087554c3a",
 CellID->15145336],
Cell[481917, 11186, 5207, 102, 144, "Output",ExpressionUUID->"df497aff-4a81-40aa-8217-1913698244f7",
 CellID->1220852]
}, Open  ]],
Cell[CellGroupData[{
Cell[487161, 11293, 356, 8, 28, "Input",ExpressionUUID->"b992c46d-6ab3-4956-80b4-b971719dcc8c",
 CellID->79405243],
Cell[487520, 11303, 189, 3, 32, "Output",ExpressionUUID->"7563aca0-6ea2-40cc-b9fb-518b96ce361f",
 CellID->17582766]
}, Open  ]],
Cell[487724, 11309, 418, 7, 58, "Text",ExpressionUUID->"02f5842b-5687-43c1-af32-44f4e05bc2e0",
 CellID->1467588],
Cell[488145, 11318, 330, 6, 35, "Text",ExpressionUUID->"5649a349-0286-464f-953b-43495fa34e0d",
 CellID->129607409],
Cell[CellGroupData[{
Cell[488500, 11328, 244, 3, 54, "Subsection",ExpressionUUID->"9a38ee7a-199a-4ca4-ab13-7222cf72e35c",
 CellID->550014195],
Cell[CellGroupData[{
Cell[488769, 11335, 223, 3, 45, "Subsubsection",ExpressionUUID->"3f49e925-ef49-4457-9515-285a74b3973d",
 CellID->86746585],
Cell[CellGroupData[{
Cell[489017, 11342, 1984, 45, 105, "Input",ExpressionUUID->"45c74e7d-006f-46ad-bbd0-ec276b354f76",
 CellID->553977139],
Cell[491004, 11389, 3052, 62, 52, "Output",ExpressionUUID->"95204877-400e-4b1c-96a4-a45c4a1c8d0c",
 CellID->402825059]
}, Open  ]],
Cell[CellGroupData[{
Cell[494093, 11456, 252, 4, 28, "Input",ExpressionUUID->"82bba5ee-b54f-438f-9cf9-bcad735cdfdc",
 CellID->70776183],
Cell[494348, 11462, 5054, 101, 144, "Output",ExpressionUUID->"5c378c4d-3787-49e1-900f-7ac58abb7e48",
 CellID->408608790]
}, Open  ]],
Cell[CellGroupData[{
Cell[499439, 11568, 358, 8, 28, "Input",ExpressionUUID->"40358473-71d8-482e-8200-00244540b7f4",
 CellID->17451888],
Cell[499800, 11578, 170, 3, 32, "Output",ExpressionUUID->"1248dd55-9bf7-41cc-8263-ea5a6872ba8f",
 CellID->236834778]
}, Open  ]],
Cell[CellGroupData[{
Cell[500007, 11586, 251, 4, 28, "Input",ExpressionUUID->"33c7db5b-814c-4b38-978b-df789b8d4d64",
 CellID->77651592],
Cell[500261, 11592, 5150, 101, 144, "Output",ExpressionUUID->"ba6dda64-611b-495d-8f2a-dff6916083c3",
 CellID->148517924]
}, Open  ]],
Cell[CellGroupData[{
Cell[505448, 11698, 358, 8, 28, "Input",ExpressionUUID->"e447b27e-e68c-49e3-86bc-e1639146dac3",
 CellID->262272014],
Cell[505809, 11708, 179, 3, 32, "Output",ExpressionUUID->"6dbcf2fc-a279-48ce-8eb5-c318e4e3fea3",
 CellID->79865338]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[506037, 11717, 193, 2, 45, "Subsubsection",ExpressionUUID->"e79de305-afc7-4e8b-b0bc-f9d782c2b2e8",
 CellID->1918117],
Cell[CellGroupData[{
Cell[506255, 11723, 1985, 45, 219, "Input",ExpressionUUID->"aeef3980-d404-43ed-b339-c3158823e85e",
 CellID->258021181],
Cell[508243, 11770, 3052, 62, 52, "Output",ExpressionUUID->"a2ae0cd6-3944-4cd1-80d5-bbb928e31195",
 CellID->393665868]
}, Open  ]],
Cell[CellGroupData[{
Cell[511332, 11837, 255, 4, 28, "Input",ExpressionUUID->"1215d4e8-cc7e-4dde-8dca-8289db5157ce",
 CellID->13160346],
Cell[511590, 11843, 5058, 101, 144, "Output",ExpressionUUID->"7b333a14-483e-43c3-a327-963abb274de0",
 CellID->99816033]
}, Open  ]],
Cell[CellGroupData[{
Cell[516685, 11949, 359, 8, 28, "Input",ExpressionUUID->"b9244e40-5c3a-44b2-9b49-c0b9610686f5",
 CellID->303322809],
Cell[517047, 11959, 171, 3, 32, "Output",ExpressionUUID->"1b0acdfc-65d2-4b6d-96b9-bad645af0f57",
 CellID->58440218]
}, Open  ]],
Cell[CellGroupData[{
Cell[517255, 11967, 255, 4, 28, "Input",ExpressionUUID->"31f206ea-528d-4667-af58-a6bce58bac5b",
 CellID->21770926],
Cell[517513, 11973, 5514, 114, 156, "Output",ExpressionUUID->"13f272e4-0398-4b7a-b2c0-b3da0226eaa5",
 CellID->79487548]
}, Open  ]],
Cell[CellGroupData[{
Cell[523064, 12092, 358, 8, 28, "Input",ExpressionUUID->"04f0c81a-1960-4816-883c-0aa136d8ecb8",
 CellID->32658434],
Cell[523425, 12102, 203, 3, 32, "Output",ExpressionUUID->"a21f0838-a41b-44d2-94f0-004babc90bd1",
 CellID->621088641]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[523689, 12112, 193, 2, 38, "Subsection",ExpressionUUID->"284d5c1c-3a95-4298-b48a-05e225a7b5e2",
 CellID->157816412],
Cell[CellGroupData[{
Cell[523907, 12118, 299, 3, 45, "Subsubsection",ExpressionUUID->"493bcc38-bfa6-4cf3-9c3c-926be9d96916",
 CellID->251236292],
Cell[CellGroupData[{
Cell[524231, 12125, 2025, 46, 219, "Input",ExpressionUUID->"ac57be3b-e0e8-4a3f-b95e-79c08ff04548",
 CellID->79848108],
Cell[526259, 12173, 3105, 63, 52, "Output",ExpressionUUID->"e30e0f03-da54-497d-af80-e6af197655e5",
 CellID->187249832]
}, Open  ]],
Cell[CellGroupData[{
Cell[529401, 12241, 296, 5, 28, "Input",ExpressionUUID->"70310237-72b0-4741-b45f-504fe99101d1",
 CellID->37338404],
Cell[529700, 12248, 5070, 101, 144, "Output",ExpressionUUID->"1fafd8c9-4c86-49c4-9c63-a3fff6ed7aaa",
 CellID->48395592]
}, Open  ]],
Cell[CellGroupData[{
Cell[534807, 12354, 407, 9, 28, "Input",ExpressionUUID->"e5094518-9d6a-4667-8544-e9837a94855d",
 CellID->161955797],
Cell[535217, 12365, 195, 3, 32, "Output",ExpressionUUID->"7638c715-a6aa-4acb-a70c-94dd30a8ec88",
 CellID->675798771]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[535461, 12374, 223, 3, 45, "Subsubsection",ExpressionUUID->"64c902cc-c346-4104-b505-47615af459b1",
 CellID->11521707],
Cell[CellGroupData[{
Cell[535709, 12381, 2030, 46, 219, "Input",ExpressionUUID->"e81c5126-b0fd-4d6e-ac32-c11b832b6d22",
 CellID->658848556],
Cell[537742, 12429, 3076, 62, 52, "Output",ExpressionUUID->"4741fdc5-051d-4db2-a832-c0cdb1d1b470",
 CellID->296927765]
}, Open  ]],
Cell[CellGroupData[{
Cell[540855, 12496, 280, 5, 28, "Input",ExpressionUUID->"10a5c745-9083-4e7b-a00f-c044a0b13840",
 CellID->324368912],
Cell[541138, 12503, 5106, 102, 144, "Output",ExpressionUUID->"aa425886-7082-4fe3-a372-638d673d0229",
 CellID->14846465]
}, Open  ]],
Cell[CellGroupData[{
Cell[546281, 12610, 460, 10, 28, "Input",ExpressionUUID->"45f8cb6f-8416-4cab-b5b8-8f05b4fa5e58",
 CellID->396223728],
Cell[546744, 12622, 247, 5, 32, "Output",ExpressionUUID->"00004eca-3cb0-4a63-b616-fc0c934b6186",
 CellID->392889196]
}, Open  ]],
Cell[CellGroupData[{
Cell[547028, 12632, 301, 5, 28, "Input",ExpressionUUID->"68ce0da3-7e6b-49b3-b9d4-fac753d78834",
 CellID->116447583],
Cell[547332, 12639, 5245, 104, 144, "Output",ExpressionUUID->"de2c3110-619a-4873-bb8f-74c3e55af876",
 CellID->30162575]
}, Open  ]],
Cell[CellGroupData[{
Cell[552614, 12748, 457, 10, 28, "Input",ExpressionUUID->"0a906f1a-7cbe-4050-bef2-37684ed07a34",
 CellID->66656576],
Cell[553074, 12760, 255, 5, 32, "Output",ExpressionUUID->"1fa13020-d91e-4b36-8e19-d5a1744117c4",
 CellID->110920463]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[553378, 12771, 195, 2, 45, "Subsubsection",ExpressionUUID->"65bf6181-c97e-4852-a55b-35d3587f439f",
 CellID->110319188],
Cell[CellGroupData[{
Cell[553598, 12777, 2035, 46, 219, "Input",ExpressionUUID->"59401962-e090-4617-902b-3096d282710a",
 CellID->541382621],
Cell[555636, 12825, 3075, 62, 52, "Output",ExpressionUUID->"bc52c7f9-5995-4196-b1b2-979036dc7e95",
 CellID->91274067]
}, Open  ]],
Cell[CellGroupData[{
Cell[558748, 12892, 306, 5, 28, "Input",ExpressionUUID->"9ee85277-5e5c-491c-8198-e7b83f558e01",
 CellID->576722173],
Cell[559057, 12899, 5154, 103, 144, "Output",ExpressionUUID->"5e014f82-cc30-4909-ad4a-fa659bec8c9e",
 CellID->83522786]
}, Open  ]],
Cell[CellGroupData[{
Cell[564248, 13007, 412, 9, 28, "Input",ExpressionUUID->"76a84c57-aa23-4666-9625-15f816a6009e",
 CellID->100062650],
Cell[564663, 13018, 228, 4, 32, "Output",ExpressionUUID->"41378da7-2d02-4d83-b949-7c7185b36cee",
 CellID->582980978]
}, Open  ]],
Cell[CellGroupData[{
Cell[564928, 13027, 282, 5, 28, "Input",ExpressionUUID->"15468ced-fb04-4e3c-8dd2-199efdfaac45",
 CellID->97828176],
Cell[565213, 13034, 5138, 102, 144, "Output",ExpressionUUID->"ae597cde-4372-461b-8fa4-ae160a3245eb",
 CellID->41812015]
}, Open  ]],
Cell[CellGroupData[{
Cell[570388, 13141, 412, 9, 28, "Input",ExpressionUUID->"61a441b5-5614-4f68-9e04-54050286665f",
 CellID->505869776],
Cell[570803, 13152, 196, 3, 32, "Output",ExpressionUUID->"674d7ef1-a351-4423-ad07-19114ad4e71e",
 CellID->183520780]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[571060, 13162, 242, 3, 38, "Subsection",ExpressionUUID->"51768c2f-6975-423a-89f4-c3928c08e8ae",
 CellID->216377081],
Cell[CellGroupData[{
Cell[571327, 13169, 299, 3, 45, "Subsubsection",ExpressionUUID->"739d2782-e190-4dc7-9ac0-ebad7b8f173f",
 CellID->266400327],
Cell[CellGroupData[{
Cell[571651, 13176, 2077, 46, 219, "Input",ExpressionUUID->"b5e9311e-4724-4ea2-9908-ab17fbe396d5",
 CellID->18891699],
Cell[573731, 13224, 3133, 64, 52, "Output",ExpressionUUID->"84ab23eb-a886-4f91-af9c-f1eeea98f519",
 CellID->110545880]
}, Open  ]],
Cell[CellGroupData[{
Cell[576901, 13293, 320, 5, 28, "Input",ExpressionUUID->"5ac3e3f7-b950-40e1-889d-b875858c2644",
 CellID->394676025],
Cell[577224, 13300, 5154, 102, 144, "Output",ExpressionUUID->"ad29adc3-efbb-465f-a0ff-6b87e422adc9",
 CellID->64128639]
}, Open  ]],
Cell[CellGroupData[{
Cell[582415, 13407, 459, 10, 28, "Input",ExpressionUUID->"3c734224-9aef-4a3f-857a-ff6099fe617c",
 CellID->344176799],
Cell[582877, 13419, 224, 4, 32, "Output",ExpressionUUID->"f7387878-176f-4b7d-8630-b80c95551496",
 CellID->749942]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[583150, 13429, 224, 3, 45, "Subsubsection",ExpressionUUID->"403633bb-1a02-4912-81c3-b41ffc2d0b0b",
 CellID->194007677],
Cell[CellGroupData[{
Cell[583399, 13436, 2081, 46, 219, "Input",ExpressionUUID->"57853622-7b14-4ac0-9f09-4b4168b01201",
 CellID->62148502],
Cell[585483, 13484, 3100, 63, 52, "Output",ExpressionUUID->"91731bee-a7c6-4161-92a6-614ef3fcd939",
 CellID->62934561]
}, Open  ]],
Cell[CellGroupData[{
Cell[588620, 13552, 304, 5, 28, "Input",ExpressionUUID->"5ef0483d-4730-4131-af6e-737ffe2e0444",
 CellID->552836405],
Cell[588927, 13559, 5135, 102, 144, "Output",ExpressionUUID->"d4d659f6-255a-4ecd-80a6-e9fc8f8efc67",
 CellID->449229649]
}, Open  ]],
Cell[CellGroupData[{
Cell[594099, 13666, 509, 10, 28, "Input",ExpressionUUID->"209f4f41-59c3-4b86-b0bc-071a39c79f92",
 CellID->484339519],
Cell[594611, 13678, 269, 5, 32, "Output",ExpressionUUID->"73c8e9f5-a3ef-4be8-9fd1-f1d3000bb266",
 CellID->223372309]
}, Open  ]],
Cell[CellGroupData[{
Cell[594917, 13688, 321, 5, 28, "Input",ExpressionUUID->"c387d7e3-41f2-4d10-9157-b0e1d9d0567e",
 CellID->34501811],
Cell[595241, 13695, 5243, 103, 144, "Output",ExpressionUUID->"fa4fd9f6-5d37-42b1-b54b-b40d219e0db0",
 CellID->217665593]
}, Open  ]],
Cell[CellGroupData[{
Cell[600521, 13803, 507, 10, 28, "Input",ExpressionUUID->"9f6576b0-4a18-482f-9a82-08ceda8f4452",
 CellID->292718337],
Cell[601031, 13815, 300, 5, 32, "Output",ExpressionUUID->"900cf71d-bcfc-4242-9fee-c16f05a28763",
 CellID->115194965]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[601380, 13826, 194, 2, 45, "Subsubsection",ExpressionUUID->"28dea8a1-2473-42e2-993a-e2fbd336a8a7",
 CellID->65337144],
Cell[CellGroupData[{
Cell[601599, 13832, 2108, 47, 219, "Input",ExpressionUUID->"af928347-34f5-4d6d-8715-28b4d62a1df1",
 CellID->216273149],
Cell[603710, 13881, 3126, 63, 52, "Output",ExpressionUUID->"29debcbb-c426-46a1-8cf5-e250942eadbb",
 CellID->53596951]
}, Open  ]],
Cell[CellGroupData[{
Cell[606873, 13949, 331, 5, 28, "Input",ExpressionUUID->"bd99e0c4-7ba6-4abc-8e3b-a83a1708e041",
 CellID->215715357],
Cell[607207, 13956, 5325, 104, 144, "Output",ExpressionUUID->"f66cd86f-d2ba-487f-ae46-69a36b4aaa2d",
 CellID->140873329]
}, Open  ]],
Cell[CellGroupData[{
Cell[612569, 14065, 512, 10, 28, "Input",ExpressionUUID->"a1400a1b-839b-414f-b048-85b5c9d7f660",
 CellID->178276494],
Cell[613084, 14077, 270, 5, 32, "Output",ExpressionUUID->"bc5eb568-f820-44fd-9994-f9ccab82ff65",
 CellID->205794709]
}, Open  ]],
Cell[CellGroupData[{
Cell[613391, 14087, 304, 5, 28, "Input",ExpressionUUID->"ef92c22a-1270-4072-9d54-659cabcb06be",
 CellID->56068008],
Cell[613698, 14094, 5162, 102, 144, "Output",ExpressionUUID->"0f2f5089-e8f3-41cd-ac7c-9ef7d184b090",
 CellID->3936528]
}, Open  ]],
Cell[CellGroupData[{
Cell[618897, 14201, 463, 10, 28, "Input",ExpressionUUID->"9733a046-9230-429d-9aa4-298e594aaf12",
 CellID->174264303],
Cell[619363, 14213, 249, 5, 32, "Output",ExpressionUUID->"ac996a6c-a355-4d75-aa66-5d9e60a6a192",
 CellID->410064228]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[619673, 14225, 293, 4, 38, "Subsection",ExpressionUUID->"264cb069-1f7c-425a-bddd-142e05ab363e",
 CellID->104819028],
Cell[CellGroupData[{
Cell[619991, 14233, 299, 3, 45, "Subsubsection",ExpressionUUID->"e929a3dd-6e9a-4a55-8f37-5436198e722b",
 CellID->690037286],
Cell[CellGroupData[{
Cell[620315, 14240, 2155, 48, 219, "Input",ExpressionUUID->"fba2045c-77c4-44eb-9197-6badb072adc4",
 CellID->526812421],
Cell[622473, 14290, 3155, 64, 52, "Output",ExpressionUUID->"e1227090-a357-4289-ae21-9350968d8db0",
 CellID->506746943]
}, Open  ]],
Cell[CellGroupData[{
Cell[625665, 14359, 346, 6, 28, "Input",ExpressionUUID->"cf2cb9b0-590f-47fc-8bac-09adc375c8f9",
 CellID->24018368],
Cell[626014, 14367, 5160, 103, 144, "Output",ExpressionUUID->"de74a4ba-8144-451f-9431-21a12f21b2c7",
 CellID->212456667]
}, Open  ]],
Cell[CellGroupData[{
Cell[631211, 14475, 505, 10, 28, "Input",ExpressionUUID->"5e9ed57f-479c-46df-ad05-10b277d10441",
 CellID->199698284],
Cell[631719, 14487, 244, 4, 32, "Output",ExpressionUUID->"61d6d2bf-f68c-48fb-8b6d-001da2de0a96",
 CellID->322215268]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[632012, 14497, 223, 3, 45, "Subsubsection",ExpressionUUID->"2e542cc3-7fd3-4a68-b9df-63a4bbc9de92",
 CellID->79167425],
Cell[CellGroupData[{
Cell[632260, 14504, 2158, 48, 219, "Input",ExpressionUUID->"134eb659-b4a2-4fa6-a3c6-de9058adc7c7",
 CellID->10952130],
Cell[634421, 14554, 3125, 63, 52, "Output",ExpressionUUID->"afaacccf-8ff2-4736-b18f-d46ba15e7ea9",
 CellID->155097394]
}, Open  ]],
Cell[CellGroupData[{
Cell[637583, 14622, 327, 5, 28, "Input",ExpressionUUID->"33474847-c198-447f-99d6-accf467411a5",
 CellID->281284510],
Cell[637913, 14629, 5159, 102, 144, "Output",ExpressionUUID->"601713e9-9c40-42f9-af97-6cc2245e667d",
 CellID->1021546]
}, Open  ]],
Cell[CellGroupData[{
Cell[643109, 14736, 559, 11, 28, "Input",ExpressionUUID->"b0a7df7a-63eb-43ab-b01e-8bbb440e6bfc",
 CellID->240429343],
Cell[643671, 14749, 320, 6, 32, "Output",ExpressionUUID->"771fce03-c373-4608-a6a6-67fd60b2b67f",
 CellID->96282155]
}, Open  ]],
Cell[CellGroupData[{
Cell[644028, 14760, 351, 6, 28, "Input",ExpressionUUID->"7165f275-1993-4ffd-870d-62c977242c32",
 CellID->348498909],
Cell[644382, 14768, 5301, 104, 144, "Output",ExpressionUUID->"b56729b7-f0a1-4db0-a0d0-4d432a3993b0",
 CellID->152559892]
}, Open  ]],
Cell[CellGroupData[{
Cell[649720, 14877, 558, 11, 28, "Input",ExpressionUUID->"dbdb195e-e5d6-47cd-a3b4-f12f12a8acf8",
 CellID->506502241],
Cell[650281, 14890, 328, 6, 32, "Output",ExpressionUUID->"e5c4fd7f-0138-4580-ab77-863090f4be46",
 CellID->313791231]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[650658, 14902, 194, 2, 45, "Subsubsection",ExpressionUUID->"c30f2882-a173-403c-8631-57387a66c345",
 CellID->90505967],
Cell[CellGroupData[{
Cell[650877, 14908, 2157, 48, 219, "Input",ExpressionUUID->"9e52141a-929f-4cf8-baf9-9d1d621c2c98",
 CellID->36683236],
Cell[653037, 14958, 3151, 63, 52, "Output",ExpressionUUID->"f3e77b5d-2843-4a8d-8798-3cf4eb353578",
 CellID->788733357]
}, Open  ]],
Cell[CellGroupData[{
Cell[656225, 15026, 357, 6, 28, "Input",ExpressionUUID->"5d36a3d1-18a8-4138-aa36-6f3d68fe905a",
 CellID->92779399],
Cell[656585, 15034, 5231, 104, 144, "Output",ExpressionUUID->"d7120d3c-b5f2-4233-a712-70a0fae9e285",
 CellID->139544545]
}, Open  ]],
Cell[CellGroupData[{
Cell[661853, 15143, 564, 11, 28, "Input",ExpressionUUID->"ecedcd2b-a5a3-4d92-af82-97ed81d41f37",
 CellID->330085578],
Cell[662420, 15156, 278, 5, 32, "Output",ExpressionUUID->"70db2895-799f-49c3-869e-f35a2486be9f",
 CellID->703850162]
}, Open  ]],
Cell[CellGroupData[{
Cell[662735, 15166, 329, 5, 28, "Input",ExpressionUUID->"b1322d24-10d5-401d-8c95-117e880d4936",
 CellID->47191972],
Cell[663067, 15173, 5261, 104, 144, "Output",ExpressionUUID->"d3ad6839-bddb-428a-9869-e2f749344898",
 CellID->157774519]
}, Open  ]],
Cell[CellGroupData[{
Cell[668365, 15282, 510, 10, 28, "Input",ExpressionUUID->"975098bc-1e8c-4556-a565-a40205c4f7b5",
 CellID->60873039],
Cell[668878, 15294, 300, 5, 32, "Output",ExpressionUUID->"689a3421-4cc0-4073-872d-7b598bfa9243",
 CellID->364356271]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[669239, 15306, 188, 2, 38, "Subsection",ExpressionUUID->"f66bc6fd-25e6-4d3e-bd51-b5b427918a2c",
 CellID->559631972],
Cell[669430, 15310, 213, 2, 35, "Text",ExpressionUUID->"0a0e3347-f762-4745-8d95-f7257a249b50",
 CellID->221835197],
Cell[CellGroupData[{
Cell[669668, 15316, 2303, 51, 162, "Input",ExpressionUUID->"4cd9a319-6558-416a-8503-a766a0be1b32",
 CellID->208689184],
Cell[671974, 15369, 3914, 81, 52, "Output",ExpressionUUID->"c0e47908-8e74-4bbe-a2f1-a65d88c3227f",
 CellID->283331542]
}, Open  ]],
Cell[CellGroupData[{
Cell[675925, 15455, 404, 10, 28, "Input",ExpressionUUID->"a5e0a61f-dac4-4c55-993e-7195e375012e",
 CellID->181464897],
Cell[676332, 15467, 65703, 1289, 548, "Output",ExpressionUUID->"5c465228-a5c0-40be-a4cd-2c379c34df9f",
 CellID->64251354]
}, Open  ]],
Cell[CellGroupData[{
Cell[742072, 16761, 315, 6, 28, "Input",ExpressionUUID->"23ef23b6-f46d-4fd0-8ccf-6200eca46355",
 CellID->30188068],
Cell[742390, 16769, 724, 19, 96, "Output",ExpressionUUID->"caaadabf-cde4-42b7-85f5-9610397d91b2",
 CellID->717910417]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[743163, 16794, 183, 2, 54, "Subsection",ExpressionUUID->"f7014363-9970-45bf-a0b1-d6602c19d889",
 CellID->545212479],
Cell[CellGroupData[{
Cell[743371, 16800, 2443, 53, 162, "Input",ExpressionUUID->"aece51b7-7170-46fa-a7d8-7d8cc125ec96",
 CellID->63858673],
Cell[745817, 16855, 3873, 80, 52, "Output",ExpressionUUID->"378aa8cf-6b3c-407e-91d9-c60c2f42bc57",
 CellID->119678389]
}, Open  ]],
Cell[CellGroupData[{
Cell[749727, 16940, 505, 12, 28, "Input",ExpressionUUID->"07162173-0651-48b7-bce1-c275917a2a54",
 CellID->287856503],
Cell[750235, 16954, 110271, 2181, 1413, "Output",ExpressionUUID->"4d0dc4b2-94e7-4797-b014-377edfdbbf07",
 CellID->259688427]
}, Open  ]],
Cell[CellGroupData[{
Cell[860543, 19140, 449, 9, 28, "Input",ExpressionUUID->"a0544161-18a4-46cc-8850-0cbbb78c5d7f",
 CellID->708172565],
Cell[860995, 19151, 936, 26, 199, "Output",ExpressionUUID->"8f24500d-2f28-4b5d-9b0a-b23f540293a0",
 CellID->110222582]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

