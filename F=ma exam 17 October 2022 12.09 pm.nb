(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    704925,      14238]
NotebookOptionsPosition[    574647,      11720]
NotebookOutlinePosition[    687240,      13866]
CellTagsIndexPosition[    687032,      13857]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Working through the American Association of Physics Teacher's 2011 F=ma exam\
\>", "Title",
 CellChangeTimes->{{3.8750113122633576`*^9, 3.8750113365028753`*^9}},
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577,ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36"],

Cell[BoxData[
 StyleBox[
  RowBox[{"Peter", " ", "Cullen", " ", "Burbery"}], "Author"]], "Author",
 CellChangeTimes->{{3.8750113401123466`*^9, 3.8750113431752586`*^9}},
 CellTags->"AuthorName",
 CellID->960727095,ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c"],

Cell["Abstract", "Abstract",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573,ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e"],

Cell[CellGroupData[{

Cell["Problem #1", "Section",
 CellChangeTimes->{{3.875011354799266*^9, 3.8750113662395077`*^9}},
 CellID->627868314,ExpressionUUID->"9952e69f-1ff1-46f0-b93a-e36b077bffca"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
O3/z8x2+h/H8G2prTVPsM8DtqOC26YfyL+CyMx5RR0nzfit9becHY6/Y+cRa
GWfg0ya4ksEYSb2kgNdz5/VwUZMema26vRuv79WyGNFzxoqoHCS+Y3A7QiqK
1yhL13SRmeyrBDx20EFt9T2y8djj7qXz/nUg2nATuxfNO++c4VWbD/GzrmSm
XzprErZczhY9HgLrUxat8ta29aqnY4X7/1PpZhvWKzjmYgS/S0EHa773mYfL
k5pll92odXc1cQoXw9p4J41dsXjr4Dbvca/j38FABqKNCMo3Sld1QsdzrI3c
qlfkZ3bQoYWTO+MnvDW83r3GxRSh5VhvVlC5xK6aWLS+8vTcdtSH62IVcE62
zLr+B+EYuYl94NPVfvahNfyreGiFiJ0HMLIH7ywpH+L9m/cNI4mXFJW03F/x
T63kBZ83vErWkNjBvylGf+2ts8kkcCkbsdvQSEOCrkslb9szz2+oyalZx7Lr
a9r7ivSC1nHULWPWlpKYKHfRlNl6M+Uj89tzlKjaRlr+uHs5vzZCRh+fxmtZ
P19MumVNzIK4OoRFr3XZhecHHRycZFLgBx3czc/lXt2EN18+Amqq0lULfyBk
sRpiZwP/Y3KnfNpEHgBCzbmidjZ9WHDYk8l3H/H6MCI3Lq4eEJt5vof4oENe
9lhEm4iaX1whWgmj7HC37HcUv/VuMb9eYBftUNdw3tVmMSsuH17FYrQ+3CNJ
6yy+xGGkoyjYLTI7l+5X2HarajHJ6F3k+yGc9w9h1huiCy9WG4qMxp7byK6Q
udeA2TFUnBGeYJ3MbwnXlI0xz56YPIn+Rah5hoV8ppip7jyXKDTydybdnCD2
6VXIxLPLChuuPOUPNx1PM1NRvVHCz0eMVwG3E7hVA0bltsaE/lX9wKBjIt/R
PrJ7enr6C+dnLM9uO15q16MqMVEHi9HudRCncuqxIIlZ0x9etwluWiIfnhop
K5jmcHMri9YY5JkxgYhfcXXQ8cprv6BFmG8l6cjK7TFw8I/Oqu0cpSHUqSn+
fv6QoIPdmTTkl0QB+mBj7gv+bWzm3EjSRXm8Zfzf/D1n9gYfl9O4mskrodTm
IO8ETtZFqAXXN0vvtS0S5DsWrcxBnd1YjKw6RsYrn0Mb5HaZ2JPisqq6RmhM
6tQ0+rln0Yfqc/Pf8HeHNki5pChzJmPpSNbQ95gfaszPa+YlCmN+NO7iBrUz
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
    "], {{0, 173.9782527184102}, {797.1503562054744, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{797.1503562054744, 173.9782527184102},
  PlotRange->{{0, 797.1503562054744}, {0, 173.9782527184102}}]], "Input",
 CellID->212968093,ExpressionUUID->"229b9189-6885-404e-a75f-32107bfe6a4d"],

Cell[TextData[{
 "We have the average velocity which we name ",
 Cell[BoxData[
  FormBox[
   OverscriptBox["v", "_"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5ba09af2-9ceb-41b2-8bc6-8528e2991d02"],
 "."
}], "Text",
 CellChangeTimes->{{3.875011376055541*^9, 3.8750113900638885`*^9}},
 CellID->143109431,ExpressionUUID->"2e5cf91e-98cd-4cfd-9ede-d2adb7a20aea"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   OverscriptBox["v", "_"], "=", 
   TemplateBox[{"17.5", 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"h\""}], 
     "kilometers per hour", 
     FractionBox["\"Kilometers\"", "\"Hours\""]},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011391267419*^9, 3.875011395139183*^9}, 
   3.875011433889946*^9},
 CellLabel->"In[4]:=",
 CellID->42039440,ExpressionUUID->"8a3bd2b1-a38b-4483-9789-f22bbbc15e12"],

Cell["\<\
We have the time stopped which is 20 minutes. We will s for this quantity \
variable.\
\>", "Text",
 CellChangeTimes->{{3.8750114019842033`*^9, 3.8750114222089863`*^9}},
 CellID->201421124,ExpressionUUID->"b3b9d832-2030-4d8a-8207-643ff59812ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"s", "=", 
   TemplateBox[{"20", "\"min\"", "minutes", "\"Minutes\""},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011423082837*^9, 3.8750114293372536`*^9}},
 CellLabel->"In[2]:=",
 CellID->71618934,ExpressionUUID->"061e9e71-5877-46cd-aad1-112b4166347b"],

Cell["We have the cyclists speed which we name c.", "Text",
 CellChangeTimes->{{3.875011449936754*^9, 3.87501146034551*^9}},
 CellID->26772973,ExpressionUUID->"826019a2-fcf0-4a0d-999e-34816e8031ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"c", "=", 
   TemplateBox[{"22", 
     RowBox[{
      "\"km\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"h\""}], 
     "kilometers per hour", 
     FractionBox["\"Kilometers\"", "\"Hours\""]},
    "Quantity"]}], ";"}]], "Input",
 CellChangeTimes->{{3.875011461348833*^9, 3.8750114673856606`*^9}},
 CellLabel->"In[7]:=",
 CellID->18719899,ExpressionUUID->"c0f28fc3-7dcf-42ad-97d4-31d9441386f0"],

Cell[TextData[{
 "We can use the equation ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", 
    RowBox[{
     OverscriptBox["v", "_"], "t"}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "adbd7421-e2bc-4c06-87b9-a59e6905ee04"],
 " to find the distance."
}], "Text",
 CellChangeTimes->{{3.8750114727295055`*^9, 3.875011499786353*^9}},
 CellID->138601629,ExpressionUUID->"a7bc4939-68eb-4757-8196-0eb4c2eeef1e"],

Cell["We can solve for the time now.", "Text",
 CellChangeTimes->{{3.875011501914705*^9, 3.8750115058819985`*^9}},
 CellID->63492435,ExpressionUUID->"b24af248-f5b6-4b3f-88ab-ddf431b6c3cb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    OverscriptBox["v", "_"], "==", 
    FractionBox[
     RowBox[{"c", " ", "t"}], 
     RowBox[{"s", "+", "t"}]]}], ",", "t"}], "]"}]], "Input",
 CellChangeTimes->{{3.875011510781359*^9, 3.8750115364676547`*^9}},
 CellLabel->"In[8]:=",
 CellID->713269602,ExpressionUUID->"6bfd7631-b1f8-41ab-b658-7ecb743d744c"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 8, 1, 33275504462993777011, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8750115373316317`*^9},
 CellLabel->"During evaluation of In[8]:=",
 CellID->342123661,ExpressionUUID->"a351d156-90ce-465d-8dd0-98f0c625f879"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"t", "\[Rule]", 
    TemplateBox[{"4666.666666666667`", "\"s\"", "seconds", "\"Seconds\""},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8750115373604455`*^9},
 CellLabel->"Out[8]=",
 CellID->259623945,ExpressionUUID->"05b4b49d-2cff-498e-8d2b-53cb897ff52d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "=", 
  RowBox[{
   RowBox[{
    OverscriptBox["v", "_"], 
    RowBox[{"(", 
     RowBox[{"s", "+", "t"}], ")"}]}], "/.", 
   RowBox[{"First", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       OverscriptBox["v", "_"], "==", 
       FractionBox[
        RowBox[{"c", " ", "t"}], 
        RowBox[{"s", "+", "t"}]]}], ",", "t"}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.875011542765587*^9, 3.87501158570043*^9}},
 CellLabel->"In[12]:=",
 CellID->614030663,ExpressionUUID->"512763c5-0d97-408b-9dc6-a1863096cf38"],

Cell[BoxData[
 TemplateBox[{
  "Solve", "ratnz", 
   "\"Solve was unable to solve the system with inexact coefficients. The \
answer was obtained by solving a corresponding exact system and numericizing \
the result.\"", 2, 12, 4, 33275504462993777011, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.875011557261574*^9, 3.875011596086681*^9}},
 CellLabel->"During evaluation of In[12]:=",
 CellID->66728271,ExpressionUUID->"03e6b759-d324-4788-8c13-621578460fc7"],

Cell[BoxData[
 TemplateBox[{"28.518518518518523`", "\"km\"", "kilometers", "\"Kilometers\""},
  "Quantity"]], "Output",
 CellChangeTimes->{{3.875011557273884*^9, 3.8750115960984735`*^9}},
 CellLabel->"Out[12]=",
 CellID->612738351,ExpressionUUID->"2c945c8c-6f60-4cec-b511-2f51fec211e7"]
}, Open  ]],

Cell["The answer is 28.5185km.", "Text",
 CellChangeTimes->{{3.875011599444425*^9, 3.875011605357174*^9}},
 CellID->58038683,ExpressionUUID->"153c8926-e1c6-469f-9e5d-45a070b35fe6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
  "StringTemplate", "[", 
   "\"\<The cyclist biked <* QuantityForm[#,\\\"Abbreviation\\\"] *>.\>\"", 
   "]"}], "[", "d", "]"}]], "Input",
 CellChangeTimes->{{3.875011607198584*^9, 3.875011641245783*^9}, {
  3.875011694143691*^9, 3.8750117233839474`*^9}},
 CellLabel->"In[17]:=",
 CellID->307634299,ExpressionUUID->"e757fbd8-19c8-4f5f-a0ab-f1d267719600"],

Cell[BoxData["\<\"The cyclist biked 28.5185\[InvisibleSpace] km.\"\>"], \
"Output",
 CellChangeTimes->{
  3.8750116416974077`*^9, {3.8750116949934273`*^9, 3.8750117238659534`*^9}},
 CellLabel->"Out[17]=",
 CellID->457808490,ExpressionUUID->"806f13cc-5854-486a-a0d6-d4f4ca85d6fa"]
}, Open  ]],

Cell["The closest answer is A).", "Text",
 CellChangeTimes->{{3.875011733015484*^9, 3.8750117414868517`*^9}},
 CellID->307471050,ExpressionUUID->"81320f42-189d-4e6d-86b8-89e976d31997"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #5", "Section",
 CellChangeTimes->{{3.8750119196110086`*^9, 3.875011921395045*^9}, 
   3.875012469238413*^9},
 CellID->743554474,ExpressionUUID->"696c8f78-07ab-4d25-86c9-ea755f45cd25"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
r6ZZyKFmwpEUidX4jRfzBEeeMa+iwFf1mWNj1YG2d6K7xXyU1/tU97rWCuPq
+yAzDc1LJcIVn/G006rq1zIxVypQVD2cI8E0TOQv3OnXN1apmNx8LZo7o+nx
NhUtp2z6ohQDp1NrGc4tObJ6Q8xUV7vzhgF6voOBisEDkXfGTJTeXkc8ni7l
ODnE+Nb2Ksn7rKE6QXmVc75gDZS/OiGq6uEqzFP1SJQ2ItcJ4/AHfzPijvk2
kQdOq/9edSXNaxmwhJt65Uut4tlqHA7NyoQ996pZyFzeJ0Z8NMEzCA9R1cRu
9tm5jHA4aS7OjX940zY0LXd1JkpurVNZ4z7vqRWr7tHWFZq2L3krsAsb+7CK
wci9ordC/3rFXLbIwZmVx2JRs5hfBukhC0fVS3X40dyLK9UOxfO2e/5T4X1s
s4GxXQ5P1rMaAh7lzPVu8VxQe4rmKkE5WV0Bu1VW3Hgm6Cb0zPMklXmjjxhc
9lvPrYJxBP5vr51ErfVH7pCjn1d2jExDDDodwzlxhnKsssnRFtPvKDsJqtZR
cxsh6R/fdAwyJQ2C41cFdHajz87l6hssb1Disiu7hpgcBn2cCffegsu6Klsd
i4RV451ygl1raLqFYqqmvsXCyS86u6ZjmIkYQND8Cql6qS7EfH5VV0f6qKeA
teULbtODDfl5zfy1LPb0cNzZ5QYn4nlxDTMCcNltXiYEvcNRQlfljn9824rs
k8LPWrSb4KeUHEd4tR6se57/jj9Cc5gDSee0VE9kzpoGU9WLZCo1Fv33Ipvk
DpyJigfOT4QiisPm9SZsN+B9Ba05FHNOSUQDkQzVR0EBAcBj3niHGjEkULBf
83fgWIWLbJ6eYZbeWbdC51LxBKoR8FQ9bGHqY5Qzm78MLqc/+ACBZOQm+rSA
y+mm7iFobffmfVqQqucyR/q/jIsMXZNJZ4lEWMr+gA317vF2FT3zCNGt8iNJ
p5cro7wSHz/x9FsfE4LquXDRzfDj8aeIK9bermPO4F8VAzcxu8nbZBnhUMK8
nfOpp1SVea+6xb+KAq8z7rx038nKVGujZczn+RaWqkV5clrtWrqcqp54PGN0
Lg2rL/yAioqZW73oRJvVFbhHhWDu9W5RioHTqXV2eAsXrHmdetVDZKLF6Q49
oK5scNotHNnQyPsXSfOn+CS+ldy/Dw21tQ6IaSPWl1QrHeVN9rn8mYcsqn6z
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
LXkJSUkpqYlxSQUd0/wCfalOpgWFhgT7eVNTa4fF1Cp7rDWHRiV7k6lkSkhi
9SBcHGi4MdPfbusKVcLmawGRURGRMRkNPwTVnVP1XM7n10kJycmpqUmJCXEF
3Qz4KudzZWpiUkpKYvyzqn6UKnA+BfxN0DsY/lXEeMOJJ5erbAt8g/pQg9ma
E0z1cne9G14/weyrSo2kBft6UVOrB9jI6yjfZD0Np/l5+4a//IAxKRgvvWvh
WMCY+8NkZ0F0WGRMXHR0TGx6SjA1q4vNs+37+FsOIS9aOtrbO9qas+47p/7r
DjMDAAAAAAAAAOSB0fR457qb1Uz0qxDj1f3LT3mqlfHyxio1FSMy5i6b8YTT
pHNhfbLIRza95rHZ+nNBLYh6hUYKbm7b45j/HYKGu6oL4+/u1VTW2ePegBzw
nGqPstRbbmzvGZPX8OUn/MWR/BuHHF7wNvCzR1/fNVl7IeydsEDM3jQ7w01X
4tp4uneymnJwv2MBHRrraWooDziuSdjnW1zfUF/f2Ppl9pGCyFo99KOrtsD/
9Go1lZ3u2S1DLF7JWpMvGmqb34ot70JZH+ey6u5tUta3iBbd5T6WZrVcyeB+
4TRqvb91VGa6mWmpHqHEB0YV9cGZTHWFmsOTpcwcml9WzySyUT/RSn/rxewf
KHaczLu+z6NUKOqhTyn2tpR3/Jy40++Dj+4i17LgWUzWlbVqfykRZv+tWH2r
BqN9AQAAAAAAAAD/DcZz7NaYUrox9suPvbx7J0awjj9eemedMmG3SxWGrGcW
Oq3d44x1VZTJ0ruGOtu9hGc4WT3BZmomoa38QkCfsy9vJO2jNcHydbzK90ZI
9ZhQ4U6UwWVQPUppZ/NTRllo6l0r4+laLqc31IK09ngsf7MJl9Xgaoic8H3P
FlRTR/W41B040+2+e4irHxQL3mPDZXeEuIR9wDojzKy4uUZJ/2isqAKnZ1gv
V9K89ZyB/h14dlT7wIigeTa09edsFt7/f3t3/g5V+8cB/E9JlqQsFapHJbSq
b6VFlmypqWyFhCyJVoSS7IUs2WWP8tCCKCFFWVosleVhJoaZzpzjazdmYdSj
1PN+XXNdMXOW++iX9/nM577PNonlG9zLxs5JtkYdkF1mU8R3W0DSs613na2Y
zOfM1GPKVjGTVfiOJI+A+TyzAQAAAADmzKcYw5X7wtoEV9h7sx0t4xoZXxnD
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
5rIYNwuniAh7DTnz+6O16kGiNsLcJvzNrAr2VH/jXS9HN6/rwf5ebvaXMl73
Tr89h/4q0cvlgs/161d9r1wKLGoWlrj/BRSn/qqOSWLrdDcq3+hdjPEU35lp
tVL2UAbvHw8AAAAA4Kdi1gYYGYfzJOX+hlhT5UXbbbM+T32fZJRf3CYtvXQi
1Q9S7GovHVpai6hJmyI/JZqr04JrR3Mx633MQTWTlPdCdyc+5ztt13RJbRwY
2pdojD+57X82uf3Ctv5hAzV++ofvdIkW0sne8gvbVcxu1aJSDwAAAAC/FD39
+AbHjB7utyh2rd+uxUtX2z3sEbBDd6HTetnJVD84yGm6qa9zrlzEZMt47Lxe
3iyfMfFGX7atsoZVFkPQxhSnJdpUcZPtva8jv5L9RadVFm+0zv4q2rlmj112
aY9D6j+ibEqxGuOsDZzv1M7dLQYAAAAAgCiIzuQjKuZ5UyZ7kp/vWiiJSezy
KP8maBeK9fTMVkuuVD/I/himu9ahWKR0y3rguEphszfXZFTOmwCtpbIWDwTN
1O0r81AXX3WhaGDyLQ5n7vpvhi7NbdeJ+yJMfaUGGuLPOEaWDRf1WfWlz9rm
sCkIAAAAAGB6PTnW63XCp053pacck5MUUzyTPyBkp948H79nrMnfKfaLcxs0
RJkxSnE+XN8tsWJf2CeuM3bcMZYR3xRQxd+bz37iprpY0jCti/NPQ2nBg9KG
9v5pW2NYrzID/bwuuLuEPetlNZck3QwJvOrll1TaRgwvR1mVHhkWcs37alj+
OyFr/TCKXHTt8piTb/S9yYsKvXk7JirqdnRKYqBfev3wIKn+t7GnbYPuVdfV
1ta9rkw/65r0Z00YBgAAAIDfCrv80mZNh0LuOE4RLy9vFJcU3ygoZgvDiDso
ezi0ecZoS7HL3VQXKupGcTeu9yTTZMSUzt7nvYmgyNbg/ZLSsuZhyYFhqSWv
akpjnHQN7FPeswaFIL7UFaed05KX1PONDbj1oHnouvrrg7Vl1c6nZYZcS2/s
G+7qv0NT3GiV0S1grH05p3ZdLJoI9eSHREtz35rRYVEDbwP1t/uUsQfJjnTr
vxYtEJMYfy1Zdfqp0CEBAAAAAMy1/jRzBX3fWu74TrGeuqiISYrvuFkvelcJ
677DXztcS2Ys1lOsJ46rxRT1o7lDNT31iIyY3OlsJu/GI/cXUjIqJ2PHJtNS
7BpPTZl9F8qEfYswhFnmoSYhdyj41bexg9R5b5NYvsG9bGyhHbI16oDsMpsi
vkOQ9GzrXWcrJvM5M/WYslXMZBW+I8kjQNTZAwAAAAAAP01XlMGSQ1Nr7BSn
3vd/EpLis1qDnV16TkPteK4Iqb7ESUVMUTeyk7dWL++cw1erJ157bpWQktCO
mRwg6779ShnZY3nCW9+Z5efUJdR8xuM3xXnnryWpapU7cfSuBNOli2j8y+i0
p1oYXqzgmkpAVFzRlJFea2TvG5NRXN/O4jDpDNTkAQAAAGC+ITsi9GVMgz9O
LcqzHrqskVogdzKlW8hu7MrbUc+m5NuhVK++3jJr5lRP1HhuFl+hHc7dV98Z
f1Bm4ZpLT3gTM8VpCdwnIS1rUTCZwNklHuqLxCdDO7+hVK8huTWwhhg/yFCq
l5p4aNTgaKqX4kv1ZEfs4X3BNVOajqiBxtSzB9TlJIc7bSQU9ZxS3yHVAwAA
AMC805dAk9W98oqngb6vwnOzhJiaVbbgp0OR7XGXAt5O2YeVf2rllqn9+UL0
3DkkI7/Zi3sNnIagPYvF90ULeLbU0GGVFi8xy5/7VP+tLfqwjn/jlCFwPr//
ONwVRDA+vixK8DXftETGOODNzJcIAAAAAPBTsR65rt/hUswbkcnOnFOqMtK7
IwQ9M5ZVH3E5pHbqB8zko7IG196K0IjPaQjdr6Bo+2iy3Yb9+My6ZZs8J49I
EBPH6bhrrijJHfhHO3Bo2YIW0h8byvekek5jmOHR4HdTx0+PO26ZO3ki8kOk
vuqRtJkvEQAAAADg5/ocb7rWKJa/1YZi1oSarFbadPr+x6mtNu1PrrsGVk0t
4lPEG5/tq90LppnDOonoyLJate7yk7FUTbGrL21WtIz5MJqomVXX98gv3nnm
Uf/YMMrcNZZZxLSONuxQrKpLW6R3uRXzTqzlwix1V5OcXCeT4jT67ZDaaPdg
ItW33zFeKnU4h+sQFKfpuo5RfAvPsjj0aJPltLCG8ahPtsUcMvCqFuUaAQAA
AAB+JnZTkLbKqSeC8jjFbnlw3fJ/f6kfOnMz5/Gz8qLMWP8zdvaB5R28i0IS
nQmmyrRsYW34vMgvj7wN9tulVnV87apNc9U1cs7+NB6dB16HG65eoXu5dCKE
f61LPKlt4JlUWlP96Jat1l7L6Hqhmb73UbCd2Z51y5bKb9pv4RL2tKcq1slS
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
AAAAAMAf4//J+Opy
    "], {{0, 164.97937757780278`}, {757.4053243344582, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{757.4053243344582, 164.97937757780278`},
  PlotRange->{{0, 757.4053243344582}, {0, 164.97937757780278`}}]], "Input",
 CellID->74227303,ExpressionUUID->"d4e3fb99-f2f5-4c9c-8a0d-fa183ea6c1d6"],

Cell[TextData[{
 "We use ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "=", 
    RowBox[{"m", "\[CenterDot]", 
     FractionBox[
      SuperscriptBox["v", "2"], "r"]}]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "aac899f5-f786-4e3a-9b91-29ee7cd4b8e6"],
 ". We also use ",
 Cell[BoxData[
  FormBox[
   RowBox[{"F", "=", 
    FractionBox[
     RowBox[{"G", "\[CenterDot]", 
      SubscriptBox["m", "1"], "\[CenterDot]", 
      SubscriptBox["m", "2"]}], 
     SuperscriptBox["r", "2"]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "4dd91700-de22-40af-a80e-0d651f598e9a"],
 "."
}], "Text",
 CellChangeTimes->{{3.875011929403181*^9, 3.8750119944448643`*^9}},
 CellID->23481574,ExpressionUUID->"7f17ee30-a62f-4d35-a515-e03cc878b8ff"],

Cell["\<\
We will use the approximate value for the distance from Earth to the Sun.\
\>", "Text",
 CellChangeTimes->{{3.875012039957732*^9, 3.8750120542147627`*^9}},
 CellID->386341421,ExpressionUUID->"69bd7760-94e4-4694-a297-36428b74a3a3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "=", 
  TemplateBox[{"1.5*^8", "\"km\"", "kilometers", "\"Kilometers\""},
   "Quantity"]}]], "Input",
 CellChangeTimes->{{3.8750120564331665`*^9, 3.8750120594383326`*^9}},
 CellLabel->"In[23]:=",
 CellID->128439433,ExpressionUUID->"a62931eb-57eb-4d1e-9559-b6180e221f7b"],

Cell[BoxData[
 TemplateBox[{"1.5`*^8", "\"km\"", "kilometers", "\"Kilometers\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750120678934174`*^9, 3.8750121624452496`*^9},
 CellLabel->"Out[23]=",
 CellID->173607952,ExpressionUUID->"36a3ac96-6e3d-48fa-a192-db286c4be9b7"]
}, Open  ]],

Cell["\<\
I'm curious what the right SI prefix is to express this large distance. \
Sometimes UnitSimplify will work.\
\>", "Text",
 CellChangeTimes->{{3.87501209167848*^9, 3.8750121182230096`*^9}},
 CellID->573981839,ExpressionUUID->"0535b6e8-542e-4695-a56d-376695694e31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitSimplify", "[", "d", "]"}]], "Input",
 CellChangeTimes->{{3.8750120684809833`*^9, 3.875012070526725*^9}},
 CellLabel->"In[19]:=",
 CellID->129662362,ExpressionUUID->"13fe0c00-a3f5-4ffc-9332-c872c8e56f4b"],

Cell[BoxData[
 TemplateBox[{
  "1.0026880683402668`", "\"au\"", "astronomical units", 
   "\"AstronomicalUnit\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012070832775*^9},
 CellLabel->"Out[19]=",
 CellID->149901727,ExpressionUUID->"a49e250e-5f76-4da6-b822-1904d6e9a1b9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"d", ",", "\"\<Megameters\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750120730974464`*^9, 3.8750120779026976`*^9}},
 CellLabel->"In[20]:=",
 CellID->749148820,ExpressionUUID->"6d88d531-30c8-4521-9dd7-747615c089bf"],

Cell[BoxData[
 TemplateBox[{"150000.`", "\"Mm\"", "megameters", "\"Megameters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012078143328*^9},
 CellLabel->"Out[20]=",
 CellID->214245323,ExpressionUUID->"46ba40d1-02bb-40f7-a011-8a615b2cd073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitConvert", "[", 
  RowBox[{"d", ",", "\"\<Gigameters\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8750120730974464`*^9, 3.8750120839592795`*^9}},
 CellLabel->"In[21]:=",
 CellID->286673712,ExpressionUUID->"4f528f8d-8412-49c7-b002-2837aa795469"],

Cell[BoxData[
 TemplateBox[{"150.`", "\"Gm\"", "gigameters", "\"Gigameters\""},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750120843134*^9},
 CellLabel->"Out[21]=",
 CellID->127676115,ExpressionUUID->"085ee2de-5a58-4713-a79b-db2afd2ae2e8"]
}, Open  ]],

Cell["Define d in terms of gigameters as d=150Gm.", "Text",
 CellChangeTimes->{{3.875012127359192*^9, 3.875012141143462*^9}},
 CellID->7140843,ExpressionUUID->"0710ab99-009a-4eae-a73f-6213af78c789"],

Cell[BoxData[
 RowBox[{
  RowBox[{"d", "=", 
   RowBox[{"150", 
    TemplateBox[{
      InterpretationBox["\[InvisibleSpace]", 1], "\"Gm\"", "gigameters", 
      "\"Gigameters\""},
     "Quantity"]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8750121426822147`*^9, 3.875012157576183*^9}},
 CellLabel->"In[24]:=",
 CellID->360578427,ExpressionUUID->"cf8cb438-cd33-4bd8-bf94-dcee1b8e4767"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      SuperscriptBox["v", "2"], "d"]}], "==", 
    RowBox[{
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], 
     TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
          TemplateBox[{"\"Sun\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
            "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
          "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"]}]}], ",", "v"}], "]"}]], "Input",
 CellChangeTimes->{{3.8750119959995337`*^9, 3.875012032637576*^9}, {
  3.8750121680648527`*^9, 3.8750122013210397`*^9}},
 CellLabel->"In[25]:=",
 CellID->92315837,ExpressionUUID->"4ec79828-b880-4bd0-9cca-1ff132654b85"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     TemplateBox[{
       RowBox[{"-", "4.461739299953532`3.35061491207214*^15"}], 
       RowBox[{
         SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
         "\[InvisibleSpace]", "\"s\""}], "meters squared per second", 
       FractionBox[
        SuperscriptBox["\"Meters\"", "2"], "\"Seconds\""]},
      "Quantity"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"v", "\[Rule]", 
     TemplateBox[{"4.461739299953532`3.35061491207214*^15", 
       RowBox[{
         SuperscriptBox["\"m\"", "2"], "\[NegativeMediumSpace]", "\"/\"", 
         "\[InvisibleSpace]", "\"s\""}], "meters squared per second", 
       FractionBox[
        SuperscriptBox["\"Meters\"", "2"], "\"Seconds\""]},
      "Quantity"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8750122022873244`*^9},
 CellLabel->"Out[25]=",
 CellID->146065850,ExpressionUUID->"ee86b3a6-97c3-459e-964c-09bb07535b4f"]
}, Open  ]],

Cell["Add the assumption velocity is not negative.", "Text",
 CellChangeTimes->{{3.875012210473237*^9, 3.875012220625778*^9}},
 CellID->21197662,ExpressionUUID->"57c7a02a-6a1d-4242-8898-30044270e750"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      SuperscriptBox["v", "2"], "d"]}], "==", 
    RowBox[{
     TemplateBox[{
       InterpretationBox["\[InvisibleSpace]", 1], 
       StyleBox["\"G\"", Italic, StripOnInput -> False], 
       "Newtonian gravitational constants", "\"GravitationalConstant\""},
      "Quantity"], 
     TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
          TemplateBox[{"\"Earth\"", 
            RowBox[{"Entity", "[", 
              RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
            "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
           "Entity"], "[", 
          TemplateBox[{"\"mass\"", 
            RowBox[{"EntityProperty", "[", 
              RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
            "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
           "EntityProperty"], "]"}], "allassumptions" -> {}, 
       "assumptions" -> {}, "open" -> {1, 2}, 
       "querystate" -> {
        "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
         0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
       Automatic, "version" -> 5|>,
      "LinguisticAssistantTemplate"], 
     FractionBox[
      TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
           TemplateBox[{"\"Sun\"", 
             RowBox[{"Entity", "[", 
               RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
             "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, "Entity"], 
           "[", 
           TemplateBox[{"\"mass\"", 
             RowBox[{"EntityProperty", "[", 
               RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
             "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
            "EntityProperty"], "]"}], "allassumptions" -> {}, 
        "assumptions" -> {}, "open" -> {1, 2}, 
        "querystate" -> {
         "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
          0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
        Automatic, "version" -> 5|>,
       "LinguisticAssistantTemplate"], 
      SuperscriptBox["d", "2"]]}]}], ",", "v", ",", 
   TemplateBox[{},
    "PositiveReals"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750119959995337`*^9, 3.875012032637576*^9}, {
  3.8750121680648527`*^9, 3.8750122408265023`*^9}, {3.875012389621438*^9, 
  3.8750123920081315`*^9}},
 CellLabel->"In[31]:=",
 CellID->1000441859,ExpressionUUID->"cfe3a9f9-8c59-49dc-8682-74f5485040cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"v", "\[Rule]", 
    TemplateBox[{"29744.9286663568788304074`3.6107790026422206", 
      RowBox[{
       "\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", "\"s\""}], 
      "meters per second", 
      FractionBox["\"Meters\"", "\"Seconds\""]},
     "Quantity"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.875012229598507*^9, 3.8750122413505754`*^9}, 
   3.875012392489051*^9},
 CellLabel->"Out[31]=",
 CellID->92391263,ExpressionUUID->"71f370c2-713c-4dac-951c-4cda52fee9d3"]
}, Open  ]],

Cell["\<\
Now compute the acceleration. I use l for acceleration because a is a vowel \
and l is in the word acceleration.\
\>", "Text",
 CellChangeTimes->{{3.8750122671379423`*^9, 3.875012303586658*^9}},
 CellID->52762262,ExpressionUUID->"4e11a26f-0034-4d96-bb7b-d36540966529"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "=", 
  RowBox[{
   FractionBox[
    SuperscriptBox["v", "2"], "d"], "/.", 
   RowBox[{"First", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        TemplateBox[<|"query" -> "Earth mass", "boxes" -> RowBox[{
             TemplateBox[{"\"Earth\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
               "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
              "Entity"], "[", 
             TemplateBox[{"\"mass\"", 
               RowBox[{"EntityProperty", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
               "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
              "EntityProperty"], "]"}], "allassumptions" -> {}, 
          "assumptions" -> {}, "open" -> {1, 2}, 
          "querystate" -> {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.7027768`7.298362409668283, "Messages" -> {}}, "contextinfo" -> 
          Automatic, "version" -> 5|>,
         "LinguisticAssistantTemplate"], 
        FractionBox[
         SuperscriptBox["v", "2"], "d"]}], "==", 
       RowBox[{
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"G\"", Italic, StripOnInput -> False], 
          "Newtonian gravitational constants", "\"GravitationalConstant\""},
         "Quantity"], 
        TemplateBox[<|"query" -> "mass of Earth", "boxes" -> RowBox[{
             TemplateBox[{"\"Earth\"", 
               RowBox[{"Entity", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Earth\""}], "]"}], 
               "\"Entity[\\\"Planet\\\", \\\"Earth\\\"]\"", "\"planet\""}, 
              "Entity"], "[", 
             TemplateBox[{"\"mass\"", 
               RowBox[{"EntityProperty", "[", 
                 RowBox[{"\"Planet\"", ",", "\"Mass\""}], "]"}], 
               "\"EntityProperty[\\\"Planet\\\", \\\"Mass\\\"]\""}, 
              "EntityProperty"], "]"}], "allassumptions" -> {}, 
          "assumptions" -> {}, "open" -> {1, 2}, 
          "querystate" -> {
           "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
            0.6138072`7.239576971925323, "Messages" -> {}}, "contextinfo" -> 
          Automatic, "version" -> 5|>,
         "LinguisticAssistantTemplate"], 
        FractionBox[
         TemplateBox[<|"query" -> "mass of the Sun", "boxes" -> RowBox[{
              TemplateBox[{"\"Sun\"", 
                RowBox[{"Entity", "[", 
                  RowBox[{"\"Star\"", ",", "\"Sun\""}], "]"}], 
                "\"Entity[\\\"Star\\\", \\\"Sun\\\"]\"", "\"star\""}, 
               "Entity"], "[", 
              TemplateBox[{"\"mass\"", 
                RowBox[{"EntityProperty", "[", 
                  RowBox[{"\"Star\"", ",", "\"Mass\""}], "]"}], 
                "\"EntityProperty[\\\"Star\\\", \\\"Mass\\\"]\""}, 
               "EntityProperty"], "]"}], "allassumptions" -> {}, 
           "assumptions" -> {}, "open" -> {1, 2}, 
           "querystate" -> {
            "Online" -> True, "Allowed" -> True, "mparse.jsp" -> 
             0.6941092`7.292972794248649, "Messages" -> {}}, "contextinfo" -> 
           Automatic, "version" -> 5|>,
          "LinguisticAssistantTemplate"], 
         SuperscriptBox["d", "2"]]}]}], ",", "v", ",", 
      TemplateBox[{},
       "PositiveReals"]}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.875012274804799*^9, 3.875012319614401*^9}, 
   3.8750123977344756`*^9},
 CellLabel->"In[32]:=",
 CellID->14537228,ExpressionUUID->"2b21f807-2da4-494b-8038-32fdd8df774e"],

Cell[BoxData[
 TemplateBox[{"0.0058984052091110614`3.3097490069782394", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.875012320156827*^9, 3.8750123988467865`*^9},
 CellLabel->"Out[32]=",
 CellID->11451360,ExpressionUUID->"fd6b89b5-f28b-4243-9a56-76891965dd3f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"UnitSimplify", "[", "l", "]"}]], "Input",
 CellChangeTimes->{{3.875012322359454*^9, 3.875012324483264*^9}},
 CellLabel->"In[33]:=",
 CellID->90435974,ExpressionUUID->"18cc95d1-848b-40ac-abbf-d4d59ca65fef"],

Cell[BoxData[
 TemplateBox[{"0.0058984052091110614`3.3097490069782394", 
   RowBox[{"\"m\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
     SuperscriptBox["\"s\"", "2"]}], "meters per second squared", 
   FractionBox["\"Meters\"", 
    SuperscriptBox["\"Seconds\"", "2"]]},
  "Quantity"]], "Output",
 CellChangeTimes->{3.8750123247880325`*^9, 3.875012404107671*^9},
 CellLabel->"Out[33]=",
 CellID->61875961,ExpressionUUID->"5d0daa33-c1b0-4138-8a2d-c7d39be5915d"]
}, Open  ]],

Cell[TextData[{
 "It looks like the closest answer is B, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"0.006", "m", " ", 
    SuperscriptBox["s", 
     RowBox[{"-", "2"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "9170f3e9-bde7-4906-8d22-e6df7430cb25"],
 "."
}], "Text",
 CellChangeTimes->{{3.87501241575686*^9, 3.875012440725641*^9}},
 CellID->143349560,ExpressionUUID->"232a5588-15ae-4fac-bc4f-93107ab8513f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #6", "Section",
 CellChangeTimes->{{3.8750119196110086`*^9, 3.875011921395045*^9}, 
   3.875012469238413*^9, 3.8750126767142334`*^9},
 CellID->532121604,ExpressionUUID->"72709557-6977-45c0-b9f6-f2034000576b"],

Cell["I will work through problem 6.", "Text",
 CellChangeTimes->{{3.87501268050591*^9, 3.875012685194001*^9}},
 CellID->11144587,ExpressionUUID->"dcb17b45-64a6-4d5b-88ae-1a2f978e6ed1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
Ej8Br5lqtu1pHn7mieaC5tl87WjJXF8hukN4qIRma2nr7J8ErwE6icwkWa1b
vUZ/v83tcHHjiHEQG8QsCFOl3JZoq02aBts2b966aeMGTTVVFe09p90/Sk5R
Ycz+/FleQlzASMl4NYGnt6zb56fY803mMFVL3q9/Ze5ZVVjat1f1d/p8mr9w
cVclFy8RlX9VzkuWekZ+0QznV2NioLX2U23HkNgkoImRoYk57+cZ66yr/TK0
eIORNDvQUlvTNjwTXPmsoW9c2DOMtFdXVNV3/z1fX3xWV31d69A8e2JXBIcV
yFUFCDeM9PWNy9ze19+PE/Wwu14cAt5QY+HbxMjIlxnFLQPy63A5ZZjTLnug
uabmy6B0Vw1reFi4r20YnobK+h6WvGbLg+WrbfumsFHMN4Plht3fUlMFCyZ5
1DB7ZGicj2psEGto+LvwLTPtNRWfGrvG5F6zwlE0NPVOLP6a6vQSpniFdYhn
EgpOPcSG3UtNy+Ayvb9YtuWJ/ubauk4WF1bl1/r61u7+0clZYbmlQYHybgAW
uorZyCBg9w/I6SoWAK+vlrqmv8aXZBnzgWCrrm/plbNRZLXg+VtUlnFE+DIo
NlJxo4sJTwJ4UDWf6tokq4/PHvk2p0/F1uYPc4YoHckb6X68cfLH+vplUq6J
/n68BEzc5iKj0my/7P6mmvquUS7cVEddfVtXP4vNm3vA3DiI3yKymSGplN8a
e/HIpeiOWY8HjfeUBFlv2XH5tcxGBtTZ/1Vj6xwE/N7ywuYFXXGaC0v/Wqx9
4SSii4uY/2sZDoDfGkl/o/jNwgAA4F+FgP81iv4S7aQ0AAAArAQCqJdpYfDg
7fwskF3ssnsv1h48AACAC284l07P/Qc8egkAAPxMoP4c3+C8X//OLAAA8D8G
7zPTwsw6+otMHSDgdiffMDnpVQnOEAMAS4BX/yqmfOmvvgMAAP/TCHhNqTFF
o8BVAACAn8BE4xvvBw4PPclUP19fH7L7g5uOPkl1cu2GAgAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAWy9TXgoTwkABfanTh4DI8+wqCfsoDtHgj1XGUZxRfEomWLefb
7gScjo/xESH+Pn7hRf/kR5ZyvxQkwMOgUcLKlmMCkYCGquOpbmQ/kntQTvey
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

    "], {{0, 184.4769403824522}, {769.4038245219348, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{769.4038245219348, 184.4769403824522},
  PlotRange->{{0, 769.4038245219348}, {0, 184.4769403824522}}]], "Input",
 CellID->256750185,ExpressionUUID->"31a48622-ce06-4d11-a364-e03ef9cbb923"],

Cell["I have an equation I can solve.", "Text",
 CellChangeTimes->{{3.8750126891702814`*^9, 3.875012693506366*^9}},
 CellID->450800702,ExpressionUUID->"74da9bc7-679c-496a-97d5-5f969845f664"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"m", " ", "v"}], "==", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"3", "m"}], "+", "m"}], ")"}], 
     SubscriptBox["v", "n"]}]}], ",", 
   SubscriptBox["v", "n"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750126945118504`*^9, 3.875012708570874*^9}},
 CellLabel->"In[34]:=",
 CellID->298245692,ExpressionUUID->"0266af40-15ee-43ed-a783-029ccbe742b7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    SubscriptBox["v", "n"], "\[Rule]", 
    FractionBox["v", "4"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.875012709238929*^9},
 CellLabel->"Out[34]=",
 CellID->136267825,ExpressionUUID->"7d5b5674-eafb-4dac-a108-a6548bc48835"]
}, Open  ]],

Cell["I think E is the correct answer.", "Text",
 CellChangeTimes->{{3.875012714299218*^9, 3.875012725274757*^9}},
 CellID->586162579,ExpressionUUID->"898d06c1-2cb9-401f-a49f-0e5c0ef6e267"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #7", "Section",
 CellChangeTimes->{{3.8750127453391285`*^9, 3.875012747308165*^9}},
 CellID->93119189,ExpressionUUID->"d993f9a7-18b2-49ea-b64e-d5ed90302682"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7wvUEWVu+nRGmrDAgsYy7W+GC5NeaDzXZtMa0rbHlbOn2DmFDnrKpJOhDSIb
mWikHiDOXiWZA7fCdfoIIact2JhEsgwXzQ2xyp/pyxFOutfDo0aOra7GXrfG
qcI4bb5GCgb+9egJJMRKvaJ97vX0ZO9w3FPXudkHHKq62PpViFJ89ocHmxXk
DgQg097ImcRAY+LO2+/FtYfG066qEC1nLOHh1Qo53q6hqHsxvIc3Of4t/01a
DVaCz+e1+xuTNp9BPon8yKlw0F2rvs/jMxfOH/NtNq5RN6S0Chr6s/elMVHr
SaY4+F6YzNmpN9eral5K6OTx2d/yXqc1DEJ8Tq27oYqZV6s4soR9WpAJ6bBd
AQuz+ZOjeY+2rJU3pTQKl5W+hRirat7Om04NxhMtSdqnZ2wEYhbY6xP3+dZw
xG2nHVE85VGPVVdpEkCyD439or8KZVLusldjp+MngUdj1VAPrjsSMt2syZ/d
oSYqsFsQhSesYgc9eVH2IaqPEVGYfWA1AQtp0kAF1v+9qpvui4dcTgvjmW8z
Mn6PFT7aQTzhVj1lv7xmbyNNA/JnQenIEVRF7ZuIpbC/5L9+VzOIU9uJajeJ
AJLXHGisQTqbIDIyTrGjvqKcgR+itFJMQJbsQ5oQoG/JN7aTjjA+wQ0eKfK8
51c8LGEWkt6A9fqKzrWI6am2/vin3mV4it2XeFVLyTROdCnLSKwFadfNt8Ju
hiMlr0dB4m0AMwWCrtuTwgV3guJZz/qfokKa3A2JRo4VOB5Vmroi21H0CKoX
/ZewTHwnAPVEn1cnmr0R6gTU/+I0ccuFOLEv4nNK7LYRRcM3AqJmqtjZB37/
yu70BG2vcd5N2GfzcSr24DX424UK9BvXS8zIPvANHMe1TsqmBnAHkQ8Q997J
mjJQbq2ffTjutY/spmD3l23oRgINvrm25cqLH+JfcCbYMsYgyNoHwVBom0KQ
CwEUdlJLxhdWT2GIqKRwJLAeVXM4leQDG454f5VYY+p4aaqla18uMKqZ2QfU
EX95o+qfbySmxoeSrTTkJXdezRjrJ6XZArcv5pyygnXU38JHd4edUVG5mCJt
7hrXZpdmvJbqJzGcM5qdyikddcgTDUVQf4gpUf/mW8Gf5+H98KIdDM+GWkN8
00asddd0simtd/BVa3IkBdaNMzLsvJKmhNLcF5YE5g+v71PMs8vH9DUU5P9A
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
2b0SBXJ6cylXzaztvaLgZtlfOX/xeabkXQOTzDzyKaPz7onZH1IjvSgBKTRT
IlFF38yamicYwVGbgNqFUqWBA+dbiImW2aveGX3G5/Xl0K+cNnvIiE2FlcvZ
jvoBUa4fGZTbFoc2qatoG565ZvM4RvJimzm1ZRUw7lqd0F2vorHP+Do9vVNY
1YGyQGujI9bOoUmwtpEdvJIE2w+hwVzqOQwT6BWWo6GisdfY+kko1jkdTCE4
Bb9LIl812a2jrqR6+NGHMUFqEHB2i6qSitaOE9fu+BR9n+ENMrv+jjDXt7Dz
oAXEZmRnJb1wuXPH59PsN7mgwKpwMtwnHvW49TSjgzaSa4HoApmj26N5/neu
Ht2uoaK256SVbWDJcHUkYl3qpPVbjCxveeZhRHe46rr0ZcriBPicr2EXN2ho
b9XdunXbRh0NBYKymv5lietaBouoJobnPV9lf0iL9HYLTPI6o7SGBPeyT9a3
/NmdjqPkRZ/n6/RE8NqCjHXNwme1HtVLTA0ZqrCSnLV+ECNYwJNi4OiuVUY1
mC7le8JlozvvZNioPV5K+5/6mjWEPxR3nqWW9jUzjNWJf6yRJ2489yyjWyQS
9tu7OpJrH7m2WzddiMMvd/TdvT8dswsiyWSfiLTMtFAXqwuXyfmzXaes9ZRt
yOZ2faRamV1xpEckRHo9vnzW6nmq4LrfyZHigHuWJ/VUSTr6xjfvhwpWbKG+
Ij9rU3NHv/j05AhfdzeGu4X2WvmtBy49DqueM9YzZbAFTkuU+WZVnR1bt27f
vGmjqqKCvPo+M5e8XiwnIIt9LcV4je0nI4pbUZ0zjrR1j1g8oGX2tCY9v3Fu
vzZJQ8fQ/KZzRvs8vB9GtCP642yVxhw+8Mav78WB4u6+454muGoYs3dkUi2o
L932gME5eKDydmMU4q4BYCqhECz35ZslursYzai5NQFm2zQPeJXItAV89OOj
I+dpkR63bj70jM0orCjPS2LcMzG6kfhZ+PUFK97vCq+z+HVyyeyjMv8WeOP9
LTU1bX1zT61AY30ttTVtg/jZE8QcHEQ23A22V1dUNnQzZe1nPquvpeZTfduA
6Jpr1tDfozNEyGV2NtS2/T1bZ2WrlVSgcfjxdS19s4oZ62ut/VT7dUD08pGx
oYGx5etXiPWjpaGlZxT1CWjNhz9fUwX/ckL09aGBmd/ljXyrr/0yMFtkPFbf
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
TGazPIykcgnWMLZrFWZ1XjyvVU9JTk5OK28nOPX5kdc8r1x0Cij4qvihkVo8
xpYb7a8zwmie3l40H++AlOKW76SJl3pSUKjxl9pmyqzLA/0txcmhgYHXaKHJ
5c3NZbx/Xz1xNLKkZmwnx/GcO0j2/SdXVdbH/EhfzysXnMPyhLcr5GTs6KM5
loMu81yMGi1y0CdHjSbLQIkyM3SMFK7R0s65k7dGc/sq3TcvP51Y+5PupE0Z
rVn2/5y4J3jKDfH18fl1C81uvB4sZFz2t+qiNBdDzbm73OP9Qp7w6wLrbfAO
naXnyxj8JrG2JMdv3wJ1lbWX06ro/ENOtL1Jslk6a8fZG09rpXY4Ee3PvLbq
GUe94o8sZ7c9PLNimUv2N4Joe1ecd+PcpllK6iaXinmXG9y++vDd2rP1D3rH
pFU297fXV5Q9CzSdrmbill9eVlZe/rZV0I6wu567Gy46GFjVK9h4zpmVG09l
/0sM9La8eZx8ZpWaznGvQP/b1U8uGUyn7E5tZ3+tKUp1NdRW20WLD4jKa+Ql
ua82ZAdV36NopFlKs9vpdE8wgIhoz3Naa2AaVjNShmRHHx31FeVP/c20VDf7
5pfx0vniTbNwaBK3/130oY22YS+FA+r/e59gtdEs6gX/L5Kk8lfXWuCxfYH+
yZjKf1lET2Oen0tY4pXN5qGN/OpMrynKuLRZQ3Wnx2vBuYN/LHx2z5upa/9M
ePSIrgJPwxVGgdU9giOb77BW3+7huIYgsuqCNqtN0zuQLDwbEr0Pr/kW9vcX
nvlLaaaeY5lw1jnxJd4z4oNYtvCjj1kbzgZ6Bz35LF5yhFnZln1654n7Tfxl
2O1PHNf8dTjsNUtYSEgOt0SGd9aWZLnt1Bp+DsD35hTbf2g1g+PBmG9CTY1d
nku2aZyO+sry4mummrM3XX3MW39ZeU3z4AaE5+7tZwN8gx40MXl/1gVsp25y
Hh5iRlKAJTbB7Wt5VXDLbiVF38o7yDuluuiKgQrFOr6Nf1hJaxzJjkvsJg+j
5sahjQdiq4S3shhvb1pvMw18JTFfYwjzdcyh7fvD3gp+zmXU3jiy0SLwRS//
2uDb+/KSZLtl2vr2aSW8Ldb9K61sjzdb+ppeFySeXkWdZ0ULoN2rKXbVV9bZ
HS9l/X0tb8uLg/ZqzTH0KOAfkbLy0uL0q9tmqW6P45d3foEvvHfJcAZlv0d8
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
eShMFNH36JSuEpXXYDLbkj1DJOZXyC85fY1PY9wdzpxz9b4WFuFgOFNN2DMu
XPl4og9eYa6562Kqr6U+TUl1mtpfhmcza8cRfZDFdAoVYBH89k1yE7JrnALR
B6chdLuG8jKfctFLEs5bv03TVVYPF+yRPeI0BW1Tpeq7ivYE85vZjaraqzyF
K1cs+hhntvAvaShmd8h6PMSzS170QZaGwTXIyFjFrlXEqqECWSe9FMlOidxr
FQW2O6HKpeC1ita6Iy6nzTdozbWKrR9VNKRdq4yzeChw5dZ322KGxswjD/oG
5JJ9UpDR+MtrM6XWZXbltc26K93eCtbX/8ZnveaGsDdiWaXwyVF6Vsg9d0j6
BVVVavQh86w6vuhD9rkYNXpy1mhFog/Fa7ScEjsJazSXWejvI3a7AMg8v7ZD
V3ffzTfCviT+Re9Yow+i7+kZPco2t8o++m3vgAryqUNEa/yeGcp6o95lNuo3
Xx96n7E1XaS98/pbsZ+JXpVx+189KfzKakvYQ1FeMzLxWXxFgpbH+ubokYSy
20mip8Jn++xleyPf9Qg3mnF4xvijD0bV4xI6we+/U1PZ4PRMNJ39b33Wq6qa
+dWRJJWZdWKOhvrBTJHhvXKjj3fD7QPRFruHornQofSHvCma33S8816vqkE9
nHLfLyR/uL4x7tvNV1fR98hN8g1+I3HpKqfkdJb77Zg93ybqjXB13WlHZpFE
H8LDTXLPUOyIfP/6sYm/OnZX46uHyT6Wy2fqGAaObmcHiTaSzKpHhcK7SjJb
XUUKsCipjxnpkV3jSHZcdDeJ5lizGSp/ezwTTQb/qbnTVTZF1UkUTeJbtCmF
usi5XPS2G7vac53q7I3+wmUnFn3IyRbBJc2eu/IfPDjB6ENOxip4rSJWDeVn
ndRSJCclkk2E4GuRQyx/uxOqXApeq8wz9KvtY9cnHFxA3RlTI9bKjuVaRU7x
kJ8bvMbw5FwNilhjSIYt86Qgq/GX02ZKf2QQqzbmzAHLow4+UeE+Zw4d8c9p
HHX6U/jkyDeOc4ekX1BVf2z0QXLQ5Z6LUaMnZ40mObGKpVDxGi2nxE7GGk20
f2jAOwYVQexSV/sncPjpfD1JB/lBfTurKj5G2OLJjz54tazCc43WQrv4UPck
mW/CYDWE71BXPxQt+sYZgl78qGqoEDI/3vbwzm/ndD5wXK678kKJSDNI9GUf
oVIsY/gVm+i6fS3oHZvzIWiHho5RtOjbfNhtzwvK/xsYZ/TBH1JLVTW8PrQX
RE/qAcH9FsbLGwnP+hWKPjJt5qiZpgi649pu0WLec7icumuGlL8OJIs26l33
T+ioGFwTzOqQllSiNeXQbNVFV5+O3B0QjIOliEQflZcN1HaMtA+s4kvLhmad
c96H7qRSjJPEnjDRVvzwxXA+sWUdKEn8i1sNJa3VO9yeigT7nbmn5iupLllh
HvlK8spVVskRzFPQmGM48jzejtvmVH5zyqqIvc5roiUPN0l6xY5IW6Lt2dSR
0Pl7c4zJrEP3pd9g6btnTdUxiRV0oXbd8g6qH5xSIesSV24BFielfeOP9ZVZ
40h2XGw3WbVBhhTNE7dEb9vwe5m1Da68knLVxXkbYDhzxsEM0ZMwI/foHNUt
l4XlYYLRh5xs+TXRh9yMHc+1ivysk1KK5KZEsokQ/Eyse0vedidUuRS7Vhl8
+jGXaL1ttWD+JtpbkXo0lmsVOcVDgdzgpeDQHJWR8RWCFbSVPq2STDdX5klB
ZuMvu82Ueq3CfhPofKOew2V2/9vFJLs9ouDJUWpWyD13SMmBn19Vf0D0ocBB
l3cuRo2enDWa5MQqlsIx1GjZJXZy1mgCsYdCOJtU1MwjmgZj9W+5zutmzzO+
Tu976kcTHkHW0/NLZq0Y7IoaEHT7blKb7/pQbIge61PkTg0NA8tkeSFfT+HV
dbprrr4cuoIlep572YUL7073N2adMzv3RPhEiL4qzw2aKyxTmoe2y2W/vLKc
IrzY7n8dEii4yOx87r6euubayAS8nqeep+PeC2ed37fRUhO9VSLEKHbRV1sZ
8HK4uNb7bKSstHsoLK7V/punq+5MaBbuBtF632X9bHWL61//K/AJftzPH11/
ZfnsdbKu0/r5L2AVDoBhvwym5Qham/bCi2vmGMXWDo9ObIrdp7PuRJbwtoDU
pHKZb/22Uv/eG98y1Po2pR9fpCoSfRCtUSYzhm+LEb3PvbbM1Zx7QjhQlOgp
ubyOuvNK6fD4w85n3s5h7/gLsqp8t2jPWXq+ZCxjE/vf0NaqKi07mi3a00j0
5h6bq6QtUjxEyCo5vGz33aQ6d/gdE8S3zAvrdCi7kul9j3xoxUzph1sa/hGZ
s85HWIS+JexdbBQ+PEPzOz3efLMnyShmdpnbytmr+K09l/02lDZ4yhXO5d/m
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
Mx63CwAAAAB/rv8BceqwGA==
    "], {{0, 182.22722159730034`}, {799.4000749906262, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{799.4000749906262, 182.22722159730034`},
  PlotRange->{{0, 799.4000749906262}, {0, 182.22722159730034`}}]], "Input",
 CellID->40071554,ExpressionUUID->"dc1e6956-78da-4585-912f-116630afb082"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875012758783124*^9, 3.8750127648360295`*^9}},
 CellLabel->"In[35]:=",
 CellID->205170567,ExpressionUUID->"df33bfb2-7706-46c8-8146-60273a5a95e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", "\<\"OddsRatio\"\>", 
   ",", "\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.875012767890959*^9},
 CellLabel->"Out[35]=",
 CellID->92210735,ExpressionUUID->"50186241-c3bd-4e34-8df6-81c37741cc8f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", 
  RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}]], "Input",
 CellChangeTimes->{3.8750127782214355`*^9},
 NumberMarks->False,
 CellLabel->"In[37]:=",
 CellID->109730184,ExpressionUUID->"c3b2d487-4440-45f6-8b40-548a367f221d"],

Cell[BoxData["\<\"RotationalKineticEnergy\"\>"], "Output",
 CellChangeTimes->{{3.875012775357644*^9, 3.8750127792102895`*^9}},
 CellLabel->"Out[37]=",
 CellID->388850794,ExpressionUUID->"2c040e47-cecb-440a-aa71-d6a40fe06377"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"First", "[", 
   RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875012779800858*^9, 3.8750127835736284`*^9}},
 CellLabel->"In[38]:=",
 CellID->184077802,ExpressionUUID->"48d1a2af-6fe5-49df-be79-81377009ea1c"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"KineticEnergy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " kinetic energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
      "TextStyling"]& )], " ", 
   SuperscriptBox[
    TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.875012784577359*^9},
 CellLabel->"Out[38]=",
 CellID->138182914,ExpressionUUID->"b24b6f6d-84d2-46dd-9b63-6d835e723a6d"]
}, Open  ]],

Cell["We need I. ", "Text",
 CellChangeTimes->{{3.875012809188613*^9, 3.875012811620358*^9}},
 CellID->1462902,ExpressionUUID->"20e0781a-2c8b-4ed1-95d6-aafeafe75c97"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<MomentOfInteria\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875012813335389*^9, 3.875012819501505*^9}},
 CellLabel->"In[39]:=",
 CellID->47391537,ExpressionUUID->"7f2795d9-223d-4b74-a44c-2679260f7e32"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"AnnulusAreaMomentOfInertia\"\>", 
   ",", "\<\"ConeMomentOfInertia\"\>", ",", "\<\"CuboidMomentOfInertia\"\>", 
   ",", "\<\"CylinderMomentOfInertia\"\>", ",", "\<\"DiskMomentOfInertia\"\>",
    ",", "\<\"EllipticalLaminaMomentOfInertia\"\>", 
   ",", "\<\"HalfDiskAreaMomentOfInertia\"\>", 
   ",", "\<\"HexagonAreaMomentOfInertia\"\>", 
   ",", "\<\"MomentOfInertiaRatio\"\>", 
   ",", "\<\"PentagonAreaMomentOfInertia\"\>", 
   ",", "\<\"PointMassMomentOfInertia\"\>", 
   ",", "\<\"QuarterDiskAreaMomentOfInertia\"\>", 
   ",", "\<\"RectangleAreaMomentOfInertia\"\>", 
   ",", "\<\"SolidEllipsoidMomentOfInertia\"\>", 
   ",", "\<\"SphereMomentOfInertia\"\>", 
   ",", "\<\"ThinRodMomentOfInertia\"\>", 
   ",", "\<\"TrapezoidAreaMomentOfInertia\"\>", 
   ",", "\<\"TriangleAreaMomentOfInertia\"\>", 
   ",", "\<\"TriangularPlateMomentOfInertia\"\>", ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Diameter\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Radius\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Pendulum\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"PendulumSmallOscillations\"\>", 
     ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Torque\"\>", ",", "\<\"AngularAcceleration\"\>", 
     ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"SpeedDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"SpeedDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
     ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
     ",", "\<\"GravitationalAcceleration\"\>", ",", "\<\"SpeedDistance\"\>"}],
     "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8750128206128435`*^9},
 CellLabel->"Out[39]=",
 CellID->642193243,ExpressionUUID->"3b50f85f-79cd-495a-a773-5fcbcae0844b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<MomentOfInteria\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875012823961402*^9, 3.875012836734399*^9}},
 CellLabel->"In[40]:=",
 CellID->396852273,ExpressionUUID->"7117a9ae-201b-40f3-ad9d-d4492388d67b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"AnnulusAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "4"], " ", "\[Pi]", " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{
           SubscriptBox["\"R\"", "1"], "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "4"], "-", 
        SuperscriptBox[
         TemplateBox[{
           SubscriptBox["\"R\"", "2"], "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "4"]}], ")"}]}]}]}], ",", 
   RowBox[{"\<\"ConeMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["3", "10"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["3", "80"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           TemplateBox[{"\"h\"", "\"Height\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
              "TextStyling"]& )], "2"], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox[
            TemplateBox[{"\"r\"", "\"Radius\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
               "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"CuboidMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "12"], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"l\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"w\"", "\"Width\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " width"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}]}]}]}], ",", 
   RowBox[{"\<\"CylinderMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "12"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           TemplateBox[{"\"h\"", "\"Height\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
              "TextStyling"]& )], "2"], "+", 
          RowBox[{"3", " ", 
           SuperscriptBox[
            TemplateBox[{"\"r\"", "\"Radius\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
               "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"DiskMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"EllipticalLaminaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{"\<\"HalfDiskAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["8", 
          RowBox[{"9", " ", "\[Pi]"}]]}], "+", 
        FractionBox["\[Pi]", "8"]}], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"R\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"HexagonAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["5", "16"], " ", 
      SqrtBox["3"], " ", 
      SuperscriptBox[
       TemplateBox[{"\"a\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"MomentOfInertiaRatio\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"\[Gamma]\"", "\"MomentOfInertiaRatio\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia ratio"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
         "TextStyling"]& )], 
      RowBox[{
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"R\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"]}]]}]}], ",", 
   RowBox[{"\<\"PentagonAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "96"], " ", 
      SqrtBox[
       RowBox[{"265", "+", 
        RowBox[{"118", " ", 
         SqrtBox["5"]}]}]], " ", 
      SuperscriptBox[
       TemplateBox[{"\"a\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"PointMassMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{"\<\"QuarterDiskAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["4", 
          RowBox[{"9", " ", "\[Pi]"}]]}], "+", 
        FractionBox["\[Pi]", "16"]}], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"R\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"RectangleAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "12"], " ", 
      TemplateBox[{"\"B\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"H\"", "\"Height\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
          "TextStyling"]& )], "3"]}]}]}], ",", 
   RowBox[{"\<\"SolidEllipsoidMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "5"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{"\<\"SphereMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["2", "5"], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{"\<\"ThinRodMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", "0"}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "12"], " ", 
        SuperscriptBox[
         TemplateBox[{"\"l\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"TrapezoidAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        TemplateBox[{"\"H\"", "\"Height\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
           "TextStyling"]& )], "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          TemplateBox[{"\"B\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], "+", 
         RowBox[{"4", " ", 
          TemplateBox[{"\"B\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          TemplateBox[{
            SubscriptBox["\"b\"", "2"], "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}], "+", 
         SuperscriptBox[
          TemplateBox[{
            SubscriptBox["\"b\"", "2"], "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], ")"}]}], 
      RowBox[{"36", " ", 
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"B\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "+", 
         TemplateBox[{
           SubscriptBox["\"b\"", "2"], "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )]}], ")"}]}]]}]}], ",", 
   RowBox[{"\<\"TriangleAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "36"], " ", 
      TemplateBox[{"\"B\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"H\"", "\"Height\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
          "TextStyling"]& )], "3"]}]}]}], ",", 
   RowBox[{"\<\"TriangularPlateMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "36"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"c\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Diameter\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"\[Pi]", " ", 
       SuperscriptBox[
        TemplateBox[{"\"d\"", "\"Diameter\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
           "TextStyling"]& )], "4"]}], "64"]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Radius\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"\[Pi]", " ", 
       SuperscriptBox[
        TemplateBox[{"\"R\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "4"]}], "4"]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"Pendulum\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"T\"", "\"Period\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{"4", " ", 
        RowBox[{"EllipticK", "[", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox[
            TemplateBox[{
              SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
               "TextStyling"]& )], "2"], "]"}], "2"], "]"}], " ", 
        SqrtBox[
         FractionBox[
          TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " moment of inertia"}], 
             TooltipStyle -> "TextStyling"]& )], 
          RowBox[{
           TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " gravitational acceleration"}], 
              TooltipStyle -> "TextStyling"]& )], " ", 
           TemplateBox[{"\"l\"", "\"Length\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
              "TextStyling"]& )], " ", 
           TemplateBox[{"\"m\"", "\"Mass\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
              "TextStyling"]& )]}]]]}]}], ",", 
      RowBox[{
       TemplateBox[{"\"f\"", "\"Frequency\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " frequency"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox["1", 
        TemplateBox[{"\"T\"", "\"Period\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
           "TextStyling"]& )]]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"max\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        SqrtBox["2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"Cos", "[", 
             TemplateBox[{
               SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
                "TextStyling"]& )], "]"}]}], ")"}], " ", 
          TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " gravitational acceleration"}], 
             TooltipStyle -> "TextStyling"]& )], " ", 
          TemplateBox[{"\"l\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}]]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"PendulumSmallOscillations\"\>", 
      ",", "\<\"MomentOfInertia\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"T\"", "\"Period\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SqrtBox[
         FractionBox[
          TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " moment of inertia"}], 
             TooltipStyle -> "TextStyling"]& )], 
          RowBox[{
           TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " gravitational acceleration"}], 
              TooltipStyle -> "TextStyling"]& )], " ", 
           TemplateBox[{"\"l\"", "\"Length\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
              "TextStyling"]& )], " ", 
           TemplateBox[{"\"m\"", "\"Mass\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
              "TextStyling"]& )]}]]]}]}], ",", 
      RowBox[{
       TemplateBox[{"\"f\"", "\"Frequency\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " frequency"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox["1", 
        TemplateBox[{"\"T\"", "\"Period\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
           "TextStyling"]& )]]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"max\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        SqrtBox["2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"Cos", "[", 
             TemplateBox[{
               SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
                "TextStyling"]& )], "]"}]}], ")"}], " ", 
          TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " gravitational acceleration"}], 
             TooltipStyle -> "TextStyling"]& )], " ", 
          TemplateBox[{"\"l\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}]]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"Torque\"\>", ",", "\<\"AngularAcceleration\"\>", 
      ",", "\<\"MomentOfInertia\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"\[Tau]\"", "\"Torque\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " torque"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      TemplateBox[{"\"\[Alpha]\"", "\"AngularAcceleration\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular acceleration"}], 
         TooltipStyle -> "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"g\"", Italic, StripOnInput -> False], 
          "standard accelerations due to gravity on the surface of the earth",
           "\"StandardAccelerationOfGravity\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " multiplicative constant"}], 
          TooltipStyle -> "TextStyling"]& )]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}], ")"}], " ", 
       SqrtBox[
        RowBox[{"1", "+", 
         SuperscriptBox[
          TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " multiplicative constant"}], 
             TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"g\"", Italic, StripOnInput -> False], 
          "standard accelerations due to gravity on the surface of the earth",
           "\"StandardAccelerationOfGravity\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       RowBox[{"Sin", "[", 
        TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
           "TextStyling"]& )], "]"}]}], 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "+", 
       RowBox[{
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " gravitational acceleration"}], 
          TooltipStyle -> "TextStyling"]& )], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " multiplicative constant"}], 
          TooltipStyle -> "TextStyling"]& )]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}], ")"}], " ", 
       SqrtBox[
        RowBox[{"1", "+", 
         SuperscriptBox[
          TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " multiplicative constant"}], 
             TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          TemplateBox[{
            InterpretationBox["\[InvisibleSpace]", 1], 
            StyleBox["\"g\"", Italic, StripOnInput -> False], 
            "standard accelerations due to gravity on the surface of the \
earth", "\"StandardAccelerationOfGravity\""},
           "Quantity"], ")"}], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " multiplicative constant"}], 
            TooltipStyle -> "TextStyling"]& )]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " moment of inertia"}], 
              TooltipStyle -> "TextStyling"]& )], "+", 
           RowBox[{
            TemplateBox[{"\"m\"", "\"Mass\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
               "TextStyling"]& )], " ", 
            SuperscriptBox[
             TemplateBox[{"\"r\"", "\"Radius\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                "TextStyling"]& )], "2"]}]}], ")"}], " ", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox[
            TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " multiplicative constant"}], 
               TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " gravitational acceleration"}], 
          TooltipStyle -> "TextStyling"]& )], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       RowBox[{"Sin", "[", 
        TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
           "TextStyling"]& )], "]"}]}], 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "+", 
       RowBox[{
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          TemplateBox[{
            InterpretationBox["\[InvisibleSpace]", 1], 
            StyleBox["\"g\"", Italic, StripOnInput -> False], 
            "standard accelerations due to gravity on the surface of the \
earth", "\"StandardAccelerationOfGravity\""},
           "Quantity"], ")"}], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         RowBox[{"Sin", "[", 
          TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
             "TextStyling"]& )], "]"}]}], 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " gravitational acceleration"}], 
            TooltipStyle -> "TextStyling"]& )], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " multiplicative constant"}], 
            TooltipStyle -> "TextStyling"]& )]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " moment of inertia"}], 
              TooltipStyle -> "TextStyling"]& )], "+", 
           RowBox[{
            TemplateBox[{"\"m\"", "\"Mass\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
               "TextStyling"]& )], " ", 
            SuperscriptBox[
             TemplateBox[{"\"r\"", "\"Radius\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                "TextStyling"]& )], "2"]}]}], ")"}], " ", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox[
            TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " multiplicative constant"}], 
               TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " gravitational acceleration"}], 
            TooltipStyle -> "TextStyling"]& )], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         RowBox[{"Sin", "[", 
          TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
             "TextStyling"]& )], "]"}]}], 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.875012837914976*^9},
 CellLabel->"Out[40]=",
 CellID->104226357,ExpressionUUID->"9764dd32-21f0-4d26-9fec-05902a6fceaf"]
}, Open  ]],

Cell["I think we need cylinder moment of inertia.", "Text",
 CellChangeTimes->{{3.8750128489891553`*^9, 3.8750128658532434`*^9}},
 CellID->310218054,ExpressionUUID->"395c1b7d-c0ef-4760-a4eb-2b3d3237a1f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", "\"\<CylinderMomentOfInertia\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.875012869433816*^9, 3.8750128740842795`*^9}},
 CellLabel->"In[41]:=",
 CellID->171371391,ExpressionUUID->"8fd54204-0298-48e5-912f-c2d8c5f6dceb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    TemplateBox[{
      SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
      "\"MomentOfInertia\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
       "TextStyling"]& )], "\[Equal]", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     TemplateBox[{"\"m\"", "\"Mass\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
        "TextStyling"]& )], " ", 
     SuperscriptBox[
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )], "2"]}]}], ",", 
   RowBox[{
    TemplateBox[{
      SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
       "TextStyling"]& )], "\[Equal]", 
    RowBox[{
     FractionBox["1", "12"], " ", 
     TemplateBox[{"\"m\"", "\"Mass\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
        "TextStyling"]& )], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        TemplateBox[{"\"h\"", "\"Height\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.875012874332838*^9},
 CellLabel->"Out[41]=",
 CellID->290614988,ExpressionUUID->"7f58387c-430b-487e-80e8-82d63af37edf"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Ibeginning", "=", 
   RowBox[{
    FractionBox["1", "2"], "m", " ", 
    SuperscriptBox["rBeginning", "2"]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.875012886713632*^9, 3.8750129053591013`*^9}, {
   3.8750131571321077`*^9, 3.8750131608037844`*^9}, 3.8750132585418515`*^9},
 CellLabel->"In[60]:=",
 CellID->164363845,ExpressionUUID->"285a6c5a-4dcf-40c2-92bf-d9097f49f173"],

Cell["Retrieve the formula:", "Text",
 CellChangeTimes->{{3.8750129815118217`*^9, 3.8750129852558913`*^9}, 
   3.8750130778007064`*^9},
 CellID->187842459,ExpressionUUID->"1d297c87-8515-43b0-a528-4dc26931e834"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"First", "[", 
   RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellLabel->"In[61]:=",
 CellID->552648203,ExpressionUUID->"86a8956b-0c45-431e-8b55-89a15c39809c"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"KineticEnergy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " kinetic energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
      "TextStyling"]& )], " ", 
   SuperscriptBox[
    TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.8750129872858334`*^9, 3.875013169578019*^9, 
  3.8750132725419044`*^9},
 CellLabel->"Out[61]=",
 CellID->43877354,ExpressionUUID->"5cb09aae-c9d1-4c4e-91c9-0ed1fca4c2a3"]
}, Open  ]],

Cell["Solve:", "Text",
 CellChangeTimes->{{3.875013079689147*^9, 3.875013081057247*^9}},
 CellID->33847101,ExpressionUUID->"ead3703e-5c9c-411e-9a5a-e57ed1dadeeb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "Ibeginning", 
     SuperscriptBox[
      RowBox[{"(", "\[Omega]", ")"}], "2"]}], "==", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], "m", " ", 
       SuperscriptBox["rEnding", "2"]}], ")"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "rEnding"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750129222832003`*^9, 3.875012951023946*^9}, {
  3.8750129912009797`*^9, 3.8750130622983866`*^9}, {3.875013212933732*^9, 
  3.875013223580924*^9}},
 CellLabel->"In[62]:=",
 CellID->129797403,ExpressionUUID->"1455142b-64d0-4f72-a000-1b7351af67e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"rEnding", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["rBeginning", "2"]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"rEnding", "\[Rule]", 
     FractionBox["rBeginning", "2"]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8750129514456463`*^9, {3.87501305775589*^9, 3.8750130626289883`*^9}, 
   3.875013169897607*^9, 3.875013236689161*^9, 3.875013272875701*^9},
 CellLabel->"Out[62]=",
 CellID->88267972,ExpressionUUID->"aacaa396-7214-4972-b9fa-d42c99b9e0a7"]
}, Open  ]],

Cell["Add the assumption for positivity:", "Text",
 CellChangeTimes->{{3.8750130738976126`*^9, 3.875013088441864*^9}},
 CellID->10821545,ExpressionUUID->"8cf01b63-0099-4fee-9c21-000d3fbd4d60"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "Ibeginning", 
     SuperscriptBox[
      RowBox[{"(", "\[Omega]", ")"}], "2"]}], "==", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], "m", " ", 
       SuperscriptBox["rEnding", "2"]}], ")"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "rEnding", ",", 
   TemplateBox[{},
    "PositiveReals"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750129222832003`*^9, 3.875012951023946*^9}, {
  3.8750129912009797`*^9, 3.8750130931995525`*^9}, {3.875013227765577*^9, 
  3.875013228981024*^9}},
 CellLabel->"In[63]:=",
 CellID->17859662,ExpressionUUID->"0d0d3d6a-261b-42b8-a88d-ce6a21267942"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"rEnding", "\[Rule]", 
    TemplateBox[{
      FractionBox["rBeginning", "2"], 
      RowBox[{
        RowBox[{"\[Omega]", ">", "0"}], "&&", 
        RowBox[{"rBeginning", ">", "0"}], "&&", 
        RowBox[{"m", ">", "0"}]}]},
     "ConditionalExpression"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.875013093668361*^9, 3.875013173667019*^9, 
  3.8750132391731873`*^9, 3.8750132731785336`*^9},
 CellLabel->"Out[63]=",
 CellID->301858107,ExpressionUUID->"ee3e013c-ddcf-44c1-ba59-0f9a485b8300"]
}, Open  ]],

Cell["Add the necessary assumptions:", "Text",
 CellChangeTimes->{{3.875013110889149*^9, 3.8750131170511293`*^9}},
 CellID->119695050,ExpressionUUID->"e918a45f-01f3-4bdb-a348-afcf673801ab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "Ibeginning", 
     SuperscriptBox[
      RowBox[{"(", "\[Omega]", ")"}], "2"]}], "==", 
    RowBox[{
     FractionBox["1", "2"], 
     RowBox[{"(", 
      RowBox[{
       FractionBox["1", "2"], "m", " ", 
       SuperscriptBox["rEnding", "2"]}], ")"}], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "rEnding", ",", 
   TemplateBox[{},
    "PositiveReals"], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Omega]", ">", "0"}], ",", 
      RowBox[{"rBeginning", ">", "0"}], ",", 
      RowBox[{"m", ">", "0"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750129222832003`*^9, 3.875012951023946*^9}, {
   3.8750129912009797`*^9, 3.875013137698937*^9}, {3.875013176708578*^9, 
   3.8750131786261063`*^9}, {3.8750132302700653`*^9, 3.875013232493091*^9}, 
   3.8750132769112816`*^9},
 CellLabel->"In[64]:=",
 CellID->15975725,ExpressionUUID->"d2b43532-5e1e-4517-bad4-590ffe54542b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"rEnding", "\[Rule]", 
    FractionBox["rBeginning", "2"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.875013130022228*^9, 3.875013138045139*^9}, 
   3.875013178933055*^9, {3.8750132351729093`*^9, 3.8750132411700554`*^9}, 
   3.875013277585292*^9},
 CellLabel->"Out[64]=",
 CellID->437894335,ExpressionUUID->"ab171757-3792-482f-931b-fb2487dc0a94"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7wvUEWVu+nRGmrDAgsYy7W+GC5NeaDzXZtMa0rbHlbOn2DmFDnrKpJOhDSIb
mWikHiDOXiWZA7fCdfoIIact2JhEsgwXzQ2xyp/pyxFOutfDo0aOra7GXrfG
qcI4bb5GCgb+9egJJMRKvaJ97vX0ZO9w3FPXudkHHKq62PpViFJ89ocHmxXk
DgQg097ImcRAY+LO2+/FtYfG066qEC1nLOHh1Qo53q6hqHsxvIc3Of4t/01a
DVaCz+e1+xuTNp9BPon8yKlw0F2rvs/jMxfOH/NtNq5RN6S0Chr6s/elMVHr
SaY4+F6YzNmpN9eral5K6OTx2d/yXqc1DEJ8Tq27oYqZV6s4soR9WpAJ6bBd
AQuz+ZOjeY+2rJU3pTQKl5W+hRirat7Om04NxhMtSdqnZ2wEYhbY6xP3+dZw
xG2nHVE85VGPVVdpEkCyD439or8KZVLusldjp+MngUdj1VAPrjsSMt2syZ/d
oSYqsFsQhSesYgc9eVH2IaqPEVGYfWA1AQtp0kAF1v+9qpvui4dcTgvjmW8z
Mn6PFT7aQTzhVj1lv7xmbyNNA/JnQenIEVRF7ZuIpbC/5L9+VzOIU9uJajeJ
AJLXHGisQTqbIDIyTrGjvqKcgR+itFJMQJbsQ5oQoG/JN7aTjjA+wQ0eKfK8
51c8LGEWkt6A9fqKzrWI6am2/vin3mV4it2XeFVLyTROdCnLSKwFadfNt8Ju
hiMlr0dB4m0AMwWCrtuTwgV3guJZz/qfokKa3A2JRo4VOB5Vmroi21H0CKoX
/ZewTHwnAPVEn1cnmr0R6gTU/+I0ccuFOLEv4nNK7LYRRcM3AqJmqtjZB37/
yu70BG2vcd5N2GfzcSr24DX424UK9BvXS8zIPvANHMe1TsqmBnAHkQ8Q997J
mjJQbq2ffTjutY/spmD3l23oRgINvrm25cqLH+JfcCbYMsYgyNoHwVBom0KQ
CwEUdlJLxhdWT2GIqKRwJLAeVXM4leQDG454f5VYY+p4aaqla18uMKqZ2QfU
EX95o+qfbySmxoeSrTTkJXdezRjrJ6XZArcv5pyygnXU38JHd4edUVG5mCJt
7hrXZpdmvJbqJzGcM5qdyikddcgTDUVQf4gpUf/mW8Gf5+H98KIdDM+GWkN8
00asddd0simtd/BVa3IkBdaNMzLsvJKmhNLcF5YE5g+v71PMs8vH9DUU5P9A
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
2b0SBXJ6cylXzaztvaLgZtlfOX/xeabkXQOTzDzyKaPz7onZH1IjvSgBKTRT
IlFF38yamicYwVGbgNqFUqWBA+dbiImW2aveGX3G5/Xl0K+cNnvIiE2FlcvZ
jvoBUa4fGZTbFoc2qatoG565ZvM4RvJimzm1ZRUw7lqd0F2vorHP+Do9vVNY
1YGyQGujI9bOoUmwtpEdvJIE2w+hwVzqOQwT6BWWo6GisdfY+kko1jkdTCE4
Bb9LIl812a2jrqR6+NGHMUFqEHB2i6qSitaOE9fu+BR9n+ENMrv+jjDXt7Dz
oAXEZmRnJb1wuXPH59PsN7mgwKpwMtwnHvW49TSjgzaSa4HoApmj26N5/neu
Ht2uoaK256SVbWDJcHUkYl3qpPVbjCxveeZhRHe46rr0ZcriBPicr2EXN2ho
b9XdunXbRh0NBYKymv5lietaBouoJobnPV9lf0iL9HYLTPI6o7SGBPeyT9a3
/NmdjqPkRZ/n6/RE8NqCjHXNwme1HtVLTA0ZqrCSnLV+ECNYwJNi4OiuVUY1
mC7le8JlozvvZNioPV5K+5/6mjWEPxR3nqWW9jUzjNWJf6yRJ2489yyjWyQS
9tu7OpJrH7m2WzddiMMvd/TdvT8dswsiyWSfiLTMtFAXqwuXyfmzXaes9ZRt
yOZ2faRamV1xpEckRHo9vnzW6nmq4LrfyZHigHuWJ/VUSTr6xjfvhwpWbKG+
Ij9rU3NHv/j05AhfdzeGu4X2WvmtBy49DqueM9YzZbAFTkuU+WZVnR1bt27f
vGmjqqKCvPo+M5e8XiwnIIt9LcV4je0nI4pbUZ0zjrR1j1g8oGX2tCY9v3Fu
vzZJQ8fQ/KZzRvs8vB9GtCP642yVxhw+8Mav78WB4u6+454muGoYs3dkUi2o
L932gME5eKDydmMU4q4BYCqhECz35ZslursYzai5NQFm2zQPeJXItAV89OOj
I+dpkR63bj70jM0orCjPS2LcMzG6kfhZ+PUFK97vCq+z+HVyyeyjMv8WeOP9
LTU1bX1zT61AY30ttTVtg/jZE8QcHEQ23A22V1dUNnQzZe1nPquvpeZTfduA
6Jpr1tDfozNEyGV2NtS2/T1bZ2WrlVSgcfjxdS19s4oZ62ut/VT7dUD08pGx
oYGx5etXiPWjpaGlZxT1CWjNhz9fUwX/ckL09aGBmd/ljXyrr/0yMFtkPFbf
55qaL/0ymb8MEuAMdzY2tPSNYwxN8ONa6pu/ozdrcmLwa13lp6Yu2Gdz4Ud9
bu8aHJHYpYLRBDSkSQMTdl9PP/q9N0iP1NS19su6a1TW2kIsuKk1Lf0zjUyq
CcjAgoUwo3rMgUFYID+H2msqPjV1jshqw9BIb+/0Kw74rB99MuQsk5imvRCW
w2AXViaf9y3C4tCd6FaJO49ZnSUh5lt1HqZNTzjy2YNf6j5V1XeNQpOcvra6
pvae/hHsq2CXpH8lKjnR9x1Du2X3EvgGjuVa54Ll4b8nugXhb6CcUUZjY/ug
aA6fM9ReWzuzCbx62qGNZ8Wrz+yU6+sPPS6WrfBJNrOrqa6ln4XaPfOqp4wg
o1tjc49sOgyN/fhcW/+NyZnkMTsaGlq7fgyPLyTM4rXGXD5xJerrtHeCRrtL
Ai227bqWuui3Jy/BeL0UfhKH+Xg/adHOfDybjKa9JL3Dg+tV3zog27iGp4RS
3dciffvPHw3NgskR9mBzfkpseGjMu6LmwYWUtkSBIgAAAAAAq5if3SGm2jfn
nAPj5D/WN3ar+X0n35aG0factGzknZx8XnuIU9CXpYsuJ+o9jXaK3pnF57V6
HtZzLVz4BTHLV89fBR/qYRjr2L2drbisYoe9+92x934CVgLQOwAAAAAAALDg
c5v9Tu25Fd0iOcE40Zn61/4jfpWLvg/xN4eddX+Tsur1j+NQ71t3n/dL+2ri
kVJfS+un0YWVxW/I1tdcP0p7NwcOy1rPXwW3jmF82CLqi0SEy+d0Jd4yOONR
CWaOfzWgdwAAAAAAAGDCH2tJ8bR9YO9CpdK86Z4UZ9t799xT6mTbjvbf5p+a
lw/uOnnT3GkR5SPLIK+x3sbywpKGrsWWvdz1/EWMNaV52t197EametHpNLKL
3W0b2uv636iB/2pA7wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMCCYbfnx4cH+XlR
wssHV/89bpwvBfHhwX7elNCyfqS2Ex0F8WHB/nRqVGE/bu0haBGNG/+ajzyF
Ro0p+hfIaFnhczry48JD/Oj00IJ/1ZX3K6DnI41ZsWGBvnRybP3SvOSB3ZYn
rHNE5aq8unVl7OJ3t77ZPu3XIrNHlY1F+d15wGd/zYuDpUjzCitaxEs9ACuJ
VOVY1cHJv0jlsEbt5bXOlbJ9rMcPVMdRnche7i6B2V3//leD/pZwOkqTg+/u
JxGOvGhf/V3E/VaeEvrwkBrhUHALUltOZ3ly2KND6+RP0z5j1Z4PfY+5oqOx
0SqlZ4HWMNFZmvTSxlBR3sy7bfXLaFnhc7vKUsIfHFTROEj7F+jLNCug56Mt
hW98rfSV5c3eMJekQLawziqE4xGdq3F4Wxm7+N2tb7ZP+7XI4lFl5GfPqys6
ynss43uXX3n5nM6S5Jd39yutP+Lz7ddL8VfCakun2D58/Oju9YsmJudtQgt7
V+FrsWUblFd1cPIvUjm0URvqSLDcpLzZJqF7OaxzJW0flb/zn+7Xvf6udzjW
QkVl88My9q+pBkCSiWpPj+j+Wb9klT7VJ65GA0eFVeW6lzg9UvM51U67FHCz
j954681aW2+mL8IS+Jyyx9t/1/hnvnDKXfZormz2gaq382UF9Hz07V/axKXK
PhBYJQ56xFWRffC5NbRnMUOzfrk4u0AtE+Vjv7v1zfJpvxapHlVGfva+sdpM
Mrjxum9aebkV1OdJA4usIBacQgfd1R8K4rB4L/ezJ8X+Gr1qWCBxaDDX+bAa
Ufdxet+vdx8zQR2Uf0lwIrPMUVX3X6Rys0ZtqDPx2lbV7baJ3xetGyiSQbP9
FQQajPyTdPhJCWcS+lEeH57SMPYragGYRW+85Z3wOQZe5rjz35N9TNS4z8g+
uLUuu4mLHyvx4XPKn+gSf+P4Zz5wK932rnD2gaq382UF9Hz03W2dpc0+kMF3
VWQf0GDCtcvhc7KPRdkFaplz+e2tb5ZP+7Usp0cdjL1y5fWyZR9FT/X/JaEg
Oov2cpxy1xPmHnk9UzO90GjWLZ21ajud6zhLUb9l5pcEJzLLHFV1/0Uqt3yj
9rIa9ULgcxvdDRUvMlbBqAmYgs/rDDLVsAoD2ce8+e3jn/mw0tkHlt7OF5B9
LAJe28vT284sbfaBXuZcfnvr+49kH5xvoafVz74C2QcaS+HlxuIslAhr1B6l
T4h+Af0INJYnEkzjV93qx2x+SXAiu8wxVPdfpHLLNWovs1EvBCT72K9oHti1
2pV+VQAN1qUGUNzJHhQq2TuhuOfn1B/Gu4tjGT7+fr40d2p8ab9YcViNKX4U
Nyd7u7Cif+DPxAcy/Klu9LD8HsztbVBv1Rua1R7SH/IHr3mHBAWHhLyuGhB1
jsjA29jdJQkvAvw93Sgx+V2SkyX88Y4Pod7efgwfd2fPiJIB7gLrMFiZ4Et2
fW5vF1HC7CyJ9XZ3dnHzic1sFJ+pZTWm+lPdnR7b+WZ08hDn0PE+iObh5ODg
FN82tXt1ntkHry07mObu9NTOO+8HtKBqC54iin9ax3tLEoIDGWhfGevICfPy
YjB8yE4ecSV9SH2h4fIEH4qLo8PzuJaJvqIYP093eloj5jIgRncjcvMhuzy3
c0pqZPeUxPhTPPwTG1mT7PoUX6rbcwfbwPJRdmdRfDDD19ONGl/cAz+aO1Sd
9DKQQXP3DHz/ReKBIy3vQhnB4WFhYaERr+J8veNasHcFY6klih/jDtUkBXp7
+/j60ulBCeUD04WONb8LDQgOiwgNDQuHH0hNmnogqlLNrQOO3iIny2qSg7y8
/Hx9vOmMN+V9+DucF6TnWMJHR5h9JPZ1FyW8CGF4+TCic5tnnxjHlpUQ3mDD
+5gXgQE+XkFx5d+KprMPTkdeXFRMfFxcXHREzLumccRAugvio2JjY2Mi48vQ
j9Zhyn8SGqpKDvKh+/p7030YCVXYwuP2Vb2mW+9VXkPaZe0Ld0FQSHKFqA+k
2gWf3V0Qw/D19fPz9PCKLB3kSS9zLr/U+mT1GBM9xXEMHx8ahRFX0d1dDv+3
860bIRVD9anwc50cbKkfBB3E+ZoVTPNwdrAnJzSJJT4n+4DNOTbA2xc2aAol
srJP7AlkbRGf9y03BlaM+ISY6KiId62IvvK+FcZHx8DKE/mmqGsS2wBRPKoU
VUFxFLDrzgzy9Hju4OiViRxfh/orE+lWu9fJE3be9oK7OzjsdcXfP0WVjMeu
JCrc4foUBpXsTqaSKX7Rxb0iGxaFgl8nfhQnBAf5U8nk8OJOyU7CkCqKI/Wb
6xyQMzHFcQHe3l5knzcV3Z1lcQxvlzvXfaoFvgBLmLL5W1wvJ7OdIuUU+D22
Cyyf+i6sBt7/IygoXUoVzodAI58bOlC+Dw1XRLn7ZywqiObzvnyIjhT0ZlR0
dE57Z3FCOPxjXFxUZEpZHwT9KE2MiomJi42M/PiZNXNQXlRwgiUf/kRTih/V
4/kTB2rGd6RhvLasYLq7s6Odc3IzV9rIIlk+iupOHTOXqnIyDnNCcKzel+L6
zME2qILZUxTj7eHkTPaO/Ng4DMn4AYQZozbna3Yw7JWe2AdkSWx9g4ZrUgM8
3T0oZIqnV3R5D0daxdAlM9v2pz6NOljD3ZTsS3V/9tgxsGiU3V0YFxTghyJG
tH5B73fW53cvAlzObZQ3uEINDgqOePf537Du96vgtsRd27XdPEEwiEBjlR5H
DRzeDyN/GMi4d/LWW8GYxR3MtTXYfCVAtILK6WsqSHpmpEy84Bbp45/ZzYYH
6Fbv46TD9oUY1+1Ag22fyot8TivJm7pkV5SXV1Q09E6FUAIDP2jnRQnK+gaX
P97if4Kk51Yo+jOXWeJqtPWST42gfgPv7u85dCfjb2gBdZgc66nPT7Q7QCTs
Mb5HjSn/PgZN9Jd5ndm061ygcGceXGZh6rMjioSTbnWC+GGopfQd9ayWio5N
0ZQyzjP7gP5uLU1xO6UhPqg+/2pPTsU/xx94e/pmdqF8BRos8ji6xTikdlTQ
cR/u79Z3yIAtb7yrLi/m3l6SlhXFm5LUVOyot1b7bCTqI3C6G5ZbTtz9vfLa
f3n4eL1qzH22U4l4NnGQ+6OpMNHRSE3ehBLpHZLVKe67Z4kpDFpS2xhyuC/a
XGv3tWSht/zZnXD9HKVJVGl2PeO0sUPJT9TaYKvl3OyD1RRucehiWM2I8KeG
KOtjp30EkoA64qwtKXXCmTj+xGdf0wPkUqRNWEo1t/uw9ZZdF2px/EJAg+Cx
fFZLuOWhyz6VODs8F6bnGMJHfwScfWjL7Tj30CvnG6Kvox2p9w31r4fUiVUL
W1bC5g7kehgfOedd0Y+Mj8z6KNtze9fLi7IP3lBbyVvfPzesVdtvm17Ti3Qc
NFQTc0Nf7eCTsJx2lHuxMOXPn2h+YXHoekC18Mn/fI62OnQmpHJ0TgmTwudW
VRTTTq/TOOycA3dBeUVTt0hoUuwCGki+e9IuCZlJgHsyy27/ztMBTRNSypzL
r7U+WTzGSAX91DbTUCQrHa/1M9bZcjeHyakJswvIG/jRVJzkaKQiZ+ArcGmC
TqSf1STsvfdRPCzO9GlQb7rNuVtJgpAJ+pHz2HDTmfA6ofuTuUWw5yx563lO
R4FwwDm1po8j6Iz6uBt6GicehOW3MHEMcJZHlaYqGI4CGm4pTXc5qSo66AoN
tX2qyPc6o0o44pkNd3d5ZX03S+De6X9uVJDb/zxZXMnYa7rqJx6Ew5VE7Sl2
e4KV7o6bEQ0CdRkrphw/eued4KNIKKh+8IEP2TcXsT5Og98Jbd3H5SK1wpEq
piMVOwfkABbt5F4TvxYWHE82+RirGcAP5TSGPqKVDGO6Dpn9LaaXm5edzoXz
LcRYYe0O8zhhWD34kUJORDllzGcXPNi8dv0xRvdi0g9osLkw0e6QspLW+YDs
5sHh9pJkl6OqBMObEWVfR+DEpzmTaqKlamIbVdHNmTkoLzw4wZEPn9vfWJTq
cERRbZ97s3AeqbU0nXZOm7Dx2ccJ/IfObBeK6k4ZPr7KyT7MTUqz+oIEW0Nl
gp7ZXdfX5V0siPOj1O/spi2WgcLcV+oHJmeN2rzhtpJ095Oq05dL8Llfoq10
DczDWwQjKLPC8+S+uznDuBXDksws20fAHKyRbipMdjBap2niGkn3z+1EEeNc
cPr9Z39LRenrO3rEgzavy8rLq1oG/gULU78ITluwMYlkGd4pFBGr/Jm+HOGk
ez3836N5j7aslTelNAqSOgh2JKqat/Om1lSRk5g7CJtO+E2ldtxasqG63rMa
7EwPGk+7qkK0RFvc1CconvWsFzpGPrfJ3ZBo5Fgh+HEsx1ZXY69b41SxnDZf
IwUD/3ruAusw8f6mBsHYo148B8DtS7ikSjRyKBoXtavEbhtRlH0g8Jq9jVQX
nn0IvlLtNvOg+ryrLYh/CFqHPZvRvgKNFT7aQTzhVj01siB11jQgfxa0ATmJ
rKh9E+li9pf81+9q0CNX/O6G5XZDQ1H3YngPb3L8W/6btBphQsEqfapHUL3o
L9l3hPW7HEpFAxTUHXqapPFXjqAcZtJV/XMR4ukIaPiVk2spavaBo5az/Bif
U+tuqGLm1SqWPx/qCTIhHbYrYE2yXl/RuRYxPbvSH//Uu4yDr1RzQdVbVg31
4LojIdOPhcf6UBMVeGDCzD8WrOdYwp8LsvZBMAyYntUWHChW2EktGZcmK+Q5
HfGXN6r++UZiOmoo2UpDXnLnFbeWelB1w92CqVZONPo/Z2AtYGHJn1NJPrDh
iPdXidntjpemWrr25dgrA4mWJO3TqDuvMO2Cz8632bhG3ZDSKqjfz96XxkSt
J5kT+GXO5ZdbnxSPAfWHn1+nYxYlTM5/9kWcJpJuxk1P+7GKHfTkRdkHUhqv
nWZExM4+2B8ebFaQOyDUIj7UG2hM3Hn7vfjDMrZoUuj3CJuffRybem6rv52v
YBEZ16vP8KhSVAXfUVS4zrieYiQFVuYzszZpTDR6HiJufJotcliwVfrZB3zB
UGhYdP7GpM1nEEsU9EuFg+5a9X0egr5GQkElhSOB9ZypkqkHiPqeFRxZpIrm
SMXOAR6kYs4pK1hH/S2UQHfYGRWViymiqXJMYcrubyfRvdwC7FSSkQ+2eqQN
l1MEaxp8bnPQs1CM5Q2oN/X6LpMXEnP/HDZ7IftW+hKvaimZxolSnJFYC9Ku
m2+FlYX1yutRkLgCswblBQUnUuXDyX+8Q0OUfQh+hrtGfoMg+8B76FxQVVea
ys1rmJNm9cjIsl/iu1B3nLmmvD65mCXbB2bPGfK5Nc67xGbOaw401iCdTRDZ
MafYUV9RzsAPKU1KxTAkM8P2pQ3WnEIHPWXSydAGVDHORUq/C3ZeKZiQG1fh
bW+rCW6Vx34lwqmY6QBh5Et1Q5/AOPic3rK0jDqhR+Cxe2IuqcmfTZwaqgUj
svxhB7E34332MVLd8KAEe8EK18D1yGWivubzvtCNiPvu58I/Q6x3N9bL7b6T
JdYDPjvXRgcupG+BdUCyD+LMLXljKdc1lNWvCccf4TynZPaBlLnI7GPWV+Zf
bfyvMDNuactpP80Wh1WTozkPtxDPvBIMPHMjUoxH4HW3MGszocw2KLS+k99x
LUNclcHYCyoK5hnjQjlQDBUUdxnb0EKTS5r62RCLyURtM55azvJjox8fbJHb
9DxvQuLrnDLn3etULd8xuZUe+5UVt5ndo0QkF7b0sXks5ghbilLNBU1v2Zk2
m0gbZ3QZn1P1fKfc9qtJqIVgyEomPccS/lyQvpY/GSUxv8hnFz7YJKd3LQ1f
Vu+ZsCZ/phyQ0zz1QvJFC6NZdzfMyD4mf3aFmiqr3RLt5GaX0F0yMLcsocuf
P5F7b4OcgaDh08L55LpHTs0mGevICk72gWNKnJ6KtEzRhgbeeF/sRSWideTf
+GXO5ZdbH34F4KieelBuy+UkYQ2g8WRzRcJZ+vRYi8zfzsg+EMXDzj4mJ3or
MtKrhBkud6I/4qKy9tnIYXHrZGuR4EHtPkcVda8mCb/LqvJ2j0IcrxSvLuFR
panKPBzFJEagwoe6g0zXbTOPE84Jj5V7eSZivmpkoo6ynyBvETJ9UQ/za3VT
r1DbkFBQTdehShzstfsZyW8Umxu+VHGcA1JUi9dBuXX33ogiPWbiZZKcKJrC
EabM/hZhrpdbkJ1Ol9eb9XDflnORdaJAnFXh45Uibu7kaEP8i7TpXORnT+gj
xyLB6tOPTIqNnat/sJ+H3T2Xt+3z27cCMdMsNRQvBXQgyjNe6GK6c6OmVaag
sqwqH0rsD3HHzdL5BQQnMsgHUYkZ2QeiEkucfWCp3HyHOelWP3NkgcbeXlNf
oysYWWT4wNzsQ8LMuQ1uBgTNUyHi40H8ka+19aItjfgVw8o+JB4ndbCWYrmz
kNrvIPuQjfFXl5UVVSwzMTb9jHfmh7o+vP/IkUwLCHpopCI/veVDapQ+FxwD
xxocOR2Mo3Jrt5k8DUL2Zgv/Mbzcya8EO1wWUgeU7INbQ96vJHcwSJBArFT2
Mb9q436F1+p/THGt9p+OgVMiCg5m0Cke0bUCxy84C3DmNeYM5TQ43S2Um2X4
bCOXGtgg2QdRlH3AfqDpjcNpPVWFP9YQ/pDfbPQgrQW1zfhqKelYeO2M44pr
9akzpil4DfTDSnL74FrxJ9pePzmtrypPgJ9I0DJ5+PoLW4pSzQVlXOZ1+R4j
kPQcqyUeiwSBhwhqe91RC8GXFX6VsIQ/F5TsA/GEBPUDnlJlBY2nXlH+Y+uV
JEmfOzf7mJwcemW5Xud4QCdvEhrJonp8xF6gnkSXf2fgMTk5I8dyyWlYTov3
ITnCCbc6jJJwsg88U+JPdOaGutrefeTkRgsMfnREgWgVMYBfJkorfrX1SWsm
t4p2RGePS4PgzxP11APrDgZIzHDON/uA7fRrfpjbw3v2jm7ejOAHRxS1z0SI
pSR7i2DN7Yr+c/26M/GIQo7neDhnCoIGKV5dwqNKUxXZHQUCRqAy2ffGWkfx
RAQylTnyzoOMvXo5yXxzhbRG9X4KqspLCTXxpYrfR3B4Rj1MOu5SJfgzt5ps
qHOAKlxcwxWmjP4WYa6XW5CdivinLuii0fU304+DVdQ1ddrS2Fn3d1wOnh6F
x4o8vd8ykTnkGPP/3Xkv7AFWlevR4z5t84vhRlP/0tI08oHTD+YHilfG+wdb
NO4k/g1XvITmnCHx0kDZsw9Mpy1dPiuRfWCVP99hTrrVY44ssnwAL/uAxlMs
lNZsvZqMHu7jVkxq9iHDYC3Vcmcgtd9B9iEb7PTbmorES2loGzmHK+gnNDZc
C6kXKutIsqX60mUf/Ina3ALRRASOgXMHos2Iaw0e5qPOgCxR9sEpfrZTkXBS
MC2HUmbzas8+oN5IM+W1W5wL0L8v4z1I+N0tlJt11PCsb80r+/j542sXUjqX
2Vn7IY56dZeKthHq4IKnljP9GLIJQVluu9sM2cHppKGS3OHgVk7v129IoMAd
+VabE0ux3LNO+Zx3M75SzQVFb6H+F6eJpK32FZLTKcg9ewSNQ15Y5SxYz7GE
PxeUIYBT9WznWs0TQfiyCmnlCZ7yx0bzV5KhHFr2MTmS92i7/B7vanZ3gmtI
FY4UeajyR7YGycsdtCuS/OZEA/UAgXCG3opRlGSmwK75WCBcJcA3JWj0E/W4
hv754GaBIgnSK6zsY7rMufxy65PqMTgtofcvXr3xkBoSSL1vYen1rlNyZJyj
eO242cdoCe2Ejs6fUfVC8xt/fXXdnOxD1nvVIGbGNS2Fs/TPnOF0d/dcoWpJ
8eoSHlWaqsjuKBAkAxVWTU7p1EwrNJ5/fwvxmEvVeN8rsvcnrL1JSNvf39Fe
o3gr/h+0P+LHMFKkKs2R8hpf3re4YmVPDQ6k2Fy96vahc2oTHrYwZfa3QiHM
9nKcvsj52ykC+9ubB5ef5faK5D7c8KltfCTe1qFYPCfA++Z7yjSyU3x8eCDp
8bOPI8g5wUBj0tVQUcdA4xlWGvv9MDbEYsHMttlMPBjYzHzrQSkdZxc46G+7
EDswXkJzSZHUWZzsQ8bgRAY/Nkcl2jCzD8mHzgVDdfFUbp7DnAxWP3tkqXTU
E44ssnwAN/uYyPxr/R8bLsaj5UVSKoYhGYnHSR+s55d9SO13kH3IBtT7ymK9
3PTCouB3A2X5NYIN4YrrjaYvcxt6ZU5CBkTOp7CXFeyFZR8ZliSi0LdAzFc0
32bRZl1sA4f/2/eEovapF5I39nEHSvIqEP+/4OzjUuB0OAWnxn4niOsPeAo3
hwuW5ORPTJcJ5yb6izh1jvaVJc4+YGMJPKGgYPFC8sU9UF/xxxqBvcoSLUjt
7iXJPgZirj9InJ7/+tkdaqpu8RZl3hJTLQX/NfP2jBZfI+K6W/GSE9is1Jua
ajudajkjUdetM6arjGzO3GGRiK9UKLVB0Vteg7eRivKlVAl5QKz3N9YT/ve8
ErUQfFnhV2ne2YdEbg0x31iQiKaejdJkhXjpGAtVjQOekhfLjmbe0ZmTffC5
da57iXvuhjNcX+LeU8PEkH8rzYi4+WKcpEoy397SlttJq8QaKseTrEnapmGC
7THMeLJvm2jjPV5eAD+ORDB6KX7B1WjiRcHaB6s6PLpoAqvMufxy65O69lHv
Yx/exuOzR/5momyXR3YFEPdNKx6n8qmuHFb2geyIVpA/5yMWxmjsJWSycZBT
ExmKDLjzvNWZnWu3Q03fMSPSKWgqUZXi1SW3ZEhRlXk4CpiRtGvr5U8nCPZV
DcRTQqd9NveTu4HqpruRDNdY3CtBuQOvzVUJElvgkOf1leYLjqDjxTBSpSpt
7aPF157RwZucYA6OTMw0RmxhyuxvBc2Y4+W4C7FT+NG5FBtq6XQmz/7o7pbL
+hF0wfzN1C//LnU7avB0Sh24bQk3r7giK7LI1qCNJPHSErJrdDPpTqJkTApx
uVJO8fInCu5vJh51oJM9ixHBfnLZSzobmkj1ejtDZedkHwsITqTKB9nXqrF3
WiVYFc/15SSzD/SHzgVDdfFUbl7DnExWP3Nk4XQGnSCKRpZJ6R/Ayz5gm421
UFOV2PskqGpZUc2Y1IphSGbGBglpg/X8sg+p/Q6yDxnhsxu9j6vtupooVtGR
SvoT/0Y+r83zMEHzZJBoRy3Un/bEUJtoEtc3/pFKKWaLTmcfE60FTyKTM/TD
qjr38EJobrXTLqIwsJ+o8/eZcoyCQ5F7vKvFBt5GPQTHNh+Emjhc4nqAZECb
Puc2mu9+L+Kz8NT5vOsgCOTW7rSI6xZ9B/qR/XCn8i7XHNHtcHyoN8RUWZzY
QmMlHv/TXKd5S7wHEPZme4gHxNueBXPLRFPcPfnCrwQ2i78yf9FJ+cpogbOh
joFz9ZSQoNESj7uBwmmu0fQbWti3JInKl9bd0MTba6ryEvPGU01D6zvJvaZ9
0edUiJfSBeNJf/T5bacCxWe1fvZFmh9xR90/jqWWgv/klDnt0pg6SgzbfY7D
vm2nGOINwpzO6D+1ttsjL9hlhp9fbx4o3gAP9URcPOOGRCY4SoVSGTS9hZiF
j/dqmjM+i7fit0dd2LLtVjb2zfYL1nMs4c8FufNKYcuD6RfIchoYpzbvsi8S
aTeOrBDGar2Pqe0ml0xNJUNDmY/0leSOvJgdl/NaA0+RFDfci8O/xx9T/oMF
Tw3WnwprEYejXWF/ahveSsc8QTLJLXfZIxzH+dwGBkUU/OLaBa/R64gS4WS0
aDoO6n3rcEBD4fLLH//kUf2QexDQy5zLL7c+aRWAvr4wM7LyT32f9SE7p6Cw
tLZ9WFKVf/aGmyptE695MYs8j2oSdt6SOPIs4dM4LT6H5eTNg0RhBLf/vb2h
hpbxy77xfDoFCbpkaZEkE/VUQ3m1XRcYEoc08b36DI+KrypSHcV6Q+r0ZenI
K92FWRi32o/yTiIa4XQEn1RU3Hk1bhBXoeFYutr3hLaOZcbUSRM+q4p+nyHw
RcgRY/Xdov1vAkl6H5bf4PhhQhap4jsH5HCKmcFtRnJmVvbHj/lFpdUdEj2M
JUzZ/e0khpebr53yx6pppw9csnVxcxH9c3p8w/SCz1feeNpfGwyu+GR8yIyn
3z68fe++TZssPNPy30VT7x7fZfCkVGB7sKOzVlV7OPW6EETttypK+D1OmYch
SUHfNWcEv4/gjlBU2OtVIQwFG1z3KW3d71gwc2J99qC8oOBEmnygztDT66dn
3cfyKP/TltN+PHXxBdZD54KhungqNzmfYU661SO3KW64Hf9tKm4aeHdfX2un
eGSR+oFZo/aUmVNF+jhW73dCbYPN9MjFKqM9DGviSq0YlmQkbV/aYC1FjHOR
4pTgxGoP8ZTHPBft/pNwh8r9rIyOW7iEJ6a+CqE8Jyd1CGYOfxR4ntPTu+gU
/T4rJZxOfVVW6mu8+eClh84hJd2FjLtXjumqkrR0T924G1g5UhP20NpEX0Nd
desJi9t+WVgxCdTz3v6wnhktNs77mX8Z4nBG8/zvXD26XUNFbc9JK9vAkuHq
yIfWxjvVSeu3GFne8sxDSuJ9z/e6esrM3icuLSXG95m9b0Yn3K3Dhf4LqINw
GvnUAy/3574xqelx9Nsmhy/6ZPdI6slgEdXE8Lznq+wPaZHeboFJXmeU1pD2
Glv7ZH3LZ9y1OqGroaIB//gk9NNIccA9y5N6qiQdfeOb90PrUSaEWAWCr6xX
0dhnfJ2e3rmAasvyFT6vL4d+5bTZQ0ZsKiwkZzvqB1hI0I8Mym2LQ5vUVbQN
z1yzeRyD/XYNnO4u+vyeesv88BYSadOeszdvP0kUxQW4fXebltvb/vr5zXMG
2uqkDUfO/0V+094fY25w3p5MCYxPz85KeuFy805wKco9rThqCbFK/O9andyh
qq6+86z1g5gq4fjSm0W1vHD5sW9EfCT98dUzl8hpXwVdwYww17ew86AFxGYI
Hnjnjs8n0QPRlQpLOHP0FoHTm0u5amZt7xUFP9b+yvmLzzO/YiWQC9ZzqBtd
+BiPeXfvT8fsgkgy2SciLTMt1MXqwmVyvoR2Y8tK1NK+Ij9rU3NHv/j05Ahf
dzeGu4X2WvmtBy49Dque0Tv9ry7vvpMr5epNHPlzuz5SrcyuONIjEiK9Hl8+
a/U89RvuDevcvkxbQ73L5LhYr+cvCpE+kGoXnMFC8jn9faed4t5lJYd5eceU
Ffmb7NhjbusQ8mkEvcy5/Grrk8nZjn+NvriBtGnrth1btmzRVlOWI2rD6pot
PozNzCOfMjrvnpj9ITXSixKQQjMlElX0zaypuX2jBTN92iQ0mEs9t0vvjHv0
O7gu3tSYslKGyeY9Vx84RBS3ytyiafi8ToaxlnX495mWjm6AaB5ViqrgOgo1
2FGYXXfPEr6MBupLtz1gcA7ub283RuGMKWCoP+bynifv0Vc/Z/bVUDHD+thh
C4/QN8jzHChv29jQaLHfnavHtqmqq+qdtrwbVjpSGY7Yt6aKqp6RxX3PzAHu
31hSjSz9LoNz4LREmW9W1dmxdev2zZs2qioqyKvvM3PJ68XzZvPytxhebl52
Op71cCsROWMi+W/tjmtIOvFPJf1/qshvVDeb+Rf21QWZaK6Ff1TQPen4Ycr1
QhPZt7Uk1z6KHm5R+itu+nblT17HtUjaJxzz8LuIVeFkuE8cTHLraUYHbSQn
smcPyhjNl8VpS5EPxCxxP7X/ivurD9lpkXS34BQfU8Ka9XomtyiZgjwXfWRB
65zZqitV5QTlyzzMYVt9ZCniKwVLG0fs6K6uPlFp6fG0W6eOX5wxsuB8YO6o
LWnmd9zThLfpDpQFWhsdsXYOTYLtiuzgldTKkaFiKJJBs32swVo2Mc4Fs9/H
yoLvWZ6Cm6a144T1zXuhxTJdD/cfhzfe31JT09Y3a12W9aOlpqq27W/RdSqs
oYHRRV5fzGV2NsAFSnuXyxygsb6W2pq2Qcx8VLZSps598OB6NNa39bFQlYvP
HvxS96mqvmsUebFIW11Te0//yIKuAFxZIKS/6lr753dRyDRL392S8JgDf3Pg
AHiovbqiqqHrHxlCFwy1RANpe0NLj2SFIebA4M/JyZ9D7TUVn5o6R+Y8cB5K
haW3PFZfS33z9yWT09LoOZvZ1VTX0o+u3aiymlmHH59r678xOXCXdTQ0tHb9
GB6fKTtu/xsKHfNGQnE5ssi/sblnTEbh8Ua+1dd+GZif7xjra639VPtV9C1o
bGhgxuMWVCY6v8j6OB2xlw9efd06bSM8Vndh8GU97WtZEvHMxODXuspPTV0j
EJx1tdZ+bu8axHZpfFiraz7Vtw1wRAUO/b0IDZ/o6xlEF4rs2i5FVWR2FDzY
jutbB2ZXB+p/5eZVI7sWQOOwgOpa+uZlpguVKq815vKJK1FfpxsHjXaXBFps
23UtVWIZYLYwF+BvMbzcPO0Ug5/Mzqb69qnCOYPttfUzjYXPa6EeVLaeWuxA
1nw1dN1LZvQVn/MpJCBfypOgkd7ekenN1awffThZlwSLCU6w5cMe+Fr/qbKh
ZwTic/tba5u+dvWPSliezA/FUF3ZqieLleHo59SxDt5PjJFF6gdkrCoL9k01
Lf0z7Via4cgqmeUYrBdvF4D/CGinzgEAgHT4rPacpA/tyEwkr/mFc1QL8Lmr
AehrkPHuG29njbzIrhXd/b61YPEfB1ZbTnJeC6LQnLaXHkGrVKH5UA/DWMfu
7ezYkVXssHc/5k6qfyfcasrh/9kXie8ZPqprVz4zEOV8jQx8hX5nLGD5mHuo
fL4fAAD+40BjKVdI8pKX4QMAAFlAXmMhp/4og8Xtf0/xeDcMxpnVwURToOlu
i9czLlPlfE25c/gIuVaGNcP/LMgZ5w1rd1zLGIcG0t3JOViv8Pz1cOsYxoct
or5I5B98TlfiLYMzHpWLWyNddUAjn3yumrtE51cWJ3tYW9A/zjxiAg1m0X2K
ZH3XOmDJGE6y1CDMeGHffD8AAPyHgXqyaDbWF84YG58+e/nek2iMQ8YAAAAF
Pqs2+N5dFzqN7BFRLdtOBsDKMNKS5ml776kLhUaje3tSXGxv27q/bgJ9JAXW
pxc2D5570d3J8RWrXFhjTWmedncfu5GpXnTYAl3sbtvQXtePrO5KLxRWT2NZ
UUltz5zmsZuSEopWb5b4ewL1vafdu/an6Wlj4z8v33aOmXOYWuoHAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAC4LP6ciPCw/xo9NDC/7+D1y68bO78l3Gu6zsjzkfc3Kys7ILmpnQ
JH+srTDjXWbWB+SXHz5kZ5Z3Ca755LPait4KPpyd+e5tRQ+rIy8uPNiP5hW2
/BeUQNBSPWH8a358WLA/jRpThPGC01/I0jUTFe5QdSzFmUJ3d/fO+j7z0sQV
FQtvqD49gOJO8/H29qK/LOhcipcATnK+FMTD6uhNCS3rX3UdO80yd7GQiY4C
pDfp1KhCdFlAI02ZMWFBPp702Crs21yXv64rIo3fjBUz1Xl3joxfkLVcYNHT
/Fss+j9g0OOtWSFUVw8a3dPtiQM9pmIAXP4FWAr43K6ylPAHB1U0DtLa/wN3
Wv/s/fT2la+lnjzhD5Xj94KTcz6PQMj75gpTY1zObCD+IbfdxDkmpXQq+2jN
CnX5c7uC1j5rz9C8rvGukuSXd/crrT/i8205ZfWz59UVHeU9lvG9S+HYJjpL
k17aGCrKm3m3raoeXtpmzgViFtjv0XuY8r3/lYW63Fbnghkx/4qJBRqtopvs
ukDO60VeNsZtjrXev9+5egnyD+638pTQh4fUCIeCV+kL5Za9i8VwOsuTwx4d
Wid/mvYZVRb80baCRIaVHkHHLGoE9QPQ95grOhobrVJ6lquuKyaN34wVMVWo
I8Fyk/JmmwRZXywnY2/Op9OBRU/zb7DoeevMvxBuY8RjcnK7ML/jj1U9369o
8Ffa6pvHBCyEiWpPj+j+X1oFTrnLHk0p2Qe3gvo8aWDFqrSs8NoYJ5T+WGcd
8UPShlgVTrvk1u65kz1zIoVb7/fo5fQ7VDiFDrqLyT5k6e6fvW+sNpMMbrzu
m7+N87k1tGcxQ7N+ySl7vP0XZx9zG76YZsoA1BtzQVv3SRVnkttfHh+S/HnO
y7xWRCy8z4zj2oaUVpEGjSZf11TR+uvj2NKUzqpy3Utc+lgFVYukgeIilrmL
Z8DnVDvtUsCKVQSwU2+qY8cqvfHWm7W23kxfmrjqF0tjNbEEY8fymyrUmXht
q+p228TvsmYfKL25BJ0OLFrMqrJoNAHOW2f+dfA5nxx3Ku44F9op6gN2ru1W
ReLZ16t5bQ4gM73xlnfCf232wa102yst+xiMvXLl9W+SfUxyvgYck/9j07ko
yRQeYr66COckG+4XSrxJmc/rCvd40TktGU7RU/3FZB/L3d3QYMK1y+Fzso/y
J7rEX5t9rLiec2vIhtrHA3DmvVZELOyMO1rbriRNp7Q81ihryVz3xP+/vfv+
ayLp4wD+p0gLKAZsoB56itg7VhDQsyEixYooAopYqAHpHUGQIopSBcGCIFIE
sYBSLBQxwlEOAonJhieFkpBsEsCCPJ/3Kz9IzO7Ozs7M7ndnZrfK82dcq0gt
RfL85iaCy37ltoIi+1ol8/gcsmuVH21KNZgT8wOyYjK0YAr4AXuKGj1sUtXo
cWXgn4/4mnV5/+FLOUNXSoyMo7OnUy3ud/3eZMEPwOU0RpjMtoqd7NEH63OM
6azdt6fKyZTL+RCwhaKuue+eSAjfcd/94Ja/KMp6VwpGLhW/N8VfixI95U0o
+vj5h5tTf910sdmkiz5+Rzlnv/Req7MzQsZ9r18TfWQen7vYKp18ZPKE/Jxr
FemlSLbf3kRMqmuV354bk8cPyYrf3oIp4ofsKWr0sMlUo8eTgVMP423wdq15
FhFvWb87JZMbs/FZUlhAUGiQL40W/4I+Un65/TVpQT6el867hj/rYTYXJUeE
Bft4e98oFkwF5XI+P0m8mZR061Ziws24nDoG7zvO56JbCYnJyQnxd581kW2v
99PjWH//0NBA7yteyc/pbH7daci/mXArmb+qhITHjZwBoutN9s2E5KTkxLi4
/Jre1sq716xWUqepbbAJiIqIjIq6U9k2eKnE7fv0MCYgIDg00POqb9xzwTQf
ov1FSqC322WnK/eqmS3PE0NoXiGp1YwB5pv0IB+Pyy6O4WU9vL2+FRka7OtB
S3zaJFpCuMzmwsTQoKDgYF8v//iSdrH6LDP6IL69SPWzWqGppmpw0j+Sl87Y
O+Ujc66Jjsq0iEC/oJAAv8DQlEq6cHwJWVIHfW97lR0X5O3m4R+Z86F3gN2S
l17A33NGdUaIj+eV805B2fzeBi7nU27ENa8rLi5XbtWPTHTqa3gUG+gXHBrg
5e4ZV04f3wwozrvALdOnUY8lDYcfvTnevo8fOi9WVlnr8HQo64hP8V4360Tz
ZTD6+Nj/tTglMiJkpOSMpK+5OCk0MCQ46Jqnz62Sb0MLEzIOtyjeXj+I8PW6
7OLq/2A4cd21OTGhkTdiY2Nj4m4nBwUk10ruNpteecfPetUMJepy6yDe+iOi
0soHNzB07q7ra32eEhke6uPhF/u0RXzqgWQBlsTurLwVQHN3dfZKftv3tSQh
2Ifml1o7OIiIrMZJ33Gpu8nfREfVvfCAgMCgID+/iJQyeRPciLaqtAh//+Cg
wAC/0Ltlg8nmMmuzo8Ov7l1I1T/sHx4ZfT2nXto8i3FmC9FZlhJIc3N1uZxc
209/lhjs6+mXWS1lKBW7ozI1KuzM5pmz19uF8Y9IZKgfzf2ik4PdtULBvSRG
dXowzeOKs1Pss/94xeZWeGiIlDSQNmUDcq5VZFdD6VknoxSRpoSkiSA5xCSH
TGazPIykcgnWMLZrFWZ1XjyvVU9JTk5OK28nOPX5kdc8r1x0Cij4qvihkVo8
xpYb7a8zwmie3l40H++AlOKW76SJl3pSUKjxl9pmyqzLA/0txcmhgYHXaKHJ
5c3NZbx/Xz1xNLKkZmwnx/GcO0j2/SdXVdbH/EhfzysXnMPyhLcr5GTs6KM5
loMu81yMGi1y0CdHjSbLQIkyM3SMFK7R0s65k7dGc/sq3TcvP51Y+5PupE0Z
rVn2/5y4J3jKDfH18fl1C81uvB4sZFz2t+qiNBdDzbm73OP9Qp7w6wLrbfAO
naXnyxj8JrG2JMdv3wJ1lbWX06ro/ENOtL1Jslk6a8fZG09rpXY4Ee3PvLbq
GUe94o8sZ7c9PLNimUv2N4Joe1ecd+PcpllK6iaXinmXG9y++vDd2rP1D3rH
pFU297fXV5Q9CzSdrmbill9eVlZe/rZV0I6wu567Gy46GFjVK9h4zpmVG09l
/0sM9La8eZx8ZpWaznGvQP/b1U8uGUyn7E5tZ3+tKUp1NdRW20WLD4jKa+Ql
ua82ZAdV36NopFlKs9vpdE8wgIhoz3Naa2AaVjNShmRHHx31FeVP/c20VDf7
5pfx0vniTbNwaBK3/130oY22YS+FA+r/e59gtdEs6gX/L5Kk8lfXWuCxfYH+
yZjKf1lET2Oen0tY4pXN5qGN/OpMrynKuLRZQ3Wnx2vBuYN/LHx2z5upa/9M
ePSIrgJPwxVGgdU9giOb77BW3+7huIYgsuqCNqtN0zuQLDwbEr0Pr/kW9vcX
nvlLaaaeY5lw1jnxJd4z4oNYtvCjj1kbzgZ6Bz35LF5yhFnZln1654n7Tfxl
2O1PHNf8dTjsNUtYSEgOt0SGd9aWZLnt1Bp+DsD35hTbf2g1g+PBmG9CTY1d
nku2aZyO+sry4mummrM3XX3MW39ZeU3z4AaE5+7tZwN8gx40MXl/1gVsp25y
Hh5iRlKAJTbB7Wt5VXDLbiVF38o7yDuluuiKgQrFOr6Nf1hJaxzJjkvsJg+j
5sahjQdiq4S3shhvb1pvMw18JTFfYwjzdcyh7fvD3gp+zmXU3jiy0SLwRS//
2uDb+/KSZLtl2vr2aSW8Ldb9K61sjzdb+ppeFySeXkWdZ0ULoN2rKXbVV9bZ
HS9l/X0tb8uLg/ZqzTH0KOAfkbLy0uL0q9tmqW6P45d3foEvvHfJcAZlv0d8
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
eShMFNH36JSuEpXXYDLbkj1DJOZXyC85fY1PY9wdzpxz9b4WFuFgOFNN2DMu
XPl4og9eYa6562Kqr6U+TUl1mtpfhmcza8cRfZDFdAoVYBH89k1yE7JrnALR
B6chdLuG8jKfctFLEs5bv03TVVYPF+yRPeI0BW1Tpeq7ivYE85vZjaraqzyF
K1cs+hhntvAvaShmd8h6PMSzS170QZaGwTXIyFjFrlXEqqECWSe9FMlOidxr
FQW2O6HKpeC1ita6Iy6nzTdozbWKrR9VNKRdq4yzeChw5dZ322KGxswjD/oG
5JJ9UpDR+MtrM6XWZXbltc26K93eCtbX/8ZnveaGsDdiWaXwyVF6Vsg9d0j6
BVVVavQh86w6vuhD9rkYNXpy1mhFog/Fa7ScEjsJazSXWejvI3a7AMg8v7ZD
V3ffzTfCviT+Re9Yow+i7+kZPco2t8o++m3vgAryqUNEa/yeGcp6o95lNuo3
Xx96n7E1XaS98/pbsZ+JXpVx+189KfzKakvYQ1FeMzLxWXxFgpbH+ubokYSy
20mip8Jn++xleyPf9Qg3mnF4xvijD0bV4xI6we+/U1PZ4PRMNJ39b33Wq6qa
+dWRJJWZdWKOhvrBTJHhvXKjj3fD7QPRFruHornQofSHvCma33S8816vqkE9
nHLfLyR/uL4x7tvNV1fR98hN8g1+I3HpKqfkdJb77Zg93ybqjXB13WlHZpFE
H8LDTXLPUOyIfP/6sYm/OnZX46uHyT6Wy2fqGAaObmcHiTaSzKpHhcK7SjJb
XUUKsCipjxnpkV3jSHZcdDeJ5lizGSp/ezwTTQb/qbnTVTZF1UkUTeJbtCmF
usi5XPS2G7vac53q7I3+wmUnFn3IyRbBJc2eu/IfPDjB6ENOxip4rSJWDeVn
ndRSJCclkk2E4GuRQyx/uxOqXApeq8wz9KvtY9cnHFxA3RlTI9bKjuVaRU7x
kJ8bvMbw5FwNilhjSIYt86Qgq/GX02ZKf2QQqzbmzAHLow4+UeE+Zw4d8c9p
HHX6U/jkyDeOc4ekX1BVf2z0QXLQ5Z6LUaMnZ40mObGKpVDxGi2nxE7GGk20
f2jAOwYVQexSV/sncPjpfD1JB/lBfTurKj5G2OLJjz54tazCc43WQrv4UPck
mW/CYDWE71BXPxQt+sYZgl78qGqoEDI/3vbwzm/ndD5wXK678kKJSDNI9GUf
oVIsY/gVm+i6fS3oHZvzIWiHho5RtOjbfNhtzwvK/xsYZ/TBH1JLVTW8PrQX
RE/qAcH9FsbLGwnP+hWKPjJt5qiZpgi649pu0WLec7icumuGlL8OJIs26l33
T+ioGFwTzOqQllSiNeXQbNVFV5+O3B0QjIOliEQflZcN1HaMtA+s4kvLhmad
c96H7qRSjJPEnjDRVvzwxXA+sWUdKEn8i1sNJa3VO9yeigT7nbmn5iupLllh
HvlK8spVVskRzFPQmGM48jzejtvmVH5zyqqIvc5roiUPN0l6xY5IW6Lt2dSR
0Pl7c4zJrEP3pd9g6btnTdUxiRV0oXbd8g6qH5xSIesSV24BFielfeOP9ZVZ
40h2XGw3WbVBhhTNE7dEb9vwe5m1Da68knLVxXkbYDhzxsEM0ZMwI/foHNUt
l4XlYYLRh5xs+TXRh9yMHc+1ivysk1KK5KZEsokQ/Eyse0vedidUuRS7Vhl8
+jGXaL1ttWD+JtpbkXo0lmsVOcVDgdzgpeDQHJWR8RWCFbSVPq2STDdX5klB
ZuMvu82Ueq3CfhPofKOew2V2/9vFJLs9ouDJUWpWyD13SMmBn19Vf0D0ocBB
l3cuRo2enDWa5MQqlsIx1GjZJXZy1mgCsYdCOJtU1MwjmgZj9W+5zutmzzO+
Tu976kcTHkHW0/NLZq0Y7IoaEHT7blKb7/pQbIge61PkTg0NA8tkeSFfT+HV
dbprrr4cuoIlep572YUL7073N2adMzv3RPhEiL4qzw2aKyxTmoe2y2W/vLKc
IrzY7n8dEii4yOx87r6euubayAS8nqeep+PeC2ed37fRUhO9VSLEKHbRV1sZ
8HK4uNb7bKSstHsoLK7V/punq+5MaBbuBtF632X9bHWL61//K/AJftzPH11/
ZfnsdbKu0/r5L2AVDoBhvwym5Qham/bCi2vmGMXWDo9ObIrdp7PuRJbwtoDU
pHKZb/22Uv/eG98y1Po2pR9fpCoSfRCtUSYzhm+LEb3PvbbM1Zx7QjhQlOgp
ubyOuvNK6fD4w85n3s5h7/gLsqp8t2jPWXq+ZCxjE/vf0NaqKi07mi3a00j0
5h6bq6QtUjxEyCo5vGz33aQ6d/gdE8S3zAvrdCi7kul9j3xoxUzph1sa/hGZ
s85HWIS+JexdbBQ+PEPzOz3efLMnyShmdpnbytmr+K09l/02lDZ4yhXO5d/m
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
Mx63CwAAAAB/rv8BceqwGA==
    "], {{0, 182.22722159730034`}, {799.4000749906262, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{799.4000749906262, 182.22722159730034`},
  PlotRange->{{0, 799.4000749906262}, {0, 182.22722159730034`}}]], "Input",
 CellID->158485562,ExpressionUUID->"9aeb7d20-9415-4844-8830-e0d82b89daff"],

Cell["We need the final divided by the initial.", "Text",
 CellChangeTimes->{{3.8750131933233795`*^9, 3.875013200899502*^9}},
 CellID->790183583,ExpressionUUID->"c128b3f2-4216-4b9f-8af8-338158bab6a4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{
    FractionBox["1", "2"], 
    RowBox[{"(", 
     RowBox[{
      FractionBox["1", "2"], "m", " ", 
      SuperscriptBox["rEnding", "2"]}], ")"}], 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"2", "\[Omega]"}], ")"}], "2"]}], 
   RowBox[{
    FractionBox["1", "2"], "Ibeginning", 
    SuperscriptBox[
     RowBox[{"(", "\[Omega]", ")"}], "2"]}]], "/.", 
  RowBox[{"First", "[", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], "Ibeginning", 
       SuperscriptBox[
        RowBox[{"(", "\[Omega]", ")"}], "2"]}], "==", 
      RowBox[{
       FractionBox["1", "2"], 
       RowBox[{"(", 
        RowBox[{
         FractionBox["1", "2"], "m", " ", 
         SuperscriptBox["rEnding", "2"]}], ")"}], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "rEnding", ",", 
     TemplateBox[{},
      "PositiveReals"], ",", 
     RowBox[{"Assumptions", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Omega]", ">", "0"}], ",", 
        RowBox[{"rBeginning", ">", "0"}], ",", 
        RowBox[{"m", ">", "0"}]}], "}"}]}]}], "]"}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.875013203063537*^9, {3.8750132472769413`*^9, 3.875013290750535*^9}, {
   3.8750133314962473`*^9, 3.8750133380707912`*^9}},
 CellLabel->"In[66]:=",
 CellID->13673112,ExpressionUUID->"687c4586-62ff-46e1-b3d1-263cb817bb5d"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.8750132914534216`*^9, 3.875013339129363*^9},
 CellLabel->"Out[66]=",
 CellID->570959803,ExpressionUUID->"ec498781-5ab1-4815-9505-4675ebad7bb9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<AngularMomentum\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875013412018895*^9, 3.875013418384097*^9}},
 CellLabel->"In[67]:=",
 CellID->621626079,ExpressionUUID->"0f230adb-71c1-4781-b19b-6b719d987d45"],

Cell[BoxData[
 RowBox[{"{", "\<\"RigidBodyAngularMomentum\"\>", "}"}]], "Output",
 CellChangeTimes->{3.8750134192572994`*^9},
 CellLabel->"Out[67]=",
 CellID->526904558,ExpressionUUID->"c7eaa53d-392a-458d-8df6-ea2db463994b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "/@", 
  RowBox[{"FormulaLookup", "[", "\"\<AngularMomentum\>\"", "]"}]}]], "Input",
 CellChangeTimes->{{3.875013425417269*^9, 3.875013428944598*^9}},
 CellLabel->"In[68]:=",
 CellID->7509633,ExpressionUUID->"b451dd4d-ea50-4d80-ad90-57d9b307ef29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     TemplateBox[{"\"L\"", "\"AngularMomentum\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " angular momentum"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
         "TextStyling"]& )]}]}], ",", 
    RowBox[{
     TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       TemplateBox[{
         RowBox[{"2", " ", "\[Pi]"}], 
         RowBox[{
          "\"rad\"", "\[InvisibleSpace]", "\"/\"", "\[InvisibleSpace]", 
           "\"rev\""}], "radians per revolution", 
         FractionBox["\"Radians\"", "\"Revolutions\""]},
        "Quantity"], ")"}], " ", 
      TemplateBox[{"\"n\"", "\"RevolutionRate\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.87501342957883*^9},
 CellLabel->"Out[68]=",
 CellID->79734564,ExpressionUUID->"47a2c3e4-32b6-44ff-a201-cbe7231d353c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Problem #7 new try", "Section",
 CellChangeTimes->{{3.8750134612863703`*^9, 3.8750134648080893`*^9}},
 CellID->24915234,ExpressionUUID->"97ba5574-11db-407c-838a-9c853d1a8385"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7wvUEWVu+nRGmrDAgsYy7W+GC5NeaDzXZtMa0rbHlbOn2DmFDnrKpJOhDSIb
mWikHiDOXiWZA7fCdfoIIact2JhEsgwXzQ2xyp/pyxFOutfDo0aOra7GXrfG
qcI4bb5GCgb+9egJJMRKvaJ97vX0ZO9w3FPXudkHHKq62PpViFJ89ocHmxXk
DgQg097ImcRAY+LO2+/FtYfG066qEC1nLOHh1Qo53q6hqHsxvIc3Of4t/01a
DVaCz+e1+xuTNp9BPon8yKlw0F2rvs/jMxfOH/NtNq5RN6S0Chr6s/elMVHr
SaY4+F6YzNmpN9eral5K6OTx2d/yXqc1DEJ8Tq27oYqZV6s4soR9WpAJ6bBd
AQuz+ZOjeY+2rJU3pTQKl5W+hRirat7Om04NxhMtSdqnZ2wEYhbY6xP3+dZw
xG2nHVE85VGPVVdpEkCyD439or8KZVLusldjp+MngUdj1VAPrjsSMt2syZ/d
oSYqsFsQhSesYgc9eVH2IaqPEVGYfWA1AQtp0kAF1v+9qpvui4dcTgvjmW8z
Mn6PFT7aQTzhVj1lv7xmbyNNA/JnQenIEVRF7ZuIpbC/5L9+VzOIU9uJajeJ
AJLXHGisQTqbIDIyTrGjvqKcgR+itFJMQJbsQ5oQoG/JN7aTjjA+wQ0eKfK8
51c8LGEWkt6A9fqKzrWI6am2/vin3mV4it2XeFVLyTROdCnLSKwFadfNt8Ju
hiMlr0dB4m0AMwWCrtuTwgV3guJZz/qfokKa3A2JRo4VOB5Vmroi21H0CKoX
/ZewTHwnAPVEn1cnmr0R6gTU/+I0ccuFOLEv4nNK7LYRRcM3AqJmqtjZB37/
yu70BG2vcd5N2GfzcSr24DX424UK9BvXS8zIPvANHMe1TsqmBnAHkQ8Q997J
mjJQbq2ffTjutY/spmD3l23oRgINvrm25cqLH+JfcCbYMsYgyNoHwVBom0KQ
CwEUdlJLxhdWT2GIqKRwJLAeVXM4leQDG454f5VYY+p4aaqla18uMKqZ2QfU
EX95o+qfbySmxoeSrTTkJXdezRjrJ6XZArcv5pyygnXU38JHd4edUVG5mCJt
7hrXZpdmvJbqJzGcM5qdyikddcgTDUVQf4gpUf/mW8Gf5+H98KIdDM+GWkN8
00asddd0simtd/BVa3IkBdaNMzLsvJKmhNLcF5YE5g+v71PMs8vH9DUU5P9A
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
2b0SBXJ6cylXzaztvaLgZtlfOX/xeabkXQOTzDzyKaPz7onZH1IjvSgBKTRT
IlFF38yamicYwVGbgNqFUqWBA+dbiImW2aveGX3G5/Xl0K+cNnvIiE2FlcvZ
jvoBUa4fGZTbFoc2qatoG565ZvM4RvJimzm1ZRUw7lqd0F2vorHP+Do9vVNY
1YGyQGujI9bOoUmwtpEdvJIE2w+hwVzqOQwT6BWWo6GisdfY+kko1jkdTCE4
Bb9LIl812a2jrqR6+NGHMUFqEHB2i6qSitaOE9fu+BR9n+ENMrv+jjDXt7Dz
oAXEZmRnJb1wuXPH59PsN7mgwKpwMtwnHvW49TSjgzaSa4HoApmj26N5/neu
Ht2uoaK256SVbWDJcHUkYl3qpPVbjCxveeZhRHe46rr0ZcriBPicr2EXN2ho
b9XdunXbRh0NBYKymv5lietaBouoJobnPV9lf0iL9HYLTPI6o7SGBPeyT9a3
/NmdjqPkRZ/n6/RE8NqCjHXNwme1HtVLTA0ZqrCSnLV+ECNYwJNi4OiuVUY1
mC7le8JlozvvZNioPV5K+5/6mjWEPxR3nqWW9jUzjNWJf6yRJ2489yyjWyQS
9tu7OpJrH7m2WzddiMMvd/TdvT8dswsiyWSfiLTMtFAXqwuXyfmzXaes9ZRt
yOZ2faRamV1xpEckRHo9vnzW6nmq4LrfyZHigHuWJ/VUSTr6xjfvhwpWbKG+
Ij9rU3NHv/j05AhfdzeGu4X2WvmtBy49DqueM9YzZbAFTkuU+WZVnR1bt27f
vGmjqqKCvPo+M5e8XiwnIIt9LcV4je0nI4pbUZ0zjrR1j1g8oGX2tCY9v3Fu
vzZJQ8fQ/KZzRvs8vB9GtCP642yVxhw+8Mav78WB4u6+454muGoYs3dkUi2o
L932gME5eKDydmMU4q4BYCqhECz35ZslursYzai5NQFm2zQPeJXItAV89OOj
I+dpkR63bj70jM0orCjPS2LcMzG6kfhZ+PUFK97vCq+z+HVyyeyjMv8WeOP9
LTU1bX1zT61AY30ttTVtg/jZE8QcHEQ23A22V1dUNnQzZe1nPquvpeZTfduA
6Jpr1tDfozNEyGV2NtS2/T1bZ2WrlVSgcfjxdS19s4oZ62ut/VT7dUD08pGx
oYGx5etXiPWjpaGlZxT1CWjNhz9fUwX/ckL09aGBmd/ljXyrr/0yMFtkPFbf
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
TGazPIykcgnWMLZrFWZ1XjyvVU9JTk5OK28nOPX5kdc8r1x0Cij4qvihkVo8
xpYb7a8zwmie3l40H++AlOKW76SJl3pSUKjxl9pmyqzLA/0txcmhgYHXaKHJ
5c3NZbx/Xz1xNLKkZmwnx/GcO0j2/SdXVdbH/EhfzysXnMPyhLcr5GTs6KM5
loMu81yMGi1y0CdHjSbLQIkyM3SMFK7R0s65k7dGc/sq3TcvP51Y+5PupE0Z
rVn2/5y4J3jKDfH18fl1C81uvB4sZFz2t+qiNBdDzbm73OP9Qp7w6wLrbfAO
naXnyxj8JrG2JMdv3wJ1lbWX06ro/ENOtL1Jslk6a8fZG09rpXY4Ee3PvLbq
GUe94o8sZ7c9PLNimUv2N4Joe1ecd+PcpllK6iaXinmXG9y++vDd2rP1D3rH
pFU297fXV5Q9CzSdrmbill9eVlZe/rZV0I6wu567Gy46GFjVK9h4zpmVG09l
/0sM9La8eZx8ZpWaznGvQP/b1U8uGUyn7E5tZ3+tKUp1NdRW20WLD4jKa+Ql
ua82ZAdV36NopFlKs9vpdE8wgIhoz3Naa2AaVjNShmRHHx31FeVP/c20VDf7
5pfx0vniTbNwaBK3/130oY22YS+FA+r/e59gtdEs6gX/L5Kk8lfXWuCxfYH+
yZjKf1lET2Oen0tY4pXN5qGN/OpMrynKuLRZQ3Wnx2vBuYN/LHx2z5upa/9M
ePSIrgJPwxVGgdU9giOb77BW3+7huIYgsuqCNqtN0zuQLDwbEr0Pr/kW9vcX
nvlLaaaeY5lw1jnxJd4z4oNYtvCjj1kbzgZ6Bz35LF5yhFnZln1654n7Tfxl
2O1PHNf8dTjsNUtYSEgOt0SGd9aWZLnt1Bp+DsD35hTbf2g1g+PBmG9CTY1d
nku2aZyO+sry4mummrM3XX3MW39ZeU3z4AaE5+7tZwN8gx40MXl/1gVsp25y
Hh5iRlKAJTbB7Wt5VXDLbiVF38o7yDuluuiKgQrFOr6Nf1hJaxzJjkvsJg+j
5sahjQdiq4S3shhvb1pvMw18JTFfYwjzdcyh7fvD3gp+zmXU3jiy0SLwRS//
2uDb+/KSZLtl2vr2aSW8Ldb9K61sjzdb+ppeFySeXkWdZ0ULoN2rKXbVV9bZ
HS9l/X0tb8uLg/ZqzTH0KOAfkbLy0uL0q9tmqW6P45d3foEvvHfJcAZlv0d8
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
eShMFNH36JSuEpXXYDLbkj1DJOZXyC85fY1PY9wdzpxz9b4WFuFgOFNN2DMu
XPl4og9eYa6562Kqr6U+TUl1mtpfhmcza8cRfZDFdAoVYBH89k1yE7JrnALR
B6chdLuG8jKfctFLEs5bv03TVVYPF+yRPeI0BW1Tpeq7ivYE85vZjaraqzyF
K1cs+hhntvAvaShmd8h6PMSzS170QZaGwTXIyFjFrlXEqqECWSe9FMlOidxr
FQW2O6HKpeC1ita6Iy6nzTdozbWKrR9VNKRdq4yzeChw5dZ322KGxswjD/oG
5JJ9UpDR+MtrM6XWZXbltc26K93eCtbX/8ZnveaGsDdiWaXwyVF6Vsg9d0j6
BVVVavQh86w6vuhD9rkYNXpy1mhFog/Fa7ScEjsJazSXWejvI3a7AMg8v7ZD
V3ffzTfCviT+Re9Yow+i7+kZPco2t8o++m3vgAryqUNEa/yeGcp6o95lNuo3
Xx96n7E1XaS98/pbsZ+JXpVx+189KfzKakvYQ1FeMzLxWXxFgpbH+ubokYSy
20mip8Jn++xleyPf9Qg3mnF4xvijD0bV4xI6we+/U1PZ4PRMNJ39b33Wq6qa
+dWRJJWZdWKOhvrBTJHhvXKjj3fD7QPRFruHornQofSHvCma33S8816vqkE9
nHLfLyR/uL4x7tvNV1fR98hN8g1+I3HpKqfkdJb77Zg93ybqjXB13WlHZpFE
H8LDTXLPUOyIfP/6sYm/OnZX46uHyT6Wy2fqGAaObmcHiTaSzKpHhcK7SjJb
XUUKsCipjxnpkV3jSHZcdDeJ5lizGSp/ezwTTQb/qbnTVTZF1UkUTeJbtCmF
usi5XPS2G7vac53q7I3+wmUnFn3IyRbBJc2eu/IfPDjB6ENOxip4rSJWDeVn
ndRSJCclkk2E4GuRQyx/uxOqXApeq8wz9KvtY9cnHFxA3RlTI9bKjuVaRU7x
kJ8bvMbw5FwNilhjSIYt86Qgq/GX02ZKf2QQqzbmzAHLow4+UeE+Zw4d8c9p
HHX6U/jkyDeOc4ekX1BVf2z0QXLQ5Z6LUaMnZ40mObGKpVDxGi2nxE7GGk20
f2jAOwYVQexSV/sncPjpfD1JB/lBfTurKj5G2OLJjz54tazCc43WQrv4UPck
mW/CYDWE71BXPxQt+sYZgl78qGqoEDI/3vbwzm/ndD5wXK678kKJSDNI9GUf
oVIsY/gVm+i6fS3oHZvzIWiHho5RtOjbfNhtzwvK/xsYZ/TBH1JLVTW8PrQX
RE/qAcH9FsbLGwnP+hWKPjJt5qiZpgi649pu0WLec7icumuGlL8OJIs26l33
T+ioGFwTzOqQllSiNeXQbNVFV5+O3B0QjIOliEQflZcN1HaMtA+s4kvLhmad
c96H7qRSjJPEnjDRVvzwxXA+sWUdKEn8i1sNJa3VO9yeigT7nbmn5iupLllh
HvlK8spVVskRzFPQmGM48jzejtvmVH5zyqqIvc5roiUPN0l6xY5IW6Lt2dSR
0Pl7c4zJrEP3pd9g6btnTdUxiRV0oXbd8g6qH5xSIesSV24BFielfeOP9ZVZ
40h2XGw3WbVBhhTNE7dEb9vwe5m1Da68knLVxXkbYDhzxsEM0ZMwI/foHNUt
l4XlYYLRh5xs+TXRh9yMHc+1ivysk1KK5KZEsokQ/Eyse0vedidUuRS7Vhl8
+jGXaL1ttWD+JtpbkXo0lmsVOcVDgdzgpeDQHJWR8RWCFbSVPq2STDdX5klB
ZuMvu82Ueq3CfhPofKOew2V2/9vFJLs9ouDJUWpWyD13SMmBn19Vf0D0ocBB
l3cuRo2enDWa5MQqlsIx1GjZJXZy1mgCsYdCOJtU1MwjmgZj9W+5zutmzzO+
Tu976kcTHkHW0/NLZq0Y7IoaEHT7blKb7/pQbIge61PkTg0NA8tkeSFfT+HV
dbprrr4cuoIlep572YUL7073N2adMzv3RPhEiL4qzw2aKyxTmoe2y2W/vLKc
IrzY7n8dEii4yOx87r6euubayAS8nqeep+PeC2ed37fRUhO9VSLEKHbRV1sZ
8HK4uNb7bKSstHsoLK7V/punq+5MaBbuBtF632X9bHWL61//K/AJftzPH11/
ZfnsdbKu0/r5L2AVDoBhvwym5Qham/bCi2vmGMXWDo9ObIrdp7PuRJbwtoDU
pHKZb/22Uv/eG98y1Po2pR9fpCoSfRCtUSYzhm+LEb3PvbbM1Zx7QjhQlOgp
ubyOuvNK6fD4w85n3s5h7/gLsqp8t2jPWXq+ZCxjE/vf0NaqKi07mi3a00j0
5h6bq6QtUjxEyCo5vGz33aQ6d/gdE8S3zAvrdCi7kul9j3xoxUzph1sa/hGZ
s85HWIS+JexdbBQ+PEPzOz3efLMnyShmdpnbytmr+K09l/02lDZ4yhXO5d/m
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
Mx63CwAAAAB/rv8BceqwGA==
    "], {{0, 182.22722159730034`}, {799.4000749906262, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{799.4000749906262, 182.22722159730034`},
  PlotRange->{{0, 799.4000749906262}, {0, 182.22722159730034`}}]], "Input",
 CellID->257691818,ExpressionUUID->"fb19c4de-45c6-4d56-b107-d0c5844fc820"],

Cell["\<\
We need to use conservation of angular momentum. If we set her angular \
momentum at the beginning equal to her angular momentum at the end, we should \
be able to solve the problem.\
\>", "Text",
 CellChangeTimes->{{3.875013474880407*^9, 3.875013517737941*^9}},
 CellID->471630671,ExpressionUUID->"2bd3080e-9fd5-4fa9-8ee2-6e25f8cbd433"],

Cell["Get the angular momentum formula.", "Text",
 CellChangeTimes->{{3.8750135379059143`*^9, 3.875013549897644*^9}},
 CellID->18143223,ExpressionUUID->"a95c3215-4df0-457d-aee9-124424c8da20"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<AngularMomentum\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.875013518988883*^9, 3.875013532186423*^9}},
 CellLabel->"In[69]:=",
 CellID->19897227,ExpressionUUID->"a8b48191-578f-47b2-a2c9-d418938711c9"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"RigidBodyAngularMomentum\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"L\"", "\"AngularMomentum\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular momentum"}], TooltipStyle -> 
         "TextStyling"]& )], "\[Equal]", 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
          "TextStyling"]& )]}]}], ",", 
     RowBox[{
      TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
         "TextStyling"]& )], "\[Equal]", 
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          RowBox[{"2", " ", "\[Pi]"}], 
          
          RowBox[{"\"rad\"", "\[InvisibleSpace]", "\"/\"", 
            "\[InvisibleSpace]", "\"rev\""}], "radians per revolution", 
          FractionBox["\"Radians\"", "\"Revolutions\""]},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"n\"", "\"RevolutionRate\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
          "TextStyling"]& )]}]}]}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.875013532888414*^9},
 CellLabel->"Out[69]=",
 CellID->9949630,ExpressionUUID->"a87143ca-38fb-4737-aa02-c3ab43093eeb"]
}, Open  ]],

Cell["We don't know I which is the moment of inertia.", "Text",
 CellChangeTimes->{{3.875013553101361*^9, 3.875013607179181*^9}},
 CellID->173140575,ExpressionUUID->"c9bc3814-8be2-46a6-8e95-17102fb00086"],

Cell["Look for the right moment of inertia formula:", "Text",
 CellChangeTimes->{{3.8750136088591347`*^9, 3.8750136179235125`*^9}},
 CellID->20470026,ExpressionUUID->"9bcfca27-1629-4154-bca9-d88fbf1b2f59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AssociationMap", "[", 
   RowBox[{"FormulaData", ",", 
    RowBox[{"FormulaLookup", "[", "\"\<MomentOfInteria\>\"", "]"}]}], "]"}], "//",
   "Shallow"}]], "Input",
 CellChangeTimes->{{3.875013518988883*^9, 3.875013532186423*^9}, {
  3.875013582355622*^9, 3.875013624395446*^9}},
 CellLabel->"In[71]:=",
 CellID->44348783,ExpressionUUID->"ecf670e0-0239-4ac7-a7b6-945d03445fbb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"AnnulusAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "4"], " ", "\[Pi]", " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{
           SubscriptBox["\"R\"", "1"], "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "4"], "-", 
        SuperscriptBox[
         TemplateBox[{
           SubscriptBox["\"R\"", "2"], "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "4"]}], ")"}]}]}]}], ",", 
   RowBox[{"\<\"ConeMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["3", "10"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["3", "80"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           TemplateBox[{"\"h\"", "\"Height\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
              "TextStyling"]& )], "2"], "+", 
          RowBox[{"4", " ", 
           SuperscriptBox[
            TemplateBox[{"\"r\"", "\"Radius\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
               "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"CuboidMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "12"], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"l\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"w\"", "\"Width\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " width"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}]}]}]}], ",", 
   RowBox[{"\<\"CylinderMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "12"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        RowBox[{"(", 
         RowBox[{
          SuperscriptBox[
           TemplateBox[{"\"h\"", "\"Height\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
              "TextStyling"]& )], "2"], "+", 
          RowBox[{"3", " ", 
           SuperscriptBox[
            TemplateBox[{"\"r\"", "\"Radius\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
               "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"DiskMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "4"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"EllipticalLaminaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "4"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{"\<\"HalfDiskAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["8", 
          RowBox[{"9", " ", "\[Pi]"}]]}], "+", 
        FractionBox["\[Pi]", "8"]}], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"R\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"HexagonAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["5", "16"], " ", 
      SqrtBox["3"], " ", 
      SuperscriptBox[
       TemplateBox[{"\"a\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"MomentOfInertiaRatio\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"\[Gamma]\"", "\"MomentOfInertiaRatio\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia ratio"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
         "TextStyling"]& )], 
      RowBox[{
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"R\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"]}]]}]}], ",", 
   RowBox[{"\<\"PentagonAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "96"], " ", 
      SqrtBox[
       RowBox[{"265", "+", 
        RowBox[{"118", " ", 
         SqrtBox["5"]}]}]], " ", 
      SuperscriptBox[
       TemplateBox[{"\"a\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"PointMassMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Length\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{"\<\"QuarterDiskAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["4", 
          RowBox[{"9", " ", "\[Pi]"}]]}], "+", 
        FractionBox["\[Pi]", "16"]}], ")"}], " ", 
      SuperscriptBox[
       TemplateBox[{"\"R\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "4"]}]}]}], ",", 
   RowBox[{"\<\"RectangleAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "12"], " ", 
      TemplateBox[{"\"B\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"H\"", "\"Height\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
          "TextStyling"]& )], "3"]}]}]}], ",", 
   RowBox[{"\<\"SolidEllipsoidMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "5"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{"\<\"SphereMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["2", "5"], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"r\"", "\"Radius\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
          "TextStyling"]& )], "2"]}]}]}], ",", 
   RowBox[{"\<\"ThinRodMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
         "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", "0"}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        FractionBox["1", "12"], " ", 
        SuperscriptBox[
         TemplateBox[{"\"l\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], " ", 
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{"\<\"TrapezoidAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       SuperscriptBox[
        TemplateBox[{"\"H\"", "\"Height\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
           "TextStyling"]& )], "3"], " ", 
       RowBox[{"(", 
        RowBox[{
         SuperscriptBox[
          TemplateBox[{"\"B\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], "+", 
         RowBox[{"4", " ", 
          TemplateBox[{"\"B\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          TemplateBox[{
            SubscriptBox["\"b\"", "2"], "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}], "+", 
         SuperscriptBox[
          TemplateBox[{
            SubscriptBox["\"b\"", "2"], "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], ")"}]}], 
      RowBox[{"36", " ", 
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"B\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "+", 
         TemplateBox[{
           SubscriptBox["\"b\"", "2"], "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )]}], ")"}]}]]}]}], ",", 
   RowBox[{"\<\"TriangleAreaMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "36"], " ", 
      TemplateBox[{"\"B\"", "\"Length\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      SuperscriptBox[
       TemplateBox[{"\"H\"", "\"Height\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
          "TextStyling"]& )], "3"]}]}]}], ",", 
   RowBox[{"\<\"TriangularPlateMomentOfInertia\"\>", "\[Rule]", 
    RowBox[{
     TemplateBox[{
       SubscriptBox["\"I\"", "\"z\""], "\"MomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      FractionBox["1", "36"], " ", 
      RowBox[{"(", 
       RowBox[{
        SuperscriptBox[
         TemplateBox[{"\"a\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"b\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"], "+", 
        SuperscriptBox[
         TemplateBox[{"\"c\"", "\"Length\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}], ")"}], " ", 
      TemplateBox[{"\"m\"", "\"Mass\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
         "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Diameter\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"\[Pi]", " ", 
       SuperscriptBox[
        TemplateBox[{"\"d\"", "\"Diameter\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " diameter"}], TooltipStyle -> 
           "TextStyling"]& )], "4"]}], "64"]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"DiskAreaMomentOfInertia\"\>", ",", "\<\"Radius\"\>"}], 
     "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"J\"", "\"PlanarAreaMomentOfInertia\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " planar area moment of inertia"}], 
        TooltipStyle -> "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{"\[Pi]", " ", 
       SuperscriptBox[
        TemplateBox[{"\"R\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "4"]}], "4"]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"Pendulum\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"T\"", "\"Period\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{"4", " ", 
        RowBox[{"EllipticK", "[", 
         SuperscriptBox[
          RowBox[{"Sin", "[", 
           FractionBox[
            TemplateBox[{
              SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
               "TextStyling"]& )], "2"], "]"}], "2"], "]"}], " ", 
        SqrtBox[
         FractionBox[
          TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " moment of inertia"}], 
             TooltipStyle -> "TextStyling"]& )], 
          RowBox[{
           TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " gravitational acceleration"}], 
              TooltipStyle -> "TextStyling"]& )], " ", 
           TemplateBox[{"\"l\"", "\"Length\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
              "TextStyling"]& )], " ", 
           TemplateBox[{"\"m\"", "\"Mass\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
              "TextStyling"]& )]}]]]}]}], ",", 
      RowBox[{
       TemplateBox[{"\"f\"", "\"Frequency\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " frequency"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox["1", 
        TemplateBox[{"\"T\"", "\"Period\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
           "TextStyling"]& )]]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"max\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        SqrtBox["2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"Cos", "[", 
             TemplateBox[{
               SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
                "TextStyling"]& )], "]"}]}], ")"}], " ", 
          TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " gravitational acceleration"}], 
             TooltipStyle -> "TextStyling"]& )], " ", 
          TemplateBox[{"\"l\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}]]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"PendulumSmallOscillations\"\>", 
      ",", "\<\"MomentOfInertia\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"T\"", "\"Period\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{"2", " ", "\[Pi]", " ", 
        SqrtBox[
         FractionBox[
          TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " moment of inertia"}], 
             TooltipStyle -> "TextStyling"]& )], 
          RowBox[{
           TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " gravitational acceleration"}], 
              TooltipStyle -> "TextStyling"]& )], " ", 
           TemplateBox[{"\"l\"", "\"Length\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
              "TextStyling"]& )], " ", 
           TemplateBox[{"\"m\"", "\"Mass\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
              "TextStyling"]& )]}]]]}]}], ",", 
      RowBox[{
       TemplateBox[{"\"f\"", "\"Frequency\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " frequency"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox["1", 
        TemplateBox[{"\"T\"", "\"Period\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " period"}], TooltipStyle -> 
           "TextStyling"]& )]]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"max\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        SqrtBox["2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{"(", 
           RowBox[{"1", "-", 
            RowBox[{"Cos", "[", 
             TemplateBox[{
               SubscriptBox["\"\[Theta]\"", "0"], "\"Angle\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
                "TextStyling"]& )], "]"}]}], ")"}], " ", 
          TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " gravitational acceleration"}], 
             TooltipStyle -> "TextStyling"]& )], " ", 
          TemplateBox[{"\"l\"", "\"Length\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " length"}], TooltipStyle -> 
             "TextStyling"]& )]}]]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"Torque\"\>", ",", "\<\"AngularAcceleration\"\>", 
      ",", "\<\"MomentOfInertia\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"\[Tau]\"", "\"Torque\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " torque"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     RowBox[{
      TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
         "TextStyling"]& )], " ", 
      TemplateBox[{"\"\[Alpha]\"", "\"AngularAcceleration\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular acceleration"}], 
         TooltipStyle -> "TextStyling"]& )]}]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"g\"", Italic, StripOnInput -> False], 
          "standard accelerations due to gravity on the surface of the earth",
           "\"StandardAccelerationOfGravity\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " multiplicative constant"}], 
          TooltipStyle -> "TextStyling"]& )]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}], ")"}], " ", 
       SqrtBox[
        RowBox[{"1", "+", 
         SuperscriptBox[
          TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " multiplicative constant"}], 
             TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>"}], "}"}], 
    "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          InterpretationBox["\[InvisibleSpace]", 1], 
          StyleBox["\"g\"", Italic, StripOnInput -> False], 
          "standard accelerations due to gravity on the surface of the earth",
           "\"StandardAccelerationOfGravity\""},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       RowBox[{"Sin", "[", 
        TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
           "TextStyling"]& )], "]"}]}], 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "+", 
       RowBox[{
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " gravitational acceleration"}], 
          TooltipStyle -> "TextStyling"]& )], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " multiplicative constant"}], 
          TooltipStyle -> "TextStyling"]& )]}], 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}], ")"}], " ", 
       SqrtBox[
        RowBox[{"1", "+", 
         SuperscriptBox[
          TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " multiplicative constant"}], 
             TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          TemplateBox[{
            InterpretationBox["\[InvisibleSpace]", 1], 
            StyleBox["\"g\"", Italic, StripOnInput -> False], 
            "standard accelerations due to gravity on the surface of the \
earth", "\"StandardAccelerationOfGravity\""},
           "Quantity"], ")"}], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " multiplicative constant"}], 
            TooltipStyle -> "TextStyling"]& )]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " moment of inertia"}], 
              TooltipStyle -> "TextStyling"]& )], "+", 
           RowBox[{
            TemplateBox[{"\"m\"", "\"Mass\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
               "TextStyling"]& )], " ", 
            SuperscriptBox[
             TemplateBox[{"\"r\"", "\"Radius\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                "TextStyling"]& )], "2"]}]}], ")"}], " ", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox[
            TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " multiplicative constant"}], 
               TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>"}], "}"}], "\[Rule]", 
    RowBox[{
     TemplateBox[{"\"a\"", "\"Acceleration\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
        "TextStyling"]& )], "\[Equal]", 
     FractionBox[
      RowBox[{
       TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " gravitational acceleration"}], 
          TooltipStyle -> "TextStyling"]& )], " ", 
       TemplateBox[{"\"m\"", "\"Mass\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       SuperscriptBox[
        TemplateBox[{"\"r\"", "\"Radius\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], " ", 
       RowBox[{"Sin", "[", 
        TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
           "TextStyling"]& )], "]"}]}], 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], "+", 
       RowBox[{
        TemplateBox[{"\"m\"", "\"Mass\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
           "TextStyling"]& )], " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}]]}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         RowBox[{"(", 
          TemplateBox[{
            InterpretationBox["\[InvisibleSpace]", 1], 
            StyleBox["\"g\"", Italic, StripOnInput -> False], 
            "standard accelerations due to gravity on the surface of the \
earth", "\"StandardAccelerationOfGravity\""},
           "Quantity"], ")"}], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         RowBox[{"Sin", "[", 
          TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
             "TextStyling"]& )], "]"}]}], 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"Slope\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " gravitational acceleration"}], 
            TooltipStyle -> "TextStyling"]& )], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " multiplicative constant"}], 
            TooltipStyle -> "TextStyling"]& )]}], 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " moment of inertia"}], 
              TooltipStyle -> "TextStyling"]& )], "+", 
           RowBox[{
            TemplateBox[{"\"m\"", "\"Mass\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
               "TextStyling"]& )], " ", 
            SuperscriptBox[
             TemplateBox[{"\"r\"", "\"Radius\""},
              "QuantityVariable",
              DisplayFunction->(TooltipBox[
                
                StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                 False], 
                RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
                "TextStyling"]& )], "2"]}]}], ")"}], " ", 
         SqrtBox[
          RowBox[{"1", "+", 
           SuperscriptBox[
            TemplateBox[{"\"s\"", "\"MultiplicativeConstants\""},
             "QuantityVariable",
             DisplayFunction->(TooltipBox[
               
               StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
                False], 
               RowBox[{"Quantity variable:", " multiplicative constant"}], 
               TooltipStyle -> "TextStyling"]& )], "2"]}]]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\<\"InclinedPlaneRolling\"\>", ",", "\<\"PureRolling\"\>", 
      ",", "\<\"SlopeAngle\"\>", ",", "\<\"MomentOfInertia\"\>", 
      ",", "\<\"GravitationalAcceleration\"\>", 
      ",", "\<\"SpeedDistance\"\>"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       TemplateBox[{"\"a\"", "\"Acceleration\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       FractionBox[
        RowBox[{
         TemplateBox[{"\"g\"", "\"GravitationalAcceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " gravitational acceleration"}], 
            TooltipStyle -> "TextStyling"]& )], " ", 
         TemplateBox[{"\"m\"", "\"Mass\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"r\"", "\"Radius\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
             "TextStyling"]& )], "2"], " ", 
         RowBox[{"Sin", "[", 
          TemplateBox[{"\"\[Theta]\"", "\"Angle\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " plane angle"}], TooltipStyle -> 
             "TextStyling"]& )], "]"}]}], 
        RowBox[{
         TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " moment of inertia"}], 
            TooltipStyle -> "TextStyling"]& )], "+", 
         RowBox[{
          TemplateBox[{"\"m\"", "\"Mass\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
             "TextStyling"]& )], " ", 
          SuperscriptBox[
           TemplateBox[{"\"r\"", "\"Radius\""},
            "QuantityVariable",
            DisplayFunction->(TooltipBox[
              
              StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
               False], 
              RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
              "TextStyling"]& )], "2"]}]}]]}], ",", 
      RowBox[{
       TemplateBox[{"\"d\"", "\"Distance\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " distance"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         FractionBox["1", "2"], " ", 
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         SuperscriptBox[
          TemplateBox[{"\"t\"", "\"Time\""},
           "QuantityVariable",
           DisplayFunction->(TooltipBox[
             
             StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
              False], 
             RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
             "TextStyling"]& )], "2"]}], "+", 
        RowBox[{
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{
           SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
            "TextStyling"]& )]}]}]}], ",", 
      RowBox[{
       TemplateBox[{
         SubscriptBox["\"v\"", "\"f\""], "\"Speed\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
          "TextStyling"]& )], "\[Equal]", 
       RowBox[{
        RowBox[{
         TemplateBox[{"\"a\"", "\"Acceleration\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " acceleration"}], TooltipStyle -> 
            "TextStyling"]& )], " ", 
         TemplateBox[{"\"t\"", "\"Time\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " time"}], TooltipStyle -> 
            "TextStyling"]& )]}], "+", 
        TemplateBox[{
          SubscriptBox["\"v\"", "\"i\""], "\"Speed\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " speed"}], TooltipStyle -> 
           "TextStyling"]& )]}]}]}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.875013603424636*^9, 3.8750136255839925`*^9}},
 CellLabel->"Out[71]//Shallow=",
 CellID->121220210,ExpressionUUID->"080f682b-ecf2-497b-87f5-167b6466ca98"]
}, Open  ]],

Cell["We can approximate her shape with a cylinder.", "Text",
 CellChangeTimes->{{3.875013636355253*^9, 3.87501364197216*^9}},
 CellID->99257808,ExpressionUUID->"f4aa1acc-67d1-4bc5-b01b-cd9c59abc15f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", "\"\<CylinderMomentOfInertia\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.87501364275836*^9, 3.8750136460176554`*^9}},
 CellLabel->"In[72]:=",
 CellID->202659295,ExpressionUUID->"ef85128f-bb73-4fcb-82a7-42bc2768d6fa"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    TemplateBox[{
      SubscriptBox["\"I\"", "\"\[DoubleVerticalBar]\""], 
      "\"MomentOfInertia\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
       "TextStyling"]& )], "\[Equal]", 
    RowBox[{
     FractionBox["1", "2"], " ", 
     TemplateBox[{"\"m\"", "\"Mass\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
        "TextStyling"]& )], " ", 
     SuperscriptBox[
      TemplateBox[{"\"r\"", "\"Radius\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
         "TextStyling"]& )], "2"]}]}], ",", 
   RowBox[{
    TemplateBox[{
      SubscriptBox["\"I\"", "\"\[UpTee]\""], "\"MomentOfInertia\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
       "TextStyling"]& )], "\[Equal]", 
    RowBox[{
     FractionBox["1", "12"], " ", 
     TemplateBox[{"\"m\"", "\"Mass\""},
      "QuantityVariable",
      DisplayFunction->(TooltipBox[
        StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
         False], 
        RowBox[{"Quantity variable:", " mass"}], TooltipStyle -> 
        "TextStyling"]& )], " ", 
     RowBox[{"(", 
      RowBox[{
       SuperscriptBox[
        TemplateBox[{"\"h\"", "\"Height\""},
         "QuantityVariable",
         DisplayFunction->(TooltipBox[
           
           StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
            False], 
           RowBox[{"Quantity variable:", " height"}], TooltipStyle -> 
           "TextStyling"]& )], "2"], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox[
         TemplateBox[{"\"r\"", "\"Radius\""},
          "QuantityVariable",
          DisplayFunction->(TooltipBox[
            
            StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
             False], 
            RowBox[{"Quantity variable:", " radius"}], TooltipStyle -> 
            "TextStyling"]& )], "2"]}]}], ")"}]}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.875013646259532*^9},
 CellLabel->"Out[72]=",
 CellID->313776923,ExpressionUUID->"75c08f27-84e1-4817-9444-0062bddbbafb"]
}, Open  ]],

Cell["Get the angular momentum formula again.", "Text",
 CellChangeTimes->{{3.875013647840279*^9, 3.875013667755796*^9}},
 CellID->96890158,ExpressionUUID->"75e803d6-38f8-49cc-afd9-d8df460fb9c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"FormulaData", ",", 
   RowBox[{"FormulaLookup", "[", "\"\<AngularMomentum\>\"", "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750136687993083`*^9, 3.875013685334427*^9}},
 CellLabel->"In[74]:=",
 CellID->13673942,ExpressionUUID->"a4ac175f-a3ad-40e0-9df6-afd509e98fcd"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"\<\"RigidBodyAngularMomentum\"\>", "\[Rule]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      TemplateBox[{"\"L\"", "\"AngularMomentum\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular momentum"}], TooltipStyle -> 
         "TextStyling"]& )], "\[Equal]", 
      RowBox[{
       TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
          "TextStyling"]& )], " ", 
       TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
          "TextStyling"]& )]}]}], ",", 
     RowBox[{
      TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
       "QuantityVariable",
       DisplayFunction->(TooltipBox[
         StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
          False], 
         RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
         "TextStyling"]& )], "\[Equal]", 
      RowBox[{
       RowBox[{"(", 
        TemplateBox[{
          RowBox[{"2", " ", "\[Pi]"}], 
          
          RowBox[{"\"rad\"", "\[InvisibleSpace]", "\"/\"", 
            "\[InvisibleSpace]", "\"rev\""}], "radians per revolution", 
          FractionBox["\"Radians\"", "\"Revolutions\""]},
         "Quantity"], ")"}], " ", 
       TemplateBox[{"\"n\"", "\"RevolutionRate\""},
        "QuantityVariable",
        DisplayFunction->(TooltipBox[
          
          StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
           False], 
          RowBox[{"Quantity variable:", " revolution rate"}], TooltipStyle -> 
          "TextStyling"]& )]}]}]}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.8750136767640076`*^9, 3.87501368640243*^9}},
 CellLabel->"Out[74]=",
 CellID->157010315,ExpressionUUID->"7bb0177f-668a-414d-8160-310795f203f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["beginningRadius", "2"], "\[Omega]"}], "==", 
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["endingRadius", "2"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "endingRadius"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750136895930586`*^9, 3.875013762990427*^9}},
 CellLabel->"In[76]:=",
 CellID->242817054,ExpressionUUID->"db833bc7-e958-440c-ba8e-b641eee2e2ce"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"endingRadius", "\[Rule]", 
     RowBox[{"-", 
      FractionBox["beginningRadius", 
       RowBox[{"2", " ", 
        SqrtBox["\[Omega]"]}]]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"endingRadius", "\[Rule]", 
     FractionBox["beginningRadius", 
      RowBox[{"2", " ", 
       SqrtBox["\[Omega]"]}]]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.8750137540160275`*^9, 3.8750137633534656`*^9}},
 CellLabel->"Out[76]=",
 CellID->140663523,ExpressionUUID->"82a55fe8-af31-49a0-af3e-0ca8598c948a"]
}, Open  ]],

Cell["Add the positivity domain constraint:", "Text",
 CellChangeTimes->{{3.8750137645578213`*^9, 3.87501377158959*^9}},
 CellID->49232728,ExpressionUUID->"ff8cc08b-9ca9-4ab4-a2c8-a8110f749a8e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["beginningRadius", "2"], "\[Omega]"}], "==", 
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["endingRadius", "2"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "endingRadius", ",", 
   TemplateBox[{},
    "PositiveReals"]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750136895930586`*^9, 3.8750137755731497`*^9}},
 CellLabel->"In[77]:=",
 CellID->770802812,ExpressionUUID->"6a1c0a88-33c8-47a2-a5aa-39184015463a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"endingRadius", "\[Rule]", 
    TemplateBox[{
      FractionBox[
       SqrtBox[
        FractionBox[
         SuperscriptBox["beginningRadius", "2"], "\[Omega]"]], "2"], 
      RowBox[{
        RowBox[{"\[Omega]", ">", "0"}], "&&", 
        RowBox[{"m", ">", "0"}], "&&", 
        RowBox[{"beginningRadius", ">", "0"}]}]},
     "ConditionalExpression"]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8750137760468817`*^9},
 CellLabel->"Out[77]=",
 CellID->59437092,ExpressionUUID->"b13f1441-a2c2-48ac-8196-8fd99b33a3fa"]
}, Open  ]],

Cell["Add assumptions:", "Text",
 CellChangeTimes->{{3.875013785669566*^9, 3.87501378796626*^9}},
 CellID->185706843,ExpressionUUID->"c4240af7-4e2e-4dd4-8fd1-0e4f3f82af0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["beginningRadius", "2"], "\[Omega]"}], "==", 
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["endingRadius", "2"], 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "endingRadius", ",", 
   TemplateBox[{},
    "PositiveReals"], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Omega]", ">", "0"}], ",", 
      RowBox[{"m", ">", "0"}], ",", 
      RowBox[{"beginningRadius", ">", "0"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8750136895930586`*^9, 3.875013801798558*^9}},
 CellLabel->"In[78]:=",
 CellID->77539144,ExpressionUUID->"490a1e14-f448-490b-aedb-9769ee9e81f0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"endingRadius", "\[Rule]", 
    FractionBox["beginningRadius", 
     RowBox[{"2", " ", 
      SqrtBox["\[Omega]"]}]]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.875013802141717*^9},
 CellLabel->"Out[78]=",
 CellID->833996464,ExpressionUUID->"41ffe85b-adb6-41c2-a578-66c70e384164"]
}, Open  ]],

Cell["Find the formula for rotational kinetic energy:", "Text",
 CellChangeTimes->{{3.8750139216964707`*^9, 3.8750139283687706`*^9}},
 CellID->1025067,ExpressionUUID->"832fec22-9a8b-4329-b8ba-df860086cc7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.875013889548395*^9, 3.8750139165525966`*^9}},
 CellLabel->"In[81]:=",
 CellID->341148264,ExpressionUUID->"2169bbec-bd12-4e10-855f-033b316276c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", "\<\"OddsRatio\"\>", 
   ",", "\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.875013895757025*^9, 3.8750139175570345`*^9}},
 CellLabel->"Out[81]=",
 CellID->348898918,ExpressionUUID->"e382fe4d-0f63-4e6b-ac0e-f5b432cddd08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"First", "[", 
   RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750139319717093`*^9, 3.8750139354651346`*^9}},
 CellLabel->"In[82]:=",
 CellID->120157429,ExpressionUUID->"a7f9c0ea-cb59-4827-9261-9698a16a385b"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"KineticEnergy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " kinetic energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
      "TextStyling"]& )], " ", 
   SuperscriptBox[
    TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.8750139365005093`*^9},
 CellLabel->"Out[82]=",
 CellID->334244294,ExpressionUUID->"14d9cda2-3abd-46a9-a00d-3ff88d34def4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"beginningRotationalKineticEnergy", "=", 
  RowBox[{
   FractionBox["1", "2"], 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["beginningRadius", "2"]}], ")"}], 
   SuperscriptBox["\[Omega]", "2"]}]}]], "Input",
 CellChangeTimes->{{3.8750139486244116`*^9, 3.8750139832497797`*^9}, {
   3.8750140380440254`*^9, 3.8750140509303246`*^9}, 3.8750141408618526`*^9},
 CellLabel->"In[96]:=",
 CellID->226793425,ExpressionUUID->"0988dc78-a35e-42b5-8c2c-4d7835c676f4"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  SuperscriptBox["beginningRadius", "2"], " ", "m", " ", 
  SuperscriptBox["\[Omega]", "2"]}]], "Output",
 CellChangeTimes->{3.875014141147526*^9},
 CellLabel->"Out[96]=",
 CellID->80966109,ExpressionUUID->"2aa62d3b-4e87-44d6-bdf5-bf0b74939884"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"endingRotationalKineticEnergy", "=", 
  RowBox[{
   FractionBox["1", "2"], 
   RowBox[{"(", 
    RowBox[{
     FractionBox["1", "2"], "m", " ", 
     SuperscriptBox["endingRadius", "2"]}], ")"}], 
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}]], "Input",
 CellChangeTimes->{{3.875013984949235*^9, 3.8750140114182415`*^9}, 
   3.8750140572204485`*^9, {3.8750141275508327`*^9, 3.875014144421899*^9}},
 CellLabel->"In[97]:=",
 CellID->32710441,ExpressionUUID->"d95767c3-d245-437c-a986-8c4a479a914b"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["endingRadius", "2"], " ", "m", " ", 
  SuperscriptBox["\[Omega]", "2"]}]], "Output",
 CellChangeTimes->{3.875014144744985*^9},
 CellLabel->"Out[97]=",
 CellID->527993259,ExpressionUUID->"ce7e4a08-4b48-4598-9b67-64ff56538920"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"endingRotationalKineticEnergy", "/.", 
  RowBox[{"First", "[", 
   RowBox[{"Solve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       FractionBox["1", "2"], "m", " ", 
       SuperscriptBox["beginningRadius", "2"], "\[Omega]"}], "==", 
      RowBox[{
       FractionBox["1", "2"], "m", " ", 
       SuperscriptBox["endingRadius", "2"], 
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "endingRadius", ",", 
     TemplateBox[{},
      "PositiveReals"], ",", 
     RowBox[{"Assumptions", "->", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\[Omega]", ">", "0"}], ",", 
        RowBox[{"m", ">", "0"}], ",", 
        RowBox[{"beginningRadius", ">", "0"}]}], "}"}]}]}], "]"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8750140132217093`*^9, 3.875014022867872*^9}, {
  3.875014117084417*^9, 3.8750141174850407`*^9}},
 CellLabel->"In[95]:=",
 CellID->74349141,ExpressionUUID->"445c8a83-e2d4-4bd4-8a66-f06bb2e9f731"],

Cell[BoxData[
 RowBox[{
  FractionBox["1", "4"], " ", 
  SuperscriptBox["beginningRadius", "2"], " ", "m", " ", 
  "\[Omega]"}]], "Output",
 CellChangeTimes->{
  3.8750140232343173`*^9, 3.875014083636981*^9, {3.875014118449164*^9, 
   3.8750141319705424`*^9}},
 CellLabel->"Out[95]=",
 CellID->102985579,ExpressionUUID->"ebb18df3-5deb-44ca-8f28-7fe1ae2dc9b4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 FractionBox[
  RowBox[{"endingRotationalKineticEnergy", "/.", 
   RowBox[{"First", "[", 
    RowBox[{"Solve", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        FractionBox["1", "2"], "m", " ", 
        SuperscriptBox["beginningRadius", "2"], "\[Omega]"}], "==", 
       RowBox[{
        FractionBox["1", "2"], "m", " ", 
        SuperscriptBox["endingRadius", "2"], 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"2", "\[Omega]"}], ")"}], "2"]}]}], ",", "endingRadius", 
      ",", 
      TemplateBox[{},
       "PositiveReals"], ",", 
      RowBox[{"Assumptions", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\[Omega]", ">", "0"}], ",", 
         RowBox[{"m", ">", "0"}], ",", 
         RowBox[{"beginningRadius", ">", "0"}]}], "}"}]}]}], "]"}], "]"}]}], 
  "beginningRotationalKineticEnergy"]], "Input",
 CellChangeTimes->{{3.8750140132217093`*^9, 3.875014022867872*^9}, {
  3.875014117084417*^9, 3.8750141174850407`*^9}, {3.8750141490673637`*^9, 
  3.8750141606823564`*^9}},
 CellLabel->"In[98]:=",
 CellID->339807828,ExpressionUUID->"18539e6b-6439-452c-bd23-96a9b7f70f69"],

Cell[BoxData[
 FractionBox["1", "\[Omega]"]], "Output",
 CellChangeTimes->{3.8750141611395965`*^9},
 CellLabel->"Out[98]=",
 CellID->104528256,ExpressionUUID->"a19aba68-bbb6-4474-b994-61b7df3889ab"]
}, Open  ]],

Cell["The ratio ", "Text",
 CellChangeTimes->{{3.8750140275222173`*^9, 3.8750140321778965`*^9}},
 CellID->86648670,ExpressionUUID->"027ac61b-4e15-4fe1-97ca-cab7b5288298"]
}, Closed]],

Cell[CellGroupData[{

Cell["Problem #7", "Section",
 CellChangeTimes->{{3.8750134612863703`*^9, 3.8750134648080893`*^9}, {
  3.875014511273945*^9, 3.8750145115862675`*^9}},
 CellID->311728381,ExpressionUUID->"c97a9d6d-8425-41f2-a99c-387d20e4599a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
7wvUEWVu+nRGmrDAgsYy7W+GC5NeaDzXZtMa0rbHlbOn2DmFDnrKpJOhDSIb
mWikHiDOXiWZA7fCdfoIIact2JhEsgwXzQ2xyp/pyxFOutfDo0aOra7GXrfG
qcI4bb5GCgb+9egJJMRKvaJ97vX0ZO9w3FPXudkHHKq62PpViFJ89ocHmxXk
DgQg097ImcRAY+LO2+/FtYfG066qEC1nLOHh1Qo53q6hqHsxvIc3Of4t/01a
DVaCz+e1+xuTNp9BPon8yKlw0F2rvs/jMxfOH/NtNq5RN6S0Chr6s/elMVHr
SaY4+F6YzNmpN9eral5K6OTx2d/yXqc1DEJ8Tq27oYqZV6s4soR9WpAJ6bBd
AQuz+ZOjeY+2rJU3pTQKl5W+hRirat7Om04NxhMtSdqnZ2wEYhbY6xP3+dZw
xG2nHVE85VGPVVdpEkCyD439or8KZVLusldjp+MngUdj1VAPrjsSMt2syZ/d
oSYqsFsQhSesYgc9eVH2IaqPEVGYfWA1AQtp0kAF1v+9qpvui4dcTgvjmW8z
Mn6PFT7aQTzhVj1lv7xmbyNNA/JnQenIEVRF7ZuIpbC/5L9+VzOIU9uJajeJ
AJLXHGisQTqbIDIyTrGjvqKcgR+itFJMQJbsQ5oQoG/JN7aTjjA+wQ0eKfK8
51c8LGEWkt6A9fqKzrWI6am2/vin3mV4it2XeFVLyTROdCnLSKwFadfNt8Ju
hiMlr0dB4m0AMwWCrtuTwgV3guJZz/qfokKa3A2JRo4VOB5Vmroi21H0CKoX
/ZewTHwnAPVEn1cnmr0R6gTU/+I0ccuFOLEv4nNK7LYRRcM3AqJmqtjZB37/
yu70BG2vcd5N2GfzcSr24DX424UK9BvXS8zIPvANHMe1TsqmBnAHkQ8Q997J
mjJQbq2ffTjutY/spmD3l23oRgINvrm25cqLH+JfcCbYMsYgyNoHwVBom0KQ
CwEUdlJLxhdWT2GIqKRwJLAeVXM4leQDG454f5VYY+p4aaqla18uMKqZ2QfU
EX95o+qfbySmxoeSrTTkJXdezRjrJ6XZArcv5pyygnXU38JHd4edUVG5mCJt
7hrXZpdmvJbqJzGcM5qdyikddcgTDUVQf4gpUf/mW8Gf5+H98KIdDM+GWkN8
00asddd0simtd/BVa3IkBdaNMzLsvJKmhNLcF5YE5g+v71PMs8vH9DUU5P9A
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
2b0SBXJ6cylXzaztvaLgZtlfOX/xeabkXQOTzDzyKaPz7onZH1IjvSgBKTRT
IlFF38yamicYwVGbgNqFUqWBA+dbiImW2aveGX3G5/Xl0K+cNnvIiE2FlcvZ
jvoBUa4fGZTbFoc2qatoG565ZvM4RvJimzm1ZRUw7lqd0F2vorHP+Do9vVNY
1YGyQGujI9bOoUmwtpEdvJIE2w+hwVzqOQwT6BWWo6GisdfY+kko1jkdTCE4
Bb9LIl812a2jrqR6+NGHMUFqEHB2i6qSitaOE9fu+BR9n+ENMrv+jjDXt7Dz
oAXEZmRnJb1wuXPH59PsN7mgwKpwMtwnHvW49TSjgzaSa4HoApmj26N5/neu
Ht2uoaK256SVbWDJcHUkYl3qpPVbjCxveeZhRHe46rr0ZcriBPicr2EXN2ho
b9XdunXbRh0NBYKymv5lietaBouoJobnPV9lf0iL9HYLTPI6o7SGBPeyT9a3
/NmdjqPkRZ/n6/RE8NqCjHXNwme1HtVLTA0ZqrCSnLV+ECNYwJNi4OiuVUY1
mC7le8JlozvvZNioPV5K+5/6mjWEPxR3nqWW9jUzjNWJf6yRJ2489yyjWyQS
9tu7OpJrH7m2WzddiMMvd/TdvT8dswsiyWSfiLTMtFAXqwuXyfmzXaes9ZRt
yOZ2faRamV1xpEckRHo9vnzW6nmq4LrfyZHigHuWJ/VUSTr6xjfvhwpWbKG+
Ij9rU3NHv/j05AhfdzeGu4X2WvmtBy49DqueM9YzZbAFTkuU+WZVnR1bt27f
vGmjqqKCvPo+M5e8XiwnIIt9LcV4je0nI4pbUZ0zjrR1j1g8oGX2tCY9v3Fu
vzZJQ8fQ/KZzRvs8vB9GtCP642yVxhw+8Mav78WB4u6+454muGoYs3dkUi2o
L932gME5eKDydmMU4q4BYCqhECz35ZslursYzai5NQFm2zQPeJXItAV89OOj
I+dpkR63bj70jM0orCjPS2LcMzG6kfhZ+PUFK97vCq+z+HVyyeyjMv8WeOP9
LTU1bX1zT61AY30ttTVtg/jZE8QcHEQ23A22V1dUNnQzZe1nPquvpeZTfduA
6Jpr1tDfozNEyGV2NtS2/T1bZ2WrlVSgcfjxdS19s4oZ62ut/VT7dUD08pGx
oYGx5etXiPWjpaGlZxT1CWjNhz9fUwX/ckL09aGBmd/ljXyrr/0yMFtkPFbf
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
TGazPIykcgnWMLZrFWZ1XjyvVU9JTk5OK28nOPX5kdc8r1x0Cij4qvihkVo8
xpYb7a8zwmie3l40H++AlOKW76SJl3pSUKjxl9pmyqzLA/0txcmhgYHXaKHJ
5c3NZbx/Xz1xNLKkZmwnx/GcO0j2/SdXVdbH/EhfzysXnMPyhLcr5GTs6KM5
loMu81yMGi1y0CdHjSbLQIkyM3SMFK7R0s65k7dGc/sq3TcvP51Y+5PupE0Z
rVn2/5y4J3jKDfH18fl1C81uvB4sZFz2t+qiNBdDzbm73OP9Qp7w6wLrbfAO
naXnyxj8JrG2JMdv3wJ1lbWX06ro/ENOtL1Jslk6a8fZG09rpXY4Ee3PvLbq
GUe94o8sZ7c9PLNimUv2N4Joe1ecd+PcpllK6iaXinmXG9y++vDd2rP1D3rH
pFU297fXV5Q9CzSdrmbill9eVlZe/rZV0I6wu567Gy46GFjVK9h4zpmVG09l
/0sM9La8eZx8ZpWaznGvQP/b1U8uGUyn7E5tZ3+tKUp1NdRW20WLD4jKa+Ql
ua82ZAdV36NopFlKs9vpdE8wgIhoz3Naa2AaVjNShmRHHx31FeVP/c20VDf7
5pfx0vniTbNwaBK3/130oY22YS+FA+r/e59gtdEs6gX/L5Kk8lfXWuCxfYH+
yZjKf1lET2Oen0tY4pXN5qGN/OpMrynKuLRZQ3Wnx2vBuYN/LHx2z5upa/9M
ePSIrgJPwxVGgdU9giOb77BW3+7huIYgsuqCNqtN0zuQLDwbEr0Pr/kW9vcX
nvlLaaaeY5lw1jnxJd4z4oNYtvCjj1kbzgZ6Bz35LF5yhFnZln1654n7Tfxl
2O1PHNf8dTjsNUtYSEgOt0SGd9aWZLnt1Bp+DsD35hTbf2g1g+PBmG9CTY1d
nku2aZyO+sry4mummrM3XX3MW39ZeU3z4AaE5+7tZwN8gx40MXl/1gVsp25y
Hh5iRlKAJTbB7Wt5VXDLbiVF38o7yDuluuiKgQrFOr6Nf1hJaxzJjkvsJg+j
5sahjQdiq4S3shhvb1pvMw18JTFfYwjzdcyh7fvD3gp+zmXU3jiy0SLwRS//
2uDb+/KSZLtl2vr2aSW8Ldb9K61sjzdb+ppeFySeXkWdZ0ULoN2rKXbVV9bZ
HS9l/X0tb8uLg/ZqzTH0KOAfkbLy0uL0q9tmqW6P45d3foEvvHfJcAZlv0d8
YMiDZmlpkNGUDci7U0peDUmzjrwUkaeErImQcojJD5nsZlmAvHIJ1ja2axV2
faLFAvUFZmdDMoo/9g4Q/9aVpHsYzR6a8KvIoSFp9hXPDXZtss3yv81TBNfD
RO8Lr61rXHI7pSad5KSgSOMvvc0kr8sD3eV+RotNYvhXtX2vgo119ewed7Gq
Yp1CH38c28lxXOcOqX52VeV01j/P8typNTzHWV7Gjjqaih90Oedi1OhJV6O/
k2SgRJkZGEuNJiuxk7ZGE02JVodoL9HrIdfDs3+pq6wPq+Ffw3KJ1nBjisHJ
XJF8YxW56M+g7owZ6kHqr/ZZT1nmWz78p+9GyoKL+YONIZddE+wc9oHk3gzR
W3RuCWWHx8uhC0LOuwDDuWu8hTOVeVewd2z15m+mvWYMEN2lvqdo5Z0idw36
Mi1nUo6IjUjpfey4dPYqj+qh5LLqgwzV14S8EVyP9+cena2x9MCNFs5A3+en
dzOrhBfPjJKL+qpaB0LefB9KsOc6iqFr+eCfzKf2C5RmDU19/d563Zgy78KD
4SZP/sir7nSr2Wpm4p2wrBfe6+dvDvg4shTx6brJvKXOZYJwW2pSv7ekmM9R
23blxfCxYLz23UBR2y+IPvhJZT13WkwZjD6GMlNrKProKnReRlkdVDW4NJfT
cG2zhpHXG9J0k+Ny6n02qWpQD2a0C9b80CfkKa9uMnklh6KyxKOYKcioJN/Q
d+KHnR99TFffHP5GesnpKTinp6xmQqsWLEV8jjLWmntyeCSXtMMtFbvcfeQ5
AF33LJf9EzccDBCdt6+4l5DcUelLPULVMZU68kp13ibfd4PJZL/yXjdL/5Iw
I2UXYAnMjGNztOYeTGnkcJmfC+5kvuXfxmfKrnEkOy62m1zWK891M/f4j3Q1
cYmWiF3UTU6FUqM0RpXPBs3NUSI9U9+bY3bN5LXSwts9/JFXc9YOT/eWYiLZ
0nP/uI6GzrEbvKsI5oend3Kq2kk2MnpsAK+qLqMMRh8Dwum0S1QX7gh+Ly0N
cjNW7jgNqdVQXtZJLUVyUiKtiRgYdYjlbVdOsyy7co3pWoXb33D3ilN0sdi9
1v6XHqKZKfvQyC4eiuQGqz7SmEo9cmNwVhmj7NIyFdWdnlJbM1knBdmNv8w2
U1pdJr7d2KvJyyXhNdN3epwphXoseeRexJhOjiRZIefcIekXVFUuu+rqcrHy
IztjRx1Nkj0d/TN552LU6MlZo0lOrOJlRvEaLbvETsYaTbQlnbvw9JdMmfvT
9beWZ2dVCq/M2f3f4g7M0NkdLxKC8q8htZe6VA435g3BhmoLLg+Vey7RHGGi
udg8WfgKjN4yf99U0jvsXdkndFR0Loo8KqnnsYMexez20BJEV/HF1dT1p2/G
Xb6S3ShWkySvyghGztE5KitO5Y3cAWA+sdfl/YY+IGh5js1W3TVYW0cwSl2X
qep7lw4XyA9+hpTVZ54M719LeeaDwYE+nD560oHpvKD436GlxxN9cPufnJ6v
smZkE4JkVLivVNG2T+siSSr7je+G6SobRJtWLrPwzALR6IN/j0s0+ngfOBx9
MDKOzdWcZ1c4ktPMvDMLdE1vkKZbFs4bv00aSlon7/Dyoe+hr88zwR2Qbl6L
rKy68Xwxix/se8XWjMppeSWH1Vqamf16MKeZLYkHtdV2pw61WYpHH6JHpL+K
tk5dY7mx/bWYtOc135gEo6uL7IGtMqIPtU0uwzGLIFfnn30ujOnkFWBx/AZ/
tsRVvewaRxZ9iO5mz6OzeioLLxeI9uuySq+u0NQ6kiuly5H5wH4hdcHgLgzt
ZuVlA5W/Le8JV65Y9DHObOnJOamrui5sdPGQkk550YesNAzIy1hFrlUkqqHc
rJNeimSnhOxaReQQy93uhCqX4tcqHR1l/pbHk+pGV6JRmTmR4qFAbrArvdZO
VzVKHBm10f3h5Vu6tGENsk8KMht/2W2mlLrM5dT5bFDRsxh8TgLRl2auobrb
T/SewBhOjlKzQu65Q9IvqKqS5UfeWXX0eVOBgz4g71yMGj05azRZ9CGawjHU
aNkldhLWaF7W+binS70NCBKYH5/Gejicdnb1CAiNPLtZQ8csTqTk8CvF7NWe
w/e1BZVi/qVHI0eUftdaV2NHHP/uTHeOl3cR6RMyOXUh2zSUdfa5hkcJhnbz
Pvzh3V4Jr0QWYVSH7NSimPiObgElr8pYn0K3qigv3nUxYmhtURGh/p7et18I
+vL4LQ/lyI3RLQKvuBqorQkaumYXFtdVpx+NnK36G5/EuDvanbvicS088txm
dYpV3PBKxhN9sBrDt6moGLqWid6EZ9UGbFRR3eHxmiSpfXcsNTU0LXNFHyrF
vx2hrkj0weV8DtyqOn3erqthwznDy2mva4kVpOmWqf/dtQ2qSosO3ensKwrw
eShMFNH36JSuEpXXYDLbkj1DJOZXyC85fY1PY9wdzpxz9b4WFuFgOFNN2DMu
XPl4og9eYa6562Kqr6U+TUl1mtpfhmcza8cRfZDFdAoVYBH89k1yE7JrnALR
B6chdLuG8jKfctFLEs5bv03TVVYPF+yRPeI0BW1Tpeq7ivYE85vZjaraqzyF
K1cs+hhntvAvaShmd8h6PMSzS170QZaGwTXIyFjFrlXEqqECWSe9FMlOidxr
FQW2O6HKpeC1ita6Iy6nzTdozbWKrR9VNKRdq4yzeChw5dZ322KGxswjD/oG
5JJ9UpDR+MtrM6XWZXbltc26K93eCtbX/8ZnveaGsDdiWaXwyVF6Vsg9d0j6
BVVVavQh86w6vuhD9rkYNXpy1mhFog/Fa7ScEjsJazSXWejvI3a7AMg8v7ZD
V3ffzTfCviT+Re9Yow+i7+kZPco2t8o++m3vgAryqUNEa/yeGcp6o95lNuo3
Xx96n7E1XaS98/pbsZ+JXpVx+189KfzKakvYQ1FeMzLxWXxFgpbH+ubokYSy
20mip8Jn++xleyPf9Qg3mnF4xvijD0bV4xI6we+/U1PZ4PRMNJ39b33Wq6qa
+dWRJJWZdWKOhvrBTJHhvXKjj3fD7QPRFruHornQofSHvCma33S8816vqkE9
nHLfLyR/uL4x7tvNV1fR98hN8g1+I3HpKqfkdJb77Zg93ybqjXB13WlHZpFE
H8LDTXLPUOyIfP/6sYm/OnZX46uHyT6Wy2fqGAaObmcHiTaSzKpHhcK7SjJb
XUUKsCipjxnpkV3jSHZcdDeJ5lizGSp/ezwTTQb/qbnTVTZF1UkUTeJbtCmF
usi5XPS2G7vac53q7I3+wmUnFn3IyRbBJc2eu/IfPDjB6ENOxip4rSJWDeVn
ndRSJCclkk2E4GuRQyx/uxOqXApeq8wz9KvtY9cnHFxA3RlTI9bKjuVaRU7x
kJ8bvMbw5FwNilhjSIYt86Qgq/GX02ZKf2QQqzbmzAHLow4+UeE+Zw4d8c9p
HHX6U/jkyDeOc4ekX1BVf2z0QXLQ5Z6LUaMnZ40mObGKpVDxGi2nxE7GGk20
f2jAOwYVQexSV/sncPjpfD1JB/lBfTurKj5G2OLJjz54tazCc43WQrv4UPck
mW/CYDWE71BXPxQt+sYZgl78qGqoEDI/3vbwzm/ndD5wXK678kKJSDNI9GUf
oVIsY/gVm+i6fS3oHZvzIWiHho5RtOjbfNhtzwvK/xsYZ/TBH1JLVTW8PrQX
RE/qAcH9FsbLGwnP+hWKPjJt5qiZpgi649pu0WLec7icumuGlL8OJIs26l33
T+ioGFwTzOqQllSiNeXQbNVFV5+O3B0QjIOliEQflZcN1HaMtA+s4kvLhmad
c96H7qRSjJPEnjDRVvzwxXA+sWUdKEn8i1sNJa3VO9yeigT7nbmn5iupLllh
HvlK8spVVskRzFPQmGM48jzejtvmVH5zyqqIvc5roiUPN0l6xY5IW6Lt2dSR
0Pl7c4zJrEP3pd9g6btnTdUxiRV0oXbd8g6qH5xSIesSV24BFielfeOP9ZVZ
40h2XGw3WbVBhhTNE7dEb9vwe5m1Da68knLVxXkbYDhzxsEM0ZMwI/foHNUt
l4XlYYLRh5xs+TXRh9yMHc+1ivysk1KK5KZEsokQ/Eyse0vedidUuRS7Vhl8
+jGXaL1ttWD+JtpbkXo0lmsVOcVDgdzgpeDQHJWR8RWCFbSVPq2STDdX5klB
ZuMvu82Ueq3CfhPofKOew2V2/9vFJLs9ouDJUWpWyD13SMmBn19Vf0D0ocBB
l3cuRo2enDWa5MQqlsIx1GjZJXZy1mgCsYdCOJtU1MwjmgZj9W+5zutmzzO+
Tu976kcTHkHW0/NLZq0Y7IoaEHT7blKb7/pQbIge61PkTg0NA8tkeSFfT+HV
dbprrr4cuoIlep572YUL7073N2adMzv3RPhEiL4qzw2aKyxTmoe2y2W/vLKc
IrzY7n8dEii4yOx87r6euubayAS8nqeep+PeC2ed37fRUhO9VSLEKHbRV1sZ
8HK4uNb7bKSstHsoLK7V/punq+5MaBbuBtF632X9bHWL61//K/AJftzPH11/
ZfnsdbKu0/r5L2AVDoBhvwym5Qham/bCi2vmGMXWDo9ObIrdp7PuRJbwtoDU
pHKZb/22Uv/eG98y1Po2pR9fpCoSfRCtUSYzhm+LEb3PvbbM1Zx7QjhQlOgp
ubyOuvNK6fD4w85n3s5h7/gLsqp8t2jPWXq+ZCxjE/vf0NaqKi07mi3a00j0
5h6bq6QtUjxEyCo5vGz33aQ6d/gdE8S3zAvrdCi7kul9j3xoxUzph1sa/hGZ
s85HWIS+JexdbBQ+PEPzOz3efLMnyShmdpnbytmr+K09l/02lDZ4yhXO5d/m
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
Mx63CwAAAAB/rv8BceqwGA==
    "], {{0, 182.22722159730034`}, {799.4000749906262, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{96.012, 96.012},
    SmoothingQuality->"High"],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{799.4000749906262, 182.22722159730034`},
  PlotRange->{{0, 799.4000749906262}, {0, 182.22722159730034`}}]], "Input",
 CellID->131925393,ExpressionUUID->"88f8a6df-2995-4df9-b373-1f428c765a58"],

Cell["\<\
Find the formula for rotational kinetic energy by looking up formulas for \
rotation:\
\>", "Text",
 CellChangeTimes->{{3.87501451787031*^9, 3.8750145308827558`*^9}, {
  3.8750145617140484`*^9, 3.8750145693633537`*^9}},
 CellID->22559742,ExpressionUUID->"09adc2f2-a10a-4f60-b41c-f2d92a75a680"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8750145332936*^9, 3.875014554618638*^9}},
 CellLabel->"In[99]:=",
 CellID->64030437,ExpressionUUID->"1552a22c-1b41-467a-80c1-19e059263cbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", "\<\"OddsRatio\"\>", 
   ",", "\<\"RotationalKineticEnergy\"\>", ",", "\<\"RotationalPower\"\>", 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>"}],
     "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalForce\"\>", ",", "\<\"RotationSpeed\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"PureLiquid\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"\<\"SpecificRotation\"\>", ",", "\<\"Solution\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"AngularToLinearVelocity\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Radius\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationRate\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"Diameter\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"CentripetalAcceleration\"\>", ",", "\<\"RotationSpeed\"\>", 
     ",", "\<\"OrbitDistance\"\>"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.875014571437372*^9},
 CellLabel->"Out[99]=",
 CellID->27847239,ExpressionUUID->"a0247553-5b0f-4ffa-b392-da34685db6b0"]
}, Open  ]],

Cell["The first one is the right one:", "Text",
 CellChangeTimes->{{3.8750145731554003`*^9, 3.875014580771331*^9}},
 CellID->142301700,ExpressionUUID->"25ff0de3-481f-4dc3-90bc-5fb09d1b37c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FormulaData", "[", 
  RowBox[{"First", "[", 
   RowBox[{"FormulaLookup", "[", "\"\<Rotation\>\"", "]"}], "]"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8750145814958005`*^9, 3.87501458641264*^9}},
 CellLabel->"In[100]:=",
 CellID->64841848,ExpressionUUID->"9cfc09ab-5f7c-4a5c-8404-4b418c01b3cb"],

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"K\"", "\"KineticEnergy\""},
   "QuantityVariable",
   DisplayFunction->(TooltipBox[
     StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
     RowBox[{"Quantity variable:", " kinetic energy"}], TooltipStyle -> 
     "TextStyling"]& )], "\[Equal]", 
  RowBox[{
   FractionBox["1", "2"], " ", 
   TemplateBox[{"\"I\"", "\"MomentOfInertia\""},
    "QuantityVariable",
    DisplayFunction->(TooltipBox[
      StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> False], 
      RowBox[{"Quantity variable:", " moment of inertia"}], TooltipStyle -> 
      "TextStyling"]& )], " ", 
   SuperscriptBox[
    TemplateBox[{"\"\[Omega]\"", "\"AngularVelocity\""},
     "QuantityVariable",
     DisplayFunction->(TooltipBox[
       StyleBox[#, FontColor -> GrayLevel[0.4], ShowStringCharacters -> 
        False], 
       RowBox[{"Quantity variable:", " angular velocity"}], TooltipStyle -> 
       "TextStyling"]& )], "2"]}]}]], "Output",
 CellChangeTimes->{3.8750145875514393`*^9},
 CellLabel->"Out[100]=",
 CellID->389687925,ExpressionUUID->"d01c2a2e-c5b9-469f-939f-cf51351222cb"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1440., 747.75},
WindowMargins->{{-6, Automatic}, {Automatic, -6}},
TaggingRules->{
 "ResourceType" -> "ComputationalEssay", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> <||>, "CreationTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "UpdatedTimestamp" -> 
  3.8572120809455172`17.338848507479508*^9, "CompatibilityTest" -> 
  HoldComplete[
    BinaryDeserialize[
     ByteArray[{56, 67, 58, 120, 156, 133, 143, 205, 78, 131, 64, 20, 133, 
      163, 173, 110, 116, 213, 165, 79, 224, 6, 70, 11, 105, 138, 59, 197, 
      198, 184, 193, 70, 92, 184, 100, 24, 238, 164, 83, 7, 46, 153, 123, 41, 
      229, 237, 29, 140, 186, 193, 196, 245, 249, 249, 206, 209, 115, 90, 164,
       88, 183, 216, 53, 213, 230, 216, 58, 32, 50, 216, 232, 19, 58, 203, 0, 
      42, 202, 175, 95, 129, 176, 115, 10, 242, 129, 24, 234, 212, 26, 104, 
      184, 120, 4, 109, 26, 195, 222, 153, 33, 67, 137, 248, 81, 232, 83, 154,
       229, 192, 62, 25, 252, 25, 217, 58, 115, 144, 12, 133, 69, 89, 253, 24,
       222, 134, 22, 124, 238, 242, 222, 50, 184, 70, 178, 57, 0, 229, 87, 
      227, 156, 142, 229, 216, 46, 237, 134, 72, 14, 191, 133, 139, 169, 70, 
      243, 172, 179, 214, 99, 207, 159, 253, 11, 55, 14, 184, 72, 45, 118, 
      213, 75, 185, 7, 197, 249, 251, 142, 185, 165, 59, 33, 250, 190, 15, 
      123, 180, 218, 201, 90, 141, 122, 168, 176, 22, 88, 238, 133, 251, 110, 
      167, 175, 185, 98, 138, 72, 177, 97, 127, 65, 248, 215, 217, 195, 86, 
      178, 218, 133, 253, 81, 123, 208, 236, 9, 38, 188, 205, 191, 188, 106, 
      149, 68, 55, 75, 121, 27, 64, 164, 203, 32, 6, 41, 131, 36, 134, 117, 
      160, 228, 58, 74, 226, 74, 173, 202, 104, 249, 9, 89, 192, 149, 140}]]],
   "ToolsOpen" -> True, "StatusMessage" -> "", "TryRealOnly" -> False},
CreateCellID->True,
FrontEndVersion->"13.1 for Microsoft Windows (64-bit) (June 16, 2022)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
       CellTags -> {"MainDockedCell"}, CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{39, 5}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    AutoQuoteCharacters -> {}], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.458824, 0.458824, 0.458824]], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[
               0.6274509803921569, 0.6274509803921569, 0.6274509803921569, 
                1.]]}, StripOnInput -> False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.09090909090909091], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 10.}], 
              Thickness[0.04581818255511197], 
              RGBColor[
              0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
               1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZiAAOF25VKDkD6QeAOUQckvgKHjhSIThCYoQii
HbYVy4HVqbApgOgVx06DaYaoJzIgumJfPMScpbMlQHQAj5MyiF7wXl0EmX+g
KIMfmZ9gfZ8NWb9CTD8Divm/6r7YI9l/wP3hK3sk98H4MPfD+A1TnQWR9TOc
/86JbD6D4gZmZPsZmg78skdyH4Pous/2SO6H8WH+g/Fh/ofph4UP3Hxo+MHt
h4YvzH0o4Q8Ayr1fpA==
               "]]}, {
              FaceForm[
               RGBColor[
               0.5019607843137255, 0.5019607843137255, 0.5019607843137255, 
                1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQzcDw4OydWhEHBoYJO6YlyIBoE+cbwkj8CybOHiB+
xY5p00D8BefunBUC0g8CDdhkgTQHk0A4iF8j97cYxP9w7o4kiL+kJZlBDomv
EmiwFpm/RPZvpDyQtjF1DgXxzzQnP5NHMv/cQUNNBSDNklHmBrJ/20HDeBD/
SHrZNRB/1UHDKhAf5n4Yf8rZOxqiSPyQs3d2iCLpfzNzpb4YkvktaWXLxJDs
v3DmzkMxJPfB+DD3w/gFgQZMckj6PV6fLJVFMh8WPgqzVu4C2e/SmjwDFH4J
s1ZqiSKFL2r4AwBR8n/j
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQzcBQ8J9fV8KBgeFBne5FTgcEn6FB15MdSAfMWXlO
AAsfpr5j9soJQkD6x5PJjVxAWsHUeQqIv8Pr13duEH3uznQQv2BDQgMvEn/H
+gQ5fiT+lq7kGAEkvkG4gZAgEj9g77QNyPw1e6YpCiPx34QavAbx3zAKTAPx
OfZMmyQCpPecu9MH4p/ZPU1SFEirmDp3g/gTdk9bAOIfOHenFcRveXdSTwxI
x2SUNYD4d9qTD4H4LGbOk0HuilD8yyKOxF/x9qQsKJw6jJ21QOoW7Jz2RxJk
PoPADBD/y5uTm0D8KWllTSD+H8W/k0WR+DD/wOWV/woj82HhAeN31OiK8yPx
VzyeXAoKzwRj5xawvPjxD6DwPjJzZacYUnygxi8A+72aOA==
                "]}]}, {
              FaceForm[
               RGBColor[1., 1., 1., 1.]]}, StripOnInput -> False]}, 
           ImageSize -> {11., 11.}, PlotRange -> {{0., 11.}, {0., 11.}}, 
           AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
           "\"Click for more information\""}, "PrettyTooltipTemplate"], 
         ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ParentCell[
              EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ParentCell[
                EvaluationCell[]], {
               TaggingRules, "AttachedMoreInfoTag"}] === #], CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ParentCell[
                EvaluationCell[]], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ParentCell[
                 EvaluationCell[]], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        ButtonBox[
         TemplateBox[{
           TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
          "PrettyTooltipTemplate"], ButtonFunction :> (NotebookDelete[
            CurrentValue[
             ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}]]; If[
            And[
             MatchQ[
              CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}], 
              Blank[CellObject]], CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] === #],
             CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             Inherited; CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = 
             Inherited; Null, CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoTag"}] = #; 
            CurrentValue[
               ReleaseHold[#3], {TaggingRules, "AttachedMoreInfoCell"}] = 
             MathLink`CallFrontEnd[
               FrontEnd`AttachCell[
                ReleaseHold[#3], #2, "Inline", 
                "ClosingActions" -> {"ParentChanged", "EvaluatorQuit"}]]]), 
         Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"], 
        BoxBaselineShift -> -0.5, BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.75], 
                 Thickness[
                  NCache[
                   Rational[2, 45], 0.044444444444444446`]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Mouseover[
                    Graphics[{
                    GrayLevel[0.5], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], 
                    Graphics[{
                    RGBColor[
                    0.9882352941176471, 0.4196078431372549, 
                    0.20392156862745098`], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]], 
                    "Click to copy to the clipboard"], 
                    (RawBoxes[
                    TemplateBox[{
                    ToBoxes[#], 
                    ToBoxes[#2]}, "PrettyTooltipTemplate"]]& )[
                    Graphics[{
                    RGBColor[0, 
                    Rational[2, 3], 0], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "Copied"]], UpdateInterval -> 
                    1, TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain", 
           StripOnInput -> False], Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8, StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[
            0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
           FontSize -> 12, FontWeight -> "Plain", FontTracking -> "Plain"], 
          Background -> 
          RGBColor[
           0.9607843137254902, 0.9607843137254902, 0.9607843137254902], 
          FrameStyle -> 
          RGBColor[
           0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
          FrameMargins -> 8], "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           ButtonBox[
            StyleBox[
            "\"Insert Code Group\"", "Text", FontFamily -> "Source Sans Pro", 
             FontSize -> 11, StripOnInput -> False], ButtonFunction :> 
            With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
              Quiet[
               
               Block[{$ContextPath = RSNB`$cp$, 
                 ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                 False}, 
                Internal`WithLocalSettings[
                 ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                  Needs["ResourceSystemClient`DefinitionNotebook`"], 
                  ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                  RSNB`nb$, 
                   
                   ComputationalEssayHelpers`Private`\
createComputationalParagraph[]], 
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                   False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
            BaseStyle -> Dynamic[
              FEPrivate`If[
               CurrentValue[Enabled], 
               FEPrivate`If[
                CurrentValue["MouseOver"], {
                FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                FontColor -> 
                 RGBColor[
                  0.17960779999999998`, 0.17960779999999998`, 
                   0.17960779999999998`]}], {
               FontColor -> 
                RGBColor[
                 0.5898038999999999, 0.5898038999999999, 
                  0.5898038999999999]}], Evaluator -> "System"], 
            Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
              "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
            Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
            "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
            Evaluator -> Automatic], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Headings\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Section", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "4") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Section"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "5") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subsubsection", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "6") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subsubsection"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], Delimiter, DynamicBox[
               ToBoxes[
                
                Grid[{{"Title", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "1") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Title"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Subtitle", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "2") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Subtitle"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"Chapter", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "3") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Chapter"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Author\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Author"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Abstract\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Abstract"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             TemplateBox[{
               StyleBox[
                
                TemplateBox[{
                 "\"Insert Text\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], 
               "\"Insert a cell of the chosen type below the current \
selection\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {DynamicBox[
               ToBoxes[
                
                Grid[{{"Text", (((" (" <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Text"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], DynamicBox[
               ToBoxes[
                
                Grid[{{"CodeText", ((((" (" <> "Shift+") <> 
                    If[$OperatingSystem === "MacOSX", "Cmd", "Alt"]) <> "+") <> 
                    "7") <> ")"}}, Alignment -> {{Left, Right}, Automatic}, 
                 ItemSize -> {10, Automatic}], StandardForm]] :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "CodeText"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Item\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`createCellBelow[
                    "Item"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           ActionMenuBox[
            ButtonBox[
             StyleBox[
              
              TemplateBox[{
               "\"Open/Close Groups\"", 
                "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\"\
"}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
              StripOnInput -> False], ButtonFunction :> 
             With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; CurrentValue[
                    RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, Null], 
                   CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; ResourceSystemClient`DefinitionNotebook`$\
ButtonsDisabled = False; Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
             BaseStyle -> Dynamic[
               FEPrivate`If[
                CurrentValue[Enabled], 
                FEPrivate`If[
                 CurrentValue["MouseOver"], {
                 FontColor -> RGBColor[0.898039, 0.898039, 0.898039]}, {
                 FontColor -> 
                  RGBColor[
                   0.17960779999999998`, 0.17960779999999998`, 
                    0.17960779999999998`]}], {
                FontColor -> 
                 RGBColor[
                  0.5898038999999999, 0.5898038999999999, 
                   0.5898038999999999]}], Evaluator -> "System"], 
             Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqt7e3HQaAbLhiuLLz588DpR48eAC3
AsgGigDF4coePnzY19cH5yI7BigOlIW4Fqilu7sbq7OB4kBZBjAgRhmRphHv
NiJ9Sny4ERMLaABrnAIA5lG1ZQ==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCl2EAWRBZGVCqs7WpoaoEgoBsuGK4svPnzzfWlK+o
9dve4AJBQDZQBCgOV/bw4cOOloZVtb5wNRAEFAGKA2UhrgVqaaouRlMDQUBx
oCwDGBCjjEjTiHcbkT4lPtyIiQVi4hQArnpwkw==
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True], 
               "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQPEUCL2EAWRBZGVDqw5dvrz9BEZANVwxX9urVq3efvxUt
PujVuQGCgGygCFAcruzZs2fvPn3Nmb8frgaCgCJAcaAsxLVALc/efUZTA0FA
caAsAxgQo4xI04h3G5E+JT7ciIkFYuIUAHu5mtk=
                 "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
             Background -> RGBColor[0.898039, 0.898039, 0.898039], Method -> 
             "Queued", ImageSize -> {All, 20}, Enabled -> Dynamic[
               Not[
                TrueQ[
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
               TrackedSymbols :> {
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
             Evaluator -> Automatic], {
            "\"Open Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Chapters\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Chapter", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Open]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Close Sections\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`openCloseAll[
                    ButtonNotebook[], "Section", Closed]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
         AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {1 -> RGBColor[0.898039, 0.898039, 0.898039]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "ColumnsIndexed" -> {1 -> 0, -1 -> 0}, "Rows" -> {{Automatic}}}, 
         FrameStyle -> GrayLevel[0.75]], "Grid"]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{
           TagBox[
            GridBox[{{
               GraphicsBox[{{
                  Thickness[0.03333333333333333], {
                   FaceForm[{
                    RGBColor[
                    0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27.,
                     1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                    2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                   FaceForm[{
                    RGBColor[0.898, 0.898, 0.898], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23.,
                     2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.,
                     2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                    5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                    4.}, {11., 3.}, {8., 3.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
                    0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{9.697299999999998, 24.522}, {
                    9.133299999999998, 24.645}, {8.861299999999998, 
                    24.259999999999998`}, {9.313299999999998, 24.092}}, {{
                    9.291299999999998, 23.933}, {8.9683, 
                    24.052999999999997`}, {9.2183, 23.726999999999997`}, {
                    9.587299999999999, 23.601}}, {{9.553299999999998, 
                    23.447}, {9.169299999999998, 23.578}, {8.760299999999999, 
                    23.456999999999997`}, {9.102299999999998, 
                    23.348999999999997`}}, {{9.083299999999998, 22.633}, {
                    9.025299999999998, 23.208}, {8.567299999999998, 23.354}, {
                    8.555299999999999, 22.865}}, {{8.521299999999998, 
                    23.551}, {9.039299999999999, 23.703}, {8.711299999999998, 
                    24.13}, {8.2183, 23.962999999999997`}}, {{8.4073, 
                    23.197}, {8.171299999999999, 22.851}, {8.171299999999999, 
                    22.445}, {8.398299999999999, 22.837}}, {{
                    8.091299999999999, 23.014}, {8.395299999999999, 23.458}, {
                    8.091299999999999, 23.871}, {7.786299999999999, 
                    23.458}}, {{8.010299999999999, 22.851}, {
                    7.773299999999999, 23.197}, {7.782299999999998, 22.837}, {
                    8.010299999999999, 22.445}}, {{7.964299999999999, 
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                    7.141299999999999, 23.703}, {7.659299999999998, 
                    23.551}}, {{7.626299999999999, 22.865}, {
                    7.614299999999998, 23.354}, {7.155299999999999, 23.209}, {
                    7.097299999999999, 22.633999999999997`}}, {{
                    7.078299999999999, 23.348999999999997`}, {
                    7.422299999999998, 23.456999999999997`}, {
                    7.0112999999999985`, 23.578}, {6.6282999999999985`, 
                    23.447}}, {{6.593299999999998, 23.601}, {
                    6.962299999999999, 23.726999999999997`}, {
                    7.214299999999998, 24.054}, {6.889299999999999, 
                    23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                    7.319299999999998, 24.259999999999998`}, {
                    7.0482999999999985`, 24.645}, {6.484299999999998, 
                    24.522}}, {{7.113299999999999, 25.217}, {
                    7.158299999999999, 24.761}, {7.356299999999999, 
                    24.479999999999997`}, {7.344299999999999, 24.904}}, {{
                    7.5032999999999985`, 24.817999999999998`}, {
                    7.518299999999998, 24.279}, {8.010299999999999, 24.113}, {
                    8.010299999999999, 24.637999999999998`}}, {{
                    7.2452999999999985`, 25.302}, {7.4712999999999985`, 
                    24.997}, {7.8622999999999985`, 24.857}, {
                    7.656299999999998, 25.122}}, {{7.800299999999998, 
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                    25.192}, {8.091299999999999, 25.689}}, {{
                    8.171299999999999, 24.637999999999998`}, {
                    8.171299999999999, 24.113}, {8.663299999999998, 24.279}, {
                    8.677299999999999, 24.817999999999998`}}, {{
                    8.836299999999998, 24.904}, {8.8243, 
                    24.479999999999997`}, {9.022299999999998, 24.761}, {
                    9.068299999999999, 25.217}}, {{8.318299999999999, 
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                    25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                    "]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11.,
                     25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                    26.}, {11., 26.}}}]}, {
                   FaceForm[{
                    RGBColor[0.749, 0.749, 0.749], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24.,
                     22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                   FaceForm[{
                    RGBColor[0.984, 0.6859999999999999, 0.365], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {
                    24., 20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 
                    20.}, {18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {
                    10., 19.}, {6., 19.}}, {{11., 19.}, {17., 19.}, {17., 
                    18.}, {11., 18.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{
                    0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                    "]]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                    3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                    3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                    "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                    "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                    "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                    "]}]}}}, {
                ImageSize -> {Automatic, 32}, 
                 ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                 Scaled[0.25], AspectRatio -> Automatic, 
                 ImageSize -> {30., 30.}, 
                 PlotRange -> {{0., 30.}, {0., 30.}}}], 
               StyleBox[
                TagBox[
                 GridBox[{{
                    StyleBox[
                    "\"Computational Essay\"", FontFamily -> 
                    "Source Sans Pro", FontWeight -> "SemiBold", StripOnInput -> 
                    False]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
                  False, GridBoxDividers -> {
                   "Columns" -> {{None}}, "Rows" -> {{None}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Grid"], FontSize -> 24, FontColor -> GrayLevel[1], 
                StripOnInput -> False]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
           "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", "\"\""}, {
           ActionMenuBox[
            TemplateBox[{
              TemplateBox[{
                TemplateBox[{"\"Sample Content\"", 
                  TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                 "RowDefault"], 
                "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\""}, "PrettyTooltipTemplate"], Null& , 
              "\"Clear sample content in the current notebook, or view a \
completed sample computational essay\"", True}, "OrangeButtonTemplate"], {
            "\"Insert Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    ComputationalEssayHelpers`Private`insertSampleContent[]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Clear Sample Content\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    Module[{$CellContext`cells = Flatten[
                    Map[{NotebookFind[
                    ButtonNotebook[], #, All, CellTags, AutoScroll -> False]; 
                    SelectedCells[]}& , {
                    "ExampleTopicSentence", "TopicSentenceButton", 
                    "ExampleCodeText", "ExampleInput", "ExampleOutput", 
                    "EssayStructureExample", "CitationExample", 
                    "SectionMoreInfoYourEssayTitle", 
                    "SectionMoreInfoAuthorInfoButton", 
                    "SectionMoreInfoAbstract", 
                    "SectionMoreInfoSectionHeaderInfoButton"}]]}, 
                    NotebookDelete[$CellContext`cells]]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]], "\"Open Sample Essay\"" :> 
             With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
               Quiet[
                
                Block[{$ContextPath = RSNB`$cp$, 
                  ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                  False}, 
                 Internal`WithLocalSettings[
                  ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; 
                   Needs["ResourceSystemClient`DefinitionNotebook`"], 
                   ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                   RSNB`nb$, 
                    SystemOpen["https://wolfr.am/SampleEssay"]], 
                   ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                    False; Null]; Null]]]}, Appearance -> None, Method -> 
            "Queued", Enabled -> Dynamic[
              Not[
               TrueQ[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
              TrackedSymbols :> {
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}]], 
           
           TemplateBox[{
            "\"Open Guidelines\"", SystemOpen[
             "https://wolfr.am/ComputationalEssayGuidelines"]& , "\"\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             TemplateBox[{
               TagBox[
                GridBox[{{"\"Tools\"", 
                   PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{0., 0.65}, {0., -0.65}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None], True -> 
                    GraphicsBox[{
                    GrayLevel[1], 
                    AbsoluteThickness[1], 
                    LineBox[{{-1, -1}, {-1, 1}, {1, 1}, {1, -1}, {-1, -1}}], 
                    LineBox[{{-0.65, 0.}, {0.65, 0.}}]}, ImageSize -> 8, 
                    PlotRangePadding -> None, Background -> None]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[-0.1]]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
               "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`ToggleToolbar[
              ButtonNotebook[]]& , "\"Toggle documentation toolbar\"", False},
             "OrangeButtonTemplate"], 
           TagBox[
            
            GridBox[{{"\"\"", "\"\""}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxDividers -> {
              "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
             GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{2}}},
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
             RGBColor[0.99215, 0.843125, 0.68235]], "Grid"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Check\"", "\"Check notebook for potential errors\""}, 
              "PrettyTooltipTemplate"], 
             ResourceSystemClient`DefinitionNotebook`CheckDefinitionNotebook[
              ButtonNotebook[]]& , "\"Check notebook for potential errors\"", 
             False}, "OrangeButtonTemplate"], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Publish to Cloud\"", 
               "\"Publish your computational essay to the cloud\""}, 
              "PrettyTooltipTemplate"], 
             With[{$CellContext`nb = ButtonNotebook[]}, CreateDialog[
                
                ComputationalEssayHelpers`Private`createSubmissionDialog[$\
CellContext`nb], WindowSize -> {350, 150}, Background -> White, WindowFrame -> 
                "Normal", "Evaluator" -> "System"]; Null]& , 
             "\"Publish your computational essay to the cloud\"", False}, 
            "OrangeButtonTemplate"], 
           ItemBox[
            StyleBox[
             DynamicBox[
              ToBoxes[
               CurrentValue[
                EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
               StandardForm], Evaluator -> "System", 
              Initialization :> (CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
               "")], "Text", 
             GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
            StripOnInput -> False], 
           TemplateBox[{
             
             TemplateBox[{
              "\"Submit to Notebook Archive\"", 
               "\"Submit your essay to the Wolfram Notebook Archive\""}, 
              "PrettyTooltipTemplate"], 
             ComputationalEssayHelpers`Private`submitEssay[]& , 
             "\"Submit your essay to the Wolfram Notebook Archive\"", False}, 
            "OrangeButtonTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
           "Rows" -> {{Center}}}, AutoDelete -> False, 
         GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
             RGBColor[0.9843, 0.68625, 0.3647], 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxFrame -> {
          "Columns" -> False, 
           "RowsIndexed" -> {
            1 -> RGBColor[0.9843, 0.68625, 0.3647], 2 -> 
             RGBColor[0.7185389999999999, 0.5009625, 0.266231]}}, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {
          "Columns" -> {5, {0.9}, 5}, 
           "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 1.55}}, FrameStyle -> 
         RGBColor[0.9843, 0.68625, 0.3647]], "Grid"]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{{
                Thickness[0.03333333333333333], {
                 FaceForm[{
                   RGBColor[
                   0.8200000000000001, 0.8200000000000001, 
                    0.8200000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{27., 
                  1.}, {3., 1.}, {3., 29.}, {27., 29.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{4., 
                  2.}, {26., 2.}, {26., 28.}, {4., 28.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  2.}, {6., 2.}, {6., 10.}, {24., 10.}}}]}, {
                 FaceForm[{
                   RGBColor[0.898, 0.898, 0.898], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 
                  2.}, {7., 2.}, {7., 9.}, {23., 9.}}}]}, {
                 FaceForm[{
                   RGBColor[1., 1., 1.], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22., 
                  2.}, {12., 2.}, {12., 8.}, {22., 8.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}}, {{{8., 7.}, {11., 7.}, {11., 8.}, {8., 8.}}, {{8., 
                  5.}, {11., 5.}, {11., 6.}, {8., 6.}}, {{8., 4.}, {11., 
                  4.}, {11., 3.}, {8., 3.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                   0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}}}, {{{9.697299999999998, 24.522}, {9.133299999999998, 
                   24.645}, {8.861299999999998, 24.259999999999998`}, {
                   9.313299999999998, 24.092}}, {{9.291299999999998, 
                   23.933}, {8.9683, 24.052999999999997`}, {9.2183, 
                   23.726999999999997`}, {9.587299999999999, 23.601}}, {{
                   9.553299999999998, 23.447}, {9.169299999999998, 23.578}, {
                   8.760299999999999, 23.456999999999997`}, {
                   9.102299999999998, 23.348999999999997`}}, {{
                   9.083299999999998, 22.633}, {9.025299999999998, 23.208}, {
                   8.567299999999998, 23.354}, {8.555299999999999, 
                   22.865}}, {{8.521299999999998, 23.551}, {9.039299999999999,
                    23.703}, {8.711299999999998, 24.13}, {8.2183, 
                   23.962999999999997`}}, {{8.4073, 23.197}, {
                   8.171299999999999, 22.851}, {8.171299999999999, 22.445}, {
                   8.398299999999999, 22.837}}, {{8.091299999999999, 
                   23.014}, {8.395299999999999, 23.458}, {8.091299999999999, 
                   23.871}, {7.786299999999999, 23.458}}, {{8.010299999999999,
                    22.851}, {7.773299999999999, 23.197}, {7.782299999999998, 
                   22.837}, {8.010299999999999, 22.445}}, {{7.964299999999999,
                    23.962999999999997`}, {7.469299999999999, 24.13}, {
                   7.141299999999999, 23.703}, {7.659299999999998, 
                   23.551}}, {{7.626299999999999, 22.865}, {7.614299999999998,
                    23.354}, {7.155299999999999, 23.209}, {7.097299999999999, 
                   22.633999999999997`}}, {{7.078299999999999, 
                   23.348999999999997`}, {7.422299999999998, 
                   23.456999999999997`}, {7.0112999999999985`, 23.578}, {
                   6.6282999999999985`, 23.447}}, {{6.593299999999998, 
                   23.601}, {6.962299999999999, 23.726999999999997`}, {
                   7.214299999999998, 24.054}, {6.889299999999999, 
                   23.933999999999997`}}, {{6.867299999999998, 24.092}, {
                   7.319299999999998, 24.259999999999998`}, {
                   7.0482999999999985`, 24.645}, {6.484299999999998, 
                   24.522}}, {{7.113299999999999, 25.217}, {7.158299999999999,
                    24.761}, {7.356299999999999, 24.479999999999997`}, {
                   7.344299999999999, 24.904}}, {{7.5032999999999985`, 
                   24.817999999999998`}, {7.518299999999998, 24.279}, {
                   8.010299999999999, 24.113}, {8.010299999999999, 
                   24.637999999999998`}}, {{7.2452999999999985`, 25.302}, {
                   7.4712999999999985`, 24.997}, {7.8622999999999985`, 
                   24.857}, {7.656299999999998, 25.122}}, {{7.800299999999998,
                    25.192}, {8.091299999999999, 24.82}, {8.381299999999998, 
                   25.192}, {8.091299999999999, 25.689}}, {{8.171299999999999,
                    24.637999999999998`}, {8.171299999999999, 24.113}, {
                   8.663299999999998, 24.279}, {8.677299999999999, 
                   24.817999999999998`}}, {{8.836299999999998, 24.904}, {
                   8.8243, 24.479999999999997`}, {9.022299999999998, 
                   24.761}, {9.068299999999999, 25.217}}, {{8.318299999999999,
                    24.857}, {8.710299999999998, 24.997}, {8.935299999999998, 
                   25.302}, {8.525299999999998, 25.122}}, CompressedData["
1:eJxTTMoPSmViYGAQAWIQbb/k/j6+P8oOE9/W2JvOs3CQKL4u9OmhkgMDGFg4
wOTzhJoPnEo0d1i3Lan+ZqySw+2fdVl7TMwdPjqeT7vargSVN3MQkT351J5F
0eH64gJbru1mDk9BBugpQM0zcwicpthXulEOLl8ja5HuslIarp/ZRNDM5q80
3PwHEeLbLx6QgNuvt1udn/urFNx9MHmY+2H6VdgapzqftoCbD5G3hNuvGdN/
6KuHJZr7rODuh8nX3bStjOhQguuH+R9mPgC7F3w4
                   "]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{11., 
                  25.}, {24.000999999999998`, 25.}, {24.000999999999998`, 
                  26.}, {11., 26.}}}]}, {
                 FaceForm[{
                   RGBColor[0.749, 0.749, 0.749], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 
                  22.}, {11., 22.}, {11., 24.}, {24., 24.}}}]}, {
                 FaceForm[{
                   RGBColor[0.984, 0.6859999999999999, 0.365], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{19., 20.}, {24.,
                   20.}, {24., 21.}, {19., 21.}}, {{6., 20.}, {18., 20.}, {
                  18., 21.}, {6., 21.}}, {{6., 18.}, {10., 18.}, {10., 19.}, {
                  6., 19.}}, {{11., 19.}, {17., 19.}, {17., 18.}, {11., 
                  18.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                  0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10ksKgzAYReHQdtgFZFqRIEEkPioOXUOXUOjY/c90kDvogSuEn08OaoKv
7/H53UMIz2s9rnULutL+P4txh/vyiPtvY/byWudQ52Zc0MtLnRk93aOX9byE
nub3yhG9m+xlnY/2MxsP6OUJfTZmLzd16jyicUYvd/Bs3KOXE9waZ/R8v/YT
jfkfl/0EHWIqGQ==
                  "]]}, {
                 FaceForm[{
                   RGBColor[0.392, 0.392, 0.392], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 
                   3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{1, 4, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/YB78sqmiXoOlxjuMXF2sTisvRFf5h+n59Dj9YrF
RJDFwUzqQLQCo56D3oQFPwyfMUH4B3Ud1qs+aZ53lsHhxfb1zM959OD8lpoL
myNN9Rwq5ixS3vmH0QEo26ORC+MzOSQuvGbyfoeew7F/m6o/bWB2mLcaZKO+
g5xFuktmPqvD1mWVxzWtDBy2XwQ5iNXhjf5udf5uAwdWE0Ezm71MDs/WgSwy
cFh9/mrYG30mhw+tJ0MOrjBwiM09CjSR0QFkS/sWA7h7+koLpXkfIPgvbq75
FXPWwCHx8GXtVEkmuHoJsIXMDm0g45YYOHR8uX29sZjZgZ8b6CJ3A4fvbPEz
fETZHKqW6jjLZOs7sIO4PWwO6OEHAOM+kNE=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQ3XHp3gNuYX2HJyKyJ5/aSzgsZtzDKiSi65AbVrtu
2yMxB7VDbcvDuXQcOKXnxWmeFnSo+21VcI5D24HVRNDMZi+nQ+LCaybvd2g5
RDvZvbi5hs0hXSmnoipVy0HtSfO8s6uYHaIVHD8m82g5rFcFCTA4aElMvcKZ
geBv1MsDWqnlYLM3aJpiHzPUPm0HOYt0l8x8NofU708SF4ZpO1zRTpV8FMHp
EFyiMv1/gI7D9qT6m7aVghD3hug6HN+1o5etQMzh/wSgCw30HfbxzTFetEXc
4dOGgOxZ0w0cwM4XkHQ4Xe+xv3avocO0TTyFa7pFHfi5ty6rbDdyqFu3Lak+
Ushhho9oj5eXscOcRco7/7TzOSyrPK5p9cnYQazH6xWLCbuDLNhdJnD3r/kV
k3t0HoJfKM37QNfAxEEDbDCbwxI/B+HExcYOBrvVgSI8DidDDq5Ywmfs8OaA
pbLXbwEHq0lAF8kbOXzJAQa4magDSPuEAwYOINfdfiHpgB4/AHQArZ4=
                   "], CompressedData["
1:eJxTTMoPSmViYGCQAWIQvTz8lNGRjXoO67Yl1d/cK+MwK3T+6rUROg5rum9n
MLyXcujReMu7z0Db4ULa1edZq0Ucchcz7mEV0nJ4xWIiaGbD62AzG6RB08HZ
7sXNNb84HDzmNqgdctN0MNitzs+9lcXht1XBuY5LGg7rVZ80zzvL4ACxThPO
V3D8mHxmrqbDs3UgARaHAE+gAUxaDqwg4/dyOIBU5yVrOajs/NP+5TaPA5C3
mLFG22HG3cntrVEiDpNWNgV6ztVxYPsg5hFQI+UgmuX7ue+ynkNokPqCTgMZ
B3ZboANf6ztUN+v7LOOSdQC5atlMAwe+OcaLtmyXcZC1SHfJ9Dd0WA/yv620
wyJlkEVGDh4BfySKr4s7TPnGFj9jjYlDxBt9oI/4HL7cvt5YfMwU7n4w/xkm
/2PryZCDKxgdmordpnxzM3XQSZV8FCHO6QA2vtrEIXKF6VnrcwIOQdMU+0o3
Gju4/Hr7+oCliEO9x/5a2R+GDixH+w3L10o7AAMhaFqjAcT9XXIO6PEFAPga
wsg=
                   "], CompressedData["
1:eJxTTMoPSmViYGAQBWIQPSt0/uq1N/QdLjHcY+Ls4nNoUDvUtjxcz8Fq0ul6
j/28DmtvxJf5x+k6bL8IUsDusJtVSMS+TcdhveqT5nlnGRycZF4/MruF4DcF
es5tWKbroAbirmJzCC5Rmf5/gp5D1XFNoJE8Dkt1nIE69B3ico/+21TN6/BA
d8KCH4UGDo8ixIFW8DnIWqS7ZPIbOrQAdZ+/yuVgszdommKfocPq81fD3uiz
OkQ52b24ucbQwd9BOPHwZWaH5HdAkROGDln5H1pPhjA5gK25bwh3Ty3IQE4j
OB9oyG7194YO7PEzfER7mBxWgcw9b+jwmsVE0MyGBWLfOkOHApBxB1nBtmir
wtzD7QAKldpaAwdGUHDJ8zughx8AsHaP1w==
                   "], CompressedData["
1:eJxTTMoPSmViYGCQBmIQvb9W1iI9xchhwoIfhs/WcTs42b24uWaXkYNI4uHL
2qkcDlO+scXP4DF2YI+f4SPaw+JgszdomqKfscN61SfN884yOHTJJ7+LUkLw
d6vzc299ZuSQM6t8ziJlFgeQcb/mGDmogaRXsTu0nQw5uMLFyMFXtMfrFQu3
Q7EbyAZDh9yw2nXbHgk6gKzzKTVwaGI52m/4XdjB4WPymdhufQeXX29fH7AU
dugLLlGZ/l/XYc9jEdmTqUION+LL/OXEdB3W/orJPfqPx8FPTizL11jHYR/Q
mX2lrA5ty8NPGbHoOPSVFkrzPmB2MJipJTH1irbDKaAzlvgxOeyPVnD8uFgb
7n4QN9kHwc+uqFqq06wNNY/JYeetrr+p27UdykDG6bI4AGWdZV5rO/wEhp7q
E1aHRYx7WIWu6ED9y+uw4JrJe4ujug4z7k5ub70l5HBna0vNhWJ9B4ni60Kf
Dgo7GIG0HTZwOGftd3HiHRGHTxsCsmddN3TQ+TYdqEPAAT1+AE3XvCM=
                   "]}]}}}, {
              ImageSize -> 12, AspectRatio -> Automatic, 
               ImageSize -> {30., 30.}, PlotRange -> {{0., 30.}, {0., 30.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (ButtonBox[
        StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
         "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
         Dynamic[
           FEPrivate`If[
            CurrentValue[Enabled], 
            GrayLevel[1], 
            RGBColor[0.8730375, 0.83578125, 0.7955875]], Evaluator -> 
           "System"], StripOnInput -> False], ButtonFunction :> 
        With[{RSNB`nb$ = ButtonNotebook[]}, 
          If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
            ProgressIndicator[Appearance -> "Necklace"]]; 
          With[{RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False}, 
              Internal`WithLocalSettings[
               ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; 
                Needs["ResourceSystemClient`DefinitionNotebook`"], 
                ResourceSystemClient`DefinitionNotebook`CheckForUpdates[
                RSNB`nb$, 
                 #2[]], 
                ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled = 
                 False; Null]; Null]]]; 
          CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; Null],
         FrameMargins -> {{5, 5}, {0, 0}}, 
        Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1R5n1BhlAEFANlwxXNmaCoem
KIPacD1kBBQBisOVba1zbos1QlMDQUBxoCzEtUAtjRhGQVAj2EAGMCBGGZGm
Ee82In1KfLgREwvExCkA9SYWEg==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Hover" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaN1lY4QhCyIrAwo1Zds2ptsAkFANlwxXNmaCoee
JJP7c4J/r4+FICAbKAIUhyvbWufcn2L6eH4IXA0EAUWA4kBZiGuBWiammqGp
gSCgOFCWAQyIUUakacS7jUifEh9uxMQCMXEKAB4IRIc=
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True], "Pressed" -> 
          Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UJAXikHs/xgAqyAQbG9wgaNDUxIhCFkQWRlQ6vOz678/PIEgIBuuGK7s6Iz0
X++f/DnY+Ht9LAQB2UARoDhc2c4Wry/Pb/zZVw1XA1W5rxooDpSFuBZk1Nv7
aGogCCgOlGUAA2KUEWka8W4j0qfEhxsxsUBMnAIAq2R1ew==
            "], "Byte", ColorSpace -> "RGB", Interleaving -> True]}, 
        Background -> RGBColor[0.7185389999999999, 0.5009625, 0.266231], 
        Method -> "Queued", ImageSize -> {All, 23}, Enabled -> Dynamic[
          Not[
           TrueQ[ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled]], 
          TrackedSymbols :> {
           ResourceSystemClient`DefinitionNotebook`$ButtonsDisabled}], 
        Evaluator -> Automatic]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              AdjustmentBox[
               TemplateBox[{
                 ActionMenuBox[
                  TagBox[
                   PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                   MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                  Method -> "Queued"], "\"View suggestions\""}, 
                "PrettyTooltipTemplate"], BoxBaselineShift -> -0.3]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -1.}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.05555555555555555], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh4qXaoYcOfoO
m+a+X37stKZDbP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4PzZRxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA8nn+Z
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.175292500000001, 
             7.416875}, {7.796855000000001, 11.3084375}, {7.796855000000001, 
             13.38}, {10.11998, 13.38}, {10.11998, 11.3084375}, {
             9.741542500000001, 7.416875}, {8.175292500000001, 
             7.416875}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQ/cTvZcLf/4oOD6tE1rk/5HNQjDzAkqeL4FsusdsW
1KjgwAAGAg7hCSdehX2Xd5BvfR24Q07QwaZCOJPjjZyDHdf1xQW2Qg56LJYa
iWlyDv2HvmrEzBeG80GmVbmIwvkvtjT6Sb8Qg+t/BLLPUwJuPti6DEm4/WD7
2qTg7gMZJyIm7QBzP4y/zEVob88lJTi/7+dk7hV1ynD9c3LzfPxZVODmr3ro
0futUwVu/0bpbbqnzqjA3Qfjw9wP48P8B9MP8z/MfFj4wOyHhR/MfbDwRQ9/
ACBxmlc=
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell[
    StyleData["Hyperlink"], FontColor -> 
    RGBColor[0.7185389999999999, 0.5009625, 0.266231]], 
   Cell[
    StyleData["HyperlinkActive"], FontColor -> 
    RGBColor[0.47902599999999995`, 0.333975, 0.17748733333333333`]], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.854902, 0.396078, 0.145098], 
       RGBColor[
       0.0196078431372549, 0.28627450980392155`, 0.6509803921568628]]]], 
   Cell[
    StyleData["StringTypeLink"], 
    TemplateBoxOptions -> {DisplayFunction :> (TagBox[
        DynamicBox[
         If[
          CurrentValue["MouseOver"], 
          ButtonBox[
           
           StyleBox[#, FontColor -> 
            RGBColor[0.9686274509803922, 0.4666666666666667, 0.]], 
           ButtonData -> #2], 
          ButtonBox[#, ButtonData -> #2]]], 
        MouseAppearanceTag["LinkHand"]]& )}, 
    ButtonBoxOptions -> {
     BaseStyle -> {FontColor -> GrayLevel[0.46666667], "Link"}}], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.905882]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, StyleMenuListing -> None, Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.880722, 0.611041, 0.142051], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.9821083, 0.94165615, 0.87130765]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.368417, 0.506779, 0.709798], Background -> 
    RGBColor[0.90526255, 0.92601685, 0.9564697]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.560181, 0.691569, 0.194885], Background -> 
    RGBColor[0.9340271499999999, 0.95373535, 0.87923275]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    RGBColor[0.898039, 0.898039, 0.898039]], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}]}, Visible -> False, 
  FrontEndVersion -> "13.1 for Microsoft Windows (64-bit) (June 16, 2022)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"c45f2dc0-da06-4c9a-9f5d-6c0cc61a449a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Examples"->{
  Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "Your Essay Title"->{
  Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
   CellTags->{"Examples", "Your Essay Title"},
   CellID->805710577]},
 "AuthorName"->{
  Cell[874, 29, 268, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
   CellTags->"AuthorName",
   CellID->960727095]},
 "Abstract"->{
  Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]},
 "TemplateCell"->{
  Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
   CellTags->{"Abstract", "TemplateCell"},
   CellID->587432573]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Examples", 686137, 13834},
 {"Your Essay Title", 686324, 13838},
 {"AuthorName", 686505, 13842},
 {"Abstract", 686664, 13846},
 {"TemplateCell", 686846, 13850}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 291, 5, 160, "Title",ExpressionUUID->"1d92d1b8-f6d7-48ed-8825-cd049ebbaf36",
 CellTags->{"Examples", "Your Essay Title"},
 CellID->805710577],
Cell[874, 29, 268, 5, 30, "Author",ExpressionUUID->"3a631b5a-3636-4c6d-8965-482ae9171f2c",
 CellTags->"AuthorName",
 CellID->960727095],
Cell[1145, 36, 144, 2, 62, "Abstract",ExpressionUUID->"2ac58def-5955-4744-85c7-434e15df125e",
 CellTags->{"Abstract", "TemplateCell"},
 CellID->587432573],
Cell[CellGroupData[{
Cell[1314, 42, 172, 2, 67, "Section",ExpressionUUID->"9952e69f-1ff1-46f0-b93a-e36b077bffca",
 CellID->627868314],
Cell[1489, 46, 39255, 647, 186, "Input",ExpressionUUID->"229b9189-6885-404e-a75f-32107bfe6a4d",
 CellID->212968093],
Cell[40747, 695, 386, 10, 35, "Text",ExpressionUUID->"2e5cf91e-98cd-4cfd-9ede-d2adb7a20aea",
 CellID->143109431],
Cell[41136, 707, 490, 13, 36, "Input",ExpressionUUID->"8a3bd2b1-a38b-4483-9789-f22bbbc15e12",
 CellID->42039440],
Cell[41629, 722, 254, 5, 35, "Text",ExpressionUUID->"b3b9d832-2030-4d8a-8207-643ff59812ea",
 CellID->201421124],
Cell[41886, 729, 305, 7, 36, "Input",ExpressionUUID->"061e9e71-5877-46cd-aad1-112b4166347b",
 CellID->71618934],
Cell[42194, 738, 198, 2, 35, "Text",ExpressionUUID->"826019a2-fcf0-4a0d-999e-34816e8031ea",
 CellID->26772973],
Cell[42395, 742, 440, 11, 36, "Input",ExpressionUUID->"c0f28fc3-7dcf-42ad-97d4-31d9441386f0",
 CellID->18719899],
Cell[42838, 755, 434, 12, 35, "Text",ExpressionUUID->"a7bc4939-68eb-4757-8196-0eb4c2eeef1e",
 CellID->138601629],
Cell[43275, 769, 188, 2, 35, "Text",ExpressionUUID->"b24af248-f5b6-4b3f-88ab-ddf431b6c3cb",
 CellID->63492435],
Cell[CellGroupData[{
Cell[43488, 775, 372, 10, 45, "Input",ExpressionUUID->"6bfd7631-b1f8-41ab-b658-7ecb743d744c",
 CellID->713269602],
Cell[43863, 787, 465, 9, 28, "Message",ExpressionUUID->"a351d156-90ce-465d-8dd0-98f0c625f879",
 CellID->342123661],
Cell[44331, 798, 334, 8, 41, "Output",ExpressionUUID->"05b4b49d-2cff-498e-8d2b-53cb897ff52d",
 CellID->259623945]
}, Open  ]],
Cell[CellGroupData[{
Cell[44702, 811, 565, 17, 45, "Input",ExpressionUUID->"512763c5-0d97-408b-9dc6-a1863096cf38",
 CellID->614030663],
Cell[45270, 830, 488, 9, 28, "Message",ExpressionUUID->"03e6b759-d324-4788-8c13-621578460fc7",
 CellID->66728271],
Cell[45761, 841, 286, 5, 39, "Output",ExpressionUUID->"2c945c8c-6f60-4cec-b511-2f51fec211e7",
 CellID->612738351]
}, Open  ]],
Cell[46062, 849, 180, 2, 35, "Text",ExpressionUUID->"153c8926-e1c6-469f-9e5d-45a070b35fe6",
 CellID->58038683],
Cell[CellGroupData[{
Cell[46267, 855, 390, 9, 28, "Input",ExpressionUUID->"e757fbd8-19c8-4f5f-a0ab-f1d267719600",
 CellID->307634299],
Cell[46660, 866, 279, 5, 32, "Output",ExpressionUUID->"806f13cc-5854-486a-a0d6-d4f4ca85d6fa",
 CellID->457808490]
}, Open  ]],
Cell[46954, 874, 184, 2, 35, "Text",ExpressionUUID->"81320f42-189d-4e6d-86b8-89e976d31997",
 CellID->307471050]
}, Open  ]],
Cell[CellGroupData[{
Cell[47175, 881, 198, 3, 67, "Section",ExpressionUUID->"696c8f78-07ab-4d25-86c9-ea755f45cd25",
 CellID->743554474],
Cell[47376, 886, 44535, 734, 177, "Input",ExpressionUUID->"d4e3fb99-f2f5-4c9c-8a0d-fa183ea6c1d6",
 CellID->74227303],
Cell[91914, 1622, 779, 24, 42, "Text",ExpressionUUID->"7f17ee30-a62f-4d35-a515-e03cc878b8ff",
 CellID->23481574],
Cell[92696, 1648, 240, 4, 35, "Text",ExpressionUUID->"69bd7760-94e4-4694-a297-36428b74a3a3",
 CellID->386341421],
Cell[CellGroupData[{
Cell[92961, 1656, 298, 6, 35, "Input",ExpressionUUID->"a62931eb-57eb-4d1e-9559-b6180e221f7b",
 CellID->128439433],
Cell[93262, 1664, 274, 5, 42, "Output",ExpressionUUID->"36a3ac96-6e3d-48fa-a192-db286c4be9b7",
 CellID->173607952]
}, Open  ]],
Cell[93551, 1672, 273, 5, 35, "Text",ExpressionUUID->"0535b6e8-542e-4695-a56d-376695694e31",
 CellID->573981839],
Cell[CellGroupData[{
Cell[93849, 1681, 232, 4, 28, "Input",ExpressionUUID->"13fe0c00-a3f5-4ffc-9332-c872c8e56f4b",
 CellID->129662362],
Cell[94084, 1687, 281, 7, 39, "Output",ExpressionUUID->"a49e250e-5f76-4da6-b822-1904d6e9a1b9",
 CellID->149901727]
}, Open  ]],
Cell[CellGroupData[{
Cell[94402, 1699, 273, 5, 28, "Input",ExpressionUUID->"6d88d531-30c8-4521-9dd7-747615c089bf",
 CellID->749148820],
Cell[94678, 1706, 249, 5, 39, "Output",ExpressionUUID->"46ba40d1-02bb-40f7-a011-8a615b2cd073",
 CellID->214245323]
}, Open  ]],
Cell[CellGroupData[{
Cell[94964, 1716, 273, 5, 28, "Input",ExpressionUUID->"4f528f8d-8412-49c7-b002-2837aa795469",
 CellID->286673712],
Cell[95240, 1723, 244, 5, 39, "Output",ExpressionUUID->"085ee2de-5a58-4713-a79b-db2afd2ae2e8",
 CellID->127676115]
}, Open  ]],
Cell[95499, 1731, 198, 2, 35, "Text",ExpressionUUID->"0710ab99-009a-4eae-a73f-6213af78c789",
 CellID->7140843],
Cell[95700, 1735, 386, 10, 35, "Input",ExpressionUUID->"cf8cb438-cd33-4bd8-bf94-dcee1b8e4767",
 CellID->360578427],
Cell[CellGroupData[{
Cell[96111, 1749, 3186, 67, 50, "Input",ExpressionUUID->"4ec79828-b880-4bd0-9cca-1ff132654b85",
 CellID->92315837],
Cell[99300, 1818, 985, 24, 44, "Output",ExpressionUUID->"ee86b3a6-97c3-459e-964c-09bb07535b4f",
 CellID->146065850]
}, Open  ]],
Cell[100300, 1845, 200, 2, 35, "Text",ExpressionUUID->"57c7a02a-6a1d-4242-8898-30044270e750",
 CellID->21197662],
Cell[CellGroupData[{
Cell[100525, 1851, 3355, 72, 68, "Input",ExpressionUUID->"cfe3a9f9-8c59-49dc-8682-74f5485040cd",
 CellID->1000441859],
Cell[103883, 1925, 546, 13, 44, "Output",ExpressionUUID->"71f370c2-713c-4dac-951c-4cda52fee9d3",
 CellID->92391263]
}, Open  ]],
Cell[104444, 1941, 278, 5, 35, "Text",ExpressionUUID->"4e11a26f-0034-4d96-bb7b-d36540966529",
 CellID->52762262],
Cell[CellGroupData[{
Cell[104747, 1950, 3604, 76, 68, "Input",ExpressionUUID->"2b21f807-2da4-494b-8038-32fdd8df774e",
 CellID->14537228],
Cell[108354, 2028, 473, 9, 43, "Output",ExpressionUUID->"fd6b89b5-f28b-4243-9a56-76891965dd3f",
 CellID->11451360]
}, Open  ]],
Cell[CellGroupData[{
Cell[108864, 2042, 229, 4, 28, "Input",ExpressionUUID->"18cc95d1-848b-40ac-abbf-d4d59ca65fef",
 CellID->90435974],
Cell[109096, 2048, 473, 9, 43, "Output",ExpressionUUID->"5d0daa33-c1b0-4138-8a2d-c7d39be5915d",
 CellID->61875961]
}, Open  ]],
Cell[109584, 2060, 435, 12, 35, "Text",ExpressionUUID->"232a5588-15ae-4fac-bc4f-93107ab8513f",
 CellID->143349560]
}, Open  ]],
Cell[CellGroupData[{
Cell[110056, 2077, 222, 3, 67, "Section",ExpressionUUID->"72709557-6977-45c0-b9f6-f2034000576b",
 CellID->532121604],
Cell[110281, 2082, 185, 2, 35, "Text",ExpressionUUID->"dcb17b45-64a6-4d5b-88ae-1a2f978e6ed1",
 CellID->11144587],
Cell[110469, 2086, 44026, 726, 197, "Input",ExpressionUUID->"31a48622-ce06-4d11-a364-e03ef9cbb923",
 CellID->256750185],
Cell[154498, 2814, 190, 2, 35, "Text",ExpressionUUID->"74da9bc7-679c-496a-97d5-5f969845f664",
 CellID->450800702],
Cell[CellGroupData[{
Cell[154713, 2820, 442, 13, 28, "Input",ExpressionUUID->"0266af40-15ee-43ed-a783-029ccbe742b7",
 CellID->298245692],
Cell[155158, 2835, 291, 8, 46, "Output",ExpressionUUID->"7d5b5674-eafb-4dac-a108-a6548bc48835",
 CellID->136267825]
}, Open  ]],
Cell[155464, 2846, 189, 2, 35, "Text",ExpressionUUID->"898d06c1-2cb9-401f-a49f-0e5c0ef6e267",
 CellID->586162579]
}, Open  ]],
Cell[CellGroupData[{
Cell[155690, 2853, 171, 2, 67, "Section",ExpressionUUID->"d993f9a7-18b2-49ea-b64e-d5ed90302682",
 CellID->93119189],
Cell[155864, 2857, 48508, 799, 195, "Input",ExpressionUUID->"dc1e6956-78da-4585-912f-116630afb082",
 CellID->40071554],
Cell[CellGroupData[{
Cell[204397, 3660, 248, 4, 28, "Input",ExpressionUUID->"df33bfb2-7706-46c8-8146-60273a5a95e7",
 CellID->205170567],
Cell[204648, 3666, 3417, 78, 166, "Output",ExpressionUUID->"50186241-c3bd-4e34-8df6-81c37741cc8f",
 CellID->92210735]
}, Open  ]],
Cell[CellGroupData[{
Cell[208102, 3749, 277, 6, 28, "Input",ExpressionUUID->"c3b2d487-4440-45f6-8b40-548a367f221d",
 CellID->109730184],
Cell[208382, 3757, 225, 3, 32, "Output",ExpressionUUID->"2c040e47-cecb-440a-aa71-d6a40fe06377",
 CellID->388850794]
}, Open  ]],
Cell[CellGroupData[{
Cell[208644, 3765, 322, 7, 28, "Input",ExpressionUUID->"48d1a2af-6fe5-49df-be79-81377009ea1c",
 CellID->184077802],
Cell[208969, 3774, 1146, 26, 48, "Output",ExpressionUUID->"b24b6f6d-84d2-46dd-9b63-6d835e723a6d",
 CellID->138182914]
}, Open  ]],
Cell[210130, 3803, 166, 2, 35, "Text",ExpressionUUID->"20e0781a-2c8b-4ed1-95d6-aafeafe75c97",
 CellID->1462902],
Cell[CellGroupData[{
Cell[210321, 3809, 252, 4, 28, "Input",ExpressionUUID->"7f2795d9-223d-4b74-a44c-2679260f7e32",
 CellID->47391537],
Cell[210576, 3815, 3293, 67, 185, "Output",ExpressionUUID->"3b50f85f-79cd-495a-a773-5fcbcae0844b",
 CellID->642193243]
}, Open  ]],
Cell[CellGroupData[{
Cell[213906, 3887, 331, 7, 28, "Input",ExpressionUUID->"7117a9ae-201b-40f3-ad9d-d4492388d67b",
 CellID->396852273],
Cell[214240, 3896, 84419, 2081, 703, "Output",ExpressionUUID->"9764dd32-21f0-4d26-9fec-05902a6fceaf",
 CellID->104226357]
}, Open  ]],
Cell[298674, 5980, 204, 2, 35, "Text",ExpressionUUID->"395c1b7d-c0ef-4760-a4eb-2b3d3237a1f1",
 CellID->310218054],
Cell[CellGroupData[{
Cell[298903, 5986, 264, 5, 28, "Input",ExpressionUUID->"8fd54204-0298-48e5-912f-c2d8c5f6dceb",
 CellID->171371391],
Cell[299170, 5993, 2770, 71, 48, "Output",ExpressionUUID->"7f58387c-430b-487e-80e8-82d63af37edf",
 CellID->290614988]
}, Open  ]],
Cell[301955, 6067, 408, 9, 45, "Input",ExpressionUUID->"285a6c5a-4dcf-40c2-92bf-d9097f49f173",
 CellID->164363845],
Cell[302366, 6078, 210, 3, 35, "Text",ExpressionUUID->"1d297c87-8515-43b0-a528-4dc26931e834",
 CellID->187842459],
Cell[CellGroupData[{
Cell[302601, 6085, 254, 6, 28, "Input",ExpressionUUID->"86a8956b-0c45-431e-8b55-89a15c39809c",
 CellID->552648203],
Cell[302858, 6093, 1196, 27, 48, "Output",ExpressionUUID->"5cb09aae-c9d1-4c4e-91c9-0ed1fca4c2a3",
 CellID->43877354]
}, Open  ]],
Cell[304069, 6123, 162, 2, 35, "Text",ExpressionUUID->"ead3703e-5c9c-411e-9a5a-e57ed1dadeeb",
 CellID->33847101],
Cell[CellGroupData[{
Cell[304256, 6129, 755, 22, 45, "Input",ExpressionUUID->"1455142b-64d0-4f72-a000-1b7351af67e9",
 CellID->129797403],
Cell[305014, 6153, 545, 14, 48, "Output",ExpressionUUID->"aacaa396-7214-4972-b9fa-d42c99b9e0a7",
 CellID->88267972]
}, Open  ]],
Cell[305574, 6170, 192, 2, 35, "Text",ExpressionUUID->"8cf01b63-0099-4fee-9c21-000d3fbd4d60",
 CellID->10821545],
Cell[CellGroupData[{
Cell[305791, 6176, 798, 23, 45, "Input",ExpressionUUID->"0d0d3d6a-261b-42b8-a88d-ce6a21267942",
 CellID->17859662],
Cell[306592, 6201, 554, 14, 58, "Output",ExpressionUUID->"ee3e013c-ddcf-44c1-ba59-0f9a485b8300",
 CellID->301858107]
}, Open  ]],
Cell[307161, 6218, 189, 2, 35, "Text",ExpressionUUID->"e918a45f-01f3-4bdb-a348-afcf673801ab",
 CellID->119695050],
Cell[CellGroupData[{
Cell[307375, 6224, 1079, 30, 45, "Input",ExpressionUUID->"d2b43532-5e1e-4517-bad4-590ffe54542b",
 CellID->15975725],
Cell[308457, 6256, 408, 9, 48, "Output",ExpressionUUID->"ab171757-3792-482f-931b-fb2487dc0a94",
 CellID->437894335]
}, Open  ]],
Cell[308880, 6268, 48509, 799, 195, "Input",ExpressionUUID->"9aeb7d20-9415-4844-8830-e0d82b89daff",
 CellID->158485562],
Cell[357392, 7069, 200, 2, 35, "Text",ExpressionUUID->"c128b3f2-4216-4b9f-8af8-338158bab6a4",
 CellID->790183583],
Cell[CellGroupData[{
Cell[357617, 7075, 1460, 45, 64, "Input",ExpressionUUID->"687c4586-62ff-46e1-b3d1-263cb817bb5d",
 CellID->13673112],
Cell[359080, 7122, 193, 3, 32, "Output",ExpressionUUID->"ec498781-5ab1-4815-9505-4675ebad7bb9",
 CellID->570959803]
}, Open  ]],
Cell[CellGroupData[{
Cell[359310, 7130, 253, 4, 28, "Input",ExpressionUUID->"0f230adb-71c1-4781-b19b-6b719d987d45",
 CellID->621626079],
Cell[359566, 7136, 224, 4, 32, "Output",ExpressionUUID->"c7eaa53d-392a-458d-8df6-ea2db463994b",
 CellID->526904558]
}, Open  ]],
Cell[CellGroupData[{
Cell[359827, 7145, 285, 5, 28, "Input",ExpressionUUID->"b451dd4d-ea50-4d80-ad90-57d9b307ef29",
 CellID->7509633],
Cell[360115, 7152, 2224, 53, 41, "Output",ExpressionUUID->"47a2c3e4-32b6-44ff-a201-cbe7231d353c",
 CellID->79734564]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[362388, 7211, 181, 2, 67, "Section",ExpressionUUID->"97ba5574-11db-407c-838a-9c853d1a8385",
 CellID->24915234],
Cell[362572, 7215, 48509, 799, 195, "Input",ExpressionUUID->"fb19c4de-45c6-4d56-b107-d0c5844fc820",
 CellID->257691818],
Cell[411084, 8016, 347, 6, 35, "Text",ExpressionUUID->"2bd3080e-9fd5-4fa9-8ee2-6e25f8cbd433",
 CellID->471630671],
Cell[411434, 8024, 191, 2, 35, "Text",ExpressionUUID->"a95c3215-4df0-457d-aee9-124424c8da20",
 CellID->18143223],
Cell[CellGroupData[{
Cell[411650, 8030, 330, 7, 28, "Input",ExpressionUUID->"a8b48191-578f-47b2-a2c9-d418938711c9",
 CellID->19897227],
Cell[411983, 8039, 2403, 58, 41, "Output",ExpressionUUID->"a87143ca-38fb-4737-aa02-c3ab43093eeb",
 CellID->9949630]
}, Open  ]],
Cell[414401, 8100, 204, 2, 35, "Text",ExpressionUUID->"c9bc3814-8be2-46a6-8e95-17102fb00086",
 CellID->173140575],
Cell[414608, 8104, 205, 2, 35, "Text",ExpressionUUID->"9bcfca27-1629-4154-bca9-d88fbf1b2f59",
 CellID->20470026],
Cell[CellGroupData[{
Cell[414838, 8110, 411, 9, 28, "Input",ExpressionUUID->"ecf670e0-0239-4ac7-a7b6-945d03445fbb",
 CellID->44348783],
Cell[415252, 8121, 84454, 2081, 717, "Output",ExpressionUUID->"080f682b-ecf2-497b-87f5-167b6466ca98",
 CellID->121220210]
}, Open  ]],
Cell[499721, 10205, 200, 2, 35, "Text",ExpressionUUID->"f4aa1acc-67d1-4bc5-b01b-cd9c59abc15f",
 CellID->99257808],
Cell[CellGroupData[{
Cell[499946, 10211, 263, 5, 28, "Input",ExpressionUUID->"ef85128f-bb73-4fcb-82a7-42bc2768d6fa",
 CellID->202659295],
Cell[500212, 10218, 2770, 71, 48, "Output",ExpressionUUID->"75c08f27-84e1-4817-9444-0062bddbbafb",
 CellID->313776923]
}, Open  ]],
Cell[502997, 10292, 195, 2, 35, "Text",ExpressionUUID->"75e803d6-38f8-49cc-afd9-d8df460fb9c5",
 CellID->96890158],
Cell[CellGroupData[{
Cell[503217, 10298, 332, 7, 28, "Input",ExpressionUUID->"a4ac175f-a3ad-40e0-9df6-afd509e98fcd",
 CellID->13673942],
Cell[503552, 10307, 2430, 58, 41, "Output",ExpressionUUID->"7bb0177f-668a-414d-8160-310795f203f6",
 CellID->157010315]
}, Open  ]],
Cell[CellGroupData[{
Cell[506019, 10370, 575, 16, 45, "Input",ExpressionUUID->"db833bc7-e958-440c-ba8e-b641eee2e2ce",
 CellID->242817054],
Cell[506597, 10388, 576, 16, 52, "Output",ExpressionUUID->"82a55fe8-af31-49a0-af3e-0ca8598c948a",
 CellID->140663523]
}, Open  ]],
Cell[507188, 10407, 194, 2, 35, "Text",ExpressionUUID->"ff8cc08b-9ca9-4ab4-a2c8-a8110f749a8e",
 CellID->49232728],
Cell[CellGroupData[{
Cell[507407, 10413, 621, 17, 45, "Input",ExpressionUUID->"6a1c0a88-33c8-47a2-a5aa-39184015463a",
 CellID->770802812],
Cell[508031, 10432, 579, 16, 77, "Output",ExpressionUUID->"b13f1441-a2c2-48ac-8196-8fd99b33a3fa",
 CellID->59437092]
}, Open  ]],
Cell[508625, 10451, 172, 2, 35, "Text",ExpressionUUID->"c4240af7-4e2e-4dd4-8fd1-0e4f3f82af0f",
 CellID->185706843],
Cell[CellGroupData[{
Cell[508822, 10457, 826, 23, 45, "Input",ExpressionUUID->"490a1e14-f448-490b-aedb-9769ee9e81f0",
 CellID->77539144],
Cell[509651, 10482, 341, 9, 52, "Output",ExpressionUUID->"41ffe85b-adb6-41c2-a578-66c70e384164",
 CellID->833996464]
}, Open  ]],
Cell[510007, 10494, 206, 2, 35, "Text",ExpressionUUID->"832fec22-9a8b-4329-b8ba-df860086cc7a",
 CellID->1025067],
Cell[CellGroupData[{
Cell[510238, 10500, 248, 4, 28, "Input",ExpressionUUID->"2169bbec-bd12-4e10-855f-033b316276c1",
 CellID->341148264],
Cell[510489, 10506, 3444, 78, 166, "Output",ExpressionUUID->"e382fe4d-0f63-4e6b-ac0e-f5b432cddd08",
 CellID->348898918]
}, Open  ]],
Cell[CellGroupData[{
Cell[513970, 10589, 324, 7, 28, "Input",ExpressionUUID->"a7f9c0ea-cb59-4827-9261-9698a16a385b",
 CellID->120157429],
Cell[514297, 10598, 1148, 26, 48, "Output",ExpressionUUID->"14d9cda2-3abd-46a9-a00d-3ff88d34def4",
 CellID->334244294]
}, Open  ]],
Cell[CellGroupData[{
Cell[515482, 10629, 523, 12, 45, "Input",ExpressionUUID->"0988dc78-a35e-42b5-8c2c-4d7835c676f4",
 CellID->226793425],
Cell[516008, 10643, 300, 7, 48, "Output",ExpressionUUID->"2aa62d3b-4e87-44d6-bdf5-bf0b74939884",
 CellID->80966109]
}, Open  ]],
Cell[CellGroupData[{
Cell[516345, 10655, 558, 14, 45, "Input",ExpressionUUID->"d95767c3-d245-437c-a986-8c4a479a914b",
 CellID->32710441],
Cell[516906, 10671, 267, 6, 32, "Output",ExpressionUUID->"ce7e4a08-4b48-4598-9b67-64ff56538920",
 CellID->527993259]
}, Open  ]],
Cell[CellGroupData[{
Cell[517210, 10682, 1004, 27, 45, "Input",ExpressionUUID->"445c8a83-e2d4-4bd4-8a66-f06bb2e9f731",
 CellID->74349141],
Cell[518217, 10711, 359, 9, 48, "Output",ExpressionUUID->"ebb18df3-5deb-44ca-8f28-7fe1ae2dc9b4",
 CellID->102985579]
}, Open  ]],
Cell[CellGroupData[{
Cell[518613, 10725, 1137, 30, 58, "Input",ExpressionUUID->"18539e6b-6439-452c-bd23-96a9b7f70f69",
 CellID->339807828],
Cell[519753, 10757, 198, 4, 49, "Output",ExpressionUUID->"a19aba68-bbb6-4474-b994-61b7df3889ab",
 CellID->104528256]
}, Open  ]],
Cell[519966, 10764, 170, 2, 35, "Text",ExpressionUUID->"027ac61b-4e15-4fe1-97ca-cab7b5288298",
 CellID->86648670]
}, Closed]],
Cell[CellGroupData[{
Cell[520173, 10771, 225, 3, 53, "Section",ExpressionUUID->"c97a9d6d-8425-41f2-a99c-387d20e4599a",
 CellID->311728381],
Cell[520401, 10776, 48509, 799, 195, "Input",ExpressionUUID->"88f8a6df-2995-4df9-b373-1f428c765a58",
 CellID->131925393],
Cell[568913, 11577, 303, 6, 35, "Text",ExpressionUUID->"09adc2f2-a10a-4f60-b41c-f2d92a75a680",
 CellID->22559742],
Cell[CellGroupData[{
Cell[569241, 11587, 243, 4, 28, "Input",ExpressionUUID->"1552a22c-1b41-467a-80c1-19e059263cbb",
 CellID->64030437],
Cell[569487, 11593, 3417, 78, 166, "Output",ExpressionUUID->"a0247553-5b0f-4ffa-b392-da34685db6b0",
 CellID->27847239]
}, Open  ]],
Cell[572919, 11674, 190, 2, 35, "Text",ExpressionUUID->"25ff0de3-481f-4dc3-90bc-5fb09d1b37c7",
 CellID->142301700],
Cell[CellGroupData[{
Cell[573134, 11680, 321, 7, 28, "Input",ExpressionUUID->"9cfc09ab-5f7c-4a5c-8404-4b418c01b3cb",
 CellID->64841848],
Cell[573458, 11689, 1149, 26, 48, "Output",ExpressionUUID->"d01c2a2e-c5b9-469f-939f-cf51351222cb",
 CellID->389687925]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

